Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    RW_CLOSE
    RW_JUDUL
    RW_MODUL
    RW_OPEN
    RW_READ
    RW_REWRITE
    RW_SEQFILE
    S_CONCATENATION
    S_DOUBLE_QUOTE
    S_LEFT_CURLY_BRACKET
    S_RIGHT_CURLY_BRACKET
    S_SINGLE_QUOTE
    WHITESPACE

Grammar

Rule 0     S' -> file
Rule 1     file -> program
Rule 2     program -> RW_PROGRAM identifier block
Rule 3     program -> function_declaration block
Rule 4     program -> procedure_declaration block
Rule 5     identifier_list -> identifier_list S_COMMA identifier
Rule 6     identifier_list -> identifier
Rule 7     kamus_declaration -> RW_KAMUS
Rule 8     kamus_declaration -> RW_KAMUS RW_LOKAL
Rule 9     block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
Rule 10    block -> kamus_declaration algorithm_block procedure_and_function_implementation_block
Rule 11    constant_declaration_block -> empty
Rule 12    constant_declaration_block -> constant_declaration
Rule 13    type_declaration_block -> empty
Rule 14    type_declaration_block -> type_declaration
Rule 15    variable_declaration_block -> empty
Rule 16    variable_declaration_block -> variable_declaration
Rule 17    procedure_and_function_declaration_block -> DEDENT
Rule 18    procedure_and_function_declaration_block -> procedure_and_function_declaration DEDENT
Rule 19    algorithm_block -> RW_ALGORITMA statement_part
Rule 20    procedure_and_function_implementation_block -> empty
Rule 21    procedure_and_function_implementation_block -> subprogram_implementation_list
Rule 22    subprogram_implementation_list -> subprogram_implementation_list subprogram_implementation
Rule 23    subprogram_implementation_list -> subprogram_implementation
Rule 24    subprogram_implementation -> procedure_implementation
Rule 25    subprogram_implementation -> function_implementation
Rule 26    procedure_implementation -> procedure_declaration procedure_implementation_block
Rule 27    procedure_implementation -> procedure_declaration
Rule 28    procedure_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
Rule 29    procedure_implementation_block -> kamus_declaration algorithm_block
Rule 30    function_implementation -> function_declaration function_implementation_block
Rule 31    function_implementation -> function_declaration
Rule 32    function_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
Rule 33    function_implementation_block -> kamus_declaration algorithm_block
Rule 34    type_denoter -> ordinal_type
Rule 35    type_denoter -> structured_type
Rule 36    type_denoter -> RW_INTEGER
Rule 37    type_denoter -> RW_REAL
Rule 38    type_denoter -> RW_STRING
Rule 39    type_denoter -> RW_CHARACTER
Rule 40    type_denoter -> RW_BOOLEAN
Rule 41    ordinal_type -> enumerated_type
Rule 42    ordinal_type -> subrange_type
Rule 43    ordinal_type -> identifier
Rule 44    enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
Rule 45    subrange_type -> subrange_type_option
Rule 46    subrange_type_option -> subrange_option S_UP_TO subrange_option
Rule 47    subrange_option -> identifier
Rule 48    subrange_option -> constant
Rule 49    subrange_option -> function_designator
Rule 50    structured_type -> array_type
Rule 51    array_type -> RW_ARRAY array_index RW_OF component_type
Rule 52    array_index -> S_LEFT_SQUARE_BRACKET index_list S_RIGHT_SQUARE_BRACKET
Rule 53    index_list -> index_list S_COMMA index_type
Rule 54    index_list -> index_type
Rule 55    index_type -> ordinal_type
Rule 56    component_type -> type_denoter
Rule 57    variable_declaration -> variable_declaration variable_sub_declaration
Rule 58    variable_declaration -> variable_sub_declaration
Rule 59    variable_sub_declaration -> identifier_list S_COLON type_denoter
Rule 60    variable_declaration_comma -> variable_sub_declaration
Rule 61    variable_declaration_comma -> variable_sub_declaration S_COMMA variable_declaration_comma
Rule 62    constant_declaration -> constant_declaration constant_sub_declaration
Rule 63    constant_declaration -> constant_sub_declaration
Rule 64    constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant
Rule 65    type_declaration -> type_declaration type_sub_declaration
Rule 66    type_declaration -> type_sub_declaration
Rule 67    type_sub_declaration -> RW_TYPE identifier S_COLON type_variety
Rule 68    type_variety -> type_denoter
Rule 69    type_variety -> type_user_defined
Rule 70    type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN
Rule 71    procedure_and_function_declaration -> procedure_and_function_declaration procedure_and_function_sub_declaration
Rule 72    procedure_and_function_declaration -> procedure_and_function_sub_declaration
Rule 73    procedure_and_function_sub_declaration -> procedure_declaration
Rule 74    procedure_and_function_sub_declaration -> function_declaration
Rule 75    procedure_declaration -> procedure_identifier formal_parameter_list
Rule 76    procedure_identifier -> RW_PROCEDURE identifier
Rule 77    formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET
Rule 78    formal_parameter_section_list -> empty
Rule 79    formal_parameter_section_list -> formal_parameter_section
Rule 80    formal_parameter_section -> formal_parameter_section S_SEMI_COLON parameter_specification
Rule 81    formal_parameter_section -> formal_parameter_section S_COMMA parameter_specification
Rule 82    formal_parameter_section -> parameter_specification
Rule 83    parameter_specification -> procedure_parameter_type variable_sub_declaration
Rule 84    procedure_parameter_type -> RW_INPUT
Rule 85    procedure_parameter_type -> RW_OUTPUT
Rule 86    procedure_parameter_type -> RW_INPUT S_DIVIDE RW_OUTPUT
Rule 87    function_declaration -> function_identification function_formal_parameter_list function_return_type
Rule 88    function_declaration -> function_identification function_return_type
Rule 89    function_identification -> RW_FUNCTION identifier
Rule 90    function_return_type -> S_RETURN type_denoter
Rule 91    function_formal_parameter_list -> S_LEFT_BRACKET function_parameter_list_option S_RIGHT_BRACKET
Rule 92    function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
Rule 93    function_parameter_list_option -> function_parameter_list
Rule 94    function_parameter_list_option -> empty
Rule 95    function_parameter_list -> function_parameter_list S_SEMI_COLON function_parameter_declaration
Rule 96    function_parameter_list -> function_parameter_list S_COMMA function_parameter_declaration
Rule 97    function_parameter_list -> function_parameter_declaration
Rule 98    function_parameter_declaration -> variable_sub_declaration
Rule 99    statement_part -> compound_statement
Rule 100   compound_statement -> INDENT statement_sequence DEDENT
Rule 101   statement_sequence -> statement_sequence S_SEMI_COLON statement
Rule 102   statement_sequence -> statement_sequence statement
Rule 103   statement_sequence -> statement
Rule 104   statement -> assignment_statement
Rule 105   statement -> procedure_statement
Rule 106   statement -> function_returned_statement
Rule 107   statement -> if_statement
Rule 108   statement -> depend_on_statement
Rule 109   statement -> while_statement
Rule 110   statement -> traversal_statement
Rule 111   statement -> repeat_statement
Rule 112   statement -> iterate_stop_statement
Rule 113   assignment_statement -> variable_access S_ASSIGNMENT expression
Rule 114   procedure_statement -> builtin_procedure_statements
Rule 115   procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
Rule 116   procedure_statement -> identifier
Rule 117   actual_parameter_list -> actual_parameter_list S_COMMA actual_parameter
Rule 118   actual_parameter_list -> actual_parameter
Rule 119   actual_parameter -> expression
Rule 120   builtin_procedure_statements -> input_statement
Rule 121   builtin_procedure_statements -> output_statement
Rule 122   input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET
Rule 123   input_statement_parameter_list -> input_statement_parameter_list S_COMMA input_statement_parameter
Rule 124   input_statement_parameter_list -> input_statement_parameter
Rule 125   input_statement_parameter -> variable_access
Rule 126   output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET
Rule 127   output_statement_parameter_list -> output_statement_parameter_list S_COMMA output_statement_parameter
Rule 128   output_statement_parameter_list -> output_statement_parameter
Rule 129   output_statement_parameter -> expression
Rule 130   function_returned_statement -> S_RETURN expression
Rule 131   depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
Rule 132   depend_on_action_list -> depend_on_action_list depend_on_action
Rule 133   depend_on_action_list -> depend_on_action
Rule 134   depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT
Rule 135   if_statement -> RW_IF boolean_expression RW_THEN compound_statement
Rule 136   if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
Rule 137   boolean_expression -> expression
Rule 138   repeat_statement -> repeat_until_statement
Rule 139   repeat_statement -> repeat_times_statement
Rule 140   repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression
Rule 141   repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement
Rule 142   repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement
Rule 143   repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement
Rule 144   while_statement -> RW_WHILE boolean_expression RW_DO compound_statement
Rule 145   iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement
Rule 146   traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement
Rule 147   traversal_range_value -> S_LEFT_SQUARE_BRACKET subrange_type S_RIGHT_SQUARE_BRACKET
Rule 148   control_variable -> identifier
Rule 149   unsigned_constant -> non_string_constant
Rule 150   unsigned_constant -> string_char_constant
Rule 151   unsigned_constant -> boolean_constant
Rule 152   unsigned_constant -> nil_constant
Rule 153   constant -> string_char_constant
Rule 154   constant -> non_string_constant
Rule 155   constant -> sign non_string_constant
Rule 156   constant -> boolean_constant
Rule 157   constant -> nil_constant
Rule 158   sign -> S_PLUS
Rule 159   sign -> S_MINUS
Rule 160   boolean_constant -> L_BOOLEAN_TRUE
Rule 161   boolean_constant -> L_BOOLEAN_FALSE
Rule 162   non_string_constant -> integer_constant
Rule 163   non_string_constant -> real_constant
Rule 164   integer_constant -> L_INTEGER_NUMBER
Rule 165   real_constant -> L_REAL_NUMBER
Rule 166   string_char_constant -> string_constant
Rule 167   string_char_constant -> char_constant
Rule 168   string_constant -> L_STRING
Rule 169   char_constant -> L_CHARACTER
Rule 170   nil_constant -> L_NIL
Rule 171   variable_access -> identifier
Rule 172   variable_access -> indexed_variable
Rule 173   variable_access -> field_designator
Rule 174   indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
Rule 175   index_expression_list -> index_expression_list S_COMMA expression
Rule 176   index_expression_list -> expression
Rule 177   field_designator -> variable_access S_DOT identifier
Rule 178   expression -> expression relational_op additive_expression
Rule 179   expression -> additive_expression
Rule 180   relational_op -> S_EQUAL
Rule 181   relational_op -> S_NOT_EQUAL
Rule 182   relational_op -> S_LESS_THAN_EQUAL
Rule 183   relational_op -> S_GREATER_THAN_EQUAL
Rule 184   relational_op -> S_LESS_THAN
Rule 185   relational_op -> S_GREATER_THAN
Rule 186   relational_op -> S_ELEMENT_OF
Rule 187   relational_op -> RW_EQ
Rule 188   relational_op -> RW_NEQ
Rule 189   additive_expression -> additive_expression additive_op multiplicative_expression
Rule 190   additive_expression -> multiplicative_expression
Rule 191   additive_op -> S_PLUS
Rule 192   additive_op -> S_MINUS
Rule 193   additive_op -> RW_OR
Rule 194   additive_op -> RW_XOR
Rule 195   multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression
Rule 196   multiplicative_expression -> unary_expression
Rule 197   multiplicative_op -> S_TIMES
Rule 198   multiplicative_op -> S_DIVIDE
Rule 199   multiplicative_op -> RW_DIV
Rule 200   multiplicative_op -> RW_MOD
Rule 201   multiplicative_op -> RW_AND
Rule 202   unary_expression -> unary_op unary_expression
Rule 203   unary_expression -> exponentiation_expression
Rule 204   exponentiation_expression -> primary_expression
Rule 205   exponentiation_expression -> primary_expression S_POWER exponentiation_expression
Rule 206   unary_op -> S_PLUS
Rule 207   unary_op -> S_MINUS
Rule 208   unary_op -> RW_NOT
Rule 209   primary_expression -> variable_access
Rule 210   primary_expression -> unsigned_constant
Rule 211   primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 212   primary_expression -> set_constructor
Rule 213   primary_expression -> function_designator
Rule 214   set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
Rule 215   set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
Rule 216   member_designator_list -> member_designator_list S_COMMA member_designator
Rule 217   member_designator_list -> member_designator
Rule 218   member_designator -> member_designator S_UP_TO expression
Rule 219   member_designator -> expression
Rule 220   function_designator -> user_defined_function_call
Rule 221   function_designator -> math_function_call
Rule 222   function_designator -> string_function_call
Rule 223   function_designator -> converter_function_call
Rule 224   user_defined_function_call -> identifier function_actual_parameter_list
Rule 225   math_function_call -> abs_function
Rule 226   math_function_call -> sin_function
Rule 227   math_function_call -> cos_function
Rule 228   math_function_call -> tan_function
Rule 229   math_function_call -> succ_function
Rule 230   math_function_call -> pred_function
Rule 231   abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 232   sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 233   cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 234   tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 235   succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 236   pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 237   string_function_call -> awal_function
Rule 238   string_function_call -> akhir_function
Rule 239   string_function_call -> firstchar_function
Rule 240   string_function_call -> lastchar_function
Rule 241   string_function_call -> long_function
Rule 242   string_function_call -> iskosong_function
Rule 243   awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 244   akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 245   firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 246   lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 247   long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 248   iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 249   converter_function_call -> integer_to_real
Rule 250   converter_function_call -> real_to_integer
Rule 251   integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 252   real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 253   empty -> <empty>
Rule 254   identifier -> IDENTIFIER

Terminals, with rules where they appear

COMMENT              : 
DEDENT               : 17 18 28 32 100 131 134
IDENTIFIER           : 254
INDENT               : 9 28 32 100 131 134
L_BOOLEAN_FALSE      : 161
L_BOOLEAN_TRUE       : 160
L_CHARACTER          : 169
L_INTEGER_NUMBER     : 164
L_NIL                : 170
L_REAL_NUMBER        : 165
L_STRING             : 168
RW_ABS               : 231
RW_AKHIR             : 244
RW_ALGORITMA         : 19
RW_AND               : 201
RW_ARRAY             : 51
RW_AWAL              : 243
RW_BOOLEAN           : 40
RW_CHARACTER         : 39
RW_CLOSE             : 
RW_CONSTANT          : 64
RW_COS               : 233
RW_DEPEND            : 131
RW_DIV               : 199
RW_DO                : 144
RW_ELSE              : 136
RW_EQ                : 187
RW_FIRSTCHAR         : 245
RW_FUNCTION          : 89
RW_IF                : 135 136
RW_INPUT             : 84 86 122
RW_INTEGER           : 36
RW_INTEGERTOREAL     : 251
RW_ISKOSONG          : 248
RW_ITERATE           : 145
RW_JUDUL             : 
RW_KAMUS             : 7 8
RW_LASTCHAR          : 246
RW_LOKAL             : 8
RW_LONG              : 247
RW_MOD               : 200
RW_MODUL             : 
RW_NEQ               : 188
RW_NOT               : 208
RW_OF                : 51
RW_ON                : 131
RW_OPEN              : 
RW_OR                : 193
RW_OUTPUT            : 85 86 126
RW_PRED              : 236
RW_PROCEDURE         : 76
RW_PROGRAM           : 2
RW_READ              : 
RW_REAL              : 37
RW_REALTOINTEGER     : 252
RW_REPEAT            : 140 141 142 143
RW_REWRITE           : 
RW_SEQFILE           : 
RW_SIN               : 232
RW_STOP              : 145
RW_STRING            : 38
RW_SUCC              : 235
RW_TAN               : 234
RW_THEN              : 135 136
RW_TIMES             : 141 142 143
RW_TRAVERSAL         : 146
RW_TYPE              : 67
RW_UNTIL             : 140
RW_WHILE             : 144
RW_XOR               : 194
S_ASSIGNMENT         : 113
S_COLON              : 59 64 67 134
S_COMMA              : 5 53 61 81 96 117 123 127 175 216
S_CONCATENATION      : 
S_DIVIDE             : 86 198
S_DOT                : 177
S_DOUBLE_QUOTE       : 
S_ELEMENT_OF         : 186
S_EQUAL              : 64 180
S_GREATER_THAN       : 70 185
S_GREATER_THAN_EQUAL : 183
S_LEFT_BRACKET       : 44 77 91 92 115 122 126 131 211 231 232 233 234 235 236 243 244 245 246 247 248 251 252
S_LEFT_CURLY_BRACKET : 
S_LEFT_SQUARE_BRACKET : 52 147 174 214 215
S_LESS_THAN          : 70 184
S_LESS_THAN_EQUAL    : 182
S_MINUS              : 159 192 207
S_NOT_EQUAL          : 181
S_PLUS               : 158 191 206
S_POWER              : 205
S_RETURN             : 90 130
S_RIGHT_BRACKET      : 44 77 91 92 115 122 126 131 211 231 232 233 234 235 236 243 244 245 246 247 248 251 252
S_RIGHT_CURLY_BRACKET : 
S_RIGHT_SQUARE_BRACKET : 52 147 174 214 215
S_SEMI_COLON         : 80 95 101
S_SINGLE_QUOTE       : 
S_TIMES              : 197
S_UP_TO              : 46 218
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

abs_function         : 225
actual_parameter     : 117 118
actual_parameter_list : 92 115 117
additive_expression  : 178 179 189
additive_op          : 189
akhir_function       : 238
algorithm_block      : 9 10 28 29 32 33
array_index          : 51
array_type           : 50
assignment_statement : 104
awal_function        : 237
block                : 2 3 4
boolean_constant     : 151 156
boolean_expression   : 135 136 140 144 145
builtin_procedure_statements : 114
char_constant        : 167
component_type       : 51
compound_statement   : 99 135 136 136 140 141 142 143 144 145 145 146
constant             : 48 64
constant_declaration : 12 62
constant_declaration_block : 9 28 32
constant_sub_declaration : 62 63
control_variable     : 146
converter_function_call : 223
cos_function         : 227
depend_on_action     : 132 133
depend_on_action_list : 131 132
depend_on_statement  : 108
empty                : 11 13 15 20 78 94
enumerated_type      : 41
exponentiation_expression : 203 205
expression           : 113 119 129 130 134 137 175 176 178 211 218 219 231 232 233 234 235 236 243 244 245 246 247 248 251 252
field_designator     : 173
file                 : 0
firstchar_function   : 239
formal_parameter_list : 75
formal_parameter_section : 79 80 81
formal_parameter_section_list : 77
function_actual_parameter_list : 224
function_declaration : 3 30 31 74
function_designator  : 49 143 213
function_formal_parameter_list : 87
function_identification : 87 88
function_implementation : 25
function_implementation_block : 30
function_parameter_declaration : 95 96 97
function_parameter_list : 93 95 96
function_parameter_list_option : 91
function_return_type : 87 88
function_returned_statement : 106
identifier           : 2 5 6 43 47 64 67 76 89 115 116 148 171 177 224
identifier_list      : 5 44 59
if_statement         : 107
index_expression_list : 174 175
index_list           : 52 53
index_type           : 53 54
indexed_variable     : 172
input_statement      : 120
input_statement_parameter : 123 124
input_statement_parameter_list : 122 123 131
integer_constant     : 142 162
integer_to_real      : 249
iskosong_function    : 242
iterate_stop_statement : 112
kamus_declaration    : 9 10 28 29 32 33
lastchar_function    : 240
long_function        : 241
math_function_call   : 221
member_designator    : 216 217 218
member_designator_list : 214 216
multiplicative_expression : 189 190 195
multiplicative_op    : 195
nil_constant         : 152 157
non_string_constant  : 149 154 155
ordinal_type         : 34 55
output_statement     : 121
output_statement_parameter : 127 128
output_statement_parameter_list : 126 127
parameter_specification : 80 81 82
pred_function        : 230
primary_expression   : 204 205
procedure_and_function_declaration : 18 71
procedure_and_function_declaration_block : 9
procedure_and_function_implementation_block : 9 10
procedure_and_function_sub_declaration : 71 72
procedure_declaration : 4 26 27 73
procedure_identifier : 75
procedure_implementation : 24
procedure_implementation_block : 26
procedure_parameter_type : 83
procedure_statement  : 105
program              : 1
real_constant        : 163
real_to_integer      : 250
relational_op        : 178
repeat_statement     : 111
repeat_times_statement : 139
repeat_until_statement : 138
set_constructor      : 212
sign                 : 155
sin_function         : 226
statement            : 101 102 103
statement_part       : 19
statement_sequence   : 100 101 102 134
string_char_constant : 150 153
string_constant      : 166
string_function_call : 222
structured_type      : 35
subprogram_implementation : 22 23
subprogram_implementation_list : 21 22
subrange_option      : 46 46
subrange_type        : 42 147
subrange_type_option : 45
succ_function        : 229
tan_function         : 228
traversal_range_value : 146
traversal_statement  : 110
type_declaration     : 14 65
type_declaration_block : 9 28 32
type_denoter         : 56 59 64 68 90
type_sub_declaration : 65 66
type_user_defined    : 69
type_variety         : 67
unary_expression     : 195 196 202
unary_op             : 202
unsigned_constant    : 210
user_defined_function_call : 220
variable_access      : 113 125 141 174 177 209
variable_declaration : 16 57
variable_declaration_block : 9 28 32
variable_declaration_comma : 61 70
variable_sub_declaration : 57 58 60 61 83 98
while_statement      : 109

Parsing method: LALR

state 0

    (0) S' -> . file
    (1) file -> . program
    (2) program -> . RW_PROGRAM identifier block
    (3) program -> . function_declaration block
    (4) program -> . procedure_declaration block
    (87) function_declaration -> . function_identification function_formal_parameter_list function_return_type
    (88) function_declaration -> . function_identification function_return_type
    (75) procedure_declaration -> . procedure_identifier formal_parameter_list
    (89) function_identification -> . RW_FUNCTION identifier
    (76) procedure_identifier -> . RW_PROCEDURE identifier

    RW_PROGRAM      shift and go to state 3
    RW_FUNCTION     shift and go to state 8
    RW_PROCEDURE    shift and go to state 9

    file                           shift and go to state 1
    program                        shift and go to state 2
    function_declaration           shift and go to state 4
    procedure_declaration          shift and go to state 5
    function_identification        shift and go to state 6
    procedure_identifier           shift and go to state 7

state 1

    (0) S' -> file .



state 2

    (1) file -> program .

    $end            reduce using rule 1 (file -> program .)


state 3

    (2) program -> RW_PROGRAM . identifier block
    (254) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    identifier                     shift and go to state 10

state 4

    (3) program -> function_declaration . block
    (9) block -> . kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (10) block -> . kamus_declaration algorithm_block procedure_and_function_implementation_block
    (7) kamus_declaration -> . RW_KAMUS
    (8) kamus_declaration -> . RW_KAMUS RW_LOKAL

    RW_KAMUS        shift and go to state 14

    block                          shift and go to state 12
    kamus_declaration              shift and go to state 13

state 5

    (4) program -> procedure_declaration . block
    (9) block -> . kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (10) block -> . kamus_declaration algorithm_block procedure_and_function_implementation_block
    (7) kamus_declaration -> . RW_KAMUS
    (8) kamus_declaration -> . RW_KAMUS RW_LOKAL

    RW_KAMUS        shift and go to state 14

    block                          shift and go to state 15
    kamus_declaration              shift and go to state 13

state 6

    (87) function_declaration -> function_identification . function_formal_parameter_list function_return_type
    (88) function_declaration -> function_identification . function_return_type
    (91) function_formal_parameter_list -> . S_LEFT_BRACKET function_parameter_list_option S_RIGHT_BRACKET
    (90) function_return_type -> . S_RETURN type_denoter

    S_LEFT_BRACKET  shift and go to state 18
    S_RETURN        shift and go to state 19

    function_formal_parameter_list shift and go to state 16
    function_return_type           shift and go to state 17

state 7

    (75) procedure_declaration -> procedure_identifier . formal_parameter_list
    (77) formal_parameter_list -> . S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 21

    formal_parameter_list          shift and go to state 20

state 8

    (89) function_identification -> RW_FUNCTION . identifier
    (254) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    identifier                     shift and go to state 22

state 9

    (76) procedure_identifier -> RW_PROCEDURE . identifier
    (254) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    identifier                     shift and go to state 23

state 10

    (2) program -> RW_PROGRAM identifier . block
    (9) block -> . kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (10) block -> . kamus_declaration algorithm_block procedure_and_function_implementation_block
    (7) kamus_declaration -> . RW_KAMUS
    (8) kamus_declaration -> . RW_KAMUS RW_LOKAL

    RW_KAMUS        shift and go to state 14

    block                          shift and go to state 24
    kamus_declaration              shift and go to state 13

state 11

    (254) identifier -> IDENTIFIER .

    RW_KAMUS        reduce using rule 254 (identifier -> IDENTIFIER .)
    S_LEFT_BRACKET  reduce using rule 254 (identifier -> IDENTIFIER .)
    S_RETURN        reduce using rule 254 (identifier -> IDENTIFIER .)
    S_COLON         reduce using rule 254 (identifier -> IDENTIFIER .)
    S_COMMA         reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_PROCEDURE    reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_FUNCTION     reduce using rule 254 (identifier -> IDENTIFIER .)
    $end            reduce using rule 254 (identifier -> IDENTIFIER .)
    DEDENT          reduce using rule 254 (identifier -> IDENTIFIER .)
    S_UP_TO         reduce using rule 254 (identifier -> IDENTIFIER .)
    S_RIGHT_BRACKET reduce using rule 254 (identifier -> IDENTIFIER .)
    S_SEMI_COLON    reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_IF           reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_DEPEND       reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_WHILE        reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_ITERATE      reduce using rule 254 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_REPEAT       reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_INPUT        reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_OUTPUT       reduce using rule 254 (identifier -> IDENTIFIER .)
    S_ASSIGNMENT    reduce using rule 254 (identifier -> IDENTIFIER .)
    S_LEFT_SQUARE_BRACKET reduce using rule 254 (identifier -> IDENTIFIER .)
    S_DOT           reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_TRAVERSAL    reduce using rule 254 (identifier -> IDENTIFIER .)
    S_GREATER_THAN  reduce using rule 254 (identifier -> IDENTIFIER .)
    S_POWER         reduce using rule 254 (identifier -> IDENTIFIER .)
    S_TIMES         reduce using rule 254 (identifier -> IDENTIFIER .)
    S_DIVIDE        reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_DIV          reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_MOD          reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_AND          reduce using rule 254 (identifier -> IDENTIFIER .)
    S_PLUS          reduce using rule 254 (identifier -> IDENTIFIER .)
    S_MINUS         reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_OR           reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_XOR          reduce using rule 254 (identifier -> IDENTIFIER .)
    S_EQUAL         reduce using rule 254 (identifier -> IDENTIFIER .)
    S_NOT_EQUAL     reduce using rule 254 (identifier -> IDENTIFIER .)
    S_LESS_THAN_EQUAL reduce using rule 254 (identifier -> IDENTIFIER .)
    S_GREATER_THAN_EQUAL reduce using rule 254 (identifier -> IDENTIFIER .)
    S_LESS_THAN     reduce using rule 254 (identifier -> IDENTIFIER .)
    S_ELEMENT_OF    reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_EQ           reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_NEQ          reduce using rule 254 (identifier -> IDENTIFIER .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_TYPE         reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_THEN         reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_DO           reduce using rule 254 (identifier -> IDENTIFIER .)
    RW_TIMES        reduce using rule 254 (identifier -> IDENTIFIER .)
    INDENT          reduce using rule 254 (identifier -> IDENTIFIER .)


state 12

    (3) program -> function_declaration block .

    $end            reduce using rule 3 (program -> function_declaration block .)


state 13

    (9) block -> kamus_declaration . INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (10) block -> kamus_declaration . algorithm_block procedure_and_function_implementation_block
    (19) algorithm_block -> . RW_ALGORITMA statement_part

    INDENT          shift and go to state 25
    RW_ALGORITMA    shift and go to state 27

    algorithm_block                shift and go to state 26

state 14

    (7) kamus_declaration -> RW_KAMUS .
    (8) kamus_declaration -> RW_KAMUS . RW_LOKAL

    INDENT          reduce using rule 7 (kamus_declaration -> RW_KAMUS .)
    RW_ALGORITMA    reduce using rule 7 (kamus_declaration -> RW_KAMUS .)
    RW_LOKAL        shift and go to state 28


state 15

    (4) program -> procedure_declaration block .

    $end            reduce using rule 4 (program -> procedure_declaration block .)


state 16

    (87) function_declaration -> function_identification function_formal_parameter_list . function_return_type
    (90) function_return_type -> . S_RETURN type_denoter

    S_RETURN        shift and go to state 19

    function_return_type           shift and go to state 29

state 17

    (88) function_declaration -> function_identification function_return_type .

    RW_KAMUS        reduce using rule 88 (function_declaration -> function_identification function_return_type .)
    RW_PROCEDURE    reduce using rule 88 (function_declaration -> function_identification function_return_type .)
    RW_FUNCTION     reduce using rule 88 (function_declaration -> function_identification function_return_type .)
    $end            reduce using rule 88 (function_declaration -> function_identification function_return_type .)
    DEDENT          reduce using rule 88 (function_declaration -> function_identification function_return_type .)


state 18

    (91) function_formal_parameter_list -> S_LEFT_BRACKET . function_parameter_list_option S_RIGHT_BRACKET
    (93) function_parameter_list_option -> . function_parameter_list
    (94) function_parameter_list_option -> . empty
    (95) function_parameter_list -> . function_parameter_list S_SEMI_COLON function_parameter_declaration
    (96) function_parameter_list -> . function_parameter_list S_COMMA function_parameter_declaration
    (97) function_parameter_list -> . function_parameter_declaration
    (253) empty -> .
    (98) function_parameter_declaration -> . variable_sub_declaration
    (59) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (254) identifier -> . IDENTIFIER

    S_RIGHT_BRACKET reduce using rule 253 (empty -> .)
    IDENTIFIER      shift and go to state 11

    function_parameter_list_option shift and go to state 30
    function_parameter_list        shift and go to state 31
    empty                          shift and go to state 32
    function_parameter_declaration shift and go to state 33
    variable_sub_declaration       shift and go to state 34
    identifier_list                shift and go to state 35
    identifier                     shift and go to state 36

state 19

    (90) function_return_type -> S_RETURN . type_denoter
    (34) type_denoter -> . ordinal_type
    (35) type_denoter -> . structured_type
    (36) type_denoter -> . RW_INTEGER
    (37) type_denoter -> . RW_REAL
    (38) type_denoter -> . RW_STRING
    (39) type_denoter -> . RW_CHARACTER
    (40) type_denoter -> . RW_BOOLEAN
    (41) ordinal_type -> . enumerated_type
    (42) ordinal_type -> . subrange_type
    (43) ordinal_type -> . identifier
    (50) structured_type -> . array_type
    (44) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (45) subrange_type -> . subrange_type_option
    (254) identifier -> . IDENTIFIER
    (51) array_type -> . RW_ARRAY array_index RW_OF component_type
    (46) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (47) subrange_option -> . identifier
    (48) subrange_option -> . constant
    (49) subrange_option -> . function_designator
    (153) constant -> . string_char_constant
    (154) constant -> . non_string_constant
    (155) constant -> . sign non_string_constant
    (156) constant -> . boolean_constant
    (157) constant -> . nil_constant
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (158) sign -> . S_PLUS
    (159) sign -> . S_MINUS
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    RW_INTEGER      shift and go to state 40
    RW_REAL         shift and go to state 41
    RW_STRING       shift and go to state 42
    RW_CHARACTER    shift and go to state 43
    RW_BOOLEAN      shift and go to state 44
    S_LEFT_BRACKET  shift and go to state 49
    IDENTIFIER      shift and go to state 11
    RW_ARRAY        shift and go to state 51
    S_PLUS          shift and go to state 68
    S_MINUS         shift and go to state 69
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    type_denoter                   shift and go to state 37
    ordinal_type                   shift and go to state 38
    structured_type                shift and go to state 39
    enumerated_type                shift and go to state 45
    subrange_type                  shift and go to state 46
    identifier                     shift and go to state 47
    array_type                     shift and go to state 48
    subrange_type_option           shift and go to state 50
    subrange_option                shift and go to state 52
    constant                       shift and go to state 53
    function_designator            shift and go to state 54
    string_char_constant           shift and go to state 55
    non_string_constant            shift and go to state 56
    sign                           shift and go to state 57
    boolean_constant               shift and go to state 58
    nil_constant                   shift and go to state 59
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 20

    (75) procedure_declaration -> procedure_identifier formal_parameter_list .

    RW_KAMUS        reduce using rule 75 (procedure_declaration -> procedure_identifier formal_parameter_list .)
    RW_PROCEDURE    reduce using rule 75 (procedure_declaration -> procedure_identifier formal_parameter_list .)
    RW_FUNCTION     reduce using rule 75 (procedure_declaration -> procedure_identifier formal_parameter_list .)
    $end            reduce using rule 75 (procedure_declaration -> procedure_identifier formal_parameter_list .)
    DEDENT          reduce using rule 75 (procedure_declaration -> procedure_identifier formal_parameter_list .)


state 21

    (77) formal_parameter_list -> S_LEFT_BRACKET . formal_parameter_section_list S_RIGHT_BRACKET
    (78) formal_parameter_section_list -> . empty
    (79) formal_parameter_section_list -> . formal_parameter_section
    (253) empty -> .
    (80) formal_parameter_section -> . formal_parameter_section S_SEMI_COLON parameter_specification
    (81) formal_parameter_section -> . formal_parameter_section S_COMMA parameter_specification
    (82) formal_parameter_section -> . parameter_specification
    (83) parameter_specification -> . procedure_parameter_type variable_sub_declaration
    (84) procedure_parameter_type -> . RW_INPUT
    (85) procedure_parameter_type -> . RW_OUTPUT
    (86) procedure_parameter_type -> . RW_INPUT S_DIVIDE RW_OUTPUT

    S_RIGHT_BRACKET reduce using rule 253 (empty -> .)
    RW_INPUT        shift and go to state 110
    RW_OUTPUT       shift and go to state 111

    formal_parameter_section_list  shift and go to state 105
    empty                          shift and go to state 106
    formal_parameter_section       shift and go to state 107
    parameter_specification        shift and go to state 108
    procedure_parameter_type       shift and go to state 109

state 22

    (89) function_identification -> RW_FUNCTION identifier .

    S_LEFT_BRACKET  reduce using rule 89 (function_identification -> RW_FUNCTION identifier .)
    S_RETURN        reduce using rule 89 (function_identification -> RW_FUNCTION identifier .)


state 23

    (76) procedure_identifier -> RW_PROCEDURE identifier .

    S_LEFT_BRACKET  reduce using rule 76 (procedure_identifier -> RW_PROCEDURE identifier .)


state 24

    (2) program -> RW_PROGRAM identifier block .

    $end            reduce using rule 2 (program -> RW_PROGRAM identifier block .)


state 25

    (9) block -> kamus_declaration INDENT . constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (11) constant_declaration_block -> . empty
    (12) constant_declaration_block -> . constant_declaration
    (253) empty -> .
    (62) constant_declaration -> . constant_declaration constant_sub_declaration
    (63) constant_declaration -> . constant_sub_declaration
    (64) constant_sub_declaration -> . RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant

    RW_TYPE         reduce using rule 253 (empty -> .)
    IDENTIFIER      reduce using rule 253 (empty -> .)
    DEDENT          reduce using rule 253 (empty -> .)
    RW_PROCEDURE    reduce using rule 253 (empty -> .)
    RW_FUNCTION     reduce using rule 253 (empty -> .)
    RW_CONSTANT     shift and go to state 116

    constant_declaration_block     shift and go to state 112
    empty                          shift and go to state 113
    constant_declaration           shift and go to state 114
    constant_sub_declaration       shift and go to state 115

state 26

    (10) block -> kamus_declaration algorithm_block . procedure_and_function_implementation_block
    (20) procedure_and_function_implementation_block -> . empty
    (21) procedure_and_function_implementation_block -> . subprogram_implementation_list
    (253) empty -> .
    (22) subprogram_implementation_list -> . subprogram_implementation_list subprogram_implementation
    (23) subprogram_implementation_list -> . subprogram_implementation
    (24) subprogram_implementation -> . procedure_implementation
    (25) subprogram_implementation -> . function_implementation
    (26) procedure_implementation -> . procedure_declaration procedure_implementation_block
    (27) procedure_implementation -> . procedure_declaration
    (30) function_implementation -> . function_declaration function_implementation_block
    (31) function_implementation -> . function_declaration
    (75) procedure_declaration -> . procedure_identifier formal_parameter_list
    (87) function_declaration -> . function_identification function_formal_parameter_list function_return_type
    (88) function_declaration -> . function_identification function_return_type
    (76) procedure_identifier -> . RW_PROCEDURE identifier
    (89) function_identification -> . RW_FUNCTION identifier

    $end            reduce using rule 253 (empty -> .)
    RW_PROCEDURE    shift and go to state 9
    RW_FUNCTION     shift and go to state 8

    procedure_and_function_implementation_block shift and go to state 117
    empty                          shift and go to state 118
    subprogram_implementation_list shift and go to state 119
    subprogram_implementation      shift and go to state 120
    procedure_implementation       shift and go to state 121
    function_implementation        shift and go to state 122
    procedure_declaration          shift and go to state 123
    function_declaration           shift and go to state 124
    procedure_identifier           shift and go to state 7
    function_identification        shift and go to state 6

state 27

    (19) algorithm_block -> RW_ALGORITMA . statement_part
    (99) statement_part -> . compound_statement
    (100) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 127

    statement_part                 shift and go to state 125
    compound_statement             shift and go to state 126

state 28

    (8) kamus_declaration -> RW_KAMUS RW_LOKAL .

    INDENT          reduce using rule 8 (kamus_declaration -> RW_KAMUS RW_LOKAL .)
    RW_ALGORITMA    reduce using rule 8 (kamus_declaration -> RW_KAMUS RW_LOKAL .)


state 29

    (87) function_declaration -> function_identification function_formal_parameter_list function_return_type .

    RW_KAMUS        reduce using rule 87 (function_declaration -> function_identification function_formal_parameter_list function_return_type .)
    RW_PROCEDURE    reduce using rule 87 (function_declaration -> function_identification function_formal_parameter_list function_return_type .)
    RW_FUNCTION     reduce using rule 87 (function_declaration -> function_identification function_formal_parameter_list function_return_type .)
    $end            reduce using rule 87 (function_declaration -> function_identification function_formal_parameter_list function_return_type .)
    DEDENT          reduce using rule 87 (function_declaration -> function_identification function_formal_parameter_list function_return_type .)


state 30

    (91) function_formal_parameter_list -> S_LEFT_BRACKET function_parameter_list_option . S_RIGHT_BRACKET

    S_RIGHT_BRACKET shift and go to state 128


state 31

    (93) function_parameter_list_option -> function_parameter_list .
    (95) function_parameter_list -> function_parameter_list . S_SEMI_COLON function_parameter_declaration
    (96) function_parameter_list -> function_parameter_list . S_COMMA function_parameter_declaration

    S_RIGHT_BRACKET reduce using rule 93 (function_parameter_list_option -> function_parameter_list .)
    S_SEMI_COLON    shift and go to state 129
    S_COMMA         shift and go to state 130


state 32

    (94) function_parameter_list_option -> empty .

    S_RIGHT_BRACKET reduce using rule 94 (function_parameter_list_option -> empty .)


state 33

    (97) function_parameter_list -> function_parameter_declaration .

    S_SEMI_COLON    reduce using rule 97 (function_parameter_list -> function_parameter_declaration .)
    S_COMMA         reduce using rule 97 (function_parameter_list -> function_parameter_declaration .)
    S_RIGHT_BRACKET reduce using rule 97 (function_parameter_list -> function_parameter_declaration .)


state 34

    (98) function_parameter_declaration -> variable_sub_declaration .

    S_SEMI_COLON    reduce using rule 98 (function_parameter_declaration -> variable_sub_declaration .)
    S_COMMA         reduce using rule 98 (function_parameter_declaration -> variable_sub_declaration .)
    S_RIGHT_BRACKET reduce using rule 98 (function_parameter_declaration -> variable_sub_declaration .)


state 35

    (59) variable_sub_declaration -> identifier_list . S_COLON type_denoter
    (5) identifier_list -> identifier_list . S_COMMA identifier

    S_COLON         shift and go to state 131
    S_COMMA         shift and go to state 132


state 36

    (6) identifier_list -> identifier .

    S_COLON         reduce using rule 6 (identifier_list -> identifier .)
    S_COMMA         reduce using rule 6 (identifier_list -> identifier .)
    S_RIGHT_BRACKET reduce using rule 6 (identifier_list -> identifier .)


state 37

    (90) function_return_type -> S_RETURN type_denoter .

    RW_KAMUS        reduce using rule 90 (function_return_type -> S_RETURN type_denoter .)
    RW_PROCEDURE    reduce using rule 90 (function_return_type -> S_RETURN type_denoter .)
    RW_FUNCTION     reduce using rule 90 (function_return_type -> S_RETURN type_denoter .)
    $end            reduce using rule 90 (function_return_type -> S_RETURN type_denoter .)
    DEDENT          reduce using rule 90 (function_return_type -> S_RETURN type_denoter .)


state 38

    (34) type_denoter -> ordinal_type .

    RW_KAMUS        reduce using rule 34 (type_denoter -> ordinal_type .)
    RW_PROCEDURE    reduce using rule 34 (type_denoter -> ordinal_type .)
    RW_FUNCTION     reduce using rule 34 (type_denoter -> ordinal_type .)
    $end            reduce using rule 34 (type_denoter -> ordinal_type .)
    DEDENT          reduce using rule 34 (type_denoter -> ordinal_type .)
    S_SEMI_COLON    reduce using rule 34 (type_denoter -> ordinal_type .)
    S_COMMA         reduce using rule 34 (type_denoter -> ordinal_type .)
    S_RIGHT_BRACKET reduce using rule 34 (type_denoter -> ordinal_type .)
    IDENTIFIER      reduce using rule 34 (type_denoter -> ordinal_type .)
    S_GREATER_THAN  reduce using rule 34 (type_denoter -> ordinal_type .)
    S_EQUAL         reduce using rule 34 (type_denoter -> ordinal_type .)
    RW_TYPE         reduce using rule 34 (type_denoter -> ordinal_type .)


state 39

    (35) type_denoter -> structured_type .

    RW_KAMUS        reduce using rule 35 (type_denoter -> structured_type .)
    RW_PROCEDURE    reduce using rule 35 (type_denoter -> structured_type .)
    RW_FUNCTION     reduce using rule 35 (type_denoter -> structured_type .)
    $end            reduce using rule 35 (type_denoter -> structured_type .)
    DEDENT          reduce using rule 35 (type_denoter -> structured_type .)
    S_SEMI_COLON    reduce using rule 35 (type_denoter -> structured_type .)
    S_COMMA         reduce using rule 35 (type_denoter -> structured_type .)
    S_RIGHT_BRACKET reduce using rule 35 (type_denoter -> structured_type .)
    IDENTIFIER      reduce using rule 35 (type_denoter -> structured_type .)
    S_GREATER_THAN  reduce using rule 35 (type_denoter -> structured_type .)
    S_EQUAL         reduce using rule 35 (type_denoter -> structured_type .)
    RW_TYPE         reduce using rule 35 (type_denoter -> structured_type .)


state 40

    (36) type_denoter -> RW_INTEGER .

    RW_KAMUS        reduce using rule 36 (type_denoter -> RW_INTEGER .)
    RW_PROCEDURE    reduce using rule 36 (type_denoter -> RW_INTEGER .)
    RW_FUNCTION     reduce using rule 36 (type_denoter -> RW_INTEGER .)
    $end            reduce using rule 36 (type_denoter -> RW_INTEGER .)
    DEDENT          reduce using rule 36 (type_denoter -> RW_INTEGER .)
    S_SEMI_COLON    reduce using rule 36 (type_denoter -> RW_INTEGER .)
    S_COMMA         reduce using rule 36 (type_denoter -> RW_INTEGER .)
    S_RIGHT_BRACKET reduce using rule 36 (type_denoter -> RW_INTEGER .)
    IDENTIFIER      reduce using rule 36 (type_denoter -> RW_INTEGER .)
    S_GREATER_THAN  reduce using rule 36 (type_denoter -> RW_INTEGER .)
    S_EQUAL         reduce using rule 36 (type_denoter -> RW_INTEGER .)
    RW_TYPE         reduce using rule 36 (type_denoter -> RW_INTEGER .)


state 41

    (37) type_denoter -> RW_REAL .

    RW_KAMUS        reduce using rule 37 (type_denoter -> RW_REAL .)
    RW_PROCEDURE    reduce using rule 37 (type_denoter -> RW_REAL .)
    RW_FUNCTION     reduce using rule 37 (type_denoter -> RW_REAL .)
    $end            reduce using rule 37 (type_denoter -> RW_REAL .)
    DEDENT          reduce using rule 37 (type_denoter -> RW_REAL .)
    S_SEMI_COLON    reduce using rule 37 (type_denoter -> RW_REAL .)
    S_COMMA         reduce using rule 37 (type_denoter -> RW_REAL .)
    S_RIGHT_BRACKET reduce using rule 37 (type_denoter -> RW_REAL .)
    IDENTIFIER      reduce using rule 37 (type_denoter -> RW_REAL .)
    S_GREATER_THAN  reduce using rule 37 (type_denoter -> RW_REAL .)
    S_EQUAL         reduce using rule 37 (type_denoter -> RW_REAL .)
    RW_TYPE         reduce using rule 37 (type_denoter -> RW_REAL .)


state 42

    (38) type_denoter -> RW_STRING .

    RW_KAMUS        reduce using rule 38 (type_denoter -> RW_STRING .)
    RW_PROCEDURE    reduce using rule 38 (type_denoter -> RW_STRING .)
    RW_FUNCTION     reduce using rule 38 (type_denoter -> RW_STRING .)
    $end            reduce using rule 38 (type_denoter -> RW_STRING .)
    DEDENT          reduce using rule 38 (type_denoter -> RW_STRING .)
    S_SEMI_COLON    reduce using rule 38 (type_denoter -> RW_STRING .)
    S_COMMA         reduce using rule 38 (type_denoter -> RW_STRING .)
    S_RIGHT_BRACKET reduce using rule 38 (type_denoter -> RW_STRING .)
    IDENTIFIER      reduce using rule 38 (type_denoter -> RW_STRING .)
    S_GREATER_THAN  reduce using rule 38 (type_denoter -> RW_STRING .)
    S_EQUAL         reduce using rule 38 (type_denoter -> RW_STRING .)
    RW_TYPE         reduce using rule 38 (type_denoter -> RW_STRING .)


state 43

    (39) type_denoter -> RW_CHARACTER .

    RW_KAMUS        reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    RW_PROCEDURE    reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    RW_FUNCTION     reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    $end            reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    DEDENT          reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    S_SEMI_COLON    reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    S_COMMA         reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    S_RIGHT_BRACKET reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    IDENTIFIER      reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    S_GREATER_THAN  reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    S_EQUAL         reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    RW_TYPE         reduce using rule 39 (type_denoter -> RW_CHARACTER .)


state 44

    (40) type_denoter -> RW_BOOLEAN .

    RW_KAMUS        reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    RW_PROCEDURE    reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    RW_FUNCTION     reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    $end            reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    DEDENT          reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    S_SEMI_COLON    reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    S_COMMA         reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    S_RIGHT_BRACKET reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    IDENTIFIER      reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    S_GREATER_THAN  reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    S_EQUAL         reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    RW_TYPE         reduce using rule 40 (type_denoter -> RW_BOOLEAN .)


state 45

    (41) ordinal_type -> enumerated_type .

    RW_KAMUS        reduce using rule 41 (ordinal_type -> enumerated_type .)
    RW_PROCEDURE    reduce using rule 41 (ordinal_type -> enumerated_type .)
    RW_FUNCTION     reduce using rule 41 (ordinal_type -> enumerated_type .)
    $end            reduce using rule 41 (ordinal_type -> enumerated_type .)
    DEDENT          reduce using rule 41 (ordinal_type -> enumerated_type .)
    S_SEMI_COLON    reduce using rule 41 (ordinal_type -> enumerated_type .)
    S_COMMA         reduce using rule 41 (ordinal_type -> enumerated_type .)
    S_RIGHT_BRACKET reduce using rule 41 (ordinal_type -> enumerated_type .)
    IDENTIFIER      reduce using rule 41 (ordinal_type -> enumerated_type .)
    S_GREATER_THAN  reduce using rule 41 (ordinal_type -> enumerated_type .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 41 (ordinal_type -> enumerated_type .)
    S_EQUAL         reduce using rule 41 (ordinal_type -> enumerated_type .)
    RW_TYPE         reduce using rule 41 (ordinal_type -> enumerated_type .)


state 46

    (42) ordinal_type -> subrange_type .

    RW_KAMUS        reduce using rule 42 (ordinal_type -> subrange_type .)
    RW_PROCEDURE    reduce using rule 42 (ordinal_type -> subrange_type .)
    RW_FUNCTION     reduce using rule 42 (ordinal_type -> subrange_type .)
    $end            reduce using rule 42 (ordinal_type -> subrange_type .)
    DEDENT          reduce using rule 42 (ordinal_type -> subrange_type .)
    S_SEMI_COLON    reduce using rule 42 (ordinal_type -> subrange_type .)
    S_COMMA         reduce using rule 42 (ordinal_type -> subrange_type .)
    S_RIGHT_BRACKET reduce using rule 42 (ordinal_type -> subrange_type .)
    IDENTIFIER      reduce using rule 42 (ordinal_type -> subrange_type .)
    S_GREATER_THAN  reduce using rule 42 (ordinal_type -> subrange_type .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 42 (ordinal_type -> subrange_type .)
    S_EQUAL         reduce using rule 42 (ordinal_type -> subrange_type .)
    RW_TYPE         reduce using rule 42 (ordinal_type -> subrange_type .)


state 47

    (43) ordinal_type -> identifier .
    (47) subrange_option -> identifier .
    (224) user_defined_function_call -> identifier . function_actual_parameter_list
    (92) function_actual_parameter_list -> . S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET

    RW_KAMUS        reduce using rule 43 (ordinal_type -> identifier .)
    RW_PROCEDURE    reduce using rule 43 (ordinal_type -> identifier .)
    RW_FUNCTION     reduce using rule 43 (ordinal_type -> identifier .)
    $end            reduce using rule 43 (ordinal_type -> identifier .)
    DEDENT          reduce using rule 43 (ordinal_type -> identifier .)
    S_SEMI_COLON    reduce using rule 43 (ordinal_type -> identifier .)
    S_COMMA         reduce using rule 43 (ordinal_type -> identifier .)
    S_RIGHT_BRACKET reduce using rule 43 (ordinal_type -> identifier .)
    IDENTIFIER      reduce using rule 43 (ordinal_type -> identifier .)
    S_GREATER_THAN  reduce using rule 43 (ordinal_type -> identifier .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 43 (ordinal_type -> identifier .)
    S_EQUAL         reduce using rule 43 (ordinal_type -> identifier .)
    RW_TYPE         reduce using rule 43 (ordinal_type -> identifier .)
    S_UP_TO         reduce using rule 47 (subrange_option -> identifier .)
    S_LEFT_BRACKET  shift and go to state 134

    function_actual_parameter_list shift and go to state 133

state 48

    (50) structured_type -> array_type .

    RW_KAMUS        reduce using rule 50 (structured_type -> array_type .)
    RW_PROCEDURE    reduce using rule 50 (structured_type -> array_type .)
    RW_FUNCTION     reduce using rule 50 (structured_type -> array_type .)
    $end            reduce using rule 50 (structured_type -> array_type .)
    DEDENT          reduce using rule 50 (structured_type -> array_type .)
    S_SEMI_COLON    reduce using rule 50 (structured_type -> array_type .)
    S_COMMA         reduce using rule 50 (structured_type -> array_type .)
    S_RIGHT_BRACKET reduce using rule 50 (structured_type -> array_type .)
    IDENTIFIER      reduce using rule 50 (structured_type -> array_type .)
    S_GREATER_THAN  reduce using rule 50 (structured_type -> array_type .)
    S_EQUAL         reduce using rule 50 (structured_type -> array_type .)
    RW_TYPE         reduce using rule 50 (structured_type -> array_type .)


state 49

    (44) enumerated_type -> S_LEFT_BRACKET . identifier_list S_RIGHT_BRACKET
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (254) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    identifier_list                shift and go to state 135
    identifier                     shift and go to state 36

state 50

    (45) subrange_type -> subrange_type_option .

    RW_KAMUS        reduce using rule 45 (subrange_type -> subrange_type_option .)
    RW_PROCEDURE    reduce using rule 45 (subrange_type -> subrange_type_option .)
    RW_FUNCTION     reduce using rule 45 (subrange_type -> subrange_type_option .)
    $end            reduce using rule 45 (subrange_type -> subrange_type_option .)
    DEDENT          reduce using rule 45 (subrange_type -> subrange_type_option .)
    S_SEMI_COLON    reduce using rule 45 (subrange_type -> subrange_type_option .)
    S_COMMA         reduce using rule 45 (subrange_type -> subrange_type_option .)
    S_RIGHT_BRACKET reduce using rule 45 (subrange_type -> subrange_type_option .)
    IDENTIFIER      reduce using rule 45 (subrange_type -> subrange_type_option .)
    S_GREATER_THAN  reduce using rule 45 (subrange_type -> subrange_type_option .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 45 (subrange_type -> subrange_type_option .)
    S_EQUAL         reduce using rule 45 (subrange_type -> subrange_type_option .)
    RW_TYPE         reduce using rule 45 (subrange_type -> subrange_type_option .)


state 51

    (51) array_type -> RW_ARRAY . array_index RW_OF component_type
    (52) array_index -> . S_LEFT_SQUARE_BRACKET index_list S_RIGHT_SQUARE_BRACKET

    S_LEFT_SQUARE_BRACKET shift and go to state 137

    array_index                    shift and go to state 136

state 52

    (46) subrange_type_option -> subrange_option . S_UP_TO subrange_option

    S_UP_TO         shift and go to state 138


state 53

    (48) subrange_option -> constant .

    S_UP_TO         reduce using rule 48 (subrange_option -> constant .)
    RW_KAMUS        reduce using rule 48 (subrange_option -> constant .)
    RW_PROCEDURE    reduce using rule 48 (subrange_option -> constant .)
    RW_FUNCTION     reduce using rule 48 (subrange_option -> constant .)
    $end            reduce using rule 48 (subrange_option -> constant .)
    DEDENT          reduce using rule 48 (subrange_option -> constant .)
    S_SEMI_COLON    reduce using rule 48 (subrange_option -> constant .)
    S_COMMA         reduce using rule 48 (subrange_option -> constant .)
    S_RIGHT_BRACKET reduce using rule 48 (subrange_option -> constant .)
    IDENTIFIER      reduce using rule 48 (subrange_option -> constant .)
    S_GREATER_THAN  reduce using rule 48 (subrange_option -> constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 48 (subrange_option -> constant .)
    S_EQUAL         reduce using rule 48 (subrange_option -> constant .)
    RW_TYPE         reduce using rule 48 (subrange_option -> constant .)


state 54

    (49) subrange_option -> function_designator .

    S_UP_TO         reduce using rule 49 (subrange_option -> function_designator .)
    RW_KAMUS        reduce using rule 49 (subrange_option -> function_designator .)
    RW_PROCEDURE    reduce using rule 49 (subrange_option -> function_designator .)
    RW_FUNCTION     reduce using rule 49 (subrange_option -> function_designator .)
    $end            reduce using rule 49 (subrange_option -> function_designator .)
    DEDENT          reduce using rule 49 (subrange_option -> function_designator .)
    S_SEMI_COLON    reduce using rule 49 (subrange_option -> function_designator .)
    S_COMMA         reduce using rule 49 (subrange_option -> function_designator .)
    S_RIGHT_BRACKET reduce using rule 49 (subrange_option -> function_designator .)
    IDENTIFIER      reduce using rule 49 (subrange_option -> function_designator .)
    S_GREATER_THAN  reduce using rule 49 (subrange_option -> function_designator .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 49 (subrange_option -> function_designator .)
    S_EQUAL         reduce using rule 49 (subrange_option -> function_designator .)
    RW_TYPE         reduce using rule 49 (subrange_option -> function_designator .)


state 55

    (153) constant -> string_char_constant .

    S_UP_TO         reduce using rule 153 (constant -> string_char_constant .)
    RW_KAMUS        reduce using rule 153 (constant -> string_char_constant .)
    RW_PROCEDURE    reduce using rule 153 (constant -> string_char_constant .)
    RW_FUNCTION     reduce using rule 153 (constant -> string_char_constant .)
    $end            reduce using rule 153 (constant -> string_char_constant .)
    DEDENT          reduce using rule 153 (constant -> string_char_constant .)
    S_SEMI_COLON    reduce using rule 153 (constant -> string_char_constant .)
    S_COMMA         reduce using rule 153 (constant -> string_char_constant .)
    S_RIGHT_BRACKET reduce using rule 153 (constant -> string_char_constant .)
    IDENTIFIER      reduce using rule 153 (constant -> string_char_constant .)
    S_GREATER_THAN  reduce using rule 153 (constant -> string_char_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 153 (constant -> string_char_constant .)
    S_EQUAL         reduce using rule 153 (constant -> string_char_constant .)
    RW_TYPE         reduce using rule 153 (constant -> string_char_constant .)
    RW_CONSTANT     reduce using rule 153 (constant -> string_char_constant .)


state 56

    (154) constant -> non_string_constant .

    S_UP_TO         reduce using rule 154 (constant -> non_string_constant .)
    RW_KAMUS        reduce using rule 154 (constant -> non_string_constant .)
    RW_PROCEDURE    reduce using rule 154 (constant -> non_string_constant .)
    RW_FUNCTION     reduce using rule 154 (constant -> non_string_constant .)
    $end            reduce using rule 154 (constant -> non_string_constant .)
    DEDENT          reduce using rule 154 (constant -> non_string_constant .)
    S_SEMI_COLON    reduce using rule 154 (constant -> non_string_constant .)
    S_COMMA         reduce using rule 154 (constant -> non_string_constant .)
    S_RIGHT_BRACKET reduce using rule 154 (constant -> non_string_constant .)
    IDENTIFIER      reduce using rule 154 (constant -> non_string_constant .)
    S_GREATER_THAN  reduce using rule 154 (constant -> non_string_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 154 (constant -> non_string_constant .)
    S_EQUAL         reduce using rule 154 (constant -> non_string_constant .)
    RW_TYPE         reduce using rule 154 (constant -> non_string_constant .)
    RW_CONSTANT     reduce using rule 154 (constant -> non_string_constant .)


state 57

    (155) constant -> sign . non_string_constant
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER

    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90

    non_string_constant            shift and go to state 139
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67

state 58

    (156) constant -> boolean_constant .

    S_UP_TO         reduce using rule 156 (constant -> boolean_constant .)
    RW_KAMUS        reduce using rule 156 (constant -> boolean_constant .)
    RW_PROCEDURE    reduce using rule 156 (constant -> boolean_constant .)
    RW_FUNCTION     reduce using rule 156 (constant -> boolean_constant .)
    $end            reduce using rule 156 (constant -> boolean_constant .)
    DEDENT          reduce using rule 156 (constant -> boolean_constant .)
    S_SEMI_COLON    reduce using rule 156 (constant -> boolean_constant .)
    S_COMMA         reduce using rule 156 (constant -> boolean_constant .)
    S_RIGHT_BRACKET reduce using rule 156 (constant -> boolean_constant .)
    IDENTIFIER      reduce using rule 156 (constant -> boolean_constant .)
    S_GREATER_THAN  reduce using rule 156 (constant -> boolean_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 156 (constant -> boolean_constant .)
    S_EQUAL         reduce using rule 156 (constant -> boolean_constant .)
    RW_TYPE         reduce using rule 156 (constant -> boolean_constant .)
    RW_CONSTANT     reduce using rule 156 (constant -> boolean_constant .)


state 59

    (157) constant -> nil_constant .

    S_UP_TO         reduce using rule 157 (constant -> nil_constant .)
    RW_KAMUS        reduce using rule 157 (constant -> nil_constant .)
    RW_PROCEDURE    reduce using rule 157 (constant -> nil_constant .)
    RW_FUNCTION     reduce using rule 157 (constant -> nil_constant .)
    $end            reduce using rule 157 (constant -> nil_constant .)
    DEDENT          reduce using rule 157 (constant -> nil_constant .)
    S_SEMI_COLON    reduce using rule 157 (constant -> nil_constant .)
    S_COMMA         reduce using rule 157 (constant -> nil_constant .)
    S_RIGHT_BRACKET reduce using rule 157 (constant -> nil_constant .)
    IDENTIFIER      reduce using rule 157 (constant -> nil_constant .)
    S_GREATER_THAN  reduce using rule 157 (constant -> nil_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 157 (constant -> nil_constant .)
    S_EQUAL         reduce using rule 157 (constant -> nil_constant .)
    RW_TYPE         reduce using rule 157 (constant -> nil_constant .)
    RW_CONSTANT     reduce using rule 157 (constant -> nil_constant .)


state 60

    (220) function_designator -> user_defined_function_call .

    S_UP_TO         reduce using rule 220 (function_designator -> user_defined_function_call .)
    S_POWER         reduce using rule 220 (function_designator -> user_defined_function_call .)
    S_TIMES         reduce using rule 220 (function_designator -> user_defined_function_call .)
    S_DIVIDE        reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_DIV          reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_MOD          reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_AND          reduce using rule 220 (function_designator -> user_defined_function_call .)
    S_PLUS          reduce using rule 220 (function_designator -> user_defined_function_call .)
    S_MINUS         reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_OR           reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_XOR          reduce using rule 220 (function_designator -> user_defined_function_call .)
    S_EQUAL         reduce using rule 220 (function_designator -> user_defined_function_call .)
    S_NOT_EQUAL     reduce using rule 220 (function_designator -> user_defined_function_call .)
    S_LESS_THAN_EQUAL reduce using rule 220 (function_designator -> user_defined_function_call .)
    S_GREATER_THAN_EQUAL reduce using rule 220 (function_designator -> user_defined_function_call .)
    S_LESS_THAN     reduce using rule 220 (function_designator -> user_defined_function_call .)
    S_GREATER_THAN  reduce using rule 220 (function_designator -> user_defined_function_call .)
    S_ELEMENT_OF    reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_EQ           reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_NEQ          reduce using rule 220 (function_designator -> user_defined_function_call .)
    S_RIGHT_BRACKET reduce using rule 220 (function_designator -> user_defined_function_call .)
    S_COMMA         reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_KAMUS        reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_PROCEDURE    reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_FUNCTION     reduce using rule 220 (function_designator -> user_defined_function_call .)
    $end            reduce using rule 220 (function_designator -> user_defined_function_call .)
    DEDENT          reduce using rule 220 (function_designator -> user_defined_function_call .)
    S_SEMI_COLON    reduce using rule 220 (function_designator -> user_defined_function_call .)
    IDENTIFIER      reduce using rule 220 (function_designator -> user_defined_function_call .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_TYPE         reduce using rule 220 (function_designator -> user_defined_function_call .)
    S_RETURN        reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_IF           reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_DEPEND       reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_WHILE        reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_ITERATE      reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_REPEAT       reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_INPUT        reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_OUTPUT       reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_THEN         reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_DO           reduce using rule 220 (function_designator -> user_defined_function_call .)
    RW_TIMES        reduce using rule 220 (function_designator -> user_defined_function_call .)
    INDENT          reduce using rule 220 (function_designator -> user_defined_function_call .)
    S_COLON         reduce using rule 220 (function_designator -> user_defined_function_call .)


state 61

    (221) function_designator -> math_function_call .

    S_UP_TO         reduce using rule 221 (function_designator -> math_function_call .)
    S_POWER         reduce using rule 221 (function_designator -> math_function_call .)
    S_TIMES         reduce using rule 221 (function_designator -> math_function_call .)
    S_DIVIDE        reduce using rule 221 (function_designator -> math_function_call .)
    RW_DIV          reduce using rule 221 (function_designator -> math_function_call .)
    RW_MOD          reduce using rule 221 (function_designator -> math_function_call .)
    RW_AND          reduce using rule 221 (function_designator -> math_function_call .)
    S_PLUS          reduce using rule 221 (function_designator -> math_function_call .)
    S_MINUS         reduce using rule 221 (function_designator -> math_function_call .)
    RW_OR           reduce using rule 221 (function_designator -> math_function_call .)
    RW_XOR          reduce using rule 221 (function_designator -> math_function_call .)
    S_EQUAL         reduce using rule 221 (function_designator -> math_function_call .)
    S_NOT_EQUAL     reduce using rule 221 (function_designator -> math_function_call .)
    S_LESS_THAN_EQUAL reduce using rule 221 (function_designator -> math_function_call .)
    S_GREATER_THAN_EQUAL reduce using rule 221 (function_designator -> math_function_call .)
    S_LESS_THAN     reduce using rule 221 (function_designator -> math_function_call .)
    S_GREATER_THAN  reduce using rule 221 (function_designator -> math_function_call .)
    S_ELEMENT_OF    reduce using rule 221 (function_designator -> math_function_call .)
    RW_EQ           reduce using rule 221 (function_designator -> math_function_call .)
    RW_NEQ          reduce using rule 221 (function_designator -> math_function_call .)
    S_RIGHT_BRACKET reduce using rule 221 (function_designator -> math_function_call .)
    S_COMMA         reduce using rule 221 (function_designator -> math_function_call .)
    RW_KAMUS        reduce using rule 221 (function_designator -> math_function_call .)
    RW_PROCEDURE    reduce using rule 221 (function_designator -> math_function_call .)
    RW_FUNCTION     reduce using rule 221 (function_designator -> math_function_call .)
    $end            reduce using rule 221 (function_designator -> math_function_call .)
    DEDENT          reduce using rule 221 (function_designator -> math_function_call .)
    S_SEMI_COLON    reduce using rule 221 (function_designator -> math_function_call .)
    IDENTIFIER      reduce using rule 221 (function_designator -> math_function_call .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 221 (function_designator -> math_function_call .)
    RW_TYPE         reduce using rule 221 (function_designator -> math_function_call .)
    S_RETURN        reduce using rule 221 (function_designator -> math_function_call .)
    RW_IF           reduce using rule 221 (function_designator -> math_function_call .)
    RW_DEPEND       reduce using rule 221 (function_designator -> math_function_call .)
    RW_WHILE        reduce using rule 221 (function_designator -> math_function_call .)
    RW_ITERATE      reduce using rule 221 (function_designator -> math_function_call .)
    RW_REPEAT       reduce using rule 221 (function_designator -> math_function_call .)
    RW_INPUT        reduce using rule 221 (function_designator -> math_function_call .)
    RW_OUTPUT       reduce using rule 221 (function_designator -> math_function_call .)
    RW_THEN         reduce using rule 221 (function_designator -> math_function_call .)
    RW_DO           reduce using rule 221 (function_designator -> math_function_call .)
    RW_TIMES        reduce using rule 221 (function_designator -> math_function_call .)
    INDENT          reduce using rule 221 (function_designator -> math_function_call .)
    S_COLON         reduce using rule 221 (function_designator -> math_function_call .)


state 62

    (222) function_designator -> string_function_call .

    S_UP_TO         reduce using rule 222 (function_designator -> string_function_call .)
    S_POWER         reduce using rule 222 (function_designator -> string_function_call .)
    S_TIMES         reduce using rule 222 (function_designator -> string_function_call .)
    S_DIVIDE        reduce using rule 222 (function_designator -> string_function_call .)
    RW_DIV          reduce using rule 222 (function_designator -> string_function_call .)
    RW_MOD          reduce using rule 222 (function_designator -> string_function_call .)
    RW_AND          reduce using rule 222 (function_designator -> string_function_call .)
    S_PLUS          reduce using rule 222 (function_designator -> string_function_call .)
    S_MINUS         reduce using rule 222 (function_designator -> string_function_call .)
    RW_OR           reduce using rule 222 (function_designator -> string_function_call .)
    RW_XOR          reduce using rule 222 (function_designator -> string_function_call .)
    S_EQUAL         reduce using rule 222 (function_designator -> string_function_call .)
    S_NOT_EQUAL     reduce using rule 222 (function_designator -> string_function_call .)
    S_LESS_THAN_EQUAL reduce using rule 222 (function_designator -> string_function_call .)
    S_GREATER_THAN_EQUAL reduce using rule 222 (function_designator -> string_function_call .)
    S_LESS_THAN     reduce using rule 222 (function_designator -> string_function_call .)
    S_GREATER_THAN  reduce using rule 222 (function_designator -> string_function_call .)
    S_ELEMENT_OF    reduce using rule 222 (function_designator -> string_function_call .)
    RW_EQ           reduce using rule 222 (function_designator -> string_function_call .)
    RW_NEQ          reduce using rule 222 (function_designator -> string_function_call .)
    S_RIGHT_BRACKET reduce using rule 222 (function_designator -> string_function_call .)
    S_COMMA         reduce using rule 222 (function_designator -> string_function_call .)
    RW_KAMUS        reduce using rule 222 (function_designator -> string_function_call .)
    RW_PROCEDURE    reduce using rule 222 (function_designator -> string_function_call .)
    RW_FUNCTION     reduce using rule 222 (function_designator -> string_function_call .)
    $end            reduce using rule 222 (function_designator -> string_function_call .)
    DEDENT          reduce using rule 222 (function_designator -> string_function_call .)
    S_SEMI_COLON    reduce using rule 222 (function_designator -> string_function_call .)
    IDENTIFIER      reduce using rule 222 (function_designator -> string_function_call .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 222 (function_designator -> string_function_call .)
    RW_TYPE         reduce using rule 222 (function_designator -> string_function_call .)
    S_RETURN        reduce using rule 222 (function_designator -> string_function_call .)
    RW_IF           reduce using rule 222 (function_designator -> string_function_call .)
    RW_DEPEND       reduce using rule 222 (function_designator -> string_function_call .)
    RW_WHILE        reduce using rule 222 (function_designator -> string_function_call .)
    RW_ITERATE      reduce using rule 222 (function_designator -> string_function_call .)
    RW_REPEAT       reduce using rule 222 (function_designator -> string_function_call .)
    RW_INPUT        reduce using rule 222 (function_designator -> string_function_call .)
    RW_OUTPUT       reduce using rule 222 (function_designator -> string_function_call .)
    RW_THEN         reduce using rule 222 (function_designator -> string_function_call .)
    RW_DO           reduce using rule 222 (function_designator -> string_function_call .)
    RW_TIMES        reduce using rule 222 (function_designator -> string_function_call .)
    INDENT          reduce using rule 222 (function_designator -> string_function_call .)
    S_COLON         reduce using rule 222 (function_designator -> string_function_call .)


state 63

    (223) function_designator -> converter_function_call .

    S_UP_TO         reduce using rule 223 (function_designator -> converter_function_call .)
    S_POWER         reduce using rule 223 (function_designator -> converter_function_call .)
    S_TIMES         reduce using rule 223 (function_designator -> converter_function_call .)
    S_DIVIDE        reduce using rule 223 (function_designator -> converter_function_call .)
    RW_DIV          reduce using rule 223 (function_designator -> converter_function_call .)
    RW_MOD          reduce using rule 223 (function_designator -> converter_function_call .)
    RW_AND          reduce using rule 223 (function_designator -> converter_function_call .)
    S_PLUS          reduce using rule 223 (function_designator -> converter_function_call .)
    S_MINUS         reduce using rule 223 (function_designator -> converter_function_call .)
    RW_OR           reduce using rule 223 (function_designator -> converter_function_call .)
    RW_XOR          reduce using rule 223 (function_designator -> converter_function_call .)
    S_EQUAL         reduce using rule 223 (function_designator -> converter_function_call .)
    S_NOT_EQUAL     reduce using rule 223 (function_designator -> converter_function_call .)
    S_LESS_THAN_EQUAL reduce using rule 223 (function_designator -> converter_function_call .)
    S_GREATER_THAN_EQUAL reduce using rule 223 (function_designator -> converter_function_call .)
    S_LESS_THAN     reduce using rule 223 (function_designator -> converter_function_call .)
    S_GREATER_THAN  reduce using rule 223 (function_designator -> converter_function_call .)
    S_ELEMENT_OF    reduce using rule 223 (function_designator -> converter_function_call .)
    RW_EQ           reduce using rule 223 (function_designator -> converter_function_call .)
    RW_NEQ          reduce using rule 223 (function_designator -> converter_function_call .)
    S_RIGHT_BRACKET reduce using rule 223 (function_designator -> converter_function_call .)
    S_COMMA         reduce using rule 223 (function_designator -> converter_function_call .)
    RW_KAMUS        reduce using rule 223 (function_designator -> converter_function_call .)
    RW_PROCEDURE    reduce using rule 223 (function_designator -> converter_function_call .)
    RW_FUNCTION     reduce using rule 223 (function_designator -> converter_function_call .)
    $end            reduce using rule 223 (function_designator -> converter_function_call .)
    DEDENT          reduce using rule 223 (function_designator -> converter_function_call .)
    S_SEMI_COLON    reduce using rule 223 (function_designator -> converter_function_call .)
    IDENTIFIER      reduce using rule 223 (function_designator -> converter_function_call .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 223 (function_designator -> converter_function_call .)
    RW_TYPE         reduce using rule 223 (function_designator -> converter_function_call .)
    S_RETURN        reduce using rule 223 (function_designator -> converter_function_call .)
    RW_IF           reduce using rule 223 (function_designator -> converter_function_call .)
    RW_DEPEND       reduce using rule 223 (function_designator -> converter_function_call .)
    RW_WHILE        reduce using rule 223 (function_designator -> converter_function_call .)
    RW_ITERATE      reduce using rule 223 (function_designator -> converter_function_call .)
    RW_REPEAT       reduce using rule 223 (function_designator -> converter_function_call .)
    RW_INPUT        reduce using rule 223 (function_designator -> converter_function_call .)
    RW_OUTPUT       reduce using rule 223 (function_designator -> converter_function_call .)
    RW_THEN         reduce using rule 223 (function_designator -> converter_function_call .)
    RW_DO           reduce using rule 223 (function_designator -> converter_function_call .)
    RW_TIMES        reduce using rule 223 (function_designator -> converter_function_call .)
    INDENT          reduce using rule 223 (function_designator -> converter_function_call .)
    S_COLON         reduce using rule 223 (function_designator -> converter_function_call .)


state 64

    (166) string_char_constant -> string_constant .

    S_UP_TO         reduce using rule 166 (string_char_constant -> string_constant .)
    S_POWER         reduce using rule 166 (string_char_constant -> string_constant .)
    S_TIMES         reduce using rule 166 (string_char_constant -> string_constant .)
    S_DIVIDE        reduce using rule 166 (string_char_constant -> string_constant .)
    RW_DIV          reduce using rule 166 (string_char_constant -> string_constant .)
    RW_MOD          reduce using rule 166 (string_char_constant -> string_constant .)
    RW_AND          reduce using rule 166 (string_char_constant -> string_constant .)
    S_PLUS          reduce using rule 166 (string_char_constant -> string_constant .)
    S_MINUS         reduce using rule 166 (string_char_constant -> string_constant .)
    RW_OR           reduce using rule 166 (string_char_constant -> string_constant .)
    RW_XOR          reduce using rule 166 (string_char_constant -> string_constant .)
    S_EQUAL         reduce using rule 166 (string_char_constant -> string_constant .)
    S_NOT_EQUAL     reduce using rule 166 (string_char_constant -> string_constant .)
    S_LESS_THAN_EQUAL reduce using rule 166 (string_char_constant -> string_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 166 (string_char_constant -> string_constant .)
    S_LESS_THAN     reduce using rule 166 (string_char_constant -> string_constant .)
    S_GREATER_THAN  reduce using rule 166 (string_char_constant -> string_constant .)
    S_ELEMENT_OF    reduce using rule 166 (string_char_constant -> string_constant .)
    RW_EQ           reduce using rule 166 (string_char_constant -> string_constant .)
    RW_NEQ          reduce using rule 166 (string_char_constant -> string_constant .)
    S_RIGHT_BRACKET reduce using rule 166 (string_char_constant -> string_constant .)
    S_COMMA         reduce using rule 166 (string_char_constant -> string_constant .)
    RW_KAMUS        reduce using rule 166 (string_char_constant -> string_constant .)
    RW_PROCEDURE    reduce using rule 166 (string_char_constant -> string_constant .)
    RW_FUNCTION     reduce using rule 166 (string_char_constant -> string_constant .)
    $end            reduce using rule 166 (string_char_constant -> string_constant .)
    DEDENT          reduce using rule 166 (string_char_constant -> string_constant .)
    S_SEMI_COLON    reduce using rule 166 (string_char_constant -> string_constant .)
    IDENTIFIER      reduce using rule 166 (string_char_constant -> string_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 166 (string_char_constant -> string_constant .)
    RW_TYPE         reduce using rule 166 (string_char_constant -> string_constant .)
    S_RETURN        reduce using rule 166 (string_char_constant -> string_constant .)
    RW_IF           reduce using rule 166 (string_char_constant -> string_constant .)
    RW_DEPEND       reduce using rule 166 (string_char_constant -> string_constant .)
    RW_WHILE        reduce using rule 166 (string_char_constant -> string_constant .)
    RW_ITERATE      reduce using rule 166 (string_char_constant -> string_constant .)
    RW_REPEAT       reduce using rule 166 (string_char_constant -> string_constant .)
    RW_INPUT        reduce using rule 166 (string_char_constant -> string_constant .)
    RW_OUTPUT       reduce using rule 166 (string_char_constant -> string_constant .)
    RW_THEN         reduce using rule 166 (string_char_constant -> string_constant .)
    RW_DO           reduce using rule 166 (string_char_constant -> string_constant .)
    INDENT          reduce using rule 166 (string_char_constant -> string_constant .)
    S_COLON         reduce using rule 166 (string_char_constant -> string_constant .)
    RW_CONSTANT     reduce using rule 166 (string_char_constant -> string_constant .)


state 65

    (167) string_char_constant -> char_constant .

    S_UP_TO         reduce using rule 167 (string_char_constant -> char_constant .)
    S_POWER         reduce using rule 167 (string_char_constant -> char_constant .)
    S_TIMES         reduce using rule 167 (string_char_constant -> char_constant .)
    S_DIVIDE        reduce using rule 167 (string_char_constant -> char_constant .)
    RW_DIV          reduce using rule 167 (string_char_constant -> char_constant .)
    RW_MOD          reduce using rule 167 (string_char_constant -> char_constant .)
    RW_AND          reduce using rule 167 (string_char_constant -> char_constant .)
    S_PLUS          reduce using rule 167 (string_char_constant -> char_constant .)
    S_MINUS         reduce using rule 167 (string_char_constant -> char_constant .)
    RW_OR           reduce using rule 167 (string_char_constant -> char_constant .)
    RW_XOR          reduce using rule 167 (string_char_constant -> char_constant .)
    S_EQUAL         reduce using rule 167 (string_char_constant -> char_constant .)
    S_NOT_EQUAL     reduce using rule 167 (string_char_constant -> char_constant .)
    S_LESS_THAN_EQUAL reduce using rule 167 (string_char_constant -> char_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 167 (string_char_constant -> char_constant .)
    S_LESS_THAN     reduce using rule 167 (string_char_constant -> char_constant .)
    S_GREATER_THAN  reduce using rule 167 (string_char_constant -> char_constant .)
    S_ELEMENT_OF    reduce using rule 167 (string_char_constant -> char_constant .)
    RW_EQ           reduce using rule 167 (string_char_constant -> char_constant .)
    RW_NEQ          reduce using rule 167 (string_char_constant -> char_constant .)
    S_RIGHT_BRACKET reduce using rule 167 (string_char_constant -> char_constant .)
    S_COMMA         reduce using rule 167 (string_char_constant -> char_constant .)
    RW_KAMUS        reduce using rule 167 (string_char_constant -> char_constant .)
    RW_PROCEDURE    reduce using rule 167 (string_char_constant -> char_constant .)
    RW_FUNCTION     reduce using rule 167 (string_char_constant -> char_constant .)
    $end            reduce using rule 167 (string_char_constant -> char_constant .)
    DEDENT          reduce using rule 167 (string_char_constant -> char_constant .)
    S_SEMI_COLON    reduce using rule 167 (string_char_constant -> char_constant .)
    IDENTIFIER      reduce using rule 167 (string_char_constant -> char_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 167 (string_char_constant -> char_constant .)
    RW_TYPE         reduce using rule 167 (string_char_constant -> char_constant .)
    S_RETURN        reduce using rule 167 (string_char_constant -> char_constant .)
    RW_IF           reduce using rule 167 (string_char_constant -> char_constant .)
    RW_DEPEND       reduce using rule 167 (string_char_constant -> char_constant .)
    RW_WHILE        reduce using rule 167 (string_char_constant -> char_constant .)
    RW_ITERATE      reduce using rule 167 (string_char_constant -> char_constant .)
    RW_REPEAT       reduce using rule 167 (string_char_constant -> char_constant .)
    RW_INPUT        reduce using rule 167 (string_char_constant -> char_constant .)
    RW_OUTPUT       reduce using rule 167 (string_char_constant -> char_constant .)
    RW_THEN         reduce using rule 167 (string_char_constant -> char_constant .)
    RW_DO           reduce using rule 167 (string_char_constant -> char_constant .)
    INDENT          reduce using rule 167 (string_char_constant -> char_constant .)
    S_COLON         reduce using rule 167 (string_char_constant -> char_constant .)
    RW_CONSTANT     reduce using rule 167 (string_char_constant -> char_constant .)


state 66

    (162) non_string_constant -> integer_constant .

    S_UP_TO         reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_KAMUS        reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_PROCEDURE    reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_FUNCTION     reduce using rule 162 (non_string_constant -> integer_constant .)
    $end            reduce using rule 162 (non_string_constant -> integer_constant .)
    DEDENT          reduce using rule 162 (non_string_constant -> integer_constant .)
    S_SEMI_COLON    reduce using rule 162 (non_string_constant -> integer_constant .)
    S_COMMA         reduce using rule 162 (non_string_constant -> integer_constant .)
    S_RIGHT_BRACKET reduce using rule 162 (non_string_constant -> integer_constant .)
    IDENTIFIER      reduce using rule 162 (non_string_constant -> integer_constant .)
    S_GREATER_THAN  reduce using rule 162 (non_string_constant -> integer_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 162 (non_string_constant -> integer_constant .)
    S_EQUAL         reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_TYPE         reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_CONSTANT     reduce using rule 162 (non_string_constant -> integer_constant .)
    S_POWER         reduce using rule 162 (non_string_constant -> integer_constant .)
    S_TIMES         reduce using rule 162 (non_string_constant -> integer_constant .)
    S_DIVIDE        reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_DIV          reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_MOD          reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_AND          reduce using rule 162 (non_string_constant -> integer_constant .)
    S_PLUS          reduce using rule 162 (non_string_constant -> integer_constant .)
    S_MINUS         reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_OR           reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_XOR          reduce using rule 162 (non_string_constant -> integer_constant .)
    S_NOT_EQUAL     reduce using rule 162 (non_string_constant -> integer_constant .)
    S_LESS_THAN_EQUAL reduce using rule 162 (non_string_constant -> integer_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 162 (non_string_constant -> integer_constant .)
    S_LESS_THAN     reduce using rule 162 (non_string_constant -> integer_constant .)
    S_ELEMENT_OF    reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_EQ           reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_NEQ          reduce using rule 162 (non_string_constant -> integer_constant .)
    S_RETURN        reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_IF           reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_DEPEND       reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_WHILE        reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_ITERATE      reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_REPEAT       reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_INPUT        reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_OUTPUT       reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_THEN         reduce using rule 162 (non_string_constant -> integer_constant .)
    RW_DO           reduce using rule 162 (non_string_constant -> integer_constant .)
    INDENT          reduce using rule 162 (non_string_constant -> integer_constant .)
    S_COLON         reduce using rule 162 (non_string_constant -> integer_constant .)


state 67

    (163) non_string_constant -> real_constant .

    S_UP_TO         reduce using rule 163 (non_string_constant -> real_constant .)
    RW_KAMUS        reduce using rule 163 (non_string_constant -> real_constant .)
    RW_PROCEDURE    reduce using rule 163 (non_string_constant -> real_constant .)
    RW_FUNCTION     reduce using rule 163 (non_string_constant -> real_constant .)
    $end            reduce using rule 163 (non_string_constant -> real_constant .)
    DEDENT          reduce using rule 163 (non_string_constant -> real_constant .)
    S_SEMI_COLON    reduce using rule 163 (non_string_constant -> real_constant .)
    S_COMMA         reduce using rule 163 (non_string_constant -> real_constant .)
    S_RIGHT_BRACKET reduce using rule 163 (non_string_constant -> real_constant .)
    IDENTIFIER      reduce using rule 163 (non_string_constant -> real_constant .)
    S_GREATER_THAN  reduce using rule 163 (non_string_constant -> real_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 163 (non_string_constant -> real_constant .)
    S_EQUAL         reduce using rule 163 (non_string_constant -> real_constant .)
    RW_TYPE         reduce using rule 163 (non_string_constant -> real_constant .)
    RW_CONSTANT     reduce using rule 163 (non_string_constant -> real_constant .)
    S_POWER         reduce using rule 163 (non_string_constant -> real_constant .)
    S_TIMES         reduce using rule 163 (non_string_constant -> real_constant .)
    S_DIVIDE        reduce using rule 163 (non_string_constant -> real_constant .)
    RW_DIV          reduce using rule 163 (non_string_constant -> real_constant .)
    RW_MOD          reduce using rule 163 (non_string_constant -> real_constant .)
    RW_AND          reduce using rule 163 (non_string_constant -> real_constant .)
    S_PLUS          reduce using rule 163 (non_string_constant -> real_constant .)
    S_MINUS         reduce using rule 163 (non_string_constant -> real_constant .)
    RW_OR           reduce using rule 163 (non_string_constant -> real_constant .)
    RW_XOR          reduce using rule 163 (non_string_constant -> real_constant .)
    S_NOT_EQUAL     reduce using rule 163 (non_string_constant -> real_constant .)
    S_LESS_THAN_EQUAL reduce using rule 163 (non_string_constant -> real_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 163 (non_string_constant -> real_constant .)
    S_LESS_THAN     reduce using rule 163 (non_string_constant -> real_constant .)
    S_ELEMENT_OF    reduce using rule 163 (non_string_constant -> real_constant .)
    RW_EQ           reduce using rule 163 (non_string_constant -> real_constant .)
    RW_NEQ          reduce using rule 163 (non_string_constant -> real_constant .)
    S_RETURN        reduce using rule 163 (non_string_constant -> real_constant .)
    RW_IF           reduce using rule 163 (non_string_constant -> real_constant .)
    RW_DEPEND       reduce using rule 163 (non_string_constant -> real_constant .)
    RW_WHILE        reduce using rule 163 (non_string_constant -> real_constant .)
    RW_ITERATE      reduce using rule 163 (non_string_constant -> real_constant .)
    RW_REPEAT       reduce using rule 163 (non_string_constant -> real_constant .)
    RW_INPUT        reduce using rule 163 (non_string_constant -> real_constant .)
    RW_OUTPUT       reduce using rule 163 (non_string_constant -> real_constant .)
    RW_THEN         reduce using rule 163 (non_string_constant -> real_constant .)
    RW_DO           reduce using rule 163 (non_string_constant -> real_constant .)
    INDENT          reduce using rule 163 (non_string_constant -> real_constant .)
    S_COLON         reduce using rule 163 (non_string_constant -> real_constant .)


state 68

    (158) sign -> S_PLUS .

    L_INTEGER_NUMBER reduce using rule 158 (sign -> S_PLUS .)
    L_REAL_NUMBER   reduce using rule 158 (sign -> S_PLUS .)


state 69

    (159) sign -> S_MINUS .

    L_INTEGER_NUMBER reduce using rule 159 (sign -> S_MINUS .)
    L_REAL_NUMBER   reduce using rule 159 (sign -> S_MINUS .)


state 70

    (160) boolean_constant -> L_BOOLEAN_TRUE .

    S_UP_TO         reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_POWER         reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_TIMES         reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_DIVIDE        reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_DIV          reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_MOD          reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_AND          reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_PLUS          reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_MINUS         reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_OR           reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_XOR          reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_EQUAL         reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_NOT_EQUAL     reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_LESS_THAN_EQUAL reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_GREATER_THAN_EQUAL reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_LESS_THAN     reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_GREATER_THAN  reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_ELEMENT_OF    reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_EQ           reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_NEQ          reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_RIGHT_BRACKET reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_COMMA         reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_KAMUS        reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_PROCEDURE    reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_FUNCTION     reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    $end            reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    DEDENT          reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_SEMI_COLON    reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    IDENTIFIER      reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_TYPE         reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_RETURN        reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_IF           reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_DEPEND       reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_WHILE        reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_ITERATE      reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_REPEAT       reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_INPUT        reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_OUTPUT       reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_THEN         reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_DO           reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    INDENT          reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_COLON         reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_CONSTANT     reduce using rule 160 (boolean_constant -> L_BOOLEAN_TRUE .)


state 71

    (161) boolean_constant -> L_BOOLEAN_FALSE .

    S_UP_TO         reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_POWER         reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_TIMES         reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_DIVIDE        reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_DIV          reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_MOD          reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_AND          reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_PLUS          reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_MINUS         reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_OR           reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_XOR          reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_EQUAL         reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_NOT_EQUAL     reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_LESS_THAN_EQUAL reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_GREATER_THAN_EQUAL reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_LESS_THAN     reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_GREATER_THAN  reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_ELEMENT_OF    reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_EQ           reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_NEQ          reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_RIGHT_BRACKET reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_COMMA         reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_KAMUS        reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_PROCEDURE    reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_FUNCTION     reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    $end            reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    DEDENT          reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_SEMI_COLON    reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    IDENTIFIER      reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_TYPE         reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_RETURN        reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_IF           reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_DEPEND       reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_WHILE        reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_ITERATE      reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_REPEAT       reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_INPUT        reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_OUTPUT       reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_THEN         reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_DO           reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    INDENT          reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_COLON         reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_CONSTANT     reduce using rule 161 (boolean_constant -> L_BOOLEAN_FALSE .)


state 72

    (170) nil_constant -> L_NIL .

    S_UP_TO         reduce using rule 170 (nil_constant -> L_NIL .)
    S_POWER         reduce using rule 170 (nil_constant -> L_NIL .)
    S_TIMES         reduce using rule 170 (nil_constant -> L_NIL .)
    S_DIVIDE        reduce using rule 170 (nil_constant -> L_NIL .)
    RW_DIV          reduce using rule 170 (nil_constant -> L_NIL .)
    RW_MOD          reduce using rule 170 (nil_constant -> L_NIL .)
    RW_AND          reduce using rule 170 (nil_constant -> L_NIL .)
    S_PLUS          reduce using rule 170 (nil_constant -> L_NIL .)
    S_MINUS         reduce using rule 170 (nil_constant -> L_NIL .)
    RW_OR           reduce using rule 170 (nil_constant -> L_NIL .)
    RW_XOR          reduce using rule 170 (nil_constant -> L_NIL .)
    S_EQUAL         reduce using rule 170 (nil_constant -> L_NIL .)
    S_NOT_EQUAL     reduce using rule 170 (nil_constant -> L_NIL .)
    S_LESS_THAN_EQUAL reduce using rule 170 (nil_constant -> L_NIL .)
    S_GREATER_THAN_EQUAL reduce using rule 170 (nil_constant -> L_NIL .)
    S_LESS_THAN     reduce using rule 170 (nil_constant -> L_NIL .)
    S_GREATER_THAN  reduce using rule 170 (nil_constant -> L_NIL .)
    S_ELEMENT_OF    reduce using rule 170 (nil_constant -> L_NIL .)
    RW_EQ           reduce using rule 170 (nil_constant -> L_NIL .)
    RW_NEQ          reduce using rule 170 (nil_constant -> L_NIL .)
    S_RIGHT_BRACKET reduce using rule 170 (nil_constant -> L_NIL .)
    S_COMMA         reduce using rule 170 (nil_constant -> L_NIL .)
    RW_KAMUS        reduce using rule 170 (nil_constant -> L_NIL .)
    RW_PROCEDURE    reduce using rule 170 (nil_constant -> L_NIL .)
    RW_FUNCTION     reduce using rule 170 (nil_constant -> L_NIL .)
    $end            reduce using rule 170 (nil_constant -> L_NIL .)
    DEDENT          reduce using rule 170 (nil_constant -> L_NIL .)
    S_SEMI_COLON    reduce using rule 170 (nil_constant -> L_NIL .)
    IDENTIFIER      reduce using rule 170 (nil_constant -> L_NIL .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 170 (nil_constant -> L_NIL .)
    RW_TYPE         reduce using rule 170 (nil_constant -> L_NIL .)
    S_RETURN        reduce using rule 170 (nil_constant -> L_NIL .)
    RW_IF           reduce using rule 170 (nil_constant -> L_NIL .)
    RW_DEPEND       reduce using rule 170 (nil_constant -> L_NIL .)
    RW_WHILE        reduce using rule 170 (nil_constant -> L_NIL .)
    RW_ITERATE      reduce using rule 170 (nil_constant -> L_NIL .)
    RW_REPEAT       reduce using rule 170 (nil_constant -> L_NIL .)
    RW_INPUT        reduce using rule 170 (nil_constant -> L_NIL .)
    RW_OUTPUT       reduce using rule 170 (nil_constant -> L_NIL .)
    RW_THEN         reduce using rule 170 (nil_constant -> L_NIL .)
    RW_DO           reduce using rule 170 (nil_constant -> L_NIL .)
    INDENT          reduce using rule 170 (nil_constant -> L_NIL .)
    S_COLON         reduce using rule 170 (nil_constant -> L_NIL .)
    RW_CONSTANT     reduce using rule 170 (nil_constant -> L_NIL .)


state 73

    (225) math_function_call -> abs_function .

    S_UP_TO         reduce using rule 225 (math_function_call -> abs_function .)
    S_POWER         reduce using rule 225 (math_function_call -> abs_function .)
    S_TIMES         reduce using rule 225 (math_function_call -> abs_function .)
    S_DIVIDE        reduce using rule 225 (math_function_call -> abs_function .)
    RW_DIV          reduce using rule 225 (math_function_call -> abs_function .)
    RW_MOD          reduce using rule 225 (math_function_call -> abs_function .)
    RW_AND          reduce using rule 225 (math_function_call -> abs_function .)
    S_PLUS          reduce using rule 225 (math_function_call -> abs_function .)
    S_MINUS         reduce using rule 225 (math_function_call -> abs_function .)
    RW_OR           reduce using rule 225 (math_function_call -> abs_function .)
    RW_XOR          reduce using rule 225 (math_function_call -> abs_function .)
    S_EQUAL         reduce using rule 225 (math_function_call -> abs_function .)
    S_NOT_EQUAL     reduce using rule 225 (math_function_call -> abs_function .)
    S_LESS_THAN_EQUAL reduce using rule 225 (math_function_call -> abs_function .)
    S_GREATER_THAN_EQUAL reduce using rule 225 (math_function_call -> abs_function .)
    S_LESS_THAN     reduce using rule 225 (math_function_call -> abs_function .)
    S_GREATER_THAN  reduce using rule 225 (math_function_call -> abs_function .)
    S_ELEMENT_OF    reduce using rule 225 (math_function_call -> abs_function .)
    RW_EQ           reduce using rule 225 (math_function_call -> abs_function .)
    RW_NEQ          reduce using rule 225 (math_function_call -> abs_function .)
    S_RIGHT_BRACKET reduce using rule 225 (math_function_call -> abs_function .)
    S_COMMA         reduce using rule 225 (math_function_call -> abs_function .)
    RW_KAMUS        reduce using rule 225 (math_function_call -> abs_function .)
    RW_PROCEDURE    reduce using rule 225 (math_function_call -> abs_function .)
    RW_FUNCTION     reduce using rule 225 (math_function_call -> abs_function .)
    $end            reduce using rule 225 (math_function_call -> abs_function .)
    DEDENT          reduce using rule 225 (math_function_call -> abs_function .)
    S_SEMI_COLON    reduce using rule 225 (math_function_call -> abs_function .)
    IDENTIFIER      reduce using rule 225 (math_function_call -> abs_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 225 (math_function_call -> abs_function .)
    RW_TYPE         reduce using rule 225 (math_function_call -> abs_function .)
    S_RETURN        reduce using rule 225 (math_function_call -> abs_function .)
    RW_IF           reduce using rule 225 (math_function_call -> abs_function .)
    RW_DEPEND       reduce using rule 225 (math_function_call -> abs_function .)
    RW_WHILE        reduce using rule 225 (math_function_call -> abs_function .)
    RW_ITERATE      reduce using rule 225 (math_function_call -> abs_function .)
    RW_REPEAT       reduce using rule 225 (math_function_call -> abs_function .)
    RW_INPUT        reduce using rule 225 (math_function_call -> abs_function .)
    RW_OUTPUT       reduce using rule 225 (math_function_call -> abs_function .)
    RW_THEN         reduce using rule 225 (math_function_call -> abs_function .)
    RW_DO           reduce using rule 225 (math_function_call -> abs_function .)
    RW_TIMES        reduce using rule 225 (math_function_call -> abs_function .)
    INDENT          reduce using rule 225 (math_function_call -> abs_function .)
    S_COLON         reduce using rule 225 (math_function_call -> abs_function .)


state 74

    (226) math_function_call -> sin_function .

    S_UP_TO         reduce using rule 226 (math_function_call -> sin_function .)
    S_POWER         reduce using rule 226 (math_function_call -> sin_function .)
    S_TIMES         reduce using rule 226 (math_function_call -> sin_function .)
    S_DIVIDE        reduce using rule 226 (math_function_call -> sin_function .)
    RW_DIV          reduce using rule 226 (math_function_call -> sin_function .)
    RW_MOD          reduce using rule 226 (math_function_call -> sin_function .)
    RW_AND          reduce using rule 226 (math_function_call -> sin_function .)
    S_PLUS          reduce using rule 226 (math_function_call -> sin_function .)
    S_MINUS         reduce using rule 226 (math_function_call -> sin_function .)
    RW_OR           reduce using rule 226 (math_function_call -> sin_function .)
    RW_XOR          reduce using rule 226 (math_function_call -> sin_function .)
    S_EQUAL         reduce using rule 226 (math_function_call -> sin_function .)
    S_NOT_EQUAL     reduce using rule 226 (math_function_call -> sin_function .)
    S_LESS_THAN_EQUAL reduce using rule 226 (math_function_call -> sin_function .)
    S_GREATER_THAN_EQUAL reduce using rule 226 (math_function_call -> sin_function .)
    S_LESS_THAN     reduce using rule 226 (math_function_call -> sin_function .)
    S_GREATER_THAN  reduce using rule 226 (math_function_call -> sin_function .)
    S_ELEMENT_OF    reduce using rule 226 (math_function_call -> sin_function .)
    RW_EQ           reduce using rule 226 (math_function_call -> sin_function .)
    RW_NEQ          reduce using rule 226 (math_function_call -> sin_function .)
    S_RIGHT_BRACKET reduce using rule 226 (math_function_call -> sin_function .)
    S_COMMA         reduce using rule 226 (math_function_call -> sin_function .)
    RW_KAMUS        reduce using rule 226 (math_function_call -> sin_function .)
    RW_PROCEDURE    reduce using rule 226 (math_function_call -> sin_function .)
    RW_FUNCTION     reduce using rule 226 (math_function_call -> sin_function .)
    $end            reduce using rule 226 (math_function_call -> sin_function .)
    DEDENT          reduce using rule 226 (math_function_call -> sin_function .)
    S_SEMI_COLON    reduce using rule 226 (math_function_call -> sin_function .)
    IDENTIFIER      reduce using rule 226 (math_function_call -> sin_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 226 (math_function_call -> sin_function .)
    RW_TYPE         reduce using rule 226 (math_function_call -> sin_function .)
    S_RETURN        reduce using rule 226 (math_function_call -> sin_function .)
    RW_IF           reduce using rule 226 (math_function_call -> sin_function .)
    RW_DEPEND       reduce using rule 226 (math_function_call -> sin_function .)
    RW_WHILE        reduce using rule 226 (math_function_call -> sin_function .)
    RW_ITERATE      reduce using rule 226 (math_function_call -> sin_function .)
    RW_REPEAT       reduce using rule 226 (math_function_call -> sin_function .)
    RW_INPUT        reduce using rule 226 (math_function_call -> sin_function .)
    RW_OUTPUT       reduce using rule 226 (math_function_call -> sin_function .)
    RW_THEN         reduce using rule 226 (math_function_call -> sin_function .)
    RW_DO           reduce using rule 226 (math_function_call -> sin_function .)
    RW_TIMES        reduce using rule 226 (math_function_call -> sin_function .)
    INDENT          reduce using rule 226 (math_function_call -> sin_function .)
    S_COLON         reduce using rule 226 (math_function_call -> sin_function .)


state 75

    (227) math_function_call -> cos_function .

    S_UP_TO         reduce using rule 227 (math_function_call -> cos_function .)
    S_POWER         reduce using rule 227 (math_function_call -> cos_function .)
    S_TIMES         reduce using rule 227 (math_function_call -> cos_function .)
    S_DIVIDE        reduce using rule 227 (math_function_call -> cos_function .)
    RW_DIV          reduce using rule 227 (math_function_call -> cos_function .)
    RW_MOD          reduce using rule 227 (math_function_call -> cos_function .)
    RW_AND          reduce using rule 227 (math_function_call -> cos_function .)
    S_PLUS          reduce using rule 227 (math_function_call -> cos_function .)
    S_MINUS         reduce using rule 227 (math_function_call -> cos_function .)
    RW_OR           reduce using rule 227 (math_function_call -> cos_function .)
    RW_XOR          reduce using rule 227 (math_function_call -> cos_function .)
    S_EQUAL         reduce using rule 227 (math_function_call -> cos_function .)
    S_NOT_EQUAL     reduce using rule 227 (math_function_call -> cos_function .)
    S_LESS_THAN_EQUAL reduce using rule 227 (math_function_call -> cos_function .)
    S_GREATER_THAN_EQUAL reduce using rule 227 (math_function_call -> cos_function .)
    S_LESS_THAN     reduce using rule 227 (math_function_call -> cos_function .)
    S_GREATER_THAN  reduce using rule 227 (math_function_call -> cos_function .)
    S_ELEMENT_OF    reduce using rule 227 (math_function_call -> cos_function .)
    RW_EQ           reduce using rule 227 (math_function_call -> cos_function .)
    RW_NEQ          reduce using rule 227 (math_function_call -> cos_function .)
    S_RIGHT_BRACKET reduce using rule 227 (math_function_call -> cos_function .)
    S_COMMA         reduce using rule 227 (math_function_call -> cos_function .)
    RW_KAMUS        reduce using rule 227 (math_function_call -> cos_function .)
    RW_PROCEDURE    reduce using rule 227 (math_function_call -> cos_function .)
    RW_FUNCTION     reduce using rule 227 (math_function_call -> cos_function .)
    $end            reduce using rule 227 (math_function_call -> cos_function .)
    DEDENT          reduce using rule 227 (math_function_call -> cos_function .)
    S_SEMI_COLON    reduce using rule 227 (math_function_call -> cos_function .)
    IDENTIFIER      reduce using rule 227 (math_function_call -> cos_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 227 (math_function_call -> cos_function .)
    RW_TYPE         reduce using rule 227 (math_function_call -> cos_function .)
    S_RETURN        reduce using rule 227 (math_function_call -> cos_function .)
    RW_IF           reduce using rule 227 (math_function_call -> cos_function .)
    RW_DEPEND       reduce using rule 227 (math_function_call -> cos_function .)
    RW_WHILE        reduce using rule 227 (math_function_call -> cos_function .)
    RW_ITERATE      reduce using rule 227 (math_function_call -> cos_function .)
    RW_REPEAT       reduce using rule 227 (math_function_call -> cos_function .)
    RW_INPUT        reduce using rule 227 (math_function_call -> cos_function .)
    RW_OUTPUT       reduce using rule 227 (math_function_call -> cos_function .)
    RW_THEN         reduce using rule 227 (math_function_call -> cos_function .)
    RW_DO           reduce using rule 227 (math_function_call -> cos_function .)
    RW_TIMES        reduce using rule 227 (math_function_call -> cos_function .)
    INDENT          reduce using rule 227 (math_function_call -> cos_function .)
    S_COLON         reduce using rule 227 (math_function_call -> cos_function .)


state 76

    (228) math_function_call -> tan_function .

    S_UP_TO         reduce using rule 228 (math_function_call -> tan_function .)
    S_POWER         reduce using rule 228 (math_function_call -> tan_function .)
    S_TIMES         reduce using rule 228 (math_function_call -> tan_function .)
    S_DIVIDE        reduce using rule 228 (math_function_call -> tan_function .)
    RW_DIV          reduce using rule 228 (math_function_call -> tan_function .)
    RW_MOD          reduce using rule 228 (math_function_call -> tan_function .)
    RW_AND          reduce using rule 228 (math_function_call -> tan_function .)
    S_PLUS          reduce using rule 228 (math_function_call -> tan_function .)
    S_MINUS         reduce using rule 228 (math_function_call -> tan_function .)
    RW_OR           reduce using rule 228 (math_function_call -> tan_function .)
    RW_XOR          reduce using rule 228 (math_function_call -> tan_function .)
    S_EQUAL         reduce using rule 228 (math_function_call -> tan_function .)
    S_NOT_EQUAL     reduce using rule 228 (math_function_call -> tan_function .)
    S_LESS_THAN_EQUAL reduce using rule 228 (math_function_call -> tan_function .)
    S_GREATER_THAN_EQUAL reduce using rule 228 (math_function_call -> tan_function .)
    S_LESS_THAN     reduce using rule 228 (math_function_call -> tan_function .)
    S_GREATER_THAN  reduce using rule 228 (math_function_call -> tan_function .)
    S_ELEMENT_OF    reduce using rule 228 (math_function_call -> tan_function .)
    RW_EQ           reduce using rule 228 (math_function_call -> tan_function .)
    RW_NEQ          reduce using rule 228 (math_function_call -> tan_function .)
    S_RIGHT_BRACKET reduce using rule 228 (math_function_call -> tan_function .)
    S_COMMA         reduce using rule 228 (math_function_call -> tan_function .)
    RW_KAMUS        reduce using rule 228 (math_function_call -> tan_function .)
    RW_PROCEDURE    reduce using rule 228 (math_function_call -> tan_function .)
    RW_FUNCTION     reduce using rule 228 (math_function_call -> tan_function .)
    $end            reduce using rule 228 (math_function_call -> tan_function .)
    DEDENT          reduce using rule 228 (math_function_call -> tan_function .)
    S_SEMI_COLON    reduce using rule 228 (math_function_call -> tan_function .)
    IDENTIFIER      reduce using rule 228 (math_function_call -> tan_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 228 (math_function_call -> tan_function .)
    RW_TYPE         reduce using rule 228 (math_function_call -> tan_function .)
    S_RETURN        reduce using rule 228 (math_function_call -> tan_function .)
    RW_IF           reduce using rule 228 (math_function_call -> tan_function .)
    RW_DEPEND       reduce using rule 228 (math_function_call -> tan_function .)
    RW_WHILE        reduce using rule 228 (math_function_call -> tan_function .)
    RW_ITERATE      reduce using rule 228 (math_function_call -> tan_function .)
    RW_REPEAT       reduce using rule 228 (math_function_call -> tan_function .)
    RW_INPUT        reduce using rule 228 (math_function_call -> tan_function .)
    RW_OUTPUT       reduce using rule 228 (math_function_call -> tan_function .)
    RW_THEN         reduce using rule 228 (math_function_call -> tan_function .)
    RW_DO           reduce using rule 228 (math_function_call -> tan_function .)
    RW_TIMES        reduce using rule 228 (math_function_call -> tan_function .)
    INDENT          reduce using rule 228 (math_function_call -> tan_function .)
    S_COLON         reduce using rule 228 (math_function_call -> tan_function .)


state 77

    (229) math_function_call -> succ_function .

    S_UP_TO         reduce using rule 229 (math_function_call -> succ_function .)
    S_POWER         reduce using rule 229 (math_function_call -> succ_function .)
    S_TIMES         reduce using rule 229 (math_function_call -> succ_function .)
    S_DIVIDE        reduce using rule 229 (math_function_call -> succ_function .)
    RW_DIV          reduce using rule 229 (math_function_call -> succ_function .)
    RW_MOD          reduce using rule 229 (math_function_call -> succ_function .)
    RW_AND          reduce using rule 229 (math_function_call -> succ_function .)
    S_PLUS          reduce using rule 229 (math_function_call -> succ_function .)
    S_MINUS         reduce using rule 229 (math_function_call -> succ_function .)
    RW_OR           reduce using rule 229 (math_function_call -> succ_function .)
    RW_XOR          reduce using rule 229 (math_function_call -> succ_function .)
    S_EQUAL         reduce using rule 229 (math_function_call -> succ_function .)
    S_NOT_EQUAL     reduce using rule 229 (math_function_call -> succ_function .)
    S_LESS_THAN_EQUAL reduce using rule 229 (math_function_call -> succ_function .)
    S_GREATER_THAN_EQUAL reduce using rule 229 (math_function_call -> succ_function .)
    S_LESS_THAN     reduce using rule 229 (math_function_call -> succ_function .)
    S_GREATER_THAN  reduce using rule 229 (math_function_call -> succ_function .)
    S_ELEMENT_OF    reduce using rule 229 (math_function_call -> succ_function .)
    RW_EQ           reduce using rule 229 (math_function_call -> succ_function .)
    RW_NEQ          reduce using rule 229 (math_function_call -> succ_function .)
    S_RIGHT_BRACKET reduce using rule 229 (math_function_call -> succ_function .)
    S_COMMA         reduce using rule 229 (math_function_call -> succ_function .)
    RW_KAMUS        reduce using rule 229 (math_function_call -> succ_function .)
    RW_PROCEDURE    reduce using rule 229 (math_function_call -> succ_function .)
    RW_FUNCTION     reduce using rule 229 (math_function_call -> succ_function .)
    $end            reduce using rule 229 (math_function_call -> succ_function .)
    DEDENT          reduce using rule 229 (math_function_call -> succ_function .)
    S_SEMI_COLON    reduce using rule 229 (math_function_call -> succ_function .)
    IDENTIFIER      reduce using rule 229 (math_function_call -> succ_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 229 (math_function_call -> succ_function .)
    RW_TYPE         reduce using rule 229 (math_function_call -> succ_function .)
    S_RETURN        reduce using rule 229 (math_function_call -> succ_function .)
    RW_IF           reduce using rule 229 (math_function_call -> succ_function .)
    RW_DEPEND       reduce using rule 229 (math_function_call -> succ_function .)
    RW_WHILE        reduce using rule 229 (math_function_call -> succ_function .)
    RW_ITERATE      reduce using rule 229 (math_function_call -> succ_function .)
    RW_REPEAT       reduce using rule 229 (math_function_call -> succ_function .)
    RW_INPUT        reduce using rule 229 (math_function_call -> succ_function .)
    RW_OUTPUT       reduce using rule 229 (math_function_call -> succ_function .)
    RW_THEN         reduce using rule 229 (math_function_call -> succ_function .)
    RW_DO           reduce using rule 229 (math_function_call -> succ_function .)
    RW_TIMES        reduce using rule 229 (math_function_call -> succ_function .)
    INDENT          reduce using rule 229 (math_function_call -> succ_function .)
    S_COLON         reduce using rule 229 (math_function_call -> succ_function .)


state 78

    (230) math_function_call -> pred_function .

    S_UP_TO         reduce using rule 230 (math_function_call -> pred_function .)
    S_POWER         reduce using rule 230 (math_function_call -> pred_function .)
    S_TIMES         reduce using rule 230 (math_function_call -> pred_function .)
    S_DIVIDE        reduce using rule 230 (math_function_call -> pred_function .)
    RW_DIV          reduce using rule 230 (math_function_call -> pred_function .)
    RW_MOD          reduce using rule 230 (math_function_call -> pred_function .)
    RW_AND          reduce using rule 230 (math_function_call -> pred_function .)
    S_PLUS          reduce using rule 230 (math_function_call -> pred_function .)
    S_MINUS         reduce using rule 230 (math_function_call -> pred_function .)
    RW_OR           reduce using rule 230 (math_function_call -> pred_function .)
    RW_XOR          reduce using rule 230 (math_function_call -> pred_function .)
    S_EQUAL         reduce using rule 230 (math_function_call -> pred_function .)
    S_NOT_EQUAL     reduce using rule 230 (math_function_call -> pred_function .)
    S_LESS_THAN_EQUAL reduce using rule 230 (math_function_call -> pred_function .)
    S_GREATER_THAN_EQUAL reduce using rule 230 (math_function_call -> pred_function .)
    S_LESS_THAN     reduce using rule 230 (math_function_call -> pred_function .)
    S_GREATER_THAN  reduce using rule 230 (math_function_call -> pred_function .)
    S_ELEMENT_OF    reduce using rule 230 (math_function_call -> pred_function .)
    RW_EQ           reduce using rule 230 (math_function_call -> pred_function .)
    RW_NEQ          reduce using rule 230 (math_function_call -> pred_function .)
    S_RIGHT_BRACKET reduce using rule 230 (math_function_call -> pred_function .)
    S_COMMA         reduce using rule 230 (math_function_call -> pred_function .)
    RW_KAMUS        reduce using rule 230 (math_function_call -> pred_function .)
    RW_PROCEDURE    reduce using rule 230 (math_function_call -> pred_function .)
    RW_FUNCTION     reduce using rule 230 (math_function_call -> pred_function .)
    $end            reduce using rule 230 (math_function_call -> pred_function .)
    DEDENT          reduce using rule 230 (math_function_call -> pred_function .)
    S_SEMI_COLON    reduce using rule 230 (math_function_call -> pred_function .)
    IDENTIFIER      reduce using rule 230 (math_function_call -> pred_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 230 (math_function_call -> pred_function .)
    RW_TYPE         reduce using rule 230 (math_function_call -> pred_function .)
    S_RETURN        reduce using rule 230 (math_function_call -> pred_function .)
    RW_IF           reduce using rule 230 (math_function_call -> pred_function .)
    RW_DEPEND       reduce using rule 230 (math_function_call -> pred_function .)
    RW_WHILE        reduce using rule 230 (math_function_call -> pred_function .)
    RW_ITERATE      reduce using rule 230 (math_function_call -> pred_function .)
    RW_REPEAT       reduce using rule 230 (math_function_call -> pred_function .)
    RW_INPUT        reduce using rule 230 (math_function_call -> pred_function .)
    RW_OUTPUT       reduce using rule 230 (math_function_call -> pred_function .)
    RW_THEN         reduce using rule 230 (math_function_call -> pred_function .)
    RW_DO           reduce using rule 230 (math_function_call -> pred_function .)
    RW_TIMES        reduce using rule 230 (math_function_call -> pred_function .)
    INDENT          reduce using rule 230 (math_function_call -> pred_function .)
    S_COLON         reduce using rule 230 (math_function_call -> pred_function .)


state 79

    (237) string_function_call -> awal_function .

    S_UP_TO         reduce using rule 237 (string_function_call -> awal_function .)
    S_POWER         reduce using rule 237 (string_function_call -> awal_function .)
    S_TIMES         reduce using rule 237 (string_function_call -> awal_function .)
    S_DIVIDE        reduce using rule 237 (string_function_call -> awal_function .)
    RW_DIV          reduce using rule 237 (string_function_call -> awal_function .)
    RW_MOD          reduce using rule 237 (string_function_call -> awal_function .)
    RW_AND          reduce using rule 237 (string_function_call -> awal_function .)
    S_PLUS          reduce using rule 237 (string_function_call -> awal_function .)
    S_MINUS         reduce using rule 237 (string_function_call -> awal_function .)
    RW_OR           reduce using rule 237 (string_function_call -> awal_function .)
    RW_XOR          reduce using rule 237 (string_function_call -> awal_function .)
    S_EQUAL         reduce using rule 237 (string_function_call -> awal_function .)
    S_NOT_EQUAL     reduce using rule 237 (string_function_call -> awal_function .)
    S_LESS_THAN_EQUAL reduce using rule 237 (string_function_call -> awal_function .)
    S_GREATER_THAN_EQUAL reduce using rule 237 (string_function_call -> awal_function .)
    S_LESS_THAN     reduce using rule 237 (string_function_call -> awal_function .)
    S_GREATER_THAN  reduce using rule 237 (string_function_call -> awal_function .)
    S_ELEMENT_OF    reduce using rule 237 (string_function_call -> awal_function .)
    RW_EQ           reduce using rule 237 (string_function_call -> awal_function .)
    RW_NEQ          reduce using rule 237 (string_function_call -> awal_function .)
    S_RIGHT_BRACKET reduce using rule 237 (string_function_call -> awal_function .)
    S_COMMA         reduce using rule 237 (string_function_call -> awal_function .)
    RW_KAMUS        reduce using rule 237 (string_function_call -> awal_function .)
    RW_PROCEDURE    reduce using rule 237 (string_function_call -> awal_function .)
    RW_FUNCTION     reduce using rule 237 (string_function_call -> awal_function .)
    $end            reduce using rule 237 (string_function_call -> awal_function .)
    DEDENT          reduce using rule 237 (string_function_call -> awal_function .)
    S_SEMI_COLON    reduce using rule 237 (string_function_call -> awal_function .)
    IDENTIFIER      reduce using rule 237 (string_function_call -> awal_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 237 (string_function_call -> awal_function .)
    RW_TYPE         reduce using rule 237 (string_function_call -> awal_function .)
    S_RETURN        reduce using rule 237 (string_function_call -> awal_function .)
    RW_IF           reduce using rule 237 (string_function_call -> awal_function .)
    RW_DEPEND       reduce using rule 237 (string_function_call -> awal_function .)
    RW_WHILE        reduce using rule 237 (string_function_call -> awal_function .)
    RW_ITERATE      reduce using rule 237 (string_function_call -> awal_function .)
    RW_REPEAT       reduce using rule 237 (string_function_call -> awal_function .)
    RW_INPUT        reduce using rule 237 (string_function_call -> awal_function .)
    RW_OUTPUT       reduce using rule 237 (string_function_call -> awal_function .)
    RW_THEN         reduce using rule 237 (string_function_call -> awal_function .)
    RW_DO           reduce using rule 237 (string_function_call -> awal_function .)
    RW_TIMES        reduce using rule 237 (string_function_call -> awal_function .)
    INDENT          reduce using rule 237 (string_function_call -> awal_function .)
    S_COLON         reduce using rule 237 (string_function_call -> awal_function .)


state 80

    (238) string_function_call -> akhir_function .

    S_UP_TO         reduce using rule 238 (string_function_call -> akhir_function .)
    S_POWER         reduce using rule 238 (string_function_call -> akhir_function .)
    S_TIMES         reduce using rule 238 (string_function_call -> akhir_function .)
    S_DIVIDE        reduce using rule 238 (string_function_call -> akhir_function .)
    RW_DIV          reduce using rule 238 (string_function_call -> akhir_function .)
    RW_MOD          reduce using rule 238 (string_function_call -> akhir_function .)
    RW_AND          reduce using rule 238 (string_function_call -> akhir_function .)
    S_PLUS          reduce using rule 238 (string_function_call -> akhir_function .)
    S_MINUS         reduce using rule 238 (string_function_call -> akhir_function .)
    RW_OR           reduce using rule 238 (string_function_call -> akhir_function .)
    RW_XOR          reduce using rule 238 (string_function_call -> akhir_function .)
    S_EQUAL         reduce using rule 238 (string_function_call -> akhir_function .)
    S_NOT_EQUAL     reduce using rule 238 (string_function_call -> akhir_function .)
    S_LESS_THAN_EQUAL reduce using rule 238 (string_function_call -> akhir_function .)
    S_GREATER_THAN_EQUAL reduce using rule 238 (string_function_call -> akhir_function .)
    S_LESS_THAN     reduce using rule 238 (string_function_call -> akhir_function .)
    S_GREATER_THAN  reduce using rule 238 (string_function_call -> akhir_function .)
    S_ELEMENT_OF    reduce using rule 238 (string_function_call -> akhir_function .)
    RW_EQ           reduce using rule 238 (string_function_call -> akhir_function .)
    RW_NEQ          reduce using rule 238 (string_function_call -> akhir_function .)
    S_RIGHT_BRACKET reduce using rule 238 (string_function_call -> akhir_function .)
    S_COMMA         reduce using rule 238 (string_function_call -> akhir_function .)
    RW_KAMUS        reduce using rule 238 (string_function_call -> akhir_function .)
    RW_PROCEDURE    reduce using rule 238 (string_function_call -> akhir_function .)
    RW_FUNCTION     reduce using rule 238 (string_function_call -> akhir_function .)
    $end            reduce using rule 238 (string_function_call -> akhir_function .)
    DEDENT          reduce using rule 238 (string_function_call -> akhir_function .)
    S_SEMI_COLON    reduce using rule 238 (string_function_call -> akhir_function .)
    IDENTIFIER      reduce using rule 238 (string_function_call -> akhir_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 238 (string_function_call -> akhir_function .)
    RW_TYPE         reduce using rule 238 (string_function_call -> akhir_function .)
    S_RETURN        reduce using rule 238 (string_function_call -> akhir_function .)
    RW_IF           reduce using rule 238 (string_function_call -> akhir_function .)
    RW_DEPEND       reduce using rule 238 (string_function_call -> akhir_function .)
    RW_WHILE        reduce using rule 238 (string_function_call -> akhir_function .)
    RW_ITERATE      reduce using rule 238 (string_function_call -> akhir_function .)
    RW_REPEAT       reduce using rule 238 (string_function_call -> akhir_function .)
    RW_INPUT        reduce using rule 238 (string_function_call -> akhir_function .)
    RW_OUTPUT       reduce using rule 238 (string_function_call -> akhir_function .)
    RW_THEN         reduce using rule 238 (string_function_call -> akhir_function .)
    RW_DO           reduce using rule 238 (string_function_call -> akhir_function .)
    RW_TIMES        reduce using rule 238 (string_function_call -> akhir_function .)
    INDENT          reduce using rule 238 (string_function_call -> akhir_function .)
    S_COLON         reduce using rule 238 (string_function_call -> akhir_function .)


state 81

    (239) string_function_call -> firstchar_function .

    S_UP_TO         reduce using rule 239 (string_function_call -> firstchar_function .)
    S_POWER         reduce using rule 239 (string_function_call -> firstchar_function .)
    S_TIMES         reduce using rule 239 (string_function_call -> firstchar_function .)
    S_DIVIDE        reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_DIV          reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_MOD          reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_AND          reduce using rule 239 (string_function_call -> firstchar_function .)
    S_PLUS          reduce using rule 239 (string_function_call -> firstchar_function .)
    S_MINUS         reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_OR           reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_XOR          reduce using rule 239 (string_function_call -> firstchar_function .)
    S_EQUAL         reduce using rule 239 (string_function_call -> firstchar_function .)
    S_NOT_EQUAL     reduce using rule 239 (string_function_call -> firstchar_function .)
    S_LESS_THAN_EQUAL reduce using rule 239 (string_function_call -> firstchar_function .)
    S_GREATER_THAN_EQUAL reduce using rule 239 (string_function_call -> firstchar_function .)
    S_LESS_THAN     reduce using rule 239 (string_function_call -> firstchar_function .)
    S_GREATER_THAN  reduce using rule 239 (string_function_call -> firstchar_function .)
    S_ELEMENT_OF    reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_EQ           reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_NEQ          reduce using rule 239 (string_function_call -> firstchar_function .)
    S_RIGHT_BRACKET reduce using rule 239 (string_function_call -> firstchar_function .)
    S_COMMA         reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_KAMUS        reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_PROCEDURE    reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_FUNCTION     reduce using rule 239 (string_function_call -> firstchar_function .)
    $end            reduce using rule 239 (string_function_call -> firstchar_function .)
    DEDENT          reduce using rule 239 (string_function_call -> firstchar_function .)
    S_SEMI_COLON    reduce using rule 239 (string_function_call -> firstchar_function .)
    IDENTIFIER      reduce using rule 239 (string_function_call -> firstchar_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_TYPE         reduce using rule 239 (string_function_call -> firstchar_function .)
    S_RETURN        reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_IF           reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_DEPEND       reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_WHILE        reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_ITERATE      reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_REPEAT       reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_INPUT        reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_OUTPUT       reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_THEN         reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_DO           reduce using rule 239 (string_function_call -> firstchar_function .)
    RW_TIMES        reduce using rule 239 (string_function_call -> firstchar_function .)
    INDENT          reduce using rule 239 (string_function_call -> firstchar_function .)
    S_COLON         reduce using rule 239 (string_function_call -> firstchar_function .)


state 82

    (240) string_function_call -> lastchar_function .

    S_UP_TO         reduce using rule 240 (string_function_call -> lastchar_function .)
    S_POWER         reduce using rule 240 (string_function_call -> lastchar_function .)
    S_TIMES         reduce using rule 240 (string_function_call -> lastchar_function .)
    S_DIVIDE        reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_DIV          reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_MOD          reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_AND          reduce using rule 240 (string_function_call -> lastchar_function .)
    S_PLUS          reduce using rule 240 (string_function_call -> lastchar_function .)
    S_MINUS         reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_OR           reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_XOR          reduce using rule 240 (string_function_call -> lastchar_function .)
    S_EQUAL         reduce using rule 240 (string_function_call -> lastchar_function .)
    S_NOT_EQUAL     reduce using rule 240 (string_function_call -> lastchar_function .)
    S_LESS_THAN_EQUAL reduce using rule 240 (string_function_call -> lastchar_function .)
    S_GREATER_THAN_EQUAL reduce using rule 240 (string_function_call -> lastchar_function .)
    S_LESS_THAN     reduce using rule 240 (string_function_call -> lastchar_function .)
    S_GREATER_THAN  reduce using rule 240 (string_function_call -> lastchar_function .)
    S_ELEMENT_OF    reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_EQ           reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_NEQ          reduce using rule 240 (string_function_call -> lastchar_function .)
    S_RIGHT_BRACKET reduce using rule 240 (string_function_call -> lastchar_function .)
    S_COMMA         reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_KAMUS        reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_PROCEDURE    reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_FUNCTION     reduce using rule 240 (string_function_call -> lastchar_function .)
    $end            reduce using rule 240 (string_function_call -> lastchar_function .)
    DEDENT          reduce using rule 240 (string_function_call -> lastchar_function .)
    S_SEMI_COLON    reduce using rule 240 (string_function_call -> lastchar_function .)
    IDENTIFIER      reduce using rule 240 (string_function_call -> lastchar_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_TYPE         reduce using rule 240 (string_function_call -> lastchar_function .)
    S_RETURN        reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_IF           reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_DEPEND       reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_WHILE        reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_ITERATE      reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_REPEAT       reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_INPUT        reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_OUTPUT       reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_THEN         reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_DO           reduce using rule 240 (string_function_call -> lastchar_function .)
    RW_TIMES        reduce using rule 240 (string_function_call -> lastchar_function .)
    INDENT          reduce using rule 240 (string_function_call -> lastchar_function .)
    S_COLON         reduce using rule 240 (string_function_call -> lastchar_function .)


state 83

    (241) string_function_call -> long_function .

    S_UP_TO         reduce using rule 241 (string_function_call -> long_function .)
    S_POWER         reduce using rule 241 (string_function_call -> long_function .)
    S_TIMES         reduce using rule 241 (string_function_call -> long_function .)
    S_DIVIDE        reduce using rule 241 (string_function_call -> long_function .)
    RW_DIV          reduce using rule 241 (string_function_call -> long_function .)
    RW_MOD          reduce using rule 241 (string_function_call -> long_function .)
    RW_AND          reduce using rule 241 (string_function_call -> long_function .)
    S_PLUS          reduce using rule 241 (string_function_call -> long_function .)
    S_MINUS         reduce using rule 241 (string_function_call -> long_function .)
    RW_OR           reduce using rule 241 (string_function_call -> long_function .)
    RW_XOR          reduce using rule 241 (string_function_call -> long_function .)
    S_EQUAL         reduce using rule 241 (string_function_call -> long_function .)
    S_NOT_EQUAL     reduce using rule 241 (string_function_call -> long_function .)
    S_LESS_THAN_EQUAL reduce using rule 241 (string_function_call -> long_function .)
    S_GREATER_THAN_EQUAL reduce using rule 241 (string_function_call -> long_function .)
    S_LESS_THAN     reduce using rule 241 (string_function_call -> long_function .)
    S_GREATER_THAN  reduce using rule 241 (string_function_call -> long_function .)
    S_ELEMENT_OF    reduce using rule 241 (string_function_call -> long_function .)
    RW_EQ           reduce using rule 241 (string_function_call -> long_function .)
    RW_NEQ          reduce using rule 241 (string_function_call -> long_function .)
    S_RIGHT_BRACKET reduce using rule 241 (string_function_call -> long_function .)
    S_COMMA         reduce using rule 241 (string_function_call -> long_function .)
    RW_KAMUS        reduce using rule 241 (string_function_call -> long_function .)
    RW_PROCEDURE    reduce using rule 241 (string_function_call -> long_function .)
    RW_FUNCTION     reduce using rule 241 (string_function_call -> long_function .)
    $end            reduce using rule 241 (string_function_call -> long_function .)
    DEDENT          reduce using rule 241 (string_function_call -> long_function .)
    S_SEMI_COLON    reduce using rule 241 (string_function_call -> long_function .)
    IDENTIFIER      reduce using rule 241 (string_function_call -> long_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 241 (string_function_call -> long_function .)
    RW_TYPE         reduce using rule 241 (string_function_call -> long_function .)
    S_RETURN        reduce using rule 241 (string_function_call -> long_function .)
    RW_IF           reduce using rule 241 (string_function_call -> long_function .)
    RW_DEPEND       reduce using rule 241 (string_function_call -> long_function .)
    RW_WHILE        reduce using rule 241 (string_function_call -> long_function .)
    RW_ITERATE      reduce using rule 241 (string_function_call -> long_function .)
    RW_REPEAT       reduce using rule 241 (string_function_call -> long_function .)
    RW_INPUT        reduce using rule 241 (string_function_call -> long_function .)
    RW_OUTPUT       reduce using rule 241 (string_function_call -> long_function .)
    RW_THEN         reduce using rule 241 (string_function_call -> long_function .)
    RW_DO           reduce using rule 241 (string_function_call -> long_function .)
    RW_TIMES        reduce using rule 241 (string_function_call -> long_function .)
    INDENT          reduce using rule 241 (string_function_call -> long_function .)
    S_COLON         reduce using rule 241 (string_function_call -> long_function .)


state 84

    (242) string_function_call -> iskosong_function .

    S_UP_TO         reduce using rule 242 (string_function_call -> iskosong_function .)
    S_POWER         reduce using rule 242 (string_function_call -> iskosong_function .)
    S_TIMES         reduce using rule 242 (string_function_call -> iskosong_function .)
    S_DIVIDE        reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_DIV          reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_MOD          reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_AND          reduce using rule 242 (string_function_call -> iskosong_function .)
    S_PLUS          reduce using rule 242 (string_function_call -> iskosong_function .)
    S_MINUS         reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_OR           reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_XOR          reduce using rule 242 (string_function_call -> iskosong_function .)
    S_EQUAL         reduce using rule 242 (string_function_call -> iskosong_function .)
    S_NOT_EQUAL     reduce using rule 242 (string_function_call -> iskosong_function .)
    S_LESS_THAN_EQUAL reduce using rule 242 (string_function_call -> iskosong_function .)
    S_GREATER_THAN_EQUAL reduce using rule 242 (string_function_call -> iskosong_function .)
    S_LESS_THAN     reduce using rule 242 (string_function_call -> iskosong_function .)
    S_GREATER_THAN  reduce using rule 242 (string_function_call -> iskosong_function .)
    S_ELEMENT_OF    reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_EQ           reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_NEQ          reduce using rule 242 (string_function_call -> iskosong_function .)
    S_RIGHT_BRACKET reduce using rule 242 (string_function_call -> iskosong_function .)
    S_COMMA         reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_KAMUS        reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_PROCEDURE    reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_FUNCTION     reduce using rule 242 (string_function_call -> iskosong_function .)
    $end            reduce using rule 242 (string_function_call -> iskosong_function .)
    DEDENT          reduce using rule 242 (string_function_call -> iskosong_function .)
    S_SEMI_COLON    reduce using rule 242 (string_function_call -> iskosong_function .)
    IDENTIFIER      reduce using rule 242 (string_function_call -> iskosong_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_TYPE         reduce using rule 242 (string_function_call -> iskosong_function .)
    S_RETURN        reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_IF           reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_DEPEND       reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_WHILE        reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_ITERATE      reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_REPEAT       reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_INPUT        reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_OUTPUT       reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_THEN         reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_DO           reduce using rule 242 (string_function_call -> iskosong_function .)
    RW_TIMES        reduce using rule 242 (string_function_call -> iskosong_function .)
    INDENT          reduce using rule 242 (string_function_call -> iskosong_function .)
    S_COLON         reduce using rule 242 (string_function_call -> iskosong_function .)


state 85

    (249) converter_function_call -> integer_to_real .

    S_UP_TO         reduce using rule 249 (converter_function_call -> integer_to_real .)
    S_POWER         reduce using rule 249 (converter_function_call -> integer_to_real .)
    S_TIMES         reduce using rule 249 (converter_function_call -> integer_to_real .)
    S_DIVIDE        reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_DIV          reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_MOD          reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_AND          reduce using rule 249 (converter_function_call -> integer_to_real .)
    S_PLUS          reduce using rule 249 (converter_function_call -> integer_to_real .)
    S_MINUS         reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_OR           reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_XOR          reduce using rule 249 (converter_function_call -> integer_to_real .)
    S_EQUAL         reduce using rule 249 (converter_function_call -> integer_to_real .)
    S_NOT_EQUAL     reduce using rule 249 (converter_function_call -> integer_to_real .)
    S_LESS_THAN_EQUAL reduce using rule 249 (converter_function_call -> integer_to_real .)
    S_GREATER_THAN_EQUAL reduce using rule 249 (converter_function_call -> integer_to_real .)
    S_LESS_THAN     reduce using rule 249 (converter_function_call -> integer_to_real .)
    S_GREATER_THAN  reduce using rule 249 (converter_function_call -> integer_to_real .)
    S_ELEMENT_OF    reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_EQ           reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_NEQ          reduce using rule 249 (converter_function_call -> integer_to_real .)
    S_RIGHT_BRACKET reduce using rule 249 (converter_function_call -> integer_to_real .)
    S_COMMA         reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_KAMUS        reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_PROCEDURE    reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_FUNCTION     reduce using rule 249 (converter_function_call -> integer_to_real .)
    $end            reduce using rule 249 (converter_function_call -> integer_to_real .)
    DEDENT          reduce using rule 249 (converter_function_call -> integer_to_real .)
    S_SEMI_COLON    reduce using rule 249 (converter_function_call -> integer_to_real .)
    IDENTIFIER      reduce using rule 249 (converter_function_call -> integer_to_real .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_TYPE         reduce using rule 249 (converter_function_call -> integer_to_real .)
    S_RETURN        reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_IF           reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_DEPEND       reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_WHILE        reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_ITERATE      reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_REPEAT       reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_INPUT        reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_OUTPUT       reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_THEN         reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_DO           reduce using rule 249 (converter_function_call -> integer_to_real .)
    RW_TIMES        reduce using rule 249 (converter_function_call -> integer_to_real .)
    INDENT          reduce using rule 249 (converter_function_call -> integer_to_real .)
    S_COLON         reduce using rule 249 (converter_function_call -> integer_to_real .)


state 86

    (250) converter_function_call -> real_to_integer .

    S_UP_TO         reduce using rule 250 (converter_function_call -> real_to_integer .)
    S_POWER         reduce using rule 250 (converter_function_call -> real_to_integer .)
    S_TIMES         reduce using rule 250 (converter_function_call -> real_to_integer .)
    S_DIVIDE        reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_DIV          reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_MOD          reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_AND          reduce using rule 250 (converter_function_call -> real_to_integer .)
    S_PLUS          reduce using rule 250 (converter_function_call -> real_to_integer .)
    S_MINUS         reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_OR           reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_XOR          reduce using rule 250 (converter_function_call -> real_to_integer .)
    S_EQUAL         reduce using rule 250 (converter_function_call -> real_to_integer .)
    S_NOT_EQUAL     reduce using rule 250 (converter_function_call -> real_to_integer .)
    S_LESS_THAN_EQUAL reduce using rule 250 (converter_function_call -> real_to_integer .)
    S_GREATER_THAN_EQUAL reduce using rule 250 (converter_function_call -> real_to_integer .)
    S_LESS_THAN     reduce using rule 250 (converter_function_call -> real_to_integer .)
    S_GREATER_THAN  reduce using rule 250 (converter_function_call -> real_to_integer .)
    S_ELEMENT_OF    reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_EQ           reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_NEQ          reduce using rule 250 (converter_function_call -> real_to_integer .)
    S_RIGHT_BRACKET reduce using rule 250 (converter_function_call -> real_to_integer .)
    S_COMMA         reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_KAMUS        reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_PROCEDURE    reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_FUNCTION     reduce using rule 250 (converter_function_call -> real_to_integer .)
    $end            reduce using rule 250 (converter_function_call -> real_to_integer .)
    DEDENT          reduce using rule 250 (converter_function_call -> real_to_integer .)
    S_SEMI_COLON    reduce using rule 250 (converter_function_call -> real_to_integer .)
    IDENTIFIER      reduce using rule 250 (converter_function_call -> real_to_integer .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_TYPE         reduce using rule 250 (converter_function_call -> real_to_integer .)
    S_RETURN        reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_IF           reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_DEPEND       reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_WHILE        reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_ITERATE      reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_REPEAT       reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_INPUT        reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_OUTPUT       reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_THEN         reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_DO           reduce using rule 250 (converter_function_call -> real_to_integer .)
    RW_TIMES        reduce using rule 250 (converter_function_call -> real_to_integer .)
    INDENT          reduce using rule 250 (converter_function_call -> real_to_integer .)
    S_COLON         reduce using rule 250 (converter_function_call -> real_to_integer .)


state 87

    (168) string_constant -> L_STRING .

    S_UP_TO         reduce using rule 168 (string_constant -> L_STRING .)
    S_POWER         reduce using rule 168 (string_constant -> L_STRING .)
    S_TIMES         reduce using rule 168 (string_constant -> L_STRING .)
    S_DIVIDE        reduce using rule 168 (string_constant -> L_STRING .)
    RW_DIV          reduce using rule 168 (string_constant -> L_STRING .)
    RW_MOD          reduce using rule 168 (string_constant -> L_STRING .)
    RW_AND          reduce using rule 168 (string_constant -> L_STRING .)
    S_PLUS          reduce using rule 168 (string_constant -> L_STRING .)
    S_MINUS         reduce using rule 168 (string_constant -> L_STRING .)
    RW_OR           reduce using rule 168 (string_constant -> L_STRING .)
    RW_XOR          reduce using rule 168 (string_constant -> L_STRING .)
    S_EQUAL         reduce using rule 168 (string_constant -> L_STRING .)
    S_NOT_EQUAL     reduce using rule 168 (string_constant -> L_STRING .)
    S_LESS_THAN_EQUAL reduce using rule 168 (string_constant -> L_STRING .)
    S_GREATER_THAN_EQUAL reduce using rule 168 (string_constant -> L_STRING .)
    S_LESS_THAN     reduce using rule 168 (string_constant -> L_STRING .)
    S_GREATER_THAN  reduce using rule 168 (string_constant -> L_STRING .)
    S_ELEMENT_OF    reduce using rule 168 (string_constant -> L_STRING .)
    RW_EQ           reduce using rule 168 (string_constant -> L_STRING .)
    RW_NEQ          reduce using rule 168 (string_constant -> L_STRING .)
    S_RIGHT_BRACKET reduce using rule 168 (string_constant -> L_STRING .)
    S_COMMA         reduce using rule 168 (string_constant -> L_STRING .)
    RW_KAMUS        reduce using rule 168 (string_constant -> L_STRING .)
    RW_PROCEDURE    reduce using rule 168 (string_constant -> L_STRING .)
    RW_FUNCTION     reduce using rule 168 (string_constant -> L_STRING .)
    $end            reduce using rule 168 (string_constant -> L_STRING .)
    DEDENT          reduce using rule 168 (string_constant -> L_STRING .)
    S_SEMI_COLON    reduce using rule 168 (string_constant -> L_STRING .)
    IDENTIFIER      reduce using rule 168 (string_constant -> L_STRING .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 168 (string_constant -> L_STRING .)
    RW_TYPE         reduce using rule 168 (string_constant -> L_STRING .)
    S_RETURN        reduce using rule 168 (string_constant -> L_STRING .)
    RW_IF           reduce using rule 168 (string_constant -> L_STRING .)
    RW_DEPEND       reduce using rule 168 (string_constant -> L_STRING .)
    RW_WHILE        reduce using rule 168 (string_constant -> L_STRING .)
    RW_ITERATE      reduce using rule 168 (string_constant -> L_STRING .)
    RW_REPEAT       reduce using rule 168 (string_constant -> L_STRING .)
    RW_INPUT        reduce using rule 168 (string_constant -> L_STRING .)
    RW_OUTPUT       reduce using rule 168 (string_constant -> L_STRING .)
    RW_THEN         reduce using rule 168 (string_constant -> L_STRING .)
    RW_DO           reduce using rule 168 (string_constant -> L_STRING .)
    INDENT          reduce using rule 168 (string_constant -> L_STRING .)
    S_COLON         reduce using rule 168 (string_constant -> L_STRING .)
    RW_CONSTANT     reduce using rule 168 (string_constant -> L_STRING .)


state 88

    (169) char_constant -> L_CHARACTER .

    S_UP_TO         reduce using rule 169 (char_constant -> L_CHARACTER .)
    S_POWER         reduce using rule 169 (char_constant -> L_CHARACTER .)
    S_TIMES         reduce using rule 169 (char_constant -> L_CHARACTER .)
    S_DIVIDE        reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_DIV          reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_MOD          reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_AND          reduce using rule 169 (char_constant -> L_CHARACTER .)
    S_PLUS          reduce using rule 169 (char_constant -> L_CHARACTER .)
    S_MINUS         reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_OR           reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_XOR          reduce using rule 169 (char_constant -> L_CHARACTER .)
    S_EQUAL         reduce using rule 169 (char_constant -> L_CHARACTER .)
    S_NOT_EQUAL     reduce using rule 169 (char_constant -> L_CHARACTER .)
    S_LESS_THAN_EQUAL reduce using rule 169 (char_constant -> L_CHARACTER .)
    S_GREATER_THAN_EQUAL reduce using rule 169 (char_constant -> L_CHARACTER .)
    S_LESS_THAN     reduce using rule 169 (char_constant -> L_CHARACTER .)
    S_GREATER_THAN  reduce using rule 169 (char_constant -> L_CHARACTER .)
    S_ELEMENT_OF    reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_EQ           reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_NEQ          reduce using rule 169 (char_constant -> L_CHARACTER .)
    S_RIGHT_BRACKET reduce using rule 169 (char_constant -> L_CHARACTER .)
    S_COMMA         reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_KAMUS        reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_PROCEDURE    reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_FUNCTION     reduce using rule 169 (char_constant -> L_CHARACTER .)
    $end            reduce using rule 169 (char_constant -> L_CHARACTER .)
    DEDENT          reduce using rule 169 (char_constant -> L_CHARACTER .)
    S_SEMI_COLON    reduce using rule 169 (char_constant -> L_CHARACTER .)
    IDENTIFIER      reduce using rule 169 (char_constant -> L_CHARACTER .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_TYPE         reduce using rule 169 (char_constant -> L_CHARACTER .)
    S_RETURN        reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_IF           reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_DEPEND       reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_WHILE        reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_ITERATE      reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_REPEAT       reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_INPUT        reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_OUTPUT       reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_THEN         reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_DO           reduce using rule 169 (char_constant -> L_CHARACTER .)
    INDENT          reduce using rule 169 (char_constant -> L_CHARACTER .)
    S_COLON         reduce using rule 169 (char_constant -> L_CHARACTER .)
    RW_CONSTANT     reduce using rule 169 (char_constant -> L_CHARACTER .)


state 89

    (164) integer_constant -> L_INTEGER_NUMBER .

    S_UP_TO         reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_KAMUS        reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_PROCEDURE    reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_FUNCTION     reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    $end            reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    DEDENT          reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    S_SEMI_COLON    reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    S_COMMA         reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    S_RIGHT_BRACKET reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    IDENTIFIER      reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    S_GREATER_THAN  reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    S_EQUAL         reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_TYPE         reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_CONSTANT     reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    S_POWER         reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    S_TIMES         reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    S_DIVIDE        reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_DIV          reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_MOD          reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_AND          reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    S_PLUS          reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    S_MINUS         reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_OR           reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_XOR          reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    S_NOT_EQUAL     reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    S_LESS_THAN_EQUAL reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    S_GREATER_THAN_EQUAL reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    S_LESS_THAN     reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    S_ELEMENT_OF    reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_EQ           reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_NEQ          reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    S_RETURN        reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_IF           reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_DEPEND       reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_WHILE        reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_ITERATE      reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_REPEAT       reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_INPUT        reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_OUTPUT       reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_THEN         reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_DO           reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    RW_TIMES        reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    INDENT          reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)
    S_COLON         reduce using rule 164 (integer_constant -> L_INTEGER_NUMBER .)


state 90

    (165) real_constant -> L_REAL_NUMBER .

    S_UP_TO         reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_KAMUS        reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_PROCEDURE    reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_FUNCTION     reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    $end            reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    DEDENT          reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    S_SEMI_COLON    reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    S_COMMA         reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    S_RIGHT_BRACKET reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    IDENTIFIER      reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    S_GREATER_THAN  reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    S_EQUAL         reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_TYPE         reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_CONSTANT     reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    S_POWER         reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    S_TIMES         reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    S_DIVIDE        reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_DIV          reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_MOD          reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_AND          reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    S_PLUS          reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    S_MINUS         reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_OR           reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_XOR          reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    S_NOT_EQUAL     reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    S_LESS_THAN_EQUAL reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    S_GREATER_THAN_EQUAL reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    S_LESS_THAN     reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    S_ELEMENT_OF    reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_EQ           reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_NEQ          reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    S_RETURN        reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_IF           reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_DEPEND       reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_WHILE        reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_ITERATE      reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_REPEAT       reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_INPUT        reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_OUTPUT       reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_THEN         reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    RW_DO           reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    INDENT          reduce using rule 165 (real_constant -> L_REAL_NUMBER .)
    S_COLON         reduce using rule 165 (real_constant -> L_REAL_NUMBER .)


state 91

    (231) abs_function -> RW_ABS . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 140


state 92

    (232) sin_function -> RW_SIN . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 141


state 93

    (233) cos_function -> RW_COS . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 142


state 94

    (234) tan_function -> RW_TAN . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 143


state 95

    (235) succ_function -> RW_SUCC . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 144


state 96

    (236) pred_function -> RW_PRED . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 145


state 97

    (243) awal_function -> RW_AWAL . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 146


state 98

    (244) akhir_function -> RW_AKHIR . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 147


state 99

    (245) firstchar_function -> RW_FIRSTCHAR . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 148


state 100

    (246) lastchar_function -> RW_LASTCHAR . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 149


state 101

    (247) long_function -> RW_LONG . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 150


state 102

    (248) iskosong_function -> RW_ISKOSONG . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 151


state 103

    (251) integer_to_real -> RW_INTEGERTOREAL . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 152


state 104

    (252) real_to_integer -> RW_REALTOINTEGER . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 153


state 105

    (77) formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list . S_RIGHT_BRACKET

    S_RIGHT_BRACKET shift and go to state 154


state 106

    (78) formal_parameter_section_list -> empty .

    S_RIGHT_BRACKET reduce using rule 78 (formal_parameter_section_list -> empty .)


state 107

    (79) formal_parameter_section_list -> formal_parameter_section .
    (80) formal_parameter_section -> formal_parameter_section . S_SEMI_COLON parameter_specification
    (81) formal_parameter_section -> formal_parameter_section . S_COMMA parameter_specification

    S_RIGHT_BRACKET reduce using rule 79 (formal_parameter_section_list -> formal_parameter_section .)
    S_SEMI_COLON    shift and go to state 155
    S_COMMA         shift and go to state 156


state 108

    (82) formal_parameter_section -> parameter_specification .

    S_SEMI_COLON    reduce using rule 82 (formal_parameter_section -> parameter_specification .)
    S_COMMA         reduce using rule 82 (formal_parameter_section -> parameter_specification .)
    S_RIGHT_BRACKET reduce using rule 82 (formal_parameter_section -> parameter_specification .)


state 109

    (83) parameter_specification -> procedure_parameter_type . variable_sub_declaration
    (59) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (254) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    variable_sub_declaration       shift and go to state 157
    identifier_list                shift and go to state 35
    identifier                     shift and go to state 36

state 110

    (84) procedure_parameter_type -> RW_INPUT .
    (86) procedure_parameter_type -> RW_INPUT . S_DIVIDE RW_OUTPUT

    IDENTIFIER      reduce using rule 84 (procedure_parameter_type -> RW_INPUT .)
    S_DIVIDE        shift and go to state 158


state 111

    (85) procedure_parameter_type -> RW_OUTPUT .

    IDENTIFIER      reduce using rule 85 (procedure_parameter_type -> RW_OUTPUT .)


state 112

    (9) block -> kamus_declaration INDENT constant_declaration_block . type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (13) type_declaration_block -> . empty
    (14) type_declaration_block -> . type_declaration
    (253) empty -> .
    (65) type_declaration -> . type_declaration type_sub_declaration
    (66) type_declaration -> . type_sub_declaration
    (67) type_sub_declaration -> . RW_TYPE identifier S_COLON type_variety

    IDENTIFIER      reduce using rule 253 (empty -> .)
    DEDENT          reduce using rule 253 (empty -> .)
    RW_PROCEDURE    reduce using rule 253 (empty -> .)
    RW_FUNCTION     reduce using rule 253 (empty -> .)
    RW_TYPE         shift and go to state 163

    type_declaration_block         shift and go to state 159
    empty                          shift and go to state 160
    type_declaration               shift and go to state 161
    type_sub_declaration           shift and go to state 162

state 113

    (11) constant_declaration_block -> empty .

    RW_TYPE         reduce using rule 11 (constant_declaration_block -> empty .)
    IDENTIFIER      reduce using rule 11 (constant_declaration_block -> empty .)
    DEDENT          reduce using rule 11 (constant_declaration_block -> empty .)
    RW_PROCEDURE    reduce using rule 11 (constant_declaration_block -> empty .)
    RW_FUNCTION     reduce using rule 11 (constant_declaration_block -> empty .)


state 114

    (12) constant_declaration_block -> constant_declaration .
    (62) constant_declaration -> constant_declaration . constant_sub_declaration
    (64) constant_sub_declaration -> . RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant

    RW_TYPE         reduce using rule 12 (constant_declaration_block -> constant_declaration .)
    IDENTIFIER      reduce using rule 12 (constant_declaration_block -> constant_declaration .)
    DEDENT          reduce using rule 12 (constant_declaration_block -> constant_declaration .)
    RW_PROCEDURE    reduce using rule 12 (constant_declaration_block -> constant_declaration .)
    RW_FUNCTION     reduce using rule 12 (constant_declaration_block -> constant_declaration .)
    RW_CONSTANT     shift and go to state 116

    constant_sub_declaration       shift and go to state 164

state 115

    (63) constant_declaration -> constant_sub_declaration .

    RW_CONSTANT     reduce using rule 63 (constant_declaration -> constant_sub_declaration .)
    RW_TYPE         reduce using rule 63 (constant_declaration -> constant_sub_declaration .)
    IDENTIFIER      reduce using rule 63 (constant_declaration -> constant_sub_declaration .)
    DEDENT          reduce using rule 63 (constant_declaration -> constant_sub_declaration .)
    RW_PROCEDURE    reduce using rule 63 (constant_declaration -> constant_sub_declaration .)
    RW_FUNCTION     reduce using rule 63 (constant_declaration -> constant_sub_declaration .)


state 116

    (64) constant_sub_declaration -> RW_CONSTANT . identifier S_COLON type_denoter S_EQUAL constant
    (254) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    identifier                     shift and go to state 165

state 117

    (10) block -> kamus_declaration algorithm_block procedure_and_function_implementation_block .

    $end            reduce using rule 10 (block -> kamus_declaration algorithm_block procedure_and_function_implementation_block .)


state 118

    (20) procedure_and_function_implementation_block -> empty .

    $end            reduce using rule 20 (procedure_and_function_implementation_block -> empty .)


state 119

    (21) procedure_and_function_implementation_block -> subprogram_implementation_list .
    (22) subprogram_implementation_list -> subprogram_implementation_list . subprogram_implementation
    (24) subprogram_implementation -> . procedure_implementation
    (25) subprogram_implementation -> . function_implementation
    (26) procedure_implementation -> . procedure_declaration procedure_implementation_block
    (27) procedure_implementation -> . procedure_declaration
    (30) function_implementation -> . function_declaration function_implementation_block
    (31) function_implementation -> . function_declaration
    (75) procedure_declaration -> . procedure_identifier formal_parameter_list
    (87) function_declaration -> . function_identification function_formal_parameter_list function_return_type
    (88) function_declaration -> . function_identification function_return_type
    (76) procedure_identifier -> . RW_PROCEDURE identifier
    (89) function_identification -> . RW_FUNCTION identifier

    $end            reduce using rule 21 (procedure_and_function_implementation_block -> subprogram_implementation_list .)
    RW_PROCEDURE    shift and go to state 9
    RW_FUNCTION     shift and go to state 8

    subprogram_implementation      shift and go to state 166
    procedure_implementation       shift and go to state 121
    function_implementation        shift and go to state 122
    procedure_declaration          shift and go to state 123
    function_declaration           shift and go to state 124
    procedure_identifier           shift and go to state 7
    function_identification        shift and go to state 6

state 120

    (23) subprogram_implementation_list -> subprogram_implementation .

    RW_PROCEDURE    reduce using rule 23 (subprogram_implementation_list -> subprogram_implementation .)
    RW_FUNCTION     reduce using rule 23 (subprogram_implementation_list -> subprogram_implementation .)
    $end            reduce using rule 23 (subprogram_implementation_list -> subprogram_implementation .)


state 121

    (24) subprogram_implementation -> procedure_implementation .

    RW_PROCEDURE    reduce using rule 24 (subprogram_implementation -> procedure_implementation .)
    RW_FUNCTION     reduce using rule 24 (subprogram_implementation -> procedure_implementation .)
    $end            reduce using rule 24 (subprogram_implementation -> procedure_implementation .)


state 122

    (25) subprogram_implementation -> function_implementation .

    RW_PROCEDURE    reduce using rule 25 (subprogram_implementation -> function_implementation .)
    RW_FUNCTION     reduce using rule 25 (subprogram_implementation -> function_implementation .)
    $end            reduce using rule 25 (subprogram_implementation -> function_implementation .)


state 123

    (26) procedure_implementation -> procedure_declaration . procedure_implementation_block
    (27) procedure_implementation -> procedure_declaration .
    (28) procedure_implementation_block -> . kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
    (29) procedure_implementation_block -> . kamus_declaration algorithm_block
    (7) kamus_declaration -> . RW_KAMUS
    (8) kamus_declaration -> . RW_KAMUS RW_LOKAL

    RW_PROCEDURE    reduce using rule 27 (procedure_implementation -> procedure_declaration .)
    RW_FUNCTION     reduce using rule 27 (procedure_implementation -> procedure_declaration .)
    $end            reduce using rule 27 (procedure_implementation -> procedure_declaration .)
    RW_KAMUS        shift and go to state 14

    procedure_implementation_block shift and go to state 167
    kamus_declaration              shift and go to state 168

state 124

    (30) function_implementation -> function_declaration . function_implementation_block
    (31) function_implementation -> function_declaration .
    (32) function_implementation_block -> . kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
    (33) function_implementation_block -> . kamus_declaration algorithm_block
    (7) kamus_declaration -> . RW_KAMUS
    (8) kamus_declaration -> . RW_KAMUS RW_LOKAL

    RW_PROCEDURE    reduce using rule 31 (function_implementation -> function_declaration .)
    RW_FUNCTION     reduce using rule 31 (function_implementation -> function_declaration .)
    $end            reduce using rule 31 (function_implementation -> function_declaration .)
    RW_KAMUS        shift and go to state 14

    function_implementation_block  shift and go to state 169
    kamus_declaration              shift and go to state 170

state 125

    (19) algorithm_block -> RW_ALGORITMA statement_part .

    RW_PROCEDURE    reduce using rule 19 (algorithm_block -> RW_ALGORITMA statement_part .)
    RW_FUNCTION     reduce using rule 19 (algorithm_block -> RW_ALGORITMA statement_part .)
    $end            reduce using rule 19 (algorithm_block -> RW_ALGORITMA statement_part .)


state 126

    (99) statement_part -> compound_statement .

    RW_PROCEDURE    reduce using rule 99 (statement_part -> compound_statement .)
    RW_FUNCTION     reduce using rule 99 (statement_part -> compound_statement .)
    $end            reduce using rule 99 (statement_part -> compound_statement .)


state 127

    (100) compound_statement -> INDENT . statement_sequence DEDENT
    (101) statement_sequence -> . statement_sequence S_SEMI_COLON statement
    (102) statement_sequence -> . statement_sequence statement
    (103) statement_sequence -> . statement
    (104) statement -> . assignment_statement
    (105) statement -> . procedure_statement
    (106) statement -> . function_returned_statement
    (107) statement -> . if_statement
    (108) statement -> . depend_on_statement
    (109) statement -> . while_statement
    (110) statement -> . traversal_statement
    (111) statement -> . repeat_statement
    (112) statement -> . iterate_stop_statement
    (113) assignment_statement -> . variable_access S_ASSIGNMENT expression
    (114) procedure_statement -> . builtin_procedure_statements
    (115) procedure_statement -> . identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
    (116) procedure_statement -> . identifier
    (130) function_returned_statement -> . S_RETURN expression
    (135) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement
    (136) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
    (131) depend_on_statement -> . RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (144) while_statement -> . RW_WHILE boolean_expression RW_DO compound_statement
    (146) traversal_statement -> . control_variable RW_TRAVERSAL traversal_range_value compound_statement
    (138) repeat_statement -> . repeat_until_statement
    (139) repeat_statement -> . repeat_times_statement
    (145) iterate_stop_statement -> . RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (120) builtin_procedure_statements -> . input_statement
    (121) builtin_procedure_statements -> . output_statement
    (254) identifier -> . IDENTIFIER
    (148) control_variable -> . identifier
    (140) repeat_until_statement -> . RW_REPEAT compound_statement RW_UNTIL boolean_expression
    (141) repeat_times_statement -> . RW_REPEAT variable_access RW_TIMES compound_statement
    (142) repeat_times_statement -> . RW_REPEAT integer_constant RW_TIMES compound_statement
    (143) repeat_times_statement -> . RW_REPEAT function_designator RW_TIMES compound_statement
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (122) input_statement -> . RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET
    (126) output_statement -> . RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET

    S_RETURN        shift and go to state 185
    RW_IF           shift and go to state 186
    RW_DEPEND       shift and go to state 187
    RW_WHILE        shift and go to state 188
    RW_ITERATE      shift and go to state 192
    IDENTIFIER      shift and go to state 11
    RW_REPEAT       shift and go to state 197
    RW_INPUT        shift and go to state 198
    RW_OUTPUT       shift and go to state 199

    statement_sequence             shift and go to state 171
    statement                      shift and go to state 172
    assignment_statement           shift and go to state 173
    procedure_statement            shift and go to state 174
    function_returned_statement    shift and go to state 175
    if_statement                   shift and go to state 176
    depend_on_statement            shift and go to state 177
    while_statement                shift and go to state 178
    traversal_statement            shift and go to state 179
    repeat_statement               shift and go to state 180
    iterate_stop_statement         shift and go to state 181
    variable_access                shift and go to state 182
    builtin_procedure_statements   shift and go to state 183
    identifier                     shift and go to state 184
    control_variable               shift and go to state 189
    repeat_until_statement         shift and go to state 190
    repeat_times_statement         shift and go to state 191
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    input_statement                shift and go to state 195
    output_statement               shift and go to state 196

state 128

    (91) function_formal_parameter_list -> S_LEFT_BRACKET function_parameter_list_option S_RIGHT_BRACKET .

    S_RETURN        reduce using rule 91 (function_formal_parameter_list -> S_LEFT_BRACKET function_parameter_list_option S_RIGHT_BRACKET .)


state 129

    (95) function_parameter_list -> function_parameter_list S_SEMI_COLON . function_parameter_declaration
    (98) function_parameter_declaration -> . variable_sub_declaration
    (59) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (254) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    function_parameter_declaration shift and go to state 200
    variable_sub_declaration       shift and go to state 34
    identifier_list                shift and go to state 35
    identifier                     shift and go to state 36

state 130

    (96) function_parameter_list -> function_parameter_list S_COMMA . function_parameter_declaration
    (98) function_parameter_declaration -> . variable_sub_declaration
    (59) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (254) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    function_parameter_declaration shift and go to state 201
    variable_sub_declaration       shift and go to state 34
    identifier_list                shift and go to state 35
    identifier                     shift and go to state 36

state 131

    (59) variable_sub_declaration -> identifier_list S_COLON . type_denoter
    (34) type_denoter -> . ordinal_type
    (35) type_denoter -> . structured_type
    (36) type_denoter -> . RW_INTEGER
    (37) type_denoter -> . RW_REAL
    (38) type_denoter -> . RW_STRING
    (39) type_denoter -> . RW_CHARACTER
    (40) type_denoter -> . RW_BOOLEAN
    (41) ordinal_type -> . enumerated_type
    (42) ordinal_type -> . subrange_type
    (43) ordinal_type -> . identifier
    (50) structured_type -> . array_type
    (44) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (45) subrange_type -> . subrange_type_option
    (254) identifier -> . IDENTIFIER
    (51) array_type -> . RW_ARRAY array_index RW_OF component_type
    (46) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (47) subrange_option -> . identifier
    (48) subrange_option -> . constant
    (49) subrange_option -> . function_designator
    (153) constant -> . string_char_constant
    (154) constant -> . non_string_constant
    (155) constant -> . sign non_string_constant
    (156) constant -> . boolean_constant
    (157) constant -> . nil_constant
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (158) sign -> . S_PLUS
    (159) sign -> . S_MINUS
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    RW_INTEGER      shift and go to state 40
    RW_REAL         shift and go to state 41
    RW_STRING       shift and go to state 42
    RW_CHARACTER    shift and go to state 43
    RW_BOOLEAN      shift and go to state 44
    S_LEFT_BRACKET  shift and go to state 49
    IDENTIFIER      shift and go to state 11
    RW_ARRAY        shift and go to state 51
    S_PLUS          shift and go to state 68
    S_MINUS         shift and go to state 69
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    type_denoter                   shift and go to state 202
    ordinal_type                   shift and go to state 38
    structured_type                shift and go to state 39
    enumerated_type                shift and go to state 45
    subrange_type                  shift and go to state 46
    identifier                     shift and go to state 47
    array_type                     shift and go to state 48
    subrange_type_option           shift and go to state 50
    subrange_option                shift and go to state 52
    constant                       shift and go to state 53
    function_designator            shift and go to state 54
    string_char_constant           shift and go to state 55
    non_string_constant            shift and go to state 56
    sign                           shift and go to state 57
    boolean_constant               shift and go to state 58
    nil_constant                   shift and go to state 59
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 132

    (5) identifier_list -> identifier_list S_COMMA . identifier
    (254) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    identifier                     shift and go to state 203

state 133

    (224) user_defined_function_call -> identifier function_actual_parameter_list .

    S_UP_TO         reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_POWER         reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_TIMES         reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_DIVIDE        reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_DIV          reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_MOD          reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_AND          reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_PLUS          reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_MINUS         reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_OR           reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_XOR          reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_EQUAL         reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_NOT_EQUAL     reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_LESS_THAN_EQUAL reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_GREATER_THAN_EQUAL reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_LESS_THAN     reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_GREATER_THAN  reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_ELEMENT_OF    reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_EQ           reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_NEQ          reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_RIGHT_BRACKET reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_COMMA         reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_KAMUS        reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_PROCEDURE    reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_FUNCTION     reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    $end            reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    DEDENT          reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_SEMI_COLON    reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    IDENTIFIER      reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_TYPE         reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_RETURN        reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_IF           reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_DEPEND       reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_WHILE        reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_ITERATE      reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_REPEAT       reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_INPUT        reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_OUTPUT       reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_THEN         reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_DO           reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_TIMES        reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    INDENT          reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_COLON         reduce using rule 224 (user_defined_function_call -> identifier function_actual_parameter_list .)


state 134

    (92) function_actual_parameter_list -> S_LEFT_BRACKET . actual_parameter_list S_RIGHT_BRACKET
    (117) actual_parameter_list -> . actual_parameter_list S_COMMA actual_parameter
    (118) actual_parameter_list -> . actual_parameter
    (119) actual_parameter -> . expression
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    actual_parameter_list          shift and go to state 205
    actual_parameter               shift and go to state 206
    expression                     shift and go to state 207
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 135

    (44) enumerated_type -> S_LEFT_BRACKET identifier_list . S_RIGHT_BRACKET
    (5) identifier_list -> identifier_list . S_COMMA identifier

    S_RIGHT_BRACKET shift and go to state 227
    S_COMMA         shift and go to state 132


state 136

    (51) array_type -> RW_ARRAY array_index . RW_OF component_type

    RW_OF           shift and go to state 228


state 137

    (52) array_index -> S_LEFT_SQUARE_BRACKET . index_list S_RIGHT_SQUARE_BRACKET
    (53) index_list -> . index_list S_COMMA index_type
    (54) index_list -> . index_type
    (55) index_type -> . ordinal_type
    (41) ordinal_type -> . enumerated_type
    (42) ordinal_type -> . subrange_type
    (43) ordinal_type -> . identifier
    (44) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (45) subrange_type -> . subrange_type_option
    (254) identifier -> . IDENTIFIER
    (46) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (47) subrange_option -> . identifier
    (48) subrange_option -> . constant
    (49) subrange_option -> . function_designator
    (153) constant -> . string_char_constant
    (154) constant -> . non_string_constant
    (155) constant -> . sign non_string_constant
    (156) constant -> . boolean_constant
    (157) constant -> . nil_constant
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (158) sign -> . S_PLUS
    (159) sign -> . S_MINUS
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 49
    IDENTIFIER      shift and go to state 11
    S_PLUS          shift and go to state 68
    S_MINUS         shift and go to state 69
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    index_list                     shift and go to state 229
    index_type                     shift and go to state 230
    ordinal_type                   shift and go to state 231
    enumerated_type                shift and go to state 45
    subrange_type                  shift and go to state 46
    identifier                     shift and go to state 47
    subrange_type_option           shift and go to state 50
    subrange_option                shift and go to state 52
    constant                       shift and go to state 53
    function_designator            shift and go to state 54
    string_char_constant           shift and go to state 55
    non_string_constant            shift and go to state 56
    sign                           shift and go to state 57
    boolean_constant               shift and go to state 58
    nil_constant                   shift and go to state 59
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 138

    (46) subrange_type_option -> subrange_option S_UP_TO . subrange_option
    (47) subrange_option -> . identifier
    (48) subrange_option -> . constant
    (49) subrange_option -> . function_designator
    (254) identifier -> . IDENTIFIER
    (153) constant -> . string_char_constant
    (154) constant -> . non_string_constant
    (155) constant -> . sign non_string_constant
    (156) constant -> . boolean_constant
    (157) constant -> . nil_constant
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (158) sign -> . S_PLUS
    (159) sign -> . S_MINUS
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    IDENTIFIER      shift and go to state 11
    S_PLUS          shift and go to state 68
    S_MINUS         shift and go to state 69
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    subrange_option                shift and go to state 232
    identifier                     shift and go to state 233
    constant                       shift and go to state 53
    function_designator            shift and go to state 54
    string_char_constant           shift and go to state 55
    non_string_constant            shift and go to state 56
    sign                           shift and go to state 57
    boolean_constant               shift and go to state 58
    nil_constant                   shift and go to state 59
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 139

    (155) constant -> sign non_string_constant .

    S_UP_TO         reduce using rule 155 (constant -> sign non_string_constant .)
    RW_KAMUS        reduce using rule 155 (constant -> sign non_string_constant .)
    RW_PROCEDURE    reduce using rule 155 (constant -> sign non_string_constant .)
    RW_FUNCTION     reduce using rule 155 (constant -> sign non_string_constant .)
    $end            reduce using rule 155 (constant -> sign non_string_constant .)
    DEDENT          reduce using rule 155 (constant -> sign non_string_constant .)
    S_SEMI_COLON    reduce using rule 155 (constant -> sign non_string_constant .)
    S_COMMA         reduce using rule 155 (constant -> sign non_string_constant .)
    S_RIGHT_BRACKET reduce using rule 155 (constant -> sign non_string_constant .)
    IDENTIFIER      reduce using rule 155 (constant -> sign non_string_constant .)
    S_GREATER_THAN  reduce using rule 155 (constant -> sign non_string_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 155 (constant -> sign non_string_constant .)
    S_EQUAL         reduce using rule 155 (constant -> sign non_string_constant .)
    RW_TYPE         reduce using rule 155 (constant -> sign non_string_constant .)
    RW_CONSTANT     reduce using rule 155 (constant -> sign non_string_constant .)


state 140

    (231) abs_function -> RW_ABS S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    expression                     shift and go to state 234
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 141

    (232) sin_function -> RW_SIN S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    expression                     shift and go to state 235
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 142

    (233) cos_function -> RW_COS S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    expression                     shift and go to state 236
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 143

    (234) tan_function -> RW_TAN S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    expression                     shift and go to state 237
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 144

    (235) succ_function -> RW_SUCC S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    expression                     shift and go to state 238
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 145

    (236) pred_function -> RW_PRED S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    expression                     shift and go to state 239
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 146

    (243) awal_function -> RW_AWAL S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    expression                     shift and go to state 240
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 147

    (244) akhir_function -> RW_AKHIR S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    expression                     shift and go to state 241
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 148

    (245) firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    expression                     shift and go to state 242
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 149

    (246) lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    expression                     shift and go to state 243
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 150

    (247) long_function -> RW_LONG S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    expression                     shift and go to state 244
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 151

    (248) iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    expression                     shift and go to state 245
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 152

    (251) integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    expression                     shift and go to state 246
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 153

    (252) real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    expression                     shift and go to state 247
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 154

    (77) formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET .

    RW_KAMUS        reduce using rule 77 (formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 77 (formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 77 (formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET .)
    $end            reduce using rule 77 (formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 77 (formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET .)


state 155

    (80) formal_parameter_section -> formal_parameter_section S_SEMI_COLON . parameter_specification
    (83) parameter_specification -> . procedure_parameter_type variable_sub_declaration
    (84) procedure_parameter_type -> . RW_INPUT
    (85) procedure_parameter_type -> . RW_OUTPUT
    (86) procedure_parameter_type -> . RW_INPUT S_DIVIDE RW_OUTPUT

    RW_INPUT        shift and go to state 110
    RW_OUTPUT       shift and go to state 111

    parameter_specification        shift and go to state 248
    procedure_parameter_type       shift and go to state 109

state 156

    (81) formal_parameter_section -> formal_parameter_section S_COMMA . parameter_specification
    (83) parameter_specification -> . procedure_parameter_type variable_sub_declaration
    (84) procedure_parameter_type -> . RW_INPUT
    (85) procedure_parameter_type -> . RW_OUTPUT
    (86) procedure_parameter_type -> . RW_INPUT S_DIVIDE RW_OUTPUT

    RW_INPUT        shift and go to state 110
    RW_OUTPUT       shift and go to state 111

    parameter_specification        shift and go to state 249
    procedure_parameter_type       shift and go to state 109

state 157

    (83) parameter_specification -> procedure_parameter_type variable_sub_declaration .

    S_SEMI_COLON    reduce using rule 83 (parameter_specification -> procedure_parameter_type variable_sub_declaration .)
    S_COMMA         reduce using rule 83 (parameter_specification -> procedure_parameter_type variable_sub_declaration .)
    S_RIGHT_BRACKET reduce using rule 83 (parameter_specification -> procedure_parameter_type variable_sub_declaration .)


state 158

    (86) procedure_parameter_type -> RW_INPUT S_DIVIDE . RW_OUTPUT

    RW_OUTPUT       shift and go to state 250


state 159

    (9) block -> kamus_declaration INDENT constant_declaration_block type_declaration_block . variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (15) variable_declaration_block -> . empty
    (16) variable_declaration_block -> . variable_declaration
    (253) empty -> .
    (57) variable_declaration -> . variable_declaration variable_sub_declaration
    (58) variable_declaration -> . variable_sub_declaration
    (59) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (254) identifier -> . IDENTIFIER

    DEDENT          reduce using rule 253 (empty -> .)
    RW_PROCEDURE    reduce using rule 253 (empty -> .)
    RW_FUNCTION     reduce using rule 253 (empty -> .)
    IDENTIFIER      shift and go to state 11

    variable_declaration_block     shift and go to state 251
    empty                          shift and go to state 252
    variable_declaration           shift and go to state 253
    variable_sub_declaration       shift and go to state 254
    identifier_list                shift and go to state 35
    identifier                     shift and go to state 36

state 160

    (13) type_declaration_block -> empty .

    IDENTIFIER      reduce using rule 13 (type_declaration_block -> empty .)
    DEDENT          reduce using rule 13 (type_declaration_block -> empty .)
    RW_PROCEDURE    reduce using rule 13 (type_declaration_block -> empty .)
    RW_FUNCTION     reduce using rule 13 (type_declaration_block -> empty .)


state 161

    (14) type_declaration_block -> type_declaration .
    (65) type_declaration -> type_declaration . type_sub_declaration
    (67) type_sub_declaration -> . RW_TYPE identifier S_COLON type_variety

    IDENTIFIER      reduce using rule 14 (type_declaration_block -> type_declaration .)
    DEDENT          reduce using rule 14 (type_declaration_block -> type_declaration .)
    RW_PROCEDURE    reduce using rule 14 (type_declaration_block -> type_declaration .)
    RW_FUNCTION     reduce using rule 14 (type_declaration_block -> type_declaration .)
    RW_TYPE         shift and go to state 163

    type_sub_declaration           shift and go to state 255

state 162

    (66) type_declaration -> type_sub_declaration .

    RW_TYPE         reduce using rule 66 (type_declaration -> type_sub_declaration .)
    IDENTIFIER      reduce using rule 66 (type_declaration -> type_sub_declaration .)
    DEDENT          reduce using rule 66 (type_declaration -> type_sub_declaration .)
    RW_PROCEDURE    reduce using rule 66 (type_declaration -> type_sub_declaration .)
    RW_FUNCTION     reduce using rule 66 (type_declaration -> type_sub_declaration .)


state 163

    (67) type_sub_declaration -> RW_TYPE . identifier S_COLON type_variety
    (254) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    identifier                     shift and go to state 256

state 164

    (62) constant_declaration -> constant_declaration constant_sub_declaration .

    RW_CONSTANT     reduce using rule 62 (constant_declaration -> constant_declaration constant_sub_declaration .)
    RW_TYPE         reduce using rule 62 (constant_declaration -> constant_declaration constant_sub_declaration .)
    IDENTIFIER      reduce using rule 62 (constant_declaration -> constant_declaration constant_sub_declaration .)
    DEDENT          reduce using rule 62 (constant_declaration -> constant_declaration constant_sub_declaration .)
    RW_PROCEDURE    reduce using rule 62 (constant_declaration -> constant_declaration constant_sub_declaration .)
    RW_FUNCTION     reduce using rule 62 (constant_declaration -> constant_declaration constant_sub_declaration .)


state 165

    (64) constant_sub_declaration -> RW_CONSTANT identifier . S_COLON type_denoter S_EQUAL constant

    S_COLON         shift and go to state 257


state 166

    (22) subprogram_implementation_list -> subprogram_implementation_list subprogram_implementation .

    RW_PROCEDURE    reduce using rule 22 (subprogram_implementation_list -> subprogram_implementation_list subprogram_implementation .)
    RW_FUNCTION     reduce using rule 22 (subprogram_implementation_list -> subprogram_implementation_list subprogram_implementation .)
    $end            reduce using rule 22 (subprogram_implementation_list -> subprogram_implementation_list subprogram_implementation .)


state 167

    (26) procedure_implementation -> procedure_declaration procedure_implementation_block .

    RW_PROCEDURE    reduce using rule 26 (procedure_implementation -> procedure_declaration procedure_implementation_block .)
    RW_FUNCTION     reduce using rule 26 (procedure_implementation -> procedure_declaration procedure_implementation_block .)
    $end            reduce using rule 26 (procedure_implementation -> procedure_declaration procedure_implementation_block .)


state 168

    (28) procedure_implementation_block -> kamus_declaration . INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
    (29) procedure_implementation_block -> kamus_declaration . algorithm_block
    (19) algorithm_block -> . RW_ALGORITMA statement_part

    INDENT          shift and go to state 258
    RW_ALGORITMA    shift and go to state 27

    algorithm_block                shift and go to state 259

state 169

    (30) function_implementation -> function_declaration function_implementation_block .

    RW_PROCEDURE    reduce using rule 30 (function_implementation -> function_declaration function_implementation_block .)
    RW_FUNCTION     reduce using rule 30 (function_implementation -> function_declaration function_implementation_block .)
    $end            reduce using rule 30 (function_implementation -> function_declaration function_implementation_block .)


state 170

    (32) function_implementation_block -> kamus_declaration . INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
    (33) function_implementation_block -> kamus_declaration . algorithm_block
    (19) algorithm_block -> . RW_ALGORITMA statement_part

    INDENT          shift and go to state 260
    RW_ALGORITMA    shift and go to state 27

    algorithm_block                shift and go to state 261

state 171

    (100) compound_statement -> INDENT statement_sequence . DEDENT
    (101) statement_sequence -> statement_sequence . S_SEMI_COLON statement
    (102) statement_sequence -> statement_sequence . statement
    (104) statement -> . assignment_statement
    (105) statement -> . procedure_statement
    (106) statement -> . function_returned_statement
    (107) statement -> . if_statement
    (108) statement -> . depend_on_statement
    (109) statement -> . while_statement
    (110) statement -> . traversal_statement
    (111) statement -> . repeat_statement
    (112) statement -> . iterate_stop_statement
    (113) assignment_statement -> . variable_access S_ASSIGNMENT expression
    (114) procedure_statement -> . builtin_procedure_statements
    (115) procedure_statement -> . identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
    (116) procedure_statement -> . identifier
    (130) function_returned_statement -> . S_RETURN expression
    (135) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement
    (136) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
    (131) depend_on_statement -> . RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (144) while_statement -> . RW_WHILE boolean_expression RW_DO compound_statement
    (146) traversal_statement -> . control_variable RW_TRAVERSAL traversal_range_value compound_statement
    (138) repeat_statement -> . repeat_until_statement
    (139) repeat_statement -> . repeat_times_statement
    (145) iterate_stop_statement -> . RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (120) builtin_procedure_statements -> . input_statement
    (121) builtin_procedure_statements -> . output_statement
    (254) identifier -> . IDENTIFIER
    (148) control_variable -> . identifier
    (140) repeat_until_statement -> . RW_REPEAT compound_statement RW_UNTIL boolean_expression
    (141) repeat_times_statement -> . RW_REPEAT variable_access RW_TIMES compound_statement
    (142) repeat_times_statement -> . RW_REPEAT integer_constant RW_TIMES compound_statement
    (143) repeat_times_statement -> . RW_REPEAT function_designator RW_TIMES compound_statement
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (122) input_statement -> . RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET
    (126) output_statement -> . RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET

    DEDENT          shift and go to state 262
    S_SEMI_COLON    shift and go to state 263
    S_RETURN        shift and go to state 185
    RW_IF           shift and go to state 186
    RW_DEPEND       shift and go to state 187
    RW_WHILE        shift and go to state 188
    RW_ITERATE      shift and go to state 192
    IDENTIFIER      shift and go to state 11
    RW_REPEAT       shift and go to state 197
    RW_INPUT        shift and go to state 198
    RW_OUTPUT       shift and go to state 199

    statement                      shift and go to state 264
    assignment_statement           shift and go to state 173
    procedure_statement            shift and go to state 174
    function_returned_statement    shift and go to state 175
    if_statement                   shift and go to state 176
    depend_on_statement            shift and go to state 177
    while_statement                shift and go to state 178
    traversal_statement            shift and go to state 179
    repeat_statement               shift and go to state 180
    iterate_stop_statement         shift and go to state 181
    variable_access                shift and go to state 182
    builtin_procedure_statements   shift and go to state 183
    identifier                     shift and go to state 184
    control_variable               shift and go to state 189
    repeat_until_statement         shift and go to state 190
    repeat_times_statement         shift and go to state 191
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    input_statement                shift and go to state 195
    output_statement               shift and go to state 196

state 172

    (103) statement_sequence -> statement .

    DEDENT          reduce using rule 103 (statement_sequence -> statement .)
    S_SEMI_COLON    reduce using rule 103 (statement_sequence -> statement .)
    S_RETURN        reduce using rule 103 (statement_sequence -> statement .)
    RW_IF           reduce using rule 103 (statement_sequence -> statement .)
    RW_DEPEND       reduce using rule 103 (statement_sequence -> statement .)
    RW_WHILE        reduce using rule 103 (statement_sequence -> statement .)
    RW_ITERATE      reduce using rule 103 (statement_sequence -> statement .)
    IDENTIFIER      reduce using rule 103 (statement_sequence -> statement .)
    RW_REPEAT       reduce using rule 103 (statement_sequence -> statement .)
    RW_INPUT        reduce using rule 103 (statement_sequence -> statement .)
    RW_OUTPUT       reduce using rule 103 (statement_sequence -> statement .)


state 173

    (104) statement -> assignment_statement .

    DEDENT          reduce using rule 104 (statement -> assignment_statement .)
    S_SEMI_COLON    reduce using rule 104 (statement -> assignment_statement .)
    S_RETURN        reduce using rule 104 (statement -> assignment_statement .)
    RW_IF           reduce using rule 104 (statement -> assignment_statement .)
    RW_DEPEND       reduce using rule 104 (statement -> assignment_statement .)
    RW_WHILE        reduce using rule 104 (statement -> assignment_statement .)
    RW_ITERATE      reduce using rule 104 (statement -> assignment_statement .)
    IDENTIFIER      reduce using rule 104 (statement -> assignment_statement .)
    RW_REPEAT       reduce using rule 104 (statement -> assignment_statement .)
    RW_INPUT        reduce using rule 104 (statement -> assignment_statement .)
    RW_OUTPUT       reduce using rule 104 (statement -> assignment_statement .)


state 174

    (105) statement -> procedure_statement .

    DEDENT          reduce using rule 105 (statement -> procedure_statement .)
    S_SEMI_COLON    reduce using rule 105 (statement -> procedure_statement .)
    S_RETURN        reduce using rule 105 (statement -> procedure_statement .)
    RW_IF           reduce using rule 105 (statement -> procedure_statement .)
    RW_DEPEND       reduce using rule 105 (statement -> procedure_statement .)
    RW_WHILE        reduce using rule 105 (statement -> procedure_statement .)
    RW_ITERATE      reduce using rule 105 (statement -> procedure_statement .)
    IDENTIFIER      reduce using rule 105 (statement -> procedure_statement .)
    RW_REPEAT       reduce using rule 105 (statement -> procedure_statement .)
    RW_INPUT        reduce using rule 105 (statement -> procedure_statement .)
    RW_OUTPUT       reduce using rule 105 (statement -> procedure_statement .)


state 175

    (106) statement -> function_returned_statement .

    DEDENT          reduce using rule 106 (statement -> function_returned_statement .)
    S_SEMI_COLON    reduce using rule 106 (statement -> function_returned_statement .)
    S_RETURN        reduce using rule 106 (statement -> function_returned_statement .)
    RW_IF           reduce using rule 106 (statement -> function_returned_statement .)
    RW_DEPEND       reduce using rule 106 (statement -> function_returned_statement .)
    RW_WHILE        reduce using rule 106 (statement -> function_returned_statement .)
    RW_ITERATE      reduce using rule 106 (statement -> function_returned_statement .)
    IDENTIFIER      reduce using rule 106 (statement -> function_returned_statement .)
    RW_REPEAT       reduce using rule 106 (statement -> function_returned_statement .)
    RW_INPUT        reduce using rule 106 (statement -> function_returned_statement .)
    RW_OUTPUT       reduce using rule 106 (statement -> function_returned_statement .)


state 176

    (107) statement -> if_statement .

    DEDENT          reduce using rule 107 (statement -> if_statement .)
    S_SEMI_COLON    reduce using rule 107 (statement -> if_statement .)
    S_RETURN        reduce using rule 107 (statement -> if_statement .)
    RW_IF           reduce using rule 107 (statement -> if_statement .)
    RW_DEPEND       reduce using rule 107 (statement -> if_statement .)
    RW_WHILE        reduce using rule 107 (statement -> if_statement .)
    RW_ITERATE      reduce using rule 107 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 107 (statement -> if_statement .)
    RW_REPEAT       reduce using rule 107 (statement -> if_statement .)
    RW_INPUT        reduce using rule 107 (statement -> if_statement .)
    RW_OUTPUT       reduce using rule 107 (statement -> if_statement .)


state 177

    (108) statement -> depend_on_statement .

    DEDENT          reduce using rule 108 (statement -> depend_on_statement .)
    S_SEMI_COLON    reduce using rule 108 (statement -> depend_on_statement .)
    S_RETURN        reduce using rule 108 (statement -> depend_on_statement .)
    RW_IF           reduce using rule 108 (statement -> depend_on_statement .)
    RW_DEPEND       reduce using rule 108 (statement -> depend_on_statement .)
    RW_WHILE        reduce using rule 108 (statement -> depend_on_statement .)
    RW_ITERATE      reduce using rule 108 (statement -> depend_on_statement .)
    IDENTIFIER      reduce using rule 108 (statement -> depend_on_statement .)
    RW_REPEAT       reduce using rule 108 (statement -> depend_on_statement .)
    RW_INPUT        reduce using rule 108 (statement -> depend_on_statement .)
    RW_OUTPUT       reduce using rule 108 (statement -> depend_on_statement .)


state 178

    (109) statement -> while_statement .

    DEDENT          reduce using rule 109 (statement -> while_statement .)
    S_SEMI_COLON    reduce using rule 109 (statement -> while_statement .)
    S_RETURN        reduce using rule 109 (statement -> while_statement .)
    RW_IF           reduce using rule 109 (statement -> while_statement .)
    RW_DEPEND       reduce using rule 109 (statement -> while_statement .)
    RW_WHILE        reduce using rule 109 (statement -> while_statement .)
    RW_ITERATE      reduce using rule 109 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 109 (statement -> while_statement .)
    RW_REPEAT       reduce using rule 109 (statement -> while_statement .)
    RW_INPUT        reduce using rule 109 (statement -> while_statement .)
    RW_OUTPUT       reduce using rule 109 (statement -> while_statement .)


state 179

    (110) statement -> traversal_statement .

    DEDENT          reduce using rule 110 (statement -> traversal_statement .)
    S_SEMI_COLON    reduce using rule 110 (statement -> traversal_statement .)
    S_RETURN        reduce using rule 110 (statement -> traversal_statement .)
    RW_IF           reduce using rule 110 (statement -> traversal_statement .)
    RW_DEPEND       reduce using rule 110 (statement -> traversal_statement .)
    RW_WHILE        reduce using rule 110 (statement -> traversal_statement .)
    RW_ITERATE      reduce using rule 110 (statement -> traversal_statement .)
    IDENTIFIER      reduce using rule 110 (statement -> traversal_statement .)
    RW_REPEAT       reduce using rule 110 (statement -> traversal_statement .)
    RW_INPUT        reduce using rule 110 (statement -> traversal_statement .)
    RW_OUTPUT       reduce using rule 110 (statement -> traversal_statement .)


state 180

    (111) statement -> repeat_statement .

    DEDENT          reduce using rule 111 (statement -> repeat_statement .)
    S_SEMI_COLON    reduce using rule 111 (statement -> repeat_statement .)
    S_RETURN        reduce using rule 111 (statement -> repeat_statement .)
    RW_IF           reduce using rule 111 (statement -> repeat_statement .)
    RW_DEPEND       reduce using rule 111 (statement -> repeat_statement .)
    RW_WHILE        reduce using rule 111 (statement -> repeat_statement .)
    RW_ITERATE      reduce using rule 111 (statement -> repeat_statement .)
    IDENTIFIER      reduce using rule 111 (statement -> repeat_statement .)
    RW_REPEAT       reduce using rule 111 (statement -> repeat_statement .)
    RW_INPUT        reduce using rule 111 (statement -> repeat_statement .)
    RW_OUTPUT       reduce using rule 111 (statement -> repeat_statement .)


state 181

    (112) statement -> iterate_stop_statement .

    DEDENT          reduce using rule 112 (statement -> iterate_stop_statement .)
    S_SEMI_COLON    reduce using rule 112 (statement -> iterate_stop_statement .)
    S_RETURN        reduce using rule 112 (statement -> iterate_stop_statement .)
    RW_IF           reduce using rule 112 (statement -> iterate_stop_statement .)
    RW_DEPEND       reduce using rule 112 (statement -> iterate_stop_statement .)
    RW_WHILE        reduce using rule 112 (statement -> iterate_stop_statement .)
    RW_ITERATE      reduce using rule 112 (statement -> iterate_stop_statement .)
    IDENTIFIER      reduce using rule 112 (statement -> iterate_stop_statement .)
    RW_REPEAT       reduce using rule 112 (statement -> iterate_stop_statement .)
    RW_INPUT        reduce using rule 112 (statement -> iterate_stop_statement .)
    RW_OUTPUT       reduce using rule 112 (statement -> iterate_stop_statement .)


state 182

    (113) assignment_statement -> variable_access . S_ASSIGNMENT expression
    (174) indexed_variable -> variable_access . S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> variable_access . S_DOT identifier

    S_ASSIGNMENT    shift and go to state 265
    S_LEFT_SQUARE_BRACKET shift and go to state 266
    S_DOT           shift and go to state 267


state 183

    (114) procedure_statement -> builtin_procedure_statements .

    DEDENT          reduce using rule 114 (procedure_statement -> builtin_procedure_statements .)
    S_SEMI_COLON    reduce using rule 114 (procedure_statement -> builtin_procedure_statements .)
    S_RETURN        reduce using rule 114 (procedure_statement -> builtin_procedure_statements .)
    RW_IF           reduce using rule 114 (procedure_statement -> builtin_procedure_statements .)
    RW_DEPEND       reduce using rule 114 (procedure_statement -> builtin_procedure_statements .)
    RW_WHILE        reduce using rule 114 (procedure_statement -> builtin_procedure_statements .)
    RW_ITERATE      reduce using rule 114 (procedure_statement -> builtin_procedure_statements .)
    IDENTIFIER      reduce using rule 114 (procedure_statement -> builtin_procedure_statements .)
    RW_REPEAT       reduce using rule 114 (procedure_statement -> builtin_procedure_statements .)
    RW_INPUT        reduce using rule 114 (procedure_statement -> builtin_procedure_statements .)
    RW_OUTPUT       reduce using rule 114 (procedure_statement -> builtin_procedure_statements .)


state 184

    (115) procedure_statement -> identifier . S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
    (116) procedure_statement -> identifier .
    (171) variable_access -> identifier .
    (148) control_variable -> identifier .

    S_LEFT_BRACKET  shift and go to state 268
    DEDENT          reduce using rule 116 (procedure_statement -> identifier .)
    S_SEMI_COLON    reduce using rule 116 (procedure_statement -> identifier .)
    S_RETURN        reduce using rule 116 (procedure_statement -> identifier .)
    RW_IF           reduce using rule 116 (procedure_statement -> identifier .)
    RW_DEPEND       reduce using rule 116 (procedure_statement -> identifier .)
    RW_WHILE        reduce using rule 116 (procedure_statement -> identifier .)
    RW_ITERATE      reduce using rule 116 (procedure_statement -> identifier .)
    IDENTIFIER      reduce using rule 116 (procedure_statement -> identifier .)
    RW_REPEAT       reduce using rule 116 (procedure_statement -> identifier .)
    RW_INPUT        reduce using rule 116 (procedure_statement -> identifier .)
    RW_OUTPUT       reduce using rule 116 (procedure_statement -> identifier .)
    S_ASSIGNMENT    reduce using rule 171 (variable_access -> identifier .)
    S_LEFT_SQUARE_BRACKET reduce using rule 171 (variable_access -> identifier .)
    S_DOT           reduce using rule 171 (variable_access -> identifier .)
    RW_TRAVERSAL    reduce using rule 148 (control_variable -> identifier .)


state 185

    (130) function_returned_statement -> S_RETURN . expression
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    expression                     shift and go to state 269
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 186

    (135) if_statement -> RW_IF . boolean_expression RW_THEN compound_statement
    (136) if_statement -> RW_IF . boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
    (137) boolean_expression -> . expression
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    boolean_expression             shift and go to state 270
    expression                     shift and go to state 271
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 187

    (131) depend_on_statement -> RW_DEPEND . RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT

    RW_ON           shift and go to state 272


state 188

    (144) while_statement -> RW_WHILE . boolean_expression RW_DO compound_statement
    (137) boolean_expression -> . expression
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    boolean_expression             shift and go to state 273
    expression                     shift and go to state 271
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 189

    (146) traversal_statement -> control_variable . RW_TRAVERSAL traversal_range_value compound_statement

    RW_TRAVERSAL    shift and go to state 274


state 190

    (138) repeat_statement -> repeat_until_statement .

    DEDENT          reduce using rule 138 (repeat_statement -> repeat_until_statement .)
    S_SEMI_COLON    reduce using rule 138 (repeat_statement -> repeat_until_statement .)
    S_RETURN        reduce using rule 138 (repeat_statement -> repeat_until_statement .)
    RW_IF           reduce using rule 138 (repeat_statement -> repeat_until_statement .)
    RW_DEPEND       reduce using rule 138 (repeat_statement -> repeat_until_statement .)
    RW_WHILE        reduce using rule 138 (repeat_statement -> repeat_until_statement .)
    RW_ITERATE      reduce using rule 138 (repeat_statement -> repeat_until_statement .)
    IDENTIFIER      reduce using rule 138 (repeat_statement -> repeat_until_statement .)
    RW_REPEAT       reduce using rule 138 (repeat_statement -> repeat_until_statement .)
    RW_INPUT        reduce using rule 138 (repeat_statement -> repeat_until_statement .)
    RW_OUTPUT       reduce using rule 138 (repeat_statement -> repeat_until_statement .)


state 191

    (139) repeat_statement -> repeat_times_statement .

    DEDENT          reduce using rule 139 (repeat_statement -> repeat_times_statement .)
    S_SEMI_COLON    reduce using rule 139 (repeat_statement -> repeat_times_statement .)
    S_RETURN        reduce using rule 139 (repeat_statement -> repeat_times_statement .)
    RW_IF           reduce using rule 139 (repeat_statement -> repeat_times_statement .)
    RW_DEPEND       reduce using rule 139 (repeat_statement -> repeat_times_statement .)
    RW_WHILE        reduce using rule 139 (repeat_statement -> repeat_times_statement .)
    RW_ITERATE      reduce using rule 139 (repeat_statement -> repeat_times_statement .)
    IDENTIFIER      reduce using rule 139 (repeat_statement -> repeat_times_statement .)
    RW_REPEAT       reduce using rule 139 (repeat_statement -> repeat_times_statement .)
    RW_INPUT        reduce using rule 139 (repeat_statement -> repeat_times_statement .)
    RW_OUTPUT       reduce using rule 139 (repeat_statement -> repeat_times_statement .)


state 192

    (145) iterate_stop_statement -> RW_ITERATE . compound_statement RW_STOP boolean_expression compound_statement
    (100) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 127

    compound_statement             shift and go to state 275

state 193

    (172) variable_access -> indexed_variable .

    S_ASSIGNMENT    reduce using rule 172 (variable_access -> indexed_variable .)
    S_LEFT_SQUARE_BRACKET reduce using rule 172 (variable_access -> indexed_variable .)
    S_DOT           reduce using rule 172 (variable_access -> indexed_variable .)
    S_POWER         reduce using rule 172 (variable_access -> indexed_variable .)
    S_TIMES         reduce using rule 172 (variable_access -> indexed_variable .)
    S_DIVIDE        reduce using rule 172 (variable_access -> indexed_variable .)
    RW_DIV          reduce using rule 172 (variable_access -> indexed_variable .)
    RW_MOD          reduce using rule 172 (variable_access -> indexed_variable .)
    RW_AND          reduce using rule 172 (variable_access -> indexed_variable .)
    S_PLUS          reduce using rule 172 (variable_access -> indexed_variable .)
    S_MINUS         reduce using rule 172 (variable_access -> indexed_variable .)
    RW_OR           reduce using rule 172 (variable_access -> indexed_variable .)
    RW_XOR          reduce using rule 172 (variable_access -> indexed_variable .)
    S_EQUAL         reduce using rule 172 (variable_access -> indexed_variable .)
    S_NOT_EQUAL     reduce using rule 172 (variable_access -> indexed_variable .)
    S_LESS_THAN_EQUAL reduce using rule 172 (variable_access -> indexed_variable .)
    S_GREATER_THAN_EQUAL reduce using rule 172 (variable_access -> indexed_variable .)
    S_LESS_THAN     reduce using rule 172 (variable_access -> indexed_variable .)
    S_GREATER_THAN  reduce using rule 172 (variable_access -> indexed_variable .)
    S_ELEMENT_OF    reduce using rule 172 (variable_access -> indexed_variable .)
    RW_EQ           reduce using rule 172 (variable_access -> indexed_variable .)
    RW_NEQ          reduce using rule 172 (variable_access -> indexed_variable .)
    S_RIGHT_BRACKET reduce using rule 172 (variable_access -> indexed_variable .)
    S_COMMA         reduce using rule 172 (variable_access -> indexed_variable .)
    DEDENT          reduce using rule 172 (variable_access -> indexed_variable .)
    S_SEMI_COLON    reduce using rule 172 (variable_access -> indexed_variable .)
    S_RETURN        reduce using rule 172 (variable_access -> indexed_variable .)
    RW_IF           reduce using rule 172 (variable_access -> indexed_variable .)
    RW_DEPEND       reduce using rule 172 (variable_access -> indexed_variable .)
    RW_WHILE        reduce using rule 172 (variable_access -> indexed_variable .)
    RW_ITERATE      reduce using rule 172 (variable_access -> indexed_variable .)
    IDENTIFIER      reduce using rule 172 (variable_access -> indexed_variable .)
    RW_REPEAT       reduce using rule 172 (variable_access -> indexed_variable .)
    RW_INPUT        reduce using rule 172 (variable_access -> indexed_variable .)
    RW_OUTPUT       reduce using rule 172 (variable_access -> indexed_variable .)
    RW_THEN         reduce using rule 172 (variable_access -> indexed_variable .)
    RW_DO           reduce using rule 172 (variable_access -> indexed_variable .)
    RW_TIMES        reduce using rule 172 (variable_access -> indexed_variable .)
    S_UP_TO         reduce using rule 172 (variable_access -> indexed_variable .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 172 (variable_access -> indexed_variable .)
    INDENT          reduce using rule 172 (variable_access -> indexed_variable .)
    S_COLON         reduce using rule 172 (variable_access -> indexed_variable .)


state 194

    (173) variable_access -> field_designator .

    S_ASSIGNMENT    reduce using rule 173 (variable_access -> field_designator .)
    S_LEFT_SQUARE_BRACKET reduce using rule 173 (variable_access -> field_designator .)
    S_DOT           reduce using rule 173 (variable_access -> field_designator .)
    S_POWER         reduce using rule 173 (variable_access -> field_designator .)
    S_TIMES         reduce using rule 173 (variable_access -> field_designator .)
    S_DIVIDE        reduce using rule 173 (variable_access -> field_designator .)
    RW_DIV          reduce using rule 173 (variable_access -> field_designator .)
    RW_MOD          reduce using rule 173 (variable_access -> field_designator .)
    RW_AND          reduce using rule 173 (variable_access -> field_designator .)
    S_PLUS          reduce using rule 173 (variable_access -> field_designator .)
    S_MINUS         reduce using rule 173 (variable_access -> field_designator .)
    RW_OR           reduce using rule 173 (variable_access -> field_designator .)
    RW_XOR          reduce using rule 173 (variable_access -> field_designator .)
    S_EQUAL         reduce using rule 173 (variable_access -> field_designator .)
    S_NOT_EQUAL     reduce using rule 173 (variable_access -> field_designator .)
    S_LESS_THAN_EQUAL reduce using rule 173 (variable_access -> field_designator .)
    S_GREATER_THAN_EQUAL reduce using rule 173 (variable_access -> field_designator .)
    S_LESS_THAN     reduce using rule 173 (variable_access -> field_designator .)
    S_GREATER_THAN  reduce using rule 173 (variable_access -> field_designator .)
    S_ELEMENT_OF    reduce using rule 173 (variable_access -> field_designator .)
    RW_EQ           reduce using rule 173 (variable_access -> field_designator .)
    RW_NEQ          reduce using rule 173 (variable_access -> field_designator .)
    S_RIGHT_BRACKET reduce using rule 173 (variable_access -> field_designator .)
    S_COMMA         reduce using rule 173 (variable_access -> field_designator .)
    DEDENT          reduce using rule 173 (variable_access -> field_designator .)
    S_SEMI_COLON    reduce using rule 173 (variable_access -> field_designator .)
    S_RETURN        reduce using rule 173 (variable_access -> field_designator .)
    RW_IF           reduce using rule 173 (variable_access -> field_designator .)
    RW_DEPEND       reduce using rule 173 (variable_access -> field_designator .)
    RW_WHILE        reduce using rule 173 (variable_access -> field_designator .)
    RW_ITERATE      reduce using rule 173 (variable_access -> field_designator .)
    IDENTIFIER      reduce using rule 173 (variable_access -> field_designator .)
    RW_REPEAT       reduce using rule 173 (variable_access -> field_designator .)
    RW_INPUT        reduce using rule 173 (variable_access -> field_designator .)
    RW_OUTPUT       reduce using rule 173 (variable_access -> field_designator .)
    RW_THEN         reduce using rule 173 (variable_access -> field_designator .)
    RW_DO           reduce using rule 173 (variable_access -> field_designator .)
    RW_TIMES        reduce using rule 173 (variable_access -> field_designator .)
    S_UP_TO         reduce using rule 173 (variable_access -> field_designator .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 173 (variable_access -> field_designator .)
    INDENT          reduce using rule 173 (variable_access -> field_designator .)
    S_COLON         reduce using rule 173 (variable_access -> field_designator .)


state 195

    (120) builtin_procedure_statements -> input_statement .

    DEDENT          reduce using rule 120 (builtin_procedure_statements -> input_statement .)
    S_SEMI_COLON    reduce using rule 120 (builtin_procedure_statements -> input_statement .)
    S_RETURN        reduce using rule 120 (builtin_procedure_statements -> input_statement .)
    RW_IF           reduce using rule 120 (builtin_procedure_statements -> input_statement .)
    RW_DEPEND       reduce using rule 120 (builtin_procedure_statements -> input_statement .)
    RW_WHILE        reduce using rule 120 (builtin_procedure_statements -> input_statement .)
    RW_ITERATE      reduce using rule 120 (builtin_procedure_statements -> input_statement .)
    IDENTIFIER      reduce using rule 120 (builtin_procedure_statements -> input_statement .)
    RW_REPEAT       reduce using rule 120 (builtin_procedure_statements -> input_statement .)
    RW_INPUT        reduce using rule 120 (builtin_procedure_statements -> input_statement .)
    RW_OUTPUT       reduce using rule 120 (builtin_procedure_statements -> input_statement .)


state 196

    (121) builtin_procedure_statements -> output_statement .

    DEDENT          reduce using rule 121 (builtin_procedure_statements -> output_statement .)
    S_SEMI_COLON    reduce using rule 121 (builtin_procedure_statements -> output_statement .)
    S_RETURN        reduce using rule 121 (builtin_procedure_statements -> output_statement .)
    RW_IF           reduce using rule 121 (builtin_procedure_statements -> output_statement .)
    RW_DEPEND       reduce using rule 121 (builtin_procedure_statements -> output_statement .)
    RW_WHILE        reduce using rule 121 (builtin_procedure_statements -> output_statement .)
    RW_ITERATE      reduce using rule 121 (builtin_procedure_statements -> output_statement .)
    IDENTIFIER      reduce using rule 121 (builtin_procedure_statements -> output_statement .)
    RW_REPEAT       reduce using rule 121 (builtin_procedure_statements -> output_statement .)
    RW_INPUT        reduce using rule 121 (builtin_procedure_statements -> output_statement .)
    RW_OUTPUT       reduce using rule 121 (builtin_procedure_statements -> output_statement .)


state 197

    (140) repeat_until_statement -> RW_REPEAT . compound_statement RW_UNTIL boolean_expression
    (141) repeat_times_statement -> RW_REPEAT . variable_access RW_TIMES compound_statement
    (142) repeat_times_statement -> RW_REPEAT . integer_constant RW_TIMES compound_statement
    (143) repeat_times_statement -> RW_REPEAT . function_designator RW_TIMES compound_statement
    (100) compound_statement -> . INDENT statement_sequence DEDENT
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (164) integer_constant -> . L_INTEGER_NUMBER
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    INDENT          shift and go to state 127
    L_INTEGER_NUMBER shift and go to state 89
    IDENTIFIER      shift and go to state 11
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    compound_statement             shift and go to state 276
    variable_access                shift and go to state 277
    integer_constant               shift and go to state 278
    function_designator            shift and go to state 279
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 198

    (122) input_statement -> RW_INPUT . S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 280


state 199

    (126) output_statement -> RW_OUTPUT . S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 281


state 200

    (95) function_parameter_list -> function_parameter_list S_SEMI_COLON function_parameter_declaration .

    S_SEMI_COLON    reduce using rule 95 (function_parameter_list -> function_parameter_list S_SEMI_COLON function_parameter_declaration .)
    S_COMMA         reduce using rule 95 (function_parameter_list -> function_parameter_list S_SEMI_COLON function_parameter_declaration .)
    S_RIGHT_BRACKET reduce using rule 95 (function_parameter_list -> function_parameter_list S_SEMI_COLON function_parameter_declaration .)


state 201

    (96) function_parameter_list -> function_parameter_list S_COMMA function_parameter_declaration .

    S_SEMI_COLON    reduce using rule 96 (function_parameter_list -> function_parameter_list S_COMMA function_parameter_declaration .)
    S_COMMA         reduce using rule 96 (function_parameter_list -> function_parameter_list S_COMMA function_parameter_declaration .)
    S_RIGHT_BRACKET reduce using rule 96 (function_parameter_list -> function_parameter_list S_COMMA function_parameter_declaration .)


state 202

    (59) variable_sub_declaration -> identifier_list S_COLON type_denoter .

    S_SEMI_COLON    reduce using rule 59 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    S_COMMA         reduce using rule 59 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    S_RIGHT_BRACKET reduce using rule 59 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    IDENTIFIER      reduce using rule 59 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    DEDENT          reduce using rule 59 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    RW_PROCEDURE    reduce using rule 59 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    RW_FUNCTION     reduce using rule 59 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    S_GREATER_THAN  reduce using rule 59 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)


state 203

    (5) identifier_list -> identifier_list S_COMMA identifier .

    S_COLON         reduce using rule 5 (identifier_list -> identifier_list S_COMMA identifier .)
    S_COMMA         reduce using rule 5 (identifier_list -> identifier_list S_COMMA identifier .)
    S_RIGHT_BRACKET reduce using rule 5 (identifier_list -> identifier_list S_COMMA identifier .)


state 204

    (211) primary_expression -> S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    expression                     shift and go to state 282
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 205

    (92) function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list . S_RIGHT_BRACKET
    (117) actual_parameter_list -> actual_parameter_list . S_COMMA actual_parameter

    S_RIGHT_BRACKET shift and go to state 283
    S_COMMA         shift and go to state 284


state 206

    (118) actual_parameter_list -> actual_parameter .

    S_RIGHT_BRACKET reduce using rule 118 (actual_parameter_list -> actual_parameter .)
    S_COMMA         reduce using rule 118 (actual_parameter_list -> actual_parameter .)


state 207

    (119) actual_parameter -> expression .
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET reduce using rule 119 (actual_parameter -> expression .)
    S_COMMA         reduce using rule 119 (actual_parameter -> expression .)
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 208

    (179) expression -> additive_expression .
    (189) additive_expression -> additive_expression . additive_op multiplicative_expression
    (191) additive_op -> . S_PLUS
    (192) additive_op -> . S_MINUS
    (193) additive_op -> . RW_OR
    (194) additive_op -> . RW_XOR

    S_EQUAL         reduce using rule 179 (expression -> additive_expression .)
    S_NOT_EQUAL     reduce using rule 179 (expression -> additive_expression .)
    S_LESS_THAN_EQUAL reduce using rule 179 (expression -> additive_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 179 (expression -> additive_expression .)
    S_LESS_THAN     reduce using rule 179 (expression -> additive_expression .)
    S_GREATER_THAN  reduce using rule 179 (expression -> additive_expression .)
    S_ELEMENT_OF    reduce using rule 179 (expression -> additive_expression .)
    RW_EQ           reduce using rule 179 (expression -> additive_expression .)
    RW_NEQ          reduce using rule 179 (expression -> additive_expression .)
    S_RIGHT_BRACKET reduce using rule 179 (expression -> additive_expression .)
    S_COMMA         reduce using rule 179 (expression -> additive_expression .)
    DEDENT          reduce using rule 179 (expression -> additive_expression .)
    S_SEMI_COLON    reduce using rule 179 (expression -> additive_expression .)
    S_RETURN        reduce using rule 179 (expression -> additive_expression .)
    RW_IF           reduce using rule 179 (expression -> additive_expression .)
    RW_DEPEND       reduce using rule 179 (expression -> additive_expression .)
    RW_WHILE        reduce using rule 179 (expression -> additive_expression .)
    RW_ITERATE      reduce using rule 179 (expression -> additive_expression .)
    IDENTIFIER      reduce using rule 179 (expression -> additive_expression .)
    RW_REPEAT       reduce using rule 179 (expression -> additive_expression .)
    RW_INPUT        reduce using rule 179 (expression -> additive_expression .)
    RW_OUTPUT       reduce using rule 179 (expression -> additive_expression .)
    RW_THEN         reduce using rule 179 (expression -> additive_expression .)
    RW_DO           reduce using rule 179 (expression -> additive_expression .)
    S_UP_TO         reduce using rule 179 (expression -> additive_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 179 (expression -> additive_expression .)
    INDENT          reduce using rule 179 (expression -> additive_expression .)
    S_COLON         reduce using rule 179 (expression -> additive_expression .)
    S_PLUS          shift and go to state 296
    S_MINUS         shift and go to state 297
    RW_OR           shift and go to state 298
    RW_XOR          shift and go to state 299

    additive_op                    shift and go to state 295

state 209

    (190) additive_expression -> multiplicative_expression .
    (195) multiplicative_expression -> multiplicative_expression . multiplicative_op unary_expression
    (197) multiplicative_op -> . S_TIMES
    (198) multiplicative_op -> . S_DIVIDE
    (199) multiplicative_op -> . RW_DIV
    (200) multiplicative_op -> . RW_MOD
    (201) multiplicative_op -> . RW_AND

    S_PLUS          reduce using rule 190 (additive_expression -> multiplicative_expression .)
    S_MINUS         reduce using rule 190 (additive_expression -> multiplicative_expression .)
    RW_OR           reduce using rule 190 (additive_expression -> multiplicative_expression .)
    RW_XOR          reduce using rule 190 (additive_expression -> multiplicative_expression .)
    S_EQUAL         reduce using rule 190 (additive_expression -> multiplicative_expression .)
    S_NOT_EQUAL     reduce using rule 190 (additive_expression -> multiplicative_expression .)
    S_LESS_THAN_EQUAL reduce using rule 190 (additive_expression -> multiplicative_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 190 (additive_expression -> multiplicative_expression .)
    S_LESS_THAN     reduce using rule 190 (additive_expression -> multiplicative_expression .)
    S_GREATER_THAN  reduce using rule 190 (additive_expression -> multiplicative_expression .)
    S_ELEMENT_OF    reduce using rule 190 (additive_expression -> multiplicative_expression .)
    RW_EQ           reduce using rule 190 (additive_expression -> multiplicative_expression .)
    RW_NEQ          reduce using rule 190 (additive_expression -> multiplicative_expression .)
    S_RIGHT_BRACKET reduce using rule 190 (additive_expression -> multiplicative_expression .)
    S_COMMA         reduce using rule 190 (additive_expression -> multiplicative_expression .)
    DEDENT          reduce using rule 190 (additive_expression -> multiplicative_expression .)
    S_SEMI_COLON    reduce using rule 190 (additive_expression -> multiplicative_expression .)
    S_RETURN        reduce using rule 190 (additive_expression -> multiplicative_expression .)
    RW_IF           reduce using rule 190 (additive_expression -> multiplicative_expression .)
    RW_DEPEND       reduce using rule 190 (additive_expression -> multiplicative_expression .)
    RW_WHILE        reduce using rule 190 (additive_expression -> multiplicative_expression .)
    RW_ITERATE      reduce using rule 190 (additive_expression -> multiplicative_expression .)
    IDENTIFIER      reduce using rule 190 (additive_expression -> multiplicative_expression .)
    RW_REPEAT       reduce using rule 190 (additive_expression -> multiplicative_expression .)
    RW_INPUT        reduce using rule 190 (additive_expression -> multiplicative_expression .)
    RW_OUTPUT       reduce using rule 190 (additive_expression -> multiplicative_expression .)
    RW_THEN         reduce using rule 190 (additive_expression -> multiplicative_expression .)
    RW_DO           reduce using rule 190 (additive_expression -> multiplicative_expression .)
    S_UP_TO         reduce using rule 190 (additive_expression -> multiplicative_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 190 (additive_expression -> multiplicative_expression .)
    INDENT          reduce using rule 190 (additive_expression -> multiplicative_expression .)
    S_COLON         reduce using rule 190 (additive_expression -> multiplicative_expression .)
    S_TIMES         shift and go to state 301
    S_DIVIDE        shift and go to state 302
    RW_DIV          shift and go to state 303
    RW_MOD          shift and go to state 304
    RW_AND          shift and go to state 305

    multiplicative_op              shift and go to state 300

state 210

    (196) multiplicative_expression -> unary_expression .

    S_TIMES         reduce using rule 196 (multiplicative_expression -> unary_expression .)
    S_DIVIDE        reduce using rule 196 (multiplicative_expression -> unary_expression .)
    RW_DIV          reduce using rule 196 (multiplicative_expression -> unary_expression .)
    RW_MOD          reduce using rule 196 (multiplicative_expression -> unary_expression .)
    RW_AND          reduce using rule 196 (multiplicative_expression -> unary_expression .)
    S_PLUS          reduce using rule 196 (multiplicative_expression -> unary_expression .)
    S_MINUS         reduce using rule 196 (multiplicative_expression -> unary_expression .)
    RW_OR           reduce using rule 196 (multiplicative_expression -> unary_expression .)
    RW_XOR          reduce using rule 196 (multiplicative_expression -> unary_expression .)
    S_EQUAL         reduce using rule 196 (multiplicative_expression -> unary_expression .)
    S_NOT_EQUAL     reduce using rule 196 (multiplicative_expression -> unary_expression .)
    S_LESS_THAN_EQUAL reduce using rule 196 (multiplicative_expression -> unary_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 196 (multiplicative_expression -> unary_expression .)
    S_LESS_THAN     reduce using rule 196 (multiplicative_expression -> unary_expression .)
    S_GREATER_THAN  reduce using rule 196 (multiplicative_expression -> unary_expression .)
    S_ELEMENT_OF    reduce using rule 196 (multiplicative_expression -> unary_expression .)
    RW_EQ           reduce using rule 196 (multiplicative_expression -> unary_expression .)
    RW_NEQ          reduce using rule 196 (multiplicative_expression -> unary_expression .)
    S_RIGHT_BRACKET reduce using rule 196 (multiplicative_expression -> unary_expression .)
    S_COMMA         reduce using rule 196 (multiplicative_expression -> unary_expression .)
    DEDENT          reduce using rule 196 (multiplicative_expression -> unary_expression .)
    S_SEMI_COLON    reduce using rule 196 (multiplicative_expression -> unary_expression .)
    S_RETURN        reduce using rule 196 (multiplicative_expression -> unary_expression .)
    RW_IF           reduce using rule 196 (multiplicative_expression -> unary_expression .)
    RW_DEPEND       reduce using rule 196 (multiplicative_expression -> unary_expression .)
    RW_WHILE        reduce using rule 196 (multiplicative_expression -> unary_expression .)
    RW_ITERATE      reduce using rule 196 (multiplicative_expression -> unary_expression .)
    IDENTIFIER      reduce using rule 196 (multiplicative_expression -> unary_expression .)
    RW_REPEAT       reduce using rule 196 (multiplicative_expression -> unary_expression .)
    RW_INPUT        reduce using rule 196 (multiplicative_expression -> unary_expression .)
    RW_OUTPUT       reduce using rule 196 (multiplicative_expression -> unary_expression .)
    RW_THEN         reduce using rule 196 (multiplicative_expression -> unary_expression .)
    RW_DO           reduce using rule 196 (multiplicative_expression -> unary_expression .)
    S_UP_TO         reduce using rule 196 (multiplicative_expression -> unary_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 196 (multiplicative_expression -> unary_expression .)
    INDENT          reduce using rule 196 (multiplicative_expression -> unary_expression .)
    S_COLON         reduce using rule 196 (multiplicative_expression -> unary_expression .)


state 211

    (202) unary_expression -> unary_op . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    unary_op                       shift and go to state 211
    unary_expression               shift and go to state 306
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 212

    (203) unary_expression -> exponentiation_expression .

    S_TIMES         reduce using rule 203 (unary_expression -> exponentiation_expression .)
    S_DIVIDE        reduce using rule 203 (unary_expression -> exponentiation_expression .)
    RW_DIV          reduce using rule 203 (unary_expression -> exponentiation_expression .)
    RW_MOD          reduce using rule 203 (unary_expression -> exponentiation_expression .)
    RW_AND          reduce using rule 203 (unary_expression -> exponentiation_expression .)
    S_PLUS          reduce using rule 203 (unary_expression -> exponentiation_expression .)
    S_MINUS         reduce using rule 203 (unary_expression -> exponentiation_expression .)
    RW_OR           reduce using rule 203 (unary_expression -> exponentiation_expression .)
    RW_XOR          reduce using rule 203 (unary_expression -> exponentiation_expression .)
    S_EQUAL         reduce using rule 203 (unary_expression -> exponentiation_expression .)
    S_NOT_EQUAL     reduce using rule 203 (unary_expression -> exponentiation_expression .)
    S_LESS_THAN_EQUAL reduce using rule 203 (unary_expression -> exponentiation_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 203 (unary_expression -> exponentiation_expression .)
    S_LESS_THAN     reduce using rule 203 (unary_expression -> exponentiation_expression .)
    S_GREATER_THAN  reduce using rule 203 (unary_expression -> exponentiation_expression .)
    S_ELEMENT_OF    reduce using rule 203 (unary_expression -> exponentiation_expression .)
    RW_EQ           reduce using rule 203 (unary_expression -> exponentiation_expression .)
    RW_NEQ          reduce using rule 203 (unary_expression -> exponentiation_expression .)
    S_RIGHT_BRACKET reduce using rule 203 (unary_expression -> exponentiation_expression .)
    S_COMMA         reduce using rule 203 (unary_expression -> exponentiation_expression .)
    DEDENT          reduce using rule 203 (unary_expression -> exponentiation_expression .)
    S_SEMI_COLON    reduce using rule 203 (unary_expression -> exponentiation_expression .)
    S_RETURN        reduce using rule 203 (unary_expression -> exponentiation_expression .)
    RW_IF           reduce using rule 203 (unary_expression -> exponentiation_expression .)
    RW_DEPEND       reduce using rule 203 (unary_expression -> exponentiation_expression .)
    RW_WHILE        reduce using rule 203 (unary_expression -> exponentiation_expression .)
    RW_ITERATE      reduce using rule 203 (unary_expression -> exponentiation_expression .)
    IDENTIFIER      reduce using rule 203 (unary_expression -> exponentiation_expression .)
    RW_REPEAT       reduce using rule 203 (unary_expression -> exponentiation_expression .)
    RW_INPUT        reduce using rule 203 (unary_expression -> exponentiation_expression .)
    RW_OUTPUT       reduce using rule 203 (unary_expression -> exponentiation_expression .)
    RW_THEN         reduce using rule 203 (unary_expression -> exponentiation_expression .)
    RW_DO           reduce using rule 203 (unary_expression -> exponentiation_expression .)
    S_UP_TO         reduce using rule 203 (unary_expression -> exponentiation_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 203 (unary_expression -> exponentiation_expression .)
    INDENT          reduce using rule 203 (unary_expression -> exponentiation_expression .)
    S_COLON         reduce using rule 203 (unary_expression -> exponentiation_expression .)


state 213

    (206) unary_op -> S_PLUS .

    S_PLUS          reduce using rule 206 (unary_op -> S_PLUS .)
    S_MINUS         reduce using rule 206 (unary_op -> S_PLUS .)
    RW_NOT          reduce using rule 206 (unary_op -> S_PLUS .)
    S_LEFT_BRACKET  reduce using rule 206 (unary_op -> S_PLUS .)
    S_LEFT_SQUARE_BRACKET reduce using rule 206 (unary_op -> S_PLUS .)
    IDENTIFIER      reduce using rule 206 (unary_op -> S_PLUS .)
    L_BOOLEAN_TRUE  reduce using rule 206 (unary_op -> S_PLUS .)
    L_BOOLEAN_FALSE reduce using rule 206 (unary_op -> S_PLUS .)
    L_NIL           reduce using rule 206 (unary_op -> S_PLUS .)
    L_INTEGER_NUMBER reduce using rule 206 (unary_op -> S_PLUS .)
    L_REAL_NUMBER   reduce using rule 206 (unary_op -> S_PLUS .)
    L_STRING        reduce using rule 206 (unary_op -> S_PLUS .)
    L_CHARACTER     reduce using rule 206 (unary_op -> S_PLUS .)
    RW_ABS          reduce using rule 206 (unary_op -> S_PLUS .)
    RW_SIN          reduce using rule 206 (unary_op -> S_PLUS .)
    RW_COS          reduce using rule 206 (unary_op -> S_PLUS .)
    RW_TAN          reduce using rule 206 (unary_op -> S_PLUS .)
    RW_SUCC         reduce using rule 206 (unary_op -> S_PLUS .)
    RW_PRED         reduce using rule 206 (unary_op -> S_PLUS .)
    RW_AWAL         reduce using rule 206 (unary_op -> S_PLUS .)
    RW_AKHIR        reduce using rule 206 (unary_op -> S_PLUS .)
    RW_FIRSTCHAR    reduce using rule 206 (unary_op -> S_PLUS .)
    RW_LASTCHAR     reduce using rule 206 (unary_op -> S_PLUS .)
    RW_LONG         reduce using rule 206 (unary_op -> S_PLUS .)
    RW_ISKOSONG     reduce using rule 206 (unary_op -> S_PLUS .)
    RW_INTEGERTOREAL reduce using rule 206 (unary_op -> S_PLUS .)
    RW_REALTOINTEGER reduce using rule 206 (unary_op -> S_PLUS .)


state 214

    (207) unary_op -> S_MINUS .

    S_PLUS          reduce using rule 207 (unary_op -> S_MINUS .)
    S_MINUS         reduce using rule 207 (unary_op -> S_MINUS .)
    RW_NOT          reduce using rule 207 (unary_op -> S_MINUS .)
    S_LEFT_BRACKET  reduce using rule 207 (unary_op -> S_MINUS .)
    S_LEFT_SQUARE_BRACKET reduce using rule 207 (unary_op -> S_MINUS .)
    IDENTIFIER      reduce using rule 207 (unary_op -> S_MINUS .)
    L_BOOLEAN_TRUE  reduce using rule 207 (unary_op -> S_MINUS .)
    L_BOOLEAN_FALSE reduce using rule 207 (unary_op -> S_MINUS .)
    L_NIL           reduce using rule 207 (unary_op -> S_MINUS .)
    L_INTEGER_NUMBER reduce using rule 207 (unary_op -> S_MINUS .)
    L_REAL_NUMBER   reduce using rule 207 (unary_op -> S_MINUS .)
    L_STRING        reduce using rule 207 (unary_op -> S_MINUS .)
    L_CHARACTER     reduce using rule 207 (unary_op -> S_MINUS .)
    RW_ABS          reduce using rule 207 (unary_op -> S_MINUS .)
    RW_SIN          reduce using rule 207 (unary_op -> S_MINUS .)
    RW_COS          reduce using rule 207 (unary_op -> S_MINUS .)
    RW_TAN          reduce using rule 207 (unary_op -> S_MINUS .)
    RW_SUCC         reduce using rule 207 (unary_op -> S_MINUS .)
    RW_PRED         reduce using rule 207 (unary_op -> S_MINUS .)
    RW_AWAL         reduce using rule 207 (unary_op -> S_MINUS .)
    RW_AKHIR        reduce using rule 207 (unary_op -> S_MINUS .)
    RW_FIRSTCHAR    reduce using rule 207 (unary_op -> S_MINUS .)
    RW_LASTCHAR     reduce using rule 207 (unary_op -> S_MINUS .)
    RW_LONG         reduce using rule 207 (unary_op -> S_MINUS .)
    RW_ISKOSONG     reduce using rule 207 (unary_op -> S_MINUS .)
    RW_INTEGERTOREAL reduce using rule 207 (unary_op -> S_MINUS .)
    RW_REALTOINTEGER reduce using rule 207 (unary_op -> S_MINUS .)


state 215

    (208) unary_op -> RW_NOT .

    S_PLUS          reduce using rule 208 (unary_op -> RW_NOT .)
    S_MINUS         reduce using rule 208 (unary_op -> RW_NOT .)
    RW_NOT          reduce using rule 208 (unary_op -> RW_NOT .)
    S_LEFT_BRACKET  reduce using rule 208 (unary_op -> RW_NOT .)
    S_LEFT_SQUARE_BRACKET reduce using rule 208 (unary_op -> RW_NOT .)
    IDENTIFIER      reduce using rule 208 (unary_op -> RW_NOT .)
    L_BOOLEAN_TRUE  reduce using rule 208 (unary_op -> RW_NOT .)
    L_BOOLEAN_FALSE reduce using rule 208 (unary_op -> RW_NOT .)
    L_NIL           reduce using rule 208 (unary_op -> RW_NOT .)
    L_INTEGER_NUMBER reduce using rule 208 (unary_op -> RW_NOT .)
    L_REAL_NUMBER   reduce using rule 208 (unary_op -> RW_NOT .)
    L_STRING        reduce using rule 208 (unary_op -> RW_NOT .)
    L_CHARACTER     reduce using rule 208 (unary_op -> RW_NOT .)
    RW_ABS          reduce using rule 208 (unary_op -> RW_NOT .)
    RW_SIN          reduce using rule 208 (unary_op -> RW_NOT .)
    RW_COS          reduce using rule 208 (unary_op -> RW_NOT .)
    RW_TAN          reduce using rule 208 (unary_op -> RW_NOT .)
    RW_SUCC         reduce using rule 208 (unary_op -> RW_NOT .)
    RW_PRED         reduce using rule 208 (unary_op -> RW_NOT .)
    RW_AWAL         reduce using rule 208 (unary_op -> RW_NOT .)
    RW_AKHIR        reduce using rule 208 (unary_op -> RW_NOT .)
    RW_FIRSTCHAR    reduce using rule 208 (unary_op -> RW_NOT .)
    RW_LASTCHAR     reduce using rule 208 (unary_op -> RW_NOT .)
    RW_LONG         reduce using rule 208 (unary_op -> RW_NOT .)
    RW_ISKOSONG     reduce using rule 208 (unary_op -> RW_NOT .)
    RW_INTEGERTOREAL reduce using rule 208 (unary_op -> RW_NOT .)
    RW_REALTOINTEGER reduce using rule 208 (unary_op -> RW_NOT .)


state 216

    (204) exponentiation_expression -> primary_expression .
    (205) exponentiation_expression -> primary_expression . S_POWER exponentiation_expression

    S_TIMES         reduce using rule 204 (exponentiation_expression -> primary_expression .)
    S_DIVIDE        reduce using rule 204 (exponentiation_expression -> primary_expression .)
    RW_DIV          reduce using rule 204 (exponentiation_expression -> primary_expression .)
    RW_MOD          reduce using rule 204 (exponentiation_expression -> primary_expression .)
    RW_AND          reduce using rule 204 (exponentiation_expression -> primary_expression .)
    S_PLUS          reduce using rule 204 (exponentiation_expression -> primary_expression .)
    S_MINUS         reduce using rule 204 (exponentiation_expression -> primary_expression .)
    RW_OR           reduce using rule 204 (exponentiation_expression -> primary_expression .)
    RW_XOR          reduce using rule 204 (exponentiation_expression -> primary_expression .)
    S_EQUAL         reduce using rule 204 (exponentiation_expression -> primary_expression .)
    S_NOT_EQUAL     reduce using rule 204 (exponentiation_expression -> primary_expression .)
    S_LESS_THAN_EQUAL reduce using rule 204 (exponentiation_expression -> primary_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 204 (exponentiation_expression -> primary_expression .)
    S_LESS_THAN     reduce using rule 204 (exponentiation_expression -> primary_expression .)
    S_GREATER_THAN  reduce using rule 204 (exponentiation_expression -> primary_expression .)
    S_ELEMENT_OF    reduce using rule 204 (exponentiation_expression -> primary_expression .)
    RW_EQ           reduce using rule 204 (exponentiation_expression -> primary_expression .)
    RW_NEQ          reduce using rule 204 (exponentiation_expression -> primary_expression .)
    S_RIGHT_BRACKET reduce using rule 204 (exponentiation_expression -> primary_expression .)
    S_COMMA         reduce using rule 204 (exponentiation_expression -> primary_expression .)
    DEDENT          reduce using rule 204 (exponentiation_expression -> primary_expression .)
    S_SEMI_COLON    reduce using rule 204 (exponentiation_expression -> primary_expression .)
    S_RETURN        reduce using rule 204 (exponentiation_expression -> primary_expression .)
    RW_IF           reduce using rule 204 (exponentiation_expression -> primary_expression .)
    RW_DEPEND       reduce using rule 204 (exponentiation_expression -> primary_expression .)
    RW_WHILE        reduce using rule 204 (exponentiation_expression -> primary_expression .)
    RW_ITERATE      reduce using rule 204 (exponentiation_expression -> primary_expression .)
    IDENTIFIER      reduce using rule 204 (exponentiation_expression -> primary_expression .)
    RW_REPEAT       reduce using rule 204 (exponentiation_expression -> primary_expression .)
    RW_INPUT        reduce using rule 204 (exponentiation_expression -> primary_expression .)
    RW_OUTPUT       reduce using rule 204 (exponentiation_expression -> primary_expression .)
    RW_THEN         reduce using rule 204 (exponentiation_expression -> primary_expression .)
    RW_DO           reduce using rule 204 (exponentiation_expression -> primary_expression .)
    S_UP_TO         reduce using rule 204 (exponentiation_expression -> primary_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 204 (exponentiation_expression -> primary_expression .)
    INDENT          reduce using rule 204 (exponentiation_expression -> primary_expression .)
    S_COLON         reduce using rule 204 (exponentiation_expression -> primary_expression .)
    S_POWER         shift and go to state 307


state 217

    (209) primary_expression -> variable_access .
    (174) indexed_variable -> variable_access . S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> variable_access . S_DOT identifier

    S_POWER         reduce using rule 209 (primary_expression -> variable_access .)
    S_TIMES         reduce using rule 209 (primary_expression -> variable_access .)
    S_DIVIDE        reduce using rule 209 (primary_expression -> variable_access .)
    RW_DIV          reduce using rule 209 (primary_expression -> variable_access .)
    RW_MOD          reduce using rule 209 (primary_expression -> variable_access .)
    RW_AND          reduce using rule 209 (primary_expression -> variable_access .)
    S_PLUS          reduce using rule 209 (primary_expression -> variable_access .)
    S_MINUS         reduce using rule 209 (primary_expression -> variable_access .)
    RW_OR           reduce using rule 209 (primary_expression -> variable_access .)
    RW_XOR          reduce using rule 209 (primary_expression -> variable_access .)
    S_EQUAL         reduce using rule 209 (primary_expression -> variable_access .)
    S_NOT_EQUAL     reduce using rule 209 (primary_expression -> variable_access .)
    S_LESS_THAN_EQUAL reduce using rule 209 (primary_expression -> variable_access .)
    S_GREATER_THAN_EQUAL reduce using rule 209 (primary_expression -> variable_access .)
    S_LESS_THAN     reduce using rule 209 (primary_expression -> variable_access .)
    S_GREATER_THAN  reduce using rule 209 (primary_expression -> variable_access .)
    S_ELEMENT_OF    reduce using rule 209 (primary_expression -> variable_access .)
    RW_EQ           reduce using rule 209 (primary_expression -> variable_access .)
    RW_NEQ          reduce using rule 209 (primary_expression -> variable_access .)
    S_RIGHT_BRACKET reduce using rule 209 (primary_expression -> variable_access .)
    S_COMMA         reduce using rule 209 (primary_expression -> variable_access .)
    DEDENT          reduce using rule 209 (primary_expression -> variable_access .)
    S_SEMI_COLON    reduce using rule 209 (primary_expression -> variable_access .)
    S_RETURN        reduce using rule 209 (primary_expression -> variable_access .)
    RW_IF           reduce using rule 209 (primary_expression -> variable_access .)
    RW_DEPEND       reduce using rule 209 (primary_expression -> variable_access .)
    RW_WHILE        reduce using rule 209 (primary_expression -> variable_access .)
    RW_ITERATE      reduce using rule 209 (primary_expression -> variable_access .)
    IDENTIFIER      reduce using rule 209 (primary_expression -> variable_access .)
    RW_REPEAT       reduce using rule 209 (primary_expression -> variable_access .)
    RW_INPUT        reduce using rule 209 (primary_expression -> variable_access .)
    RW_OUTPUT       reduce using rule 209 (primary_expression -> variable_access .)
    RW_THEN         reduce using rule 209 (primary_expression -> variable_access .)
    RW_DO           reduce using rule 209 (primary_expression -> variable_access .)
    S_UP_TO         reduce using rule 209 (primary_expression -> variable_access .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 209 (primary_expression -> variable_access .)
    INDENT          reduce using rule 209 (primary_expression -> variable_access .)
    S_COLON         reduce using rule 209 (primary_expression -> variable_access .)
    S_LEFT_SQUARE_BRACKET shift and go to state 266
    S_DOT           shift and go to state 267


state 218

    (210) primary_expression -> unsigned_constant .

    S_POWER         reduce using rule 210 (primary_expression -> unsigned_constant .)
    S_TIMES         reduce using rule 210 (primary_expression -> unsigned_constant .)
    S_DIVIDE        reduce using rule 210 (primary_expression -> unsigned_constant .)
    RW_DIV          reduce using rule 210 (primary_expression -> unsigned_constant .)
    RW_MOD          reduce using rule 210 (primary_expression -> unsigned_constant .)
    RW_AND          reduce using rule 210 (primary_expression -> unsigned_constant .)
    S_PLUS          reduce using rule 210 (primary_expression -> unsigned_constant .)
    S_MINUS         reduce using rule 210 (primary_expression -> unsigned_constant .)
    RW_OR           reduce using rule 210 (primary_expression -> unsigned_constant .)
    RW_XOR          reduce using rule 210 (primary_expression -> unsigned_constant .)
    S_EQUAL         reduce using rule 210 (primary_expression -> unsigned_constant .)
    S_NOT_EQUAL     reduce using rule 210 (primary_expression -> unsigned_constant .)
    S_LESS_THAN_EQUAL reduce using rule 210 (primary_expression -> unsigned_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 210 (primary_expression -> unsigned_constant .)
    S_LESS_THAN     reduce using rule 210 (primary_expression -> unsigned_constant .)
    S_GREATER_THAN  reduce using rule 210 (primary_expression -> unsigned_constant .)
    S_ELEMENT_OF    reduce using rule 210 (primary_expression -> unsigned_constant .)
    RW_EQ           reduce using rule 210 (primary_expression -> unsigned_constant .)
    RW_NEQ          reduce using rule 210 (primary_expression -> unsigned_constant .)
    S_RIGHT_BRACKET reduce using rule 210 (primary_expression -> unsigned_constant .)
    S_COMMA         reduce using rule 210 (primary_expression -> unsigned_constant .)
    DEDENT          reduce using rule 210 (primary_expression -> unsigned_constant .)
    S_SEMI_COLON    reduce using rule 210 (primary_expression -> unsigned_constant .)
    S_RETURN        reduce using rule 210 (primary_expression -> unsigned_constant .)
    RW_IF           reduce using rule 210 (primary_expression -> unsigned_constant .)
    RW_DEPEND       reduce using rule 210 (primary_expression -> unsigned_constant .)
    RW_WHILE        reduce using rule 210 (primary_expression -> unsigned_constant .)
    RW_ITERATE      reduce using rule 210 (primary_expression -> unsigned_constant .)
    IDENTIFIER      reduce using rule 210 (primary_expression -> unsigned_constant .)
    RW_REPEAT       reduce using rule 210 (primary_expression -> unsigned_constant .)
    RW_INPUT        reduce using rule 210 (primary_expression -> unsigned_constant .)
    RW_OUTPUT       reduce using rule 210 (primary_expression -> unsigned_constant .)
    RW_THEN         reduce using rule 210 (primary_expression -> unsigned_constant .)
    RW_DO           reduce using rule 210 (primary_expression -> unsigned_constant .)
    S_UP_TO         reduce using rule 210 (primary_expression -> unsigned_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 210 (primary_expression -> unsigned_constant .)
    INDENT          reduce using rule 210 (primary_expression -> unsigned_constant .)
    S_COLON         reduce using rule 210 (primary_expression -> unsigned_constant .)


state 219

    (212) primary_expression -> set_constructor .

    S_POWER         reduce using rule 212 (primary_expression -> set_constructor .)
    S_TIMES         reduce using rule 212 (primary_expression -> set_constructor .)
    S_DIVIDE        reduce using rule 212 (primary_expression -> set_constructor .)
    RW_DIV          reduce using rule 212 (primary_expression -> set_constructor .)
    RW_MOD          reduce using rule 212 (primary_expression -> set_constructor .)
    RW_AND          reduce using rule 212 (primary_expression -> set_constructor .)
    S_PLUS          reduce using rule 212 (primary_expression -> set_constructor .)
    S_MINUS         reduce using rule 212 (primary_expression -> set_constructor .)
    RW_OR           reduce using rule 212 (primary_expression -> set_constructor .)
    RW_XOR          reduce using rule 212 (primary_expression -> set_constructor .)
    S_EQUAL         reduce using rule 212 (primary_expression -> set_constructor .)
    S_NOT_EQUAL     reduce using rule 212 (primary_expression -> set_constructor .)
    S_LESS_THAN_EQUAL reduce using rule 212 (primary_expression -> set_constructor .)
    S_GREATER_THAN_EQUAL reduce using rule 212 (primary_expression -> set_constructor .)
    S_LESS_THAN     reduce using rule 212 (primary_expression -> set_constructor .)
    S_GREATER_THAN  reduce using rule 212 (primary_expression -> set_constructor .)
    S_ELEMENT_OF    reduce using rule 212 (primary_expression -> set_constructor .)
    RW_EQ           reduce using rule 212 (primary_expression -> set_constructor .)
    RW_NEQ          reduce using rule 212 (primary_expression -> set_constructor .)
    S_RIGHT_BRACKET reduce using rule 212 (primary_expression -> set_constructor .)
    S_COMMA         reduce using rule 212 (primary_expression -> set_constructor .)
    DEDENT          reduce using rule 212 (primary_expression -> set_constructor .)
    S_SEMI_COLON    reduce using rule 212 (primary_expression -> set_constructor .)
    S_RETURN        reduce using rule 212 (primary_expression -> set_constructor .)
    RW_IF           reduce using rule 212 (primary_expression -> set_constructor .)
    RW_DEPEND       reduce using rule 212 (primary_expression -> set_constructor .)
    RW_WHILE        reduce using rule 212 (primary_expression -> set_constructor .)
    RW_ITERATE      reduce using rule 212 (primary_expression -> set_constructor .)
    IDENTIFIER      reduce using rule 212 (primary_expression -> set_constructor .)
    RW_REPEAT       reduce using rule 212 (primary_expression -> set_constructor .)
    RW_INPUT        reduce using rule 212 (primary_expression -> set_constructor .)
    RW_OUTPUT       reduce using rule 212 (primary_expression -> set_constructor .)
    RW_THEN         reduce using rule 212 (primary_expression -> set_constructor .)
    RW_DO           reduce using rule 212 (primary_expression -> set_constructor .)
    S_UP_TO         reduce using rule 212 (primary_expression -> set_constructor .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 212 (primary_expression -> set_constructor .)
    INDENT          reduce using rule 212 (primary_expression -> set_constructor .)
    S_COLON         reduce using rule 212 (primary_expression -> set_constructor .)


state 220

    (213) primary_expression -> function_designator .

    S_POWER         reduce using rule 213 (primary_expression -> function_designator .)
    S_TIMES         reduce using rule 213 (primary_expression -> function_designator .)
    S_DIVIDE        reduce using rule 213 (primary_expression -> function_designator .)
    RW_DIV          reduce using rule 213 (primary_expression -> function_designator .)
    RW_MOD          reduce using rule 213 (primary_expression -> function_designator .)
    RW_AND          reduce using rule 213 (primary_expression -> function_designator .)
    S_PLUS          reduce using rule 213 (primary_expression -> function_designator .)
    S_MINUS         reduce using rule 213 (primary_expression -> function_designator .)
    RW_OR           reduce using rule 213 (primary_expression -> function_designator .)
    RW_XOR          reduce using rule 213 (primary_expression -> function_designator .)
    S_EQUAL         reduce using rule 213 (primary_expression -> function_designator .)
    S_NOT_EQUAL     reduce using rule 213 (primary_expression -> function_designator .)
    S_LESS_THAN_EQUAL reduce using rule 213 (primary_expression -> function_designator .)
    S_GREATER_THAN_EQUAL reduce using rule 213 (primary_expression -> function_designator .)
    S_LESS_THAN     reduce using rule 213 (primary_expression -> function_designator .)
    S_GREATER_THAN  reduce using rule 213 (primary_expression -> function_designator .)
    S_ELEMENT_OF    reduce using rule 213 (primary_expression -> function_designator .)
    RW_EQ           reduce using rule 213 (primary_expression -> function_designator .)
    RW_NEQ          reduce using rule 213 (primary_expression -> function_designator .)
    S_RIGHT_BRACKET reduce using rule 213 (primary_expression -> function_designator .)
    S_COMMA         reduce using rule 213 (primary_expression -> function_designator .)
    DEDENT          reduce using rule 213 (primary_expression -> function_designator .)
    S_SEMI_COLON    reduce using rule 213 (primary_expression -> function_designator .)
    S_RETURN        reduce using rule 213 (primary_expression -> function_designator .)
    RW_IF           reduce using rule 213 (primary_expression -> function_designator .)
    RW_DEPEND       reduce using rule 213 (primary_expression -> function_designator .)
    RW_WHILE        reduce using rule 213 (primary_expression -> function_designator .)
    RW_ITERATE      reduce using rule 213 (primary_expression -> function_designator .)
    IDENTIFIER      reduce using rule 213 (primary_expression -> function_designator .)
    RW_REPEAT       reduce using rule 213 (primary_expression -> function_designator .)
    RW_INPUT        reduce using rule 213 (primary_expression -> function_designator .)
    RW_OUTPUT       reduce using rule 213 (primary_expression -> function_designator .)
    RW_THEN         reduce using rule 213 (primary_expression -> function_designator .)
    RW_DO           reduce using rule 213 (primary_expression -> function_designator .)
    S_UP_TO         reduce using rule 213 (primary_expression -> function_designator .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 213 (primary_expression -> function_designator .)
    INDENT          reduce using rule 213 (primary_expression -> function_designator .)
    S_COLON         reduce using rule 213 (primary_expression -> function_designator .)


state 221

    (171) variable_access -> identifier .
    (224) user_defined_function_call -> identifier . function_actual_parameter_list
    (92) function_actual_parameter_list -> . S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET

    S_LEFT_SQUARE_BRACKET reduce using rule 171 (variable_access -> identifier .)
    S_DOT           reduce using rule 171 (variable_access -> identifier .)
    S_POWER         reduce using rule 171 (variable_access -> identifier .)
    S_TIMES         reduce using rule 171 (variable_access -> identifier .)
    S_DIVIDE        reduce using rule 171 (variable_access -> identifier .)
    RW_DIV          reduce using rule 171 (variable_access -> identifier .)
    RW_MOD          reduce using rule 171 (variable_access -> identifier .)
    RW_AND          reduce using rule 171 (variable_access -> identifier .)
    S_PLUS          reduce using rule 171 (variable_access -> identifier .)
    S_MINUS         reduce using rule 171 (variable_access -> identifier .)
    RW_OR           reduce using rule 171 (variable_access -> identifier .)
    RW_XOR          reduce using rule 171 (variable_access -> identifier .)
    S_EQUAL         reduce using rule 171 (variable_access -> identifier .)
    S_NOT_EQUAL     reduce using rule 171 (variable_access -> identifier .)
    S_LESS_THAN_EQUAL reduce using rule 171 (variable_access -> identifier .)
    S_GREATER_THAN_EQUAL reduce using rule 171 (variable_access -> identifier .)
    S_LESS_THAN     reduce using rule 171 (variable_access -> identifier .)
    S_GREATER_THAN  reduce using rule 171 (variable_access -> identifier .)
    S_ELEMENT_OF    reduce using rule 171 (variable_access -> identifier .)
    RW_EQ           reduce using rule 171 (variable_access -> identifier .)
    RW_NEQ          reduce using rule 171 (variable_access -> identifier .)
    S_RIGHT_BRACKET reduce using rule 171 (variable_access -> identifier .)
    S_COMMA         reduce using rule 171 (variable_access -> identifier .)
    DEDENT          reduce using rule 171 (variable_access -> identifier .)
    S_SEMI_COLON    reduce using rule 171 (variable_access -> identifier .)
    S_RETURN        reduce using rule 171 (variable_access -> identifier .)
    RW_IF           reduce using rule 171 (variable_access -> identifier .)
    RW_DEPEND       reduce using rule 171 (variable_access -> identifier .)
    RW_WHILE        reduce using rule 171 (variable_access -> identifier .)
    RW_ITERATE      reduce using rule 171 (variable_access -> identifier .)
    IDENTIFIER      reduce using rule 171 (variable_access -> identifier .)
    RW_REPEAT       reduce using rule 171 (variable_access -> identifier .)
    RW_INPUT        reduce using rule 171 (variable_access -> identifier .)
    RW_OUTPUT       reduce using rule 171 (variable_access -> identifier .)
    RW_THEN         reduce using rule 171 (variable_access -> identifier .)
    RW_DO           reduce using rule 171 (variable_access -> identifier .)
    RW_TIMES        reduce using rule 171 (variable_access -> identifier .)
    S_UP_TO         reduce using rule 171 (variable_access -> identifier .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 171 (variable_access -> identifier .)
    INDENT          reduce using rule 171 (variable_access -> identifier .)
    S_COLON         reduce using rule 171 (variable_access -> identifier .)
    S_LEFT_BRACKET  shift and go to state 134

    function_actual_parameter_list shift and go to state 133

state 222

    (149) unsigned_constant -> non_string_constant .

    S_POWER         reduce using rule 149 (unsigned_constant -> non_string_constant .)
    S_TIMES         reduce using rule 149 (unsigned_constant -> non_string_constant .)
    S_DIVIDE        reduce using rule 149 (unsigned_constant -> non_string_constant .)
    RW_DIV          reduce using rule 149 (unsigned_constant -> non_string_constant .)
    RW_MOD          reduce using rule 149 (unsigned_constant -> non_string_constant .)
    RW_AND          reduce using rule 149 (unsigned_constant -> non_string_constant .)
    S_PLUS          reduce using rule 149 (unsigned_constant -> non_string_constant .)
    S_MINUS         reduce using rule 149 (unsigned_constant -> non_string_constant .)
    RW_OR           reduce using rule 149 (unsigned_constant -> non_string_constant .)
    RW_XOR          reduce using rule 149 (unsigned_constant -> non_string_constant .)
    S_EQUAL         reduce using rule 149 (unsigned_constant -> non_string_constant .)
    S_NOT_EQUAL     reduce using rule 149 (unsigned_constant -> non_string_constant .)
    S_LESS_THAN_EQUAL reduce using rule 149 (unsigned_constant -> non_string_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 149 (unsigned_constant -> non_string_constant .)
    S_LESS_THAN     reduce using rule 149 (unsigned_constant -> non_string_constant .)
    S_GREATER_THAN  reduce using rule 149 (unsigned_constant -> non_string_constant .)
    S_ELEMENT_OF    reduce using rule 149 (unsigned_constant -> non_string_constant .)
    RW_EQ           reduce using rule 149 (unsigned_constant -> non_string_constant .)
    RW_NEQ          reduce using rule 149 (unsigned_constant -> non_string_constant .)
    S_RIGHT_BRACKET reduce using rule 149 (unsigned_constant -> non_string_constant .)
    S_COMMA         reduce using rule 149 (unsigned_constant -> non_string_constant .)
    DEDENT          reduce using rule 149 (unsigned_constant -> non_string_constant .)
    S_SEMI_COLON    reduce using rule 149 (unsigned_constant -> non_string_constant .)
    S_RETURN        reduce using rule 149 (unsigned_constant -> non_string_constant .)
    RW_IF           reduce using rule 149 (unsigned_constant -> non_string_constant .)
    RW_DEPEND       reduce using rule 149 (unsigned_constant -> non_string_constant .)
    RW_WHILE        reduce using rule 149 (unsigned_constant -> non_string_constant .)
    RW_ITERATE      reduce using rule 149 (unsigned_constant -> non_string_constant .)
    IDENTIFIER      reduce using rule 149 (unsigned_constant -> non_string_constant .)
    RW_REPEAT       reduce using rule 149 (unsigned_constant -> non_string_constant .)
    RW_INPUT        reduce using rule 149 (unsigned_constant -> non_string_constant .)
    RW_OUTPUT       reduce using rule 149 (unsigned_constant -> non_string_constant .)
    RW_THEN         reduce using rule 149 (unsigned_constant -> non_string_constant .)
    RW_DO           reduce using rule 149 (unsigned_constant -> non_string_constant .)
    S_UP_TO         reduce using rule 149 (unsigned_constant -> non_string_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 149 (unsigned_constant -> non_string_constant .)
    INDENT          reduce using rule 149 (unsigned_constant -> non_string_constant .)
    S_COLON         reduce using rule 149 (unsigned_constant -> non_string_constant .)


state 223

    (150) unsigned_constant -> string_char_constant .

    S_POWER         reduce using rule 150 (unsigned_constant -> string_char_constant .)
    S_TIMES         reduce using rule 150 (unsigned_constant -> string_char_constant .)
    S_DIVIDE        reduce using rule 150 (unsigned_constant -> string_char_constant .)
    RW_DIV          reduce using rule 150 (unsigned_constant -> string_char_constant .)
    RW_MOD          reduce using rule 150 (unsigned_constant -> string_char_constant .)
    RW_AND          reduce using rule 150 (unsigned_constant -> string_char_constant .)
    S_PLUS          reduce using rule 150 (unsigned_constant -> string_char_constant .)
    S_MINUS         reduce using rule 150 (unsigned_constant -> string_char_constant .)
    RW_OR           reduce using rule 150 (unsigned_constant -> string_char_constant .)
    RW_XOR          reduce using rule 150 (unsigned_constant -> string_char_constant .)
    S_EQUAL         reduce using rule 150 (unsigned_constant -> string_char_constant .)
    S_NOT_EQUAL     reduce using rule 150 (unsigned_constant -> string_char_constant .)
    S_LESS_THAN_EQUAL reduce using rule 150 (unsigned_constant -> string_char_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 150 (unsigned_constant -> string_char_constant .)
    S_LESS_THAN     reduce using rule 150 (unsigned_constant -> string_char_constant .)
    S_GREATER_THAN  reduce using rule 150 (unsigned_constant -> string_char_constant .)
    S_ELEMENT_OF    reduce using rule 150 (unsigned_constant -> string_char_constant .)
    RW_EQ           reduce using rule 150 (unsigned_constant -> string_char_constant .)
    RW_NEQ          reduce using rule 150 (unsigned_constant -> string_char_constant .)
    S_RIGHT_BRACKET reduce using rule 150 (unsigned_constant -> string_char_constant .)
    S_COMMA         reduce using rule 150 (unsigned_constant -> string_char_constant .)
    DEDENT          reduce using rule 150 (unsigned_constant -> string_char_constant .)
    S_SEMI_COLON    reduce using rule 150 (unsigned_constant -> string_char_constant .)
    S_RETURN        reduce using rule 150 (unsigned_constant -> string_char_constant .)
    RW_IF           reduce using rule 150 (unsigned_constant -> string_char_constant .)
    RW_DEPEND       reduce using rule 150 (unsigned_constant -> string_char_constant .)
    RW_WHILE        reduce using rule 150 (unsigned_constant -> string_char_constant .)
    RW_ITERATE      reduce using rule 150 (unsigned_constant -> string_char_constant .)
    IDENTIFIER      reduce using rule 150 (unsigned_constant -> string_char_constant .)
    RW_REPEAT       reduce using rule 150 (unsigned_constant -> string_char_constant .)
    RW_INPUT        reduce using rule 150 (unsigned_constant -> string_char_constant .)
    RW_OUTPUT       reduce using rule 150 (unsigned_constant -> string_char_constant .)
    RW_THEN         reduce using rule 150 (unsigned_constant -> string_char_constant .)
    RW_DO           reduce using rule 150 (unsigned_constant -> string_char_constant .)
    S_UP_TO         reduce using rule 150 (unsigned_constant -> string_char_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 150 (unsigned_constant -> string_char_constant .)
    INDENT          reduce using rule 150 (unsigned_constant -> string_char_constant .)
    S_COLON         reduce using rule 150 (unsigned_constant -> string_char_constant .)


state 224

    (151) unsigned_constant -> boolean_constant .

    S_POWER         reduce using rule 151 (unsigned_constant -> boolean_constant .)
    S_TIMES         reduce using rule 151 (unsigned_constant -> boolean_constant .)
    S_DIVIDE        reduce using rule 151 (unsigned_constant -> boolean_constant .)
    RW_DIV          reduce using rule 151 (unsigned_constant -> boolean_constant .)
    RW_MOD          reduce using rule 151 (unsigned_constant -> boolean_constant .)
    RW_AND          reduce using rule 151 (unsigned_constant -> boolean_constant .)
    S_PLUS          reduce using rule 151 (unsigned_constant -> boolean_constant .)
    S_MINUS         reduce using rule 151 (unsigned_constant -> boolean_constant .)
    RW_OR           reduce using rule 151 (unsigned_constant -> boolean_constant .)
    RW_XOR          reduce using rule 151 (unsigned_constant -> boolean_constant .)
    S_EQUAL         reduce using rule 151 (unsigned_constant -> boolean_constant .)
    S_NOT_EQUAL     reduce using rule 151 (unsigned_constant -> boolean_constant .)
    S_LESS_THAN_EQUAL reduce using rule 151 (unsigned_constant -> boolean_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 151 (unsigned_constant -> boolean_constant .)
    S_LESS_THAN     reduce using rule 151 (unsigned_constant -> boolean_constant .)
    S_GREATER_THAN  reduce using rule 151 (unsigned_constant -> boolean_constant .)
    S_ELEMENT_OF    reduce using rule 151 (unsigned_constant -> boolean_constant .)
    RW_EQ           reduce using rule 151 (unsigned_constant -> boolean_constant .)
    RW_NEQ          reduce using rule 151 (unsigned_constant -> boolean_constant .)
    S_RIGHT_BRACKET reduce using rule 151 (unsigned_constant -> boolean_constant .)
    S_COMMA         reduce using rule 151 (unsigned_constant -> boolean_constant .)
    DEDENT          reduce using rule 151 (unsigned_constant -> boolean_constant .)
    S_SEMI_COLON    reduce using rule 151 (unsigned_constant -> boolean_constant .)
    S_RETURN        reduce using rule 151 (unsigned_constant -> boolean_constant .)
    RW_IF           reduce using rule 151 (unsigned_constant -> boolean_constant .)
    RW_DEPEND       reduce using rule 151 (unsigned_constant -> boolean_constant .)
    RW_WHILE        reduce using rule 151 (unsigned_constant -> boolean_constant .)
    RW_ITERATE      reduce using rule 151 (unsigned_constant -> boolean_constant .)
    IDENTIFIER      reduce using rule 151 (unsigned_constant -> boolean_constant .)
    RW_REPEAT       reduce using rule 151 (unsigned_constant -> boolean_constant .)
    RW_INPUT        reduce using rule 151 (unsigned_constant -> boolean_constant .)
    RW_OUTPUT       reduce using rule 151 (unsigned_constant -> boolean_constant .)
    RW_THEN         reduce using rule 151 (unsigned_constant -> boolean_constant .)
    RW_DO           reduce using rule 151 (unsigned_constant -> boolean_constant .)
    S_UP_TO         reduce using rule 151 (unsigned_constant -> boolean_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 151 (unsigned_constant -> boolean_constant .)
    INDENT          reduce using rule 151 (unsigned_constant -> boolean_constant .)
    S_COLON         reduce using rule 151 (unsigned_constant -> boolean_constant .)


state 225

    (152) unsigned_constant -> nil_constant .

    S_POWER         reduce using rule 152 (unsigned_constant -> nil_constant .)
    S_TIMES         reduce using rule 152 (unsigned_constant -> nil_constant .)
    S_DIVIDE        reduce using rule 152 (unsigned_constant -> nil_constant .)
    RW_DIV          reduce using rule 152 (unsigned_constant -> nil_constant .)
    RW_MOD          reduce using rule 152 (unsigned_constant -> nil_constant .)
    RW_AND          reduce using rule 152 (unsigned_constant -> nil_constant .)
    S_PLUS          reduce using rule 152 (unsigned_constant -> nil_constant .)
    S_MINUS         reduce using rule 152 (unsigned_constant -> nil_constant .)
    RW_OR           reduce using rule 152 (unsigned_constant -> nil_constant .)
    RW_XOR          reduce using rule 152 (unsigned_constant -> nil_constant .)
    S_EQUAL         reduce using rule 152 (unsigned_constant -> nil_constant .)
    S_NOT_EQUAL     reduce using rule 152 (unsigned_constant -> nil_constant .)
    S_LESS_THAN_EQUAL reduce using rule 152 (unsigned_constant -> nil_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 152 (unsigned_constant -> nil_constant .)
    S_LESS_THAN     reduce using rule 152 (unsigned_constant -> nil_constant .)
    S_GREATER_THAN  reduce using rule 152 (unsigned_constant -> nil_constant .)
    S_ELEMENT_OF    reduce using rule 152 (unsigned_constant -> nil_constant .)
    RW_EQ           reduce using rule 152 (unsigned_constant -> nil_constant .)
    RW_NEQ          reduce using rule 152 (unsigned_constant -> nil_constant .)
    S_RIGHT_BRACKET reduce using rule 152 (unsigned_constant -> nil_constant .)
    S_COMMA         reduce using rule 152 (unsigned_constant -> nil_constant .)
    DEDENT          reduce using rule 152 (unsigned_constant -> nil_constant .)
    S_SEMI_COLON    reduce using rule 152 (unsigned_constant -> nil_constant .)
    S_RETURN        reduce using rule 152 (unsigned_constant -> nil_constant .)
    RW_IF           reduce using rule 152 (unsigned_constant -> nil_constant .)
    RW_DEPEND       reduce using rule 152 (unsigned_constant -> nil_constant .)
    RW_WHILE        reduce using rule 152 (unsigned_constant -> nil_constant .)
    RW_ITERATE      reduce using rule 152 (unsigned_constant -> nil_constant .)
    IDENTIFIER      reduce using rule 152 (unsigned_constant -> nil_constant .)
    RW_REPEAT       reduce using rule 152 (unsigned_constant -> nil_constant .)
    RW_INPUT        reduce using rule 152 (unsigned_constant -> nil_constant .)
    RW_OUTPUT       reduce using rule 152 (unsigned_constant -> nil_constant .)
    RW_THEN         reduce using rule 152 (unsigned_constant -> nil_constant .)
    RW_DO           reduce using rule 152 (unsigned_constant -> nil_constant .)
    S_UP_TO         reduce using rule 152 (unsigned_constant -> nil_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 152 (unsigned_constant -> nil_constant .)
    INDENT          reduce using rule 152 (unsigned_constant -> nil_constant .)
    S_COLON         reduce using rule 152 (unsigned_constant -> nil_constant .)


state 226

    (214) set_constructor -> S_LEFT_SQUARE_BRACKET . member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> S_LEFT_SQUARE_BRACKET . S_RIGHT_SQUARE_BRACKET
    (216) member_designator_list -> . member_designator_list S_COMMA member_designator
    (217) member_designator_list -> . member_designator
    (218) member_designator -> . member_designator S_UP_TO expression
    (219) member_designator -> . expression
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_RIGHT_SQUARE_BRACKET shift and go to state 309
    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    member_designator_list         shift and go to state 308
    member_designator              shift and go to state 310
    expression                     shift and go to state 311
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 227

    (44) enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .

    RW_KAMUS        reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    $end            reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)


state 228

    (51) array_type -> RW_ARRAY array_index RW_OF . component_type
    (56) component_type -> . type_denoter
    (34) type_denoter -> . ordinal_type
    (35) type_denoter -> . structured_type
    (36) type_denoter -> . RW_INTEGER
    (37) type_denoter -> . RW_REAL
    (38) type_denoter -> . RW_STRING
    (39) type_denoter -> . RW_CHARACTER
    (40) type_denoter -> . RW_BOOLEAN
    (41) ordinal_type -> . enumerated_type
    (42) ordinal_type -> . subrange_type
    (43) ordinal_type -> . identifier
    (50) structured_type -> . array_type
    (44) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (45) subrange_type -> . subrange_type_option
    (254) identifier -> . IDENTIFIER
    (51) array_type -> . RW_ARRAY array_index RW_OF component_type
    (46) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (47) subrange_option -> . identifier
    (48) subrange_option -> . constant
    (49) subrange_option -> . function_designator
    (153) constant -> . string_char_constant
    (154) constant -> . non_string_constant
    (155) constant -> . sign non_string_constant
    (156) constant -> . boolean_constant
    (157) constant -> . nil_constant
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (158) sign -> . S_PLUS
    (159) sign -> . S_MINUS
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    RW_INTEGER      shift and go to state 40
    RW_REAL         shift and go to state 41
    RW_STRING       shift and go to state 42
    RW_CHARACTER    shift and go to state 43
    RW_BOOLEAN      shift and go to state 44
    S_LEFT_BRACKET  shift and go to state 49
    IDENTIFIER      shift and go to state 11
    RW_ARRAY        shift and go to state 51
    S_PLUS          shift and go to state 68
    S_MINUS         shift and go to state 69
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    component_type                 shift and go to state 312
    type_denoter                   shift and go to state 313
    ordinal_type                   shift and go to state 38
    structured_type                shift and go to state 39
    enumerated_type                shift and go to state 45
    subrange_type                  shift and go to state 46
    identifier                     shift and go to state 47
    array_type                     shift and go to state 48
    subrange_type_option           shift and go to state 50
    subrange_option                shift and go to state 52
    constant                       shift and go to state 53
    function_designator            shift and go to state 54
    string_char_constant           shift and go to state 55
    non_string_constant            shift and go to state 56
    sign                           shift and go to state 57
    boolean_constant               shift and go to state 58
    nil_constant                   shift and go to state 59
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 229

    (52) array_index -> S_LEFT_SQUARE_BRACKET index_list . S_RIGHT_SQUARE_BRACKET
    (53) index_list -> index_list . S_COMMA index_type

    S_RIGHT_SQUARE_BRACKET shift and go to state 314
    S_COMMA         shift and go to state 315


state 230

    (54) index_list -> index_type .

    S_RIGHT_SQUARE_BRACKET reduce using rule 54 (index_list -> index_type .)
    S_COMMA         reduce using rule 54 (index_list -> index_type .)


state 231

    (55) index_type -> ordinal_type .

    S_RIGHT_SQUARE_BRACKET reduce using rule 55 (index_type -> ordinal_type .)
    S_COMMA         reduce using rule 55 (index_type -> ordinal_type .)


state 232

    (46) subrange_type_option -> subrange_option S_UP_TO subrange_option .

    RW_KAMUS        reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    RW_PROCEDURE    reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    RW_FUNCTION     reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    $end            reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    DEDENT          reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    S_SEMI_COLON    reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    S_COMMA         reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    S_RIGHT_BRACKET reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    IDENTIFIER      reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    S_GREATER_THAN  reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    S_EQUAL         reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    RW_TYPE         reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)


state 233

    (47) subrange_option -> identifier .
    (224) user_defined_function_call -> identifier . function_actual_parameter_list
    (92) function_actual_parameter_list -> . S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET

    RW_KAMUS        reduce using rule 47 (subrange_option -> identifier .)
    RW_PROCEDURE    reduce using rule 47 (subrange_option -> identifier .)
    RW_FUNCTION     reduce using rule 47 (subrange_option -> identifier .)
    $end            reduce using rule 47 (subrange_option -> identifier .)
    DEDENT          reduce using rule 47 (subrange_option -> identifier .)
    S_SEMI_COLON    reduce using rule 47 (subrange_option -> identifier .)
    S_COMMA         reduce using rule 47 (subrange_option -> identifier .)
    S_RIGHT_BRACKET reduce using rule 47 (subrange_option -> identifier .)
    IDENTIFIER      reduce using rule 47 (subrange_option -> identifier .)
    S_GREATER_THAN  reduce using rule 47 (subrange_option -> identifier .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 47 (subrange_option -> identifier .)
    S_EQUAL         reduce using rule 47 (subrange_option -> identifier .)
    RW_TYPE         reduce using rule 47 (subrange_option -> identifier .)
    S_UP_TO         reduce using rule 47 (subrange_option -> identifier .)
    S_LEFT_BRACKET  shift and go to state 134

    function_actual_parameter_list shift and go to state 133

state 234

    (231) abs_function -> RW_ABS S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 316
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 235

    (232) sin_function -> RW_SIN S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 317
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 236

    (233) cos_function -> RW_COS S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 318
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 237

    (234) tan_function -> RW_TAN S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 319
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 238

    (235) succ_function -> RW_SUCC S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 320
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 239

    (236) pred_function -> RW_PRED S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 321
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 240

    (243) awal_function -> RW_AWAL S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 322
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 241

    (244) akhir_function -> RW_AKHIR S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 323
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 242

    (245) firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 324
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 243

    (246) lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 325
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 244

    (247) long_function -> RW_LONG S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 326
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 245

    (248) iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 327
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 246

    (251) integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 328
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 247

    (252) real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 329
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 248

    (80) formal_parameter_section -> formal_parameter_section S_SEMI_COLON parameter_specification .

    S_SEMI_COLON    reduce using rule 80 (formal_parameter_section -> formal_parameter_section S_SEMI_COLON parameter_specification .)
    S_COMMA         reduce using rule 80 (formal_parameter_section -> formal_parameter_section S_SEMI_COLON parameter_specification .)
    S_RIGHT_BRACKET reduce using rule 80 (formal_parameter_section -> formal_parameter_section S_SEMI_COLON parameter_specification .)


state 249

    (81) formal_parameter_section -> formal_parameter_section S_COMMA parameter_specification .

    S_SEMI_COLON    reduce using rule 81 (formal_parameter_section -> formal_parameter_section S_COMMA parameter_specification .)
    S_COMMA         reduce using rule 81 (formal_parameter_section -> formal_parameter_section S_COMMA parameter_specification .)
    S_RIGHT_BRACKET reduce using rule 81 (formal_parameter_section -> formal_parameter_section S_COMMA parameter_specification .)


state 250

    (86) procedure_parameter_type -> RW_INPUT S_DIVIDE RW_OUTPUT .

    IDENTIFIER      reduce using rule 86 (procedure_parameter_type -> RW_INPUT S_DIVIDE RW_OUTPUT .)


state 251

    (9) block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block . procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (17) procedure_and_function_declaration_block -> . DEDENT
    (18) procedure_and_function_declaration_block -> . procedure_and_function_declaration DEDENT
    (71) procedure_and_function_declaration -> . procedure_and_function_declaration procedure_and_function_sub_declaration
    (72) procedure_and_function_declaration -> . procedure_and_function_sub_declaration
    (73) procedure_and_function_sub_declaration -> . procedure_declaration
    (74) procedure_and_function_sub_declaration -> . function_declaration
    (75) procedure_declaration -> . procedure_identifier formal_parameter_list
    (87) function_declaration -> . function_identification function_formal_parameter_list function_return_type
    (88) function_declaration -> . function_identification function_return_type
    (76) procedure_identifier -> . RW_PROCEDURE identifier
    (89) function_identification -> . RW_FUNCTION identifier

    DEDENT          shift and go to state 331
    RW_PROCEDURE    shift and go to state 9
    RW_FUNCTION     shift and go to state 8

    procedure_and_function_declaration_block shift and go to state 330
    procedure_and_function_declaration shift and go to state 332
    procedure_and_function_sub_declaration shift and go to state 333
    procedure_declaration          shift and go to state 334
    function_declaration           shift and go to state 335
    procedure_identifier           shift and go to state 7
    function_identification        shift and go to state 6

state 252

    (15) variable_declaration_block -> empty .

    DEDENT          reduce using rule 15 (variable_declaration_block -> empty .)
    RW_PROCEDURE    reduce using rule 15 (variable_declaration_block -> empty .)
    RW_FUNCTION     reduce using rule 15 (variable_declaration_block -> empty .)


state 253

    (16) variable_declaration_block -> variable_declaration .
    (57) variable_declaration -> variable_declaration . variable_sub_declaration
    (59) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (254) identifier -> . IDENTIFIER

    DEDENT          reduce using rule 16 (variable_declaration_block -> variable_declaration .)
    RW_PROCEDURE    reduce using rule 16 (variable_declaration_block -> variable_declaration .)
    RW_FUNCTION     reduce using rule 16 (variable_declaration_block -> variable_declaration .)
    IDENTIFIER      shift and go to state 11

    variable_sub_declaration       shift and go to state 336
    identifier_list                shift and go to state 35
    identifier                     shift and go to state 36

state 254

    (58) variable_declaration -> variable_sub_declaration .

    IDENTIFIER      reduce using rule 58 (variable_declaration -> variable_sub_declaration .)
    DEDENT          reduce using rule 58 (variable_declaration -> variable_sub_declaration .)
    RW_PROCEDURE    reduce using rule 58 (variable_declaration -> variable_sub_declaration .)
    RW_FUNCTION     reduce using rule 58 (variable_declaration -> variable_sub_declaration .)


state 255

    (65) type_declaration -> type_declaration type_sub_declaration .

    RW_TYPE         reduce using rule 65 (type_declaration -> type_declaration type_sub_declaration .)
    IDENTIFIER      reduce using rule 65 (type_declaration -> type_declaration type_sub_declaration .)
    DEDENT          reduce using rule 65 (type_declaration -> type_declaration type_sub_declaration .)
    RW_PROCEDURE    reduce using rule 65 (type_declaration -> type_declaration type_sub_declaration .)
    RW_FUNCTION     reduce using rule 65 (type_declaration -> type_declaration type_sub_declaration .)


state 256

    (67) type_sub_declaration -> RW_TYPE identifier . S_COLON type_variety

    S_COLON         shift and go to state 337


state 257

    (64) constant_sub_declaration -> RW_CONSTANT identifier S_COLON . type_denoter S_EQUAL constant
    (34) type_denoter -> . ordinal_type
    (35) type_denoter -> . structured_type
    (36) type_denoter -> . RW_INTEGER
    (37) type_denoter -> . RW_REAL
    (38) type_denoter -> . RW_STRING
    (39) type_denoter -> . RW_CHARACTER
    (40) type_denoter -> . RW_BOOLEAN
    (41) ordinal_type -> . enumerated_type
    (42) ordinal_type -> . subrange_type
    (43) ordinal_type -> . identifier
    (50) structured_type -> . array_type
    (44) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (45) subrange_type -> . subrange_type_option
    (254) identifier -> . IDENTIFIER
    (51) array_type -> . RW_ARRAY array_index RW_OF component_type
    (46) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (47) subrange_option -> . identifier
    (48) subrange_option -> . constant
    (49) subrange_option -> . function_designator
    (153) constant -> . string_char_constant
    (154) constant -> . non_string_constant
    (155) constant -> . sign non_string_constant
    (156) constant -> . boolean_constant
    (157) constant -> . nil_constant
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (158) sign -> . S_PLUS
    (159) sign -> . S_MINUS
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    RW_INTEGER      shift and go to state 40
    RW_REAL         shift and go to state 41
    RW_STRING       shift and go to state 42
    RW_CHARACTER    shift and go to state 43
    RW_BOOLEAN      shift and go to state 44
    S_LEFT_BRACKET  shift and go to state 49
    IDENTIFIER      shift and go to state 11
    RW_ARRAY        shift and go to state 51
    S_PLUS          shift and go to state 68
    S_MINUS         shift and go to state 69
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    identifier                     shift and go to state 47
    type_denoter                   shift and go to state 338
    constant                       shift and go to state 53
    ordinal_type                   shift and go to state 38
    structured_type                shift and go to state 39
    enumerated_type                shift and go to state 45
    subrange_type                  shift and go to state 46
    array_type                     shift and go to state 48
    subrange_type_option           shift and go to state 50
    subrange_option                shift and go to state 52
    function_designator            shift and go to state 54
    string_char_constant           shift and go to state 55
    non_string_constant            shift and go to state 56
    sign                           shift and go to state 57
    boolean_constant               shift and go to state 58
    nil_constant                   shift and go to state 59
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 258

    (28) procedure_implementation_block -> kamus_declaration INDENT . constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
    (11) constant_declaration_block -> . empty
    (12) constant_declaration_block -> . constant_declaration
    (253) empty -> .
    (62) constant_declaration -> . constant_declaration constant_sub_declaration
    (63) constant_declaration -> . constant_sub_declaration
    (64) constant_sub_declaration -> . RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant

    RW_TYPE         reduce using rule 253 (empty -> .)
    IDENTIFIER      reduce using rule 253 (empty -> .)
    DEDENT          reduce using rule 253 (empty -> .)
    RW_CONSTANT     shift and go to state 116

    constant_declaration_block     shift and go to state 339
    empty                          shift and go to state 113
    constant_declaration           shift and go to state 114
    constant_sub_declaration       shift and go to state 115

state 259

    (29) procedure_implementation_block -> kamus_declaration algorithm_block .

    RW_PROCEDURE    reduce using rule 29 (procedure_implementation_block -> kamus_declaration algorithm_block .)
    RW_FUNCTION     reduce using rule 29 (procedure_implementation_block -> kamus_declaration algorithm_block .)
    $end            reduce using rule 29 (procedure_implementation_block -> kamus_declaration algorithm_block .)


state 260

    (32) function_implementation_block -> kamus_declaration INDENT . constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
    (11) constant_declaration_block -> . empty
    (12) constant_declaration_block -> . constant_declaration
    (253) empty -> .
    (62) constant_declaration -> . constant_declaration constant_sub_declaration
    (63) constant_declaration -> . constant_sub_declaration
    (64) constant_sub_declaration -> . RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant

    RW_TYPE         reduce using rule 253 (empty -> .)
    IDENTIFIER      reduce using rule 253 (empty -> .)
    DEDENT          reduce using rule 253 (empty -> .)
    RW_CONSTANT     shift and go to state 116

    constant_declaration_block     shift and go to state 340
    empty                          shift and go to state 113
    constant_declaration           shift and go to state 114
    constant_sub_declaration       shift and go to state 115

state 261

    (33) function_implementation_block -> kamus_declaration algorithm_block .

    RW_PROCEDURE    reduce using rule 33 (function_implementation_block -> kamus_declaration algorithm_block .)
    RW_FUNCTION     reduce using rule 33 (function_implementation_block -> kamus_declaration algorithm_block .)
    $end            reduce using rule 33 (function_implementation_block -> kamus_declaration algorithm_block .)


state 262

    (100) compound_statement -> INDENT statement_sequence DEDENT .

    RW_PROCEDURE    reduce using rule 100 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_FUNCTION     reduce using rule 100 (compound_statement -> INDENT statement_sequence DEDENT .)
    $end            reduce using rule 100 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_STOP         reduce using rule 100 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_UNTIL        reduce using rule 100 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_ELSE         reduce using rule 100 (compound_statement -> INDENT statement_sequence DEDENT .)
    DEDENT          reduce using rule 100 (compound_statement -> INDENT statement_sequence DEDENT .)
    S_SEMI_COLON    reduce using rule 100 (compound_statement -> INDENT statement_sequence DEDENT .)
    S_RETURN        reduce using rule 100 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_IF           reduce using rule 100 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_DEPEND       reduce using rule 100 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_WHILE        reduce using rule 100 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_ITERATE      reduce using rule 100 (compound_statement -> INDENT statement_sequence DEDENT .)
    IDENTIFIER      reduce using rule 100 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_REPEAT       reduce using rule 100 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_INPUT        reduce using rule 100 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_OUTPUT       reduce using rule 100 (compound_statement -> INDENT statement_sequence DEDENT .)


state 263

    (101) statement_sequence -> statement_sequence S_SEMI_COLON . statement
    (104) statement -> . assignment_statement
    (105) statement -> . procedure_statement
    (106) statement -> . function_returned_statement
    (107) statement -> . if_statement
    (108) statement -> . depend_on_statement
    (109) statement -> . while_statement
    (110) statement -> . traversal_statement
    (111) statement -> . repeat_statement
    (112) statement -> . iterate_stop_statement
    (113) assignment_statement -> . variable_access S_ASSIGNMENT expression
    (114) procedure_statement -> . builtin_procedure_statements
    (115) procedure_statement -> . identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
    (116) procedure_statement -> . identifier
    (130) function_returned_statement -> . S_RETURN expression
    (135) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement
    (136) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
    (131) depend_on_statement -> . RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (144) while_statement -> . RW_WHILE boolean_expression RW_DO compound_statement
    (146) traversal_statement -> . control_variable RW_TRAVERSAL traversal_range_value compound_statement
    (138) repeat_statement -> . repeat_until_statement
    (139) repeat_statement -> . repeat_times_statement
    (145) iterate_stop_statement -> . RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (120) builtin_procedure_statements -> . input_statement
    (121) builtin_procedure_statements -> . output_statement
    (254) identifier -> . IDENTIFIER
    (148) control_variable -> . identifier
    (140) repeat_until_statement -> . RW_REPEAT compound_statement RW_UNTIL boolean_expression
    (141) repeat_times_statement -> . RW_REPEAT variable_access RW_TIMES compound_statement
    (142) repeat_times_statement -> . RW_REPEAT integer_constant RW_TIMES compound_statement
    (143) repeat_times_statement -> . RW_REPEAT function_designator RW_TIMES compound_statement
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (122) input_statement -> . RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET
    (126) output_statement -> . RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET

    S_RETURN        shift and go to state 185
    RW_IF           shift and go to state 186
    RW_DEPEND       shift and go to state 187
    RW_WHILE        shift and go to state 188
    RW_ITERATE      shift and go to state 192
    IDENTIFIER      shift and go to state 11
    RW_REPEAT       shift and go to state 197
    RW_INPUT        shift and go to state 198
    RW_OUTPUT       shift and go to state 199

    statement                      shift and go to state 341
    assignment_statement           shift and go to state 173
    procedure_statement            shift and go to state 174
    function_returned_statement    shift and go to state 175
    if_statement                   shift and go to state 176
    depend_on_statement            shift and go to state 177
    while_statement                shift and go to state 178
    traversal_statement            shift and go to state 179
    repeat_statement               shift and go to state 180
    iterate_stop_statement         shift and go to state 181
    variable_access                shift and go to state 182
    builtin_procedure_statements   shift and go to state 183
    identifier                     shift and go to state 184
    control_variable               shift and go to state 189
    repeat_until_statement         shift and go to state 190
    repeat_times_statement         shift and go to state 191
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    input_statement                shift and go to state 195
    output_statement               shift and go to state 196

state 264

    (102) statement_sequence -> statement_sequence statement .

    DEDENT          reduce using rule 102 (statement_sequence -> statement_sequence statement .)
    S_SEMI_COLON    reduce using rule 102 (statement_sequence -> statement_sequence statement .)
    S_RETURN        reduce using rule 102 (statement_sequence -> statement_sequence statement .)
    RW_IF           reduce using rule 102 (statement_sequence -> statement_sequence statement .)
    RW_DEPEND       reduce using rule 102 (statement_sequence -> statement_sequence statement .)
    RW_WHILE        reduce using rule 102 (statement_sequence -> statement_sequence statement .)
    RW_ITERATE      reduce using rule 102 (statement_sequence -> statement_sequence statement .)
    IDENTIFIER      reduce using rule 102 (statement_sequence -> statement_sequence statement .)
    RW_REPEAT       reduce using rule 102 (statement_sequence -> statement_sequence statement .)
    RW_INPUT        reduce using rule 102 (statement_sequence -> statement_sequence statement .)
    RW_OUTPUT       reduce using rule 102 (statement_sequence -> statement_sequence statement .)


state 265

    (113) assignment_statement -> variable_access S_ASSIGNMENT . expression
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    variable_access                shift and go to state 217
    expression                     shift and go to state 342
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 266

    (174) indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET . index_expression_list S_RIGHT_SQUARE_BRACKET
    (175) index_expression_list -> . index_expression_list S_COMMA expression
    (176) index_expression_list -> . expression
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    variable_access                shift and go to state 217
    index_expression_list          shift and go to state 343
    expression                     shift and go to state 344
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 267

    (177) field_designator -> variable_access S_DOT . identifier
    (254) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    identifier                     shift and go to state 345

state 268

    (115) procedure_statement -> identifier S_LEFT_BRACKET . actual_parameter_list S_RIGHT_BRACKET
    (117) actual_parameter_list -> . actual_parameter_list S_COMMA actual_parameter
    (118) actual_parameter_list -> . actual_parameter
    (119) actual_parameter -> . expression
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    identifier                     shift and go to state 221
    actual_parameter_list          shift and go to state 346
    actual_parameter               shift and go to state 206
    expression                     shift and go to state 207
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 269

    (130) function_returned_statement -> S_RETURN expression .
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    DEDENT          reduce using rule 130 (function_returned_statement -> S_RETURN expression .)
    S_SEMI_COLON    reduce using rule 130 (function_returned_statement -> S_RETURN expression .)
    S_RETURN        reduce using rule 130 (function_returned_statement -> S_RETURN expression .)
    RW_IF           reduce using rule 130 (function_returned_statement -> S_RETURN expression .)
    RW_DEPEND       reduce using rule 130 (function_returned_statement -> S_RETURN expression .)
    RW_WHILE        reduce using rule 130 (function_returned_statement -> S_RETURN expression .)
    RW_ITERATE      reduce using rule 130 (function_returned_statement -> S_RETURN expression .)
    IDENTIFIER      reduce using rule 130 (function_returned_statement -> S_RETURN expression .)
    RW_REPEAT       reduce using rule 130 (function_returned_statement -> S_RETURN expression .)
    RW_INPUT        reduce using rule 130 (function_returned_statement -> S_RETURN expression .)
    RW_OUTPUT       reduce using rule 130 (function_returned_statement -> S_RETURN expression .)
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 270

    (135) if_statement -> RW_IF boolean_expression . RW_THEN compound_statement
    (136) if_statement -> RW_IF boolean_expression . RW_THEN compound_statement RW_ELSE compound_statement

    RW_THEN         shift and go to state 347


state 271

    (137) boolean_expression -> expression .
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    RW_THEN         reduce using rule 137 (boolean_expression -> expression .)
    RW_DO           reduce using rule 137 (boolean_expression -> expression .)
    INDENT          reduce using rule 137 (boolean_expression -> expression .)
    DEDENT          reduce using rule 137 (boolean_expression -> expression .)
    S_SEMI_COLON    reduce using rule 137 (boolean_expression -> expression .)
    S_RETURN        reduce using rule 137 (boolean_expression -> expression .)
    RW_IF           reduce using rule 137 (boolean_expression -> expression .)
    RW_DEPEND       reduce using rule 137 (boolean_expression -> expression .)
    RW_WHILE        reduce using rule 137 (boolean_expression -> expression .)
    RW_ITERATE      reduce using rule 137 (boolean_expression -> expression .)
    IDENTIFIER      reduce using rule 137 (boolean_expression -> expression .)
    RW_REPEAT       reduce using rule 137 (boolean_expression -> expression .)
    RW_INPUT        reduce using rule 137 (boolean_expression -> expression .)
    RW_OUTPUT       reduce using rule 137 (boolean_expression -> expression .)
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 272

    (131) depend_on_statement -> RW_DEPEND RW_ON . S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT

    S_LEFT_BRACKET  shift and go to state 348


state 273

    (144) while_statement -> RW_WHILE boolean_expression . RW_DO compound_statement

    RW_DO           shift and go to state 349


state 274

    (146) traversal_statement -> control_variable RW_TRAVERSAL . traversal_range_value compound_statement
    (147) traversal_range_value -> . S_LEFT_SQUARE_BRACKET subrange_type S_RIGHT_SQUARE_BRACKET

    S_LEFT_SQUARE_BRACKET shift and go to state 351

    traversal_range_value          shift and go to state 350

state 275

    (145) iterate_stop_statement -> RW_ITERATE compound_statement . RW_STOP boolean_expression compound_statement

    RW_STOP         shift and go to state 352


state 276

    (140) repeat_until_statement -> RW_REPEAT compound_statement . RW_UNTIL boolean_expression

    RW_UNTIL        shift and go to state 353


state 277

    (141) repeat_times_statement -> RW_REPEAT variable_access . RW_TIMES compound_statement
    (174) indexed_variable -> variable_access . S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> variable_access . S_DOT identifier

    RW_TIMES        shift and go to state 354
    S_LEFT_SQUARE_BRACKET shift and go to state 266
    S_DOT           shift and go to state 267


state 278

    (142) repeat_times_statement -> RW_REPEAT integer_constant . RW_TIMES compound_statement

    RW_TIMES        shift and go to state 355


state 279

    (143) repeat_times_statement -> RW_REPEAT function_designator . RW_TIMES compound_statement

    RW_TIMES        shift and go to state 356


state 280

    (122) input_statement -> RW_INPUT S_LEFT_BRACKET . input_statement_parameter_list S_RIGHT_BRACKET
    (123) input_statement_parameter_list -> . input_statement_parameter_list S_COMMA input_statement_parameter
    (124) input_statement_parameter_list -> . input_statement_parameter
    (125) input_statement_parameter -> . variable_access
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier

    IDENTIFIER      shift and go to state 11

    input_statement_parameter_list shift and go to state 357
    input_statement_parameter      shift and go to state 358
    variable_access                shift and go to state 359
    identifier                     shift and go to state 360
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194

state 281

    (126) output_statement -> RW_OUTPUT S_LEFT_BRACKET . output_statement_parameter_list S_RIGHT_BRACKET
    (127) output_statement_parameter_list -> . output_statement_parameter_list S_COMMA output_statement_parameter
    (128) output_statement_parameter_list -> . output_statement_parameter
    (129) output_statement_parameter -> . expression
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    output_statement_parameter_list shift and go to state 361
    output_statement_parameter     shift and go to state 362
    expression                     shift and go to state 363
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 282

    (211) primary_expression -> S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 364
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 283

    (92) function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    INDENT          reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    $end            reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 92 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)


state 284

    (117) actual_parameter_list -> actual_parameter_list S_COMMA . actual_parameter
    (119) actual_parameter -> . expression
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    actual_parameter               shift and go to state 365
    expression                     shift and go to state 207
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 285

    (178) expression -> expression relational_op . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    additive_expression            shift and go to state 366
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 286

    (180) relational_op -> S_EQUAL .

    S_PLUS          reduce using rule 180 (relational_op -> S_EQUAL .)
    S_MINUS         reduce using rule 180 (relational_op -> S_EQUAL .)
    RW_NOT          reduce using rule 180 (relational_op -> S_EQUAL .)
    S_LEFT_BRACKET  reduce using rule 180 (relational_op -> S_EQUAL .)
    S_LEFT_SQUARE_BRACKET reduce using rule 180 (relational_op -> S_EQUAL .)
    IDENTIFIER      reduce using rule 180 (relational_op -> S_EQUAL .)
    L_BOOLEAN_TRUE  reduce using rule 180 (relational_op -> S_EQUAL .)
    L_BOOLEAN_FALSE reduce using rule 180 (relational_op -> S_EQUAL .)
    L_NIL           reduce using rule 180 (relational_op -> S_EQUAL .)
    L_INTEGER_NUMBER reduce using rule 180 (relational_op -> S_EQUAL .)
    L_REAL_NUMBER   reduce using rule 180 (relational_op -> S_EQUAL .)
    L_STRING        reduce using rule 180 (relational_op -> S_EQUAL .)
    L_CHARACTER     reduce using rule 180 (relational_op -> S_EQUAL .)
    RW_ABS          reduce using rule 180 (relational_op -> S_EQUAL .)
    RW_SIN          reduce using rule 180 (relational_op -> S_EQUAL .)
    RW_COS          reduce using rule 180 (relational_op -> S_EQUAL .)
    RW_TAN          reduce using rule 180 (relational_op -> S_EQUAL .)
    RW_SUCC         reduce using rule 180 (relational_op -> S_EQUAL .)
    RW_PRED         reduce using rule 180 (relational_op -> S_EQUAL .)
    RW_AWAL         reduce using rule 180 (relational_op -> S_EQUAL .)
    RW_AKHIR        reduce using rule 180 (relational_op -> S_EQUAL .)
    RW_FIRSTCHAR    reduce using rule 180 (relational_op -> S_EQUAL .)
    RW_LASTCHAR     reduce using rule 180 (relational_op -> S_EQUAL .)
    RW_LONG         reduce using rule 180 (relational_op -> S_EQUAL .)
    RW_ISKOSONG     reduce using rule 180 (relational_op -> S_EQUAL .)
    RW_INTEGERTOREAL reduce using rule 180 (relational_op -> S_EQUAL .)
    RW_REALTOINTEGER reduce using rule 180 (relational_op -> S_EQUAL .)


state 287

    (181) relational_op -> S_NOT_EQUAL .

    S_PLUS          reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    S_MINUS         reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    RW_NOT          reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    S_LEFT_BRACKET  reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    S_LEFT_SQUARE_BRACKET reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    IDENTIFIER      reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    L_BOOLEAN_TRUE  reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    L_BOOLEAN_FALSE reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    L_NIL           reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    L_INTEGER_NUMBER reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    L_REAL_NUMBER   reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    L_STRING        reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    L_CHARACTER     reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    RW_ABS          reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    RW_SIN          reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    RW_COS          reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    RW_TAN          reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    RW_SUCC         reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    RW_PRED         reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    RW_AWAL         reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    RW_AKHIR        reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    RW_FIRSTCHAR    reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    RW_LASTCHAR     reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    RW_LONG         reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    RW_ISKOSONG     reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    RW_INTEGERTOREAL reduce using rule 181 (relational_op -> S_NOT_EQUAL .)
    RW_REALTOINTEGER reduce using rule 181 (relational_op -> S_NOT_EQUAL .)


state 288

    (182) relational_op -> S_LESS_THAN_EQUAL .

    S_PLUS          reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    S_MINUS         reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_NOT          reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    S_LEFT_BRACKET  reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    S_LEFT_SQUARE_BRACKET reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    IDENTIFIER      reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    L_BOOLEAN_TRUE  reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    L_BOOLEAN_FALSE reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    L_NIL           reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    L_INTEGER_NUMBER reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    L_REAL_NUMBER   reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    L_STRING        reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    L_CHARACTER     reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_ABS          reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_SIN          reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_COS          reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_TAN          reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_SUCC         reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_PRED         reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_AWAL         reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_AKHIR        reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_FIRSTCHAR    reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_LASTCHAR     reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_LONG         reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_ISKOSONG     reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_INTEGERTOREAL reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_REALTOINTEGER reduce using rule 182 (relational_op -> S_LESS_THAN_EQUAL .)


state 289

    (183) relational_op -> S_GREATER_THAN_EQUAL .

    S_PLUS          reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    S_MINUS         reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_NOT          reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    S_LEFT_BRACKET  reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    S_LEFT_SQUARE_BRACKET reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    IDENTIFIER      reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_BOOLEAN_TRUE  reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_BOOLEAN_FALSE reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_NIL           reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_INTEGER_NUMBER reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_REAL_NUMBER   reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_STRING        reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_CHARACTER     reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_ABS          reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_SIN          reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_COS          reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_TAN          reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_SUCC         reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_PRED         reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_AWAL         reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_AKHIR        reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_FIRSTCHAR    reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_LASTCHAR     reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_LONG         reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_ISKOSONG     reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_INTEGERTOREAL reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_REALTOINTEGER reduce using rule 183 (relational_op -> S_GREATER_THAN_EQUAL .)


state 290

    (184) relational_op -> S_LESS_THAN .

    S_PLUS          reduce using rule 184 (relational_op -> S_LESS_THAN .)
    S_MINUS         reduce using rule 184 (relational_op -> S_LESS_THAN .)
    RW_NOT          reduce using rule 184 (relational_op -> S_LESS_THAN .)
    S_LEFT_BRACKET  reduce using rule 184 (relational_op -> S_LESS_THAN .)
    S_LEFT_SQUARE_BRACKET reduce using rule 184 (relational_op -> S_LESS_THAN .)
    IDENTIFIER      reduce using rule 184 (relational_op -> S_LESS_THAN .)
    L_BOOLEAN_TRUE  reduce using rule 184 (relational_op -> S_LESS_THAN .)
    L_BOOLEAN_FALSE reduce using rule 184 (relational_op -> S_LESS_THAN .)
    L_NIL           reduce using rule 184 (relational_op -> S_LESS_THAN .)
    L_INTEGER_NUMBER reduce using rule 184 (relational_op -> S_LESS_THAN .)
    L_REAL_NUMBER   reduce using rule 184 (relational_op -> S_LESS_THAN .)
    L_STRING        reduce using rule 184 (relational_op -> S_LESS_THAN .)
    L_CHARACTER     reduce using rule 184 (relational_op -> S_LESS_THAN .)
    RW_ABS          reduce using rule 184 (relational_op -> S_LESS_THAN .)
    RW_SIN          reduce using rule 184 (relational_op -> S_LESS_THAN .)
    RW_COS          reduce using rule 184 (relational_op -> S_LESS_THAN .)
    RW_TAN          reduce using rule 184 (relational_op -> S_LESS_THAN .)
    RW_SUCC         reduce using rule 184 (relational_op -> S_LESS_THAN .)
    RW_PRED         reduce using rule 184 (relational_op -> S_LESS_THAN .)
    RW_AWAL         reduce using rule 184 (relational_op -> S_LESS_THAN .)
    RW_AKHIR        reduce using rule 184 (relational_op -> S_LESS_THAN .)
    RW_FIRSTCHAR    reduce using rule 184 (relational_op -> S_LESS_THAN .)
    RW_LASTCHAR     reduce using rule 184 (relational_op -> S_LESS_THAN .)
    RW_LONG         reduce using rule 184 (relational_op -> S_LESS_THAN .)
    RW_ISKOSONG     reduce using rule 184 (relational_op -> S_LESS_THAN .)
    RW_INTEGERTOREAL reduce using rule 184 (relational_op -> S_LESS_THAN .)
    RW_REALTOINTEGER reduce using rule 184 (relational_op -> S_LESS_THAN .)


state 291

    (185) relational_op -> S_GREATER_THAN .

    S_PLUS          reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    S_MINUS         reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    RW_NOT          reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    S_LEFT_BRACKET  reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    S_LEFT_SQUARE_BRACKET reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    IDENTIFIER      reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    L_BOOLEAN_TRUE  reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    L_BOOLEAN_FALSE reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    L_NIL           reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    L_INTEGER_NUMBER reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    L_REAL_NUMBER   reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    L_STRING        reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    L_CHARACTER     reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    RW_ABS          reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    RW_SIN          reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    RW_COS          reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    RW_TAN          reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    RW_SUCC         reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    RW_PRED         reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    RW_AWAL         reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    RW_AKHIR        reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    RW_FIRSTCHAR    reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    RW_LASTCHAR     reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    RW_LONG         reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    RW_ISKOSONG     reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    RW_INTEGERTOREAL reduce using rule 185 (relational_op -> S_GREATER_THAN .)
    RW_REALTOINTEGER reduce using rule 185 (relational_op -> S_GREATER_THAN .)


state 292

    (186) relational_op -> S_ELEMENT_OF .

    S_PLUS          reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    S_MINUS         reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    RW_NOT          reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    S_LEFT_BRACKET  reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    S_LEFT_SQUARE_BRACKET reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    IDENTIFIER      reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    L_BOOLEAN_TRUE  reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    L_BOOLEAN_FALSE reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    L_NIL           reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    L_INTEGER_NUMBER reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    L_REAL_NUMBER   reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    L_STRING        reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    L_CHARACTER     reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    RW_ABS          reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    RW_SIN          reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    RW_COS          reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    RW_TAN          reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    RW_SUCC         reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    RW_PRED         reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    RW_AWAL         reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    RW_AKHIR        reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    RW_FIRSTCHAR    reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    RW_LASTCHAR     reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    RW_LONG         reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    RW_ISKOSONG     reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    RW_INTEGERTOREAL reduce using rule 186 (relational_op -> S_ELEMENT_OF .)
    RW_REALTOINTEGER reduce using rule 186 (relational_op -> S_ELEMENT_OF .)


state 293

    (187) relational_op -> RW_EQ .

    S_PLUS          reduce using rule 187 (relational_op -> RW_EQ .)
    S_MINUS         reduce using rule 187 (relational_op -> RW_EQ .)
    RW_NOT          reduce using rule 187 (relational_op -> RW_EQ .)
    S_LEFT_BRACKET  reduce using rule 187 (relational_op -> RW_EQ .)
    S_LEFT_SQUARE_BRACKET reduce using rule 187 (relational_op -> RW_EQ .)
    IDENTIFIER      reduce using rule 187 (relational_op -> RW_EQ .)
    L_BOOLEAN_TRUE  reduce using rule 187 (relational_op -> RW_EQ .)
    L_BOOLEAN_FALSE reduce using rule 187 (relational_op -> RW_EQ .)
    L_NIL           reduce using rule 187 (relational_op -> RW_EQ .)
    L_INTEGER_NUMBER reduce using rule 187 (relational_op -> RW_EQ .)
    L_REAL_NUMBER   reduce using rule 187 (relational_op -> RW_EQ .)
    L_STRING        reduce using rule 187 (relational_op -> RW_EQ .)
    L_CHARACTER     reduce using rule 187 (relational_op -> RW_EQ .)
    RW_ABS          reduce using rule 187 (relational_op -> RW_EQ .)
    RW_SIN          reduce using rule 187 (relational_op -> RW_EQ .)
    RW_COS          reduce using rule 187 (relational_op -> RW_EQ .)
    RW_TAN          reduce using rule 187 (relational_op -> RW_EQ .)
    RW_SUCC         reduce using rule 187 (relational_op -> RW_EQ .)
    RW_PRED         reduce using rule 187 (relational_op -> RW_EQ .)
    RW_AWAL         reduce using rule 187 (relational_op -> RW_EQ .)
    RW_AKHIR        reduce using rule 187 (relational_op -> RW_EQ .)
    RW_FIRSTCHAR    reduce using rule 187 (relational_op -> RW_EQ .)
    RW_LASTCHAR     reduce using rule 187 (relational_op -> RW_EQ .)
    RW_LONG         reduce using rule 187 (relational_op -> RW_EQ .)
    RW_ISKOSONG     reduce using rule 187 (relational_op -> RW_EQ .)
    RW_INTEGERTOREAL reduce using rule 187 (relational_op -> RW_EQ .)
    RW_REALTOINTEGER reduce using rule 187 (relational_op -> RW_EQ .)


state 294

    (188) relational_op -> RW_NEQ .

    S_PLUS          reduce using rule 188 (relational_op -> RW_NEQ .)
    S_MINUS         reduce using rule 188 (relational_op -> RW_NEQ .)
    RW_NOT          reduce using rule 188 (relational_op -> RW_NEQ .)
    S_LEFT_BRACKET  reduce using rule 188 (relational_op -> RW_NEQ .)
    S_LEFT_SQUARE_BRACKET reduce using rule 188 (relational_op -> RW_NEQ .)
    IDENTIFIER      reduce using rule 188 (relational_op -> RW_NEQ .)
    L_BOOLEAN_TRUE  reduce using rule 188 (relational_op -> RW_NEQ .)
    L_BOOLEAN_FALSE reduce using rule 188 (relational_op -> RW_NEQ .)
    L_NIL           reduce using rule 188 (relational_op -> RW_NEQ .)
    L_INTEGER_NUMBER reduce using rule 188 (relational_op -> RW_NEQ .)
    L_REAL_NUMBER   reduce using rule 188 (relational_op -> RW_NEQ .)
    L_STRING        reduce using rule 188 (relational_op -> RW_NEQ .)
    L_CHARACTER     reduce using rule 188 (relational_op -> RW_NEQ .)
    RW_ABS          reduce using rule 188 (relational_op -> RW_NEQ .)
    RW_SIN          reduce using rule 188 (relational_op -> RW_NEQ .)
    RW_COS          reduce using rule 188 (relational_op -> RW_NEQ .)
    RW_TAN          reduce using rule 188 (relational_op -> RW_NEQ .)
    RW_SUCC         reduce using rule 188 (relational_op -> RW_NEQ .)
    RW_PRED         reduce using rule 188 (relational_op -> RW_NEQ .)
    RW_AWAL         reduce using rule 188 (relational_op -> RW_NEQ .)
    RW_AKHIR        reduce using rule 188 (relational_op -> RW_NEQ .)
    RW_FIRSTCHAR    reduce using rule 188 (relational_op -> RW_NEQ .)
    RW_LASTCHAR     reduce using rule 188 (relational_op -> RW_NEQ .)
    RW_LONG         reduce using rule 188 (relational_op -> RW_NEQ .)
    RW_ISKOSONG     reduce using rule 188 (relational_op -> RW_NEQ .)
    RW_INTEGERTOREAL reduce using rule 188 (relational_op -> RW_NEQ .)
    RW_REALTOINTEGER reduce using rule 188 (relational_op -> RW_NEQ .)


state 295

    (189) additive_expression -> additive_expression additive_op . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    multiplicative_expression      shift and go to state 367
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 296

    (191) additive_op -> S_PLUS .

    S_PLUS          reduce using rule 191 (additive_op -> S_PLUS .)
    S_MINUS         reduce using rule 191 (additive_op -> S_PLUS .)
    RW_NOT          reduce using rule 191 (additive_op -> S_PLUS .)
    S_LEFT_BRACKET  reduce using rule 191 (additive_op -> S_PLUS .)
    S_LEFT_SQUARE_BRACKET reduce using rule 191 (additive_op -> S_PLUS .)
    IDENTIFIER      reduce using rule 191 (additive_op -> S_PLUS .)
    L_BOOLEAN_TRUE  reduce using rule 191 (additive_op -> S_PLUS .)
    L_BOOLEAN_FALSE reduce using rule 191 (additive_op -> S_PLUS .)
    L_NIL           reduce using rule 191 (additive_op -> S_PLUS .)
    L_INTEGER_NUMBER reduce using rule 191 (additive_op -> S_PLUS .)
    L_REAL_NUMBER   reduce using rule 191 (additive_op -> S_PLUS .)
    L_STRING        reduce using rule 191 (additive_op -> S_PLUS .)
    L_CHARACTER     reduce using rule 191 (additive_op -> S_PLUS .)
    RW_ABS          reduce using rule 191 (additive_op -> S_PLUS .)
    RW_SIN          reduce using rule 191 (additive_op -> S_PLUS .)
    RW_COS          reduce using rule 191 (additive_op -> S_PLUS .)
    RW_TAN          reduce using rule 191 (additive_op -> S_PLUS .)
    RW_SUCC         reduce using rule 191 (additive_op -> S_PLUS .)
    RW_PRED         reduce using rule 191 (additive_op -> S_PLUS .)
    RW_AWAL         reduce using rule 191 (additive_op -> S_PLUS .)
    RW_AKHIR        reduce using rule 191 (additive_op -> S_PLUS .)
    RW_FIRSTCHAR    reduce using rule 191 (additive_op -> S_PLUS .)
    RW_LASTCHAR     reduce using rule 191 (additive_op -> S_PLUS .)
    RW_LONG         reduce using rule 191 (additive_op -> S_PLUS .)
    RW_ISKOSONG     reduce using rule 191 (additive_op -> S_PLUS .)
    RW_INTEGERTOREAL reduce using rule 191 (additive_op -> S_PLUS .)
    RW_REALTOINTEGER reduce using rule 191 (additive_op -> S_PLUS .)


state 297

    (192) additive_op -> S_MINUS .

    S_PLUS          reduce using rule 192 (additive_op -> S_MINUS .)
    S_MINUS         reduce using rule 192 (additive_op -> S_MINUS .)
    RW_NOT          reduce using rule 192 (additive_op -> S_MINUS .)
    S_LEFT_BRACKET  reduce using rule 192 (additive_op -> S_MINUS .)
    S_LEFT_SQUARE_BRACKET reduce using rule 192 (additive_op -> S_MINUS .)
    IDENTIFIER      reduce using rule 192 (additive_op -> S_MINUS .)
    L_BOOLEAN_TRUE  reduce using rule 192 (additive_op -> S_MINUS .)
    L_BOOLEAN_FALSE reduce using rule 192 (additive_op -> S_MINUS .)
    L_NIL           reduce using rule 192 (additive_op -> S_MINUS .)
    L_INTEGER_NUMBER reduce using rule 192 (additive_op -> S_MINUS .)
    L_REAL_NUMBER   reduce using rule 192 (additive_op -> S_MINUS .)
    L_STRING        reduce using rule 192 (additive_op -> S_MINUS .)
    L_CHARACTER     reduce using rule 192 (additive_op -> S_MINUS .)
    RW_ABS          reduce using rule 192 (additive_op -> S_MINUS .)
    RW_SIN          reduce using rule 192 (additive_op -> S_MINUS .)
    RW_COS          reduce using rule 192 (additive_op -> S_MINUS .)
    RW_TAN          reduce using rule 192 (additive_op -> S_MINUS .)
    RW_SUCC         reduce using rule 192 (additive_op -> S_MINUS .)
    RW_PRED         reduce using rule 192 (additive_op -> S_MINUS .)
    RW_AWAL         reduce using rule 192 (additive_op -> S_MINUS .)
    RW_AKHIR        reduce using rule 192 (additive_op -> S_MINUS .)
    RW_FIRSTCHAR    reduce using rule 192 (additive_op -> S_MINUS .)
    RW_LASTCHAR     reduce using rule 192 (additive_op -> S_MINUS .)
    RW_LONG         reduce using rule 192 (additive_op -> S_MINUS .)
    RW_ISKOSONG     reduce using rule 192 (additive_op -> S_MINUS .)
    RW_INTEGERTOREAL reduce using rule 192 (additive_op -> S_MINUS .)
    RW_REALTOINTEGER reduce using rule 192 (additive_op -> S_MINUS .)


state 298

    (193) additive_op -> RW_OR .

    S_PLUS          reduce using rule 193 (additive_op -> RW_OR .)
    S_MINUS         reduce using rule 193 (additive_op -> RW_OR .)
    RW_NOT          reduce using rule 193 (additive_op -> RW_OR .)
    S_LEFT_BRACKET  reduce using rule 193 (additive_op -> RW_OR .)
    S_LEFT_SQUARE_BRACKET reduce using rule 193 (additive_op -> RW_OR .)
    IDENTIFIER      reduce using rule 193 (additive_op -> RW_OR .)
    L_BOOLEAN_TRUE  reduce using rule 193 (additive_op -> RW_OR .)
    L_BOOLEAN_FALSE reduce using rule 193 (additive_op -> RW_OR .)
    L_NIL           reduce using rule 193 (additive_op -> RW_OR .)
    L_INTEGER_NUMBER reduce using rule 193 (additive_op -> RW_OR .)
    L_REAL_NUMBER   reduce using rule 193 (additive_op -> RW_OR .)
    L_STRING        reduce using rule 193 (additive_op -> RW_OR .)
    L_CHARACTER     reduce using rule 193 (additive_op -> RW_OR .)
    RW_ABS          reduce using rule 193 (additive_op -> RW_OR .)
    RW_SIN          reduce using rule 193 (additive_op -> RW_OR .)
    RW_COS          reduce using rule 193 (additive_op -> RW_OR .)
    RW_TAN          reduce using rule 193 (additive_op -> RW_OR .)
    RW_SUCC         reduce using rule 193 (additive_op -> RW_OR .)
    RW_PRED         reduce using rule 193 (additive_op -> RW_OR .)
    RW_AWAL         reduce using rule 193 (additive_op -> RW_OR .)
    RW_AKHIR        reduce using rule 193 (additive_op -> RW_OR .)
    RW_FIRSTCHAR    reduce using rule 193 (additive_op -> RW_OR .)
    RW_LASTCHAR     reduce using rule 193 (additive_op -> RW_OR .)
    RW_LONG         reduce using rule 193 (additive_op -> RW_OR .)
    RW_ISKOSONG     reduce using rule 193 (additive_op -> RW_OR .)
    RW_INTEGERTOREAL reduce using rule 193 (additive_op -> RW_OR .)
    RW_REALTOINTEGER reduce using rule 193 (additive_op -> RW_OR .)


state 299

    (194) additive_op -> RW_XOR .

    S_PLUS          reduce using rule 194 (additive_op -> RW_XOR .)
    S_MINUS         reduce using rule 194 (additive_op -> RW_XOR .)
    RW_NOT          reduce using rule 194 (additive_op -> RW_XOR .)
    S_LEFT_BRACKET  reduce using rule 194 (additive_op -> RW_XOR .)
    S_LEFT_SQUARE_BRACKET reduce using rule 194 (additive_op -> RW_XOR .)
    IDENTIFIER      reduce using rule 194 (additive_op -> RW_XOR .)
    L_BOOLEAN_TRUE  reduce using rule 194 (additive_op -> RW_XOR .)
    L_BOOLEAN_FALSE reduce using rule 194 (additive_op -> RW_XOR .)
    L_NIL           reduce using rule 194 (additive_op -> RW_XOR .)
    L_INTEGER_NUMBER reduce using rule 194 (additive_op -> RW_XOR .)
    L_REAL_NUMBER   reduce using rule 194 (additive_op -> RW_XOR .)
    L_STRING        reduce using rule 194 (additive_op -> RW_XOR .)
    L_CHARACTER     reduce using rule 194 (additive_op -> RW_XOR .)
    RW_ABS          reduce using rule 194 (additive_op -> RW_XOR .)
    RW_SIN          reduce using rule 194 (additive_op -> RW_XOR .)
    RW_COS          reduce using rule 194 (additive_op -> RW_XOR .)
    RW_TAN          reduce using rule 194 (additive_op -> RW_XOR .)
    RW_SUCC         reduce using rule 194 (additive_op -> RW_XOR .)
    RW_PRED         reduce using rule 194 (additive_op -> RW_XOR .)
    RW_AWAL         reduce using rule 194 (additive_op -> RW_XOR .)
    RW_AKHIR        reduce using rule 194 (additive_op -> RW_XOR .)
    RW_FIRSTCHAR    reduce using rule 194 (additive_op -> RW_XOR .)
    RW_LASTCHAR     reduce using rule 194 (additive_op -> RW_XOR .)
    RW_LONG         reduce using rule 194 (additive_op -> RW_XOR .)
    RW_ISKOSONG     reduce using rule 194 (additive_op -> RW_XOR .)
    RW_INTEGERTOREAL reduce using rule 194 (additive_op -> RW_XOR .)
    RW_REALTOINTEGER reduce using rule 194 (additive_op -> RW_XOR .)


state 300

    (195) multiplicative_expression -> multiplicative_expression multiplicative_op . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    unary_expression               shift and go to state 368
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 301

    (197) multiplicative_op -> S_TIMES .

    S_PLUS          reduce using rule 197 (multiplicative_op -> S_TIMES .)
    S_MINUS         reduce using rule 197 (multiplicative_op -> S_TIMES .)
    RW_NOT          reduce using rule 197 (multiplicative_op -> S_TIMES .)
    S_LEFT_BRACKET  reduce using rule 197 (multiplicative_op -> S_TIMES .)
    S_LEFT_SQUARE_BRACKET reduce using rule 197 (multiplicative_op -> S_TIMES .)
    IDENTIFIER      reduce using rule 197 (multiplicative_op -> S_TIMES .)
    L_BOOLEAN_TRUE  reduce using rule 197 (multiplicative_op -> S_TIMES .)
    L_BOOLEAN_FALSE reduce using rule 197 (multiplicative_op -> S_TIMES .)
    L_NIL           reduce using rule 197 (multiplicative_op -> S_TIMES .)
    L_INTEGER_NUMBER reduce using rule 197 (multiplicative_op -> S_TIMES .)
    L_REAL_NUMBER   reduce using rule 197 (multiplicative_op -> S_TIMES .)
    L_STRING        reduce using rule 197 (multiplicative_op -> S_TIMES .)
    L_CHARACTER     reduce using rule 197 (multiplicative_op -> S_TIMES .)
    RW_ABS          reduce using rule 197 (multiplicative_op -> S_TIMES .)
    RW_SIN          reduce using rule 197 (multiplicative_op -> S_TIMES .)
    RW_COS          reduce using rule 197 (multiplicative_op -> S_TIMES .)
    RW_TAN          reduce using rule 197 (multiplicative_op -> S_TIMES .)
    RW_SUCC         reduce using rule 197 (multiplicative_op -> S_TIMES .)
    RW_PRED         reduce using rule 197 (multiplicative_op -> S_TIMES .)
    RW_AWAL         reduce using rule 197 (multiplicative_op -> S_TIMES .)
    RW_AKHIR        reduce using rule 197 (multiplicative_op -> S_TIMES .)
    RW_FIRSTCHAR    reduce using rule 197 (multiplicative_op -> S_TIMES .)
    RW_LASTCHAR     reduce using rule 197 (multiplicative_op -> S_TIMES .)
    RW_LONG         reduce using rule 197 (multiplicative_op -> S_TIMES .)
    RW_ISKOSONG     reduce using rule 197 (multiplicative_op -> S_TIMES .)
    RW_INTEGERTOREAL reduce using rule 197 (multiplicative_op -> S_TIMES .)
    RW_REALTOINTEGER reduce using rule 197 (multiplicative_op -> S_TIMES .)


state 302

    (198) multiplicative_op -> S_DIVIDE .

    S_PLUS          reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    S_MINUS         reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    RW_NOT          reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    S_LEFT_BRACKET  reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    S_LEFT_SQUARE_BRACKET reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    IDENTIFIER      reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    L_BOOLEAN_TRUE  reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    L_BOOLEAN_FALSE reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    L_NIL           reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    L_INTEGER_NUMBER reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    L_REAL_NUMBER   reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    L_STRING        reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    L_CHARACTER     reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    RW_ABS          reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    RW_SIN          reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    RW_COS          reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    RW_TAN          reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    RW_SUCC         reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    RW_PRED         reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    RW_AWAL         reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    RW_AKHIR        reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    RW_FIRSTCHAR    reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    RW_LASTCHAR     reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    RW_LONG         reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    RW_ISKOSONG     reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    RW_INTEGERTOREAL reduce using rule 198 (multiplicative_op -> S_DIVIDE .)
    RW_REALTOINTEGER reduce using rule 198 (multiplicative_op -> S_DIVIDE .)


state 303

    (199) multiplicative_op -> RW_DIV .

    S_PLUS          reduce using rule 199 (multiplicative_op -> RW_DIV .)
    S_MINUS         reduce using rule 199 (multiplicative_op -> RW_DIV .)
    RW_NOT          reduce using rule 199 (multiplicative_op -> RW_DIV .)
    S_LEFT_BRACKET  reduce using rule 199 (multiplicative_op -> RW_DIV .)
    S_LEFT_SQUARE_BRACKET reduce using rule 199 (multiplicative_op -> RW_DIV .)
    IDENTIFIER      reduce using rule 199 (multiplicative_op -> RW_DIV .)
    L_BOOLEAN_TRUE  reduce using rule 199 (multiplicative_op -> RW_DIV .)
    L_BOOLEAN_FALSE reduce using rule 199 (multiplicative_op -> RW_DIV .)
    L_NIL           reduce using rule 199 (multiplicative_op -> RW_DIV .)
    L_INTEGER_NUMBER reduce using rule 199 (multiplicative_op -> RW_DIV .)
    L_REAL_NUMBER   reduce using rule 199 (multiplicative_op -> RW_DIV .)
    L_STRING        reduce using rule 199 (multiplicative_op -> RW_DIV .)
    L_CHARACTER     reduce using rule 199 (multiplicative_op -> RW_DIV .)
    RW_ABS          reduce using rule 199 (multiplicative_op -> RW_DIV .)
    RW_SIN          reduce using rule 199 (multiplicative_op -> RW_DIV .)
    RW_COS          reduce using rule 199 (multiplicative_op -> RW_DIV .)
    RW_TAN          reduce using rule 199 (multiplicative_op -> RW_DIV .)
    RW_SUCC         reduce using rule 199 (multiplicative_op -> RW_DIV .)
    RW_PRED         reduce using rule 199 (multiplicative_op -> RW_DIV .)
    RW_AWAL         reduce using rule 199 (multiplicative_op -> RW_DIV .)
    RW_AKHIR        reduce using rule 199 (multiplicative_op -> RW_DIV .)
    RW_FIRSTCHAR    reduce using rule 199 (multiplicative_op -> RW_DIV .)
    RW_LASTCHAR     reduce using rule 199 (multiplicative_op -> RW_DIV .)
    RW_LONG         reduce using rule 199 (multiplicative_op -> RW_DIV .)
    RW_ISKOSONG     reduce using rule 199 (multiplicative_op -> RW_DIV .)
    RW_INTEGERTOREAL reduce using rule 199 (multiplicative_op -> RW_DIV .)
    RW_REALTOINTEGER reduce using rule 199 (multiplicative_op -> RW_DIV .)


state 304

    (200) multiplicative_op -> RW_MOD .

    S_PLUS          reduce using rule 200 (multiplicative_op -> RW_MOD .)
    S_MINUS         reduce using rule 200 (multiplicative_op -> RW_MOD .)
    RW_NOT          reduce using rule 200 (multiplicative_op -> RW_MOD .)
    S_LEFT_BRACKET  reduce using rule 200 (multiplicative_op -> RW_MOD .)
    S_LEFT_SQUARE_BRACKET reduce using rule 200 (multiplicative_op -> RW_MOD .)
    IDENTIFIER      reduce using rule 200 (multiplicative_op -> RW_MOD .)
    L_BOOLEAN_TRUE  reduce using rule 200 (multiplicative_op -> RW_MOD .)
    L_BOOLEAN_FALSE reduce using rule 200 (multiplicative_op -> RW_MOD .)
    L_NIL           reduce using rule 200 (multiplicative_op -> RW_MOD .)
    L_INTEGER_NUMBER reduce using rule 200 (multiplicative_op -> RW_MOD .)
    L_REAL_NUMBER   reduce using rule 200 (multiplicative_op -> RW_MOD .)
    L_STRING        reduce using rule 200 (multiplicative_op -> RW_MOD .)
    L_CHARACTER     reduce using rule 200 (multiplicative_op -> RW_MOD .)
    RW_ABS          reduce using rule 200 (multiplicative_op -> RW_MOD .)
    RW_SIN          reduce using rule 200 (multiplicative_op -> RW_MOD .)
    RW_COS          reduce using rule 200 (multiplicative_op -> RW_MOD .)
    RW_TAN          reduce using rule 200 (multiplicative_op -> RW_MOD .)
    RW_SUCC         reduce using rule 200 (multiplicative_op -> RW_MOD .)
    RW_PRED         reduce using rule 200 (multiplicative_op -> RW_MOD .)
    RW_AWAL         reduce using rule 200 (multiplicative_op -> RW_MOD .)
    RW_AKHIR        reduce using rule 200 (multiplicative_op -> RW_MOD .)
    RW_FIRSTCHAR    reduce using rule 200 (multiplicative_op -> RW_MOD .)
    RW_LASTCHAR     reduce using rule 200 (multiplicative_op -> RW_MOD .)
    RW_LONG         reduce using rule 200 (multiplicative_op -> RW_MOD .)
    RW_ISKOSONG     reduce using rule 200 (multiplicative_op -> RW_MOD .)
    RW_INTEGERTOREAL reduce using rule 200 (multiplicative_op -> RW_MOD .)
    RW_REALTOINTEGER reduce using rule 200 (multiplicative_op -> RW_MOD .)


state 305

    (201) multiplicative_op -> RW_AND .

    S_PLUS          reduce using rule 201 (multiplicative_op -> RW_AND .)
    S_MINUS         reduce using rule 201 (multiplicative_op -> RW_AND .)
    RW_NOT          reduce using rule 201 (multiplicative_op -> RW_AND .)
    S_LEFT_BRACKET  reduce using rule 201 (multiplicative_op -> RW_AND .)
    S_LEFT_SQUARE_BRACKET reduce using rule 201 (multiplicative_op -> RW_AND .)
    IDENTIFIER      reduce using rule 201 (multiplicative_op -> RW_AND .)
    L_BOOLEAN_TRUE  reduce using rule 201 (multiplicative_op -> RW_AND .)
    L_BOOLEAN_FALSE reduce using rule 201 (multiplicative_op -> RW_AND .)
    L_NIL           reduce using rule 201 (multiplicative_op -> RW_AND .)
    L_INTEGER_NUMBER reduce using rule 201 (multiplicative_op -> RW_AND .)
    L_REAL_NUMBER   reduce using rule 201 (multiplicative_op -> RW_AND .)
    L_STRING        reduce using rule 201 (multiplicative_op -> RW_AND .)
    L_CHARACTER     reduce using rule 201 (multiplicative_op -> RW_AND .)
    RW_ABS          reduce using rule 201 (multiplicative_op -> RW_AND .)
    RW_SIN          reduce using rule 201 (multiplicative_op -> RW_AND .)
    RW_COS          reduce using rule 201 (multiplicative_op -> RW_AND .)
    RW_TAN          reduce using rule 201 (multiplicative_op -> RW_AND .)
    RW_SUCC         reduce using rule 201 (multiplicative_op -> RW_AND .)
    RW_PRED         reduce using rule 201 (multiplicative_op -> RW_AND .)
    RW_AWAL         reduce using rule 201 (multiplicative_op -> RW_AND .)
    RW_AKHIR        reduce using rule 201 (multiplicative_op -> RW_AND .)
    RW_FIRSTCHAR    reduce using rule 201 (multiplicative_op -> RW_AND .)
    RW_LASTCHAR     reduce using rule 201 (multiplicative_op -> RW_AND .)
    RW_LONG         reduce using rule 201 (multiplicative_op -> RW_AND .)
    RW_ISKOSONG     reduce using rule 201 (multiplicative_op -> RW_AND .)
    RW_INTEGERTOREAL reduce using rule 201 (multiplicative_op -> RW_AND .)
    RW_REALTOINTEGER reduce using rule 201 (multiplicative_op -> RW_AND .)


state 306

    (202) unary_expression -> unary_op unary_expression .

    S_TIMES         reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    S_DIVIDE        reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    RW_DIV          reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    RW_MOD          reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    RW_AND          reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    S_PLUS          reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    S_MINUS         reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    RW_OR           reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    RW_XOR          reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    S_EQUAL         reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    S_NOT_EQUAL     reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    S_LESS_THAN_EQUAL reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    S_LESS_THAN     reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    S_GREATER_THAN  reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    S_ELEMENT_OF    reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    RW_EQ           reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    RW_NEQ          reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    S_RIGHT_BRACKET reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    S_COMMA         reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    DEDENT          reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    S_SEMI_COLON    reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    S_RETURN        reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    RW_IF           reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    RW_DEPEND       reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    RW_WHILE        reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    RW_ITERATE      reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    IDENTIFIER      reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    RW_REPEAT       reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    RW_INPUT        reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    RW_OUTPUT       reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    RW_THEN         reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    RW_DO           reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    S_UP_TO         reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    INDENT          reduce using rule 202 (unary_expression -> unary_op unary_expression .)
    S_COLON         reduce using rule 202 (unary_expression -> unary_op unary_expression .)


state 307

    (205) exponentiation_expression -> primary_expression S_POWER . exponentiation_expression
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    primary_expression             shift and go to state 216
    exponentiation_expression      shift and go to state 369
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 308

    (214) set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list . S_RIGHT_SQUARE_BRACKET
    (216) member_designator_list -> member_designator_list . S_COMMA member_designator

    S_RIGHT_SQUARE_BRACKET shift and go to state 370
    S_COMMA         shift and go to state 371


state 309

    (215) set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .

    S_POWER         reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_TIMES         reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_DIVIDE        reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_DIV          reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_MOD          reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_AND          reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_PLUS          reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_MINUS         reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_OR           reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_XOR          reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_EQUAL         reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_NOT_EQUAL     reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_LESS_THAN     reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_GREATER_THAN  reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_ELEMENT_OF    reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_EQ           reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_NEQ          reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_COMMA         reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    DEDENT          reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_SEMI_COLON    reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_RETURN        reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_IF           reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_DEPEND       reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_WHILE        reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_ITERATE      reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    IDENTIFIER      reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_REPEAT       reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_INPUT        reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_OUTPUT       reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_THEN         reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_DO           reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_UP_TO         reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    INDENT          reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_COLON         reduce using rule 215 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)


state 310

    (217) member_designator_list -> member_designator .
    (218) member_designator -> member_designator . S_UP_TO expression

    S_RIGHT_SQUARE_BRACKET reduce using rule 217 (member_designator_list -> member_designator .)
    S_COMMA         reduce using rule 217 (member_designator_list -> member_designator .)
    S_UP_TO         shift and go to state 372


state 311

    (219) member_designator -> expression .
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_UP_TO         reduce using rule 219 (member_designator -> expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 219 (member_designator -> expression .)
    S_COMMA         reduce using rule 219 (member_designator -> expression .)
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 312

    (51) array_type -> RW_ARRAY array_index RW_OF component_type .

    RW_KAMUS        reduce using rule 51 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    RW_PROCEDURE    reduce using rule 51 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    RW_FUNCTION     reduce using rule 51 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    $end            reduce using rule 51 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    DEDENT          reduce using rule 51 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    S_SEMI_COLON    reduce using rule 51 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    S_COMMA         reduce using rule 51 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    S_RIGHT_BRACKET reduce using rule 51 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    IDENTIFIER      reduce using rule 51 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    S_GREATER_THAN  reduce using rule 51 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    S_EQUAL         reduce using rule 51 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    RW_TYPE         reduce using rule 51 (array_type -> RW_ARRAY array_index RW_OF component_type .)


state 313

    (56) component_type -> type_denoter .

    RW_KAMUS        reduce using rule 56 (component_type -> type_denoter .)
    RW_PROCEDURE    reduce using rule 56 (component_type -> type_denoter .)
    RW_FUNCTION     reduce using rule 56 (component_type -> type_denoter .)
    $end            reduce using rule 56 (component_type -> type_denoter .)
    DEDENT          reduce using rule 56 (component_type -> type_denoter .)
    S_SEMI_COLON    reduce using rule 56 (component_type -> type_denoter .)
    S_COMMA         reduce using rule 56 (component_type -> type_denoter .)
    S_RIGHT_BRACKET reduce using rule 56 (component_type -> type_denoter .)
    IDENTIFIER      reduce using rule 56 (component_type -> type_denoter .)
    S_GREATER_THAN  reduce using rule 56 (component_type -> type_denoter .)
    S_EQUAL         reduce using rule 56 (component_type -> type_denoter .)
    RW_TYPE         reduce using rule 56 (component_type -> type_denoter .)


state 314

    (52) array_index -> S_LEFT_SQUARE_BRACKET index_list S_RIGHT_SQUARE_BRACKET .

    RW_OF           reduce using rule 52 (array_index -> S_LEFT_SQUARE_BRACKET index_list S_RIGHT_SQUARE_BRACKET .)


state 315

    (53) index_list -> index_list S_COMMA . index_type
    (55) index_type -> . ordinal_type
    (41) ordinal_type -> . enumerated_type
    (42) ordinal_type -> . subrange_type
    (43) ordinal_type -> . identifier
    (44) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (45) subrange_type -> . subrange_type_option
    (254) identifier -> . IDENTIFIER
    (46) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (47) subrange_option -> . identifier
    (48) subrange_option -> . constant
    (49) subrange_option -> . function_designator
    (153) constant -> . string_char_constant
    (154) constant -> . non_string_constant
    (155) constant -> . sign non_string_constant
    (156) constant -> . boolean_constant
    (157) constant -> . nil_constant
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (158) sign -> . S_PLUS
    (159) sign -> . S_MINUS
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 49
    IDENTIFIER      shift and go to state 11
    S_PLUS          shift and go to state 68
    S_MINUS         shift and go to state 69
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    index_type                     shift and go to state 373
    ordinal_type                   shift and go to state 231
    enumerated_type                shift and go to state 45
    subrange_type                  shift and go to state 46
    identifier                     shift and go to state 47
    subrange_type_option           shift and go to state 50
    subrange_option                shift and go to state 52
    constant                       shift and go to state 53
    function_designator            shift and go to state 54
    string_char_constant           shift and go to state 55
    non_string_constant            shift and go to state 56
    sign                           shift and go to state 57
    boolean_constant               shift and go to state 58
    nil_constant                   shift and go to state 59
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 316

    (231) abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 231 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 317

    (232) sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 232 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 318

    (233) cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 233 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 319

    (234) tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 234 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 320

    (235) succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 235 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 321

    (236) pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 236 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 322

    (243) awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 243 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 323

    (244) akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 244 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 324

    (245) firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 245 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 325

    (246) lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 246 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 326

    (247) long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 247 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 327

    (248) iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 248 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 328

    (251) integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 251 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 329

    (252) real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 252 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 330

    (9) block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block . algorithm_block procedure_and_function_implementation_block
    (19) algorithm_block -> . RW_ALGORITMA statement_part

    RW_ALGORITMA    shift and go to state 27

    algorithm_block                shift and go to state 374

state 331

    (17) procedure_and_function_declaration_block -> DEDENT .

    RW_ALGORITMA    reduce using rule 17 (procedure_and_function_declaration_block -> DEDENT .)


state 332

    (18) procedure_and_function_declaration_block -> procedure_and_function_declaration . DEDENT
    (71) procedure_and_function_declaration -> procedure_and_function_declaration . procedure_and_function_sub_declaration
    (73) procedure_and_function_sub_declaration -> . procedure_declaration
    (74) procedure_and_function_sub_declaration -> . function_declaration
    (75) procedure_declaration -> . procedure_identifier formal_parameter_list
    (87) function_declaration -> . function_identification function_formal_parameter_list function_return_type
    (88) function_declaration -> . function_identification function_return_type
    (76) procedure_identifier -> . RW_PROCEDURE identifier
    (89) function_identification -> . RW_FUNCTION identifier

    DEDENT          shift and go to state 375
    RW_PROCEDURE    shift and go to state 9
    RW_FUNCTION     shift and go to state 8

    procedure_and_function_sub_declaration shift and go to state 376
    procedure_declaration          shift and go to state 334
    function_declaration           shift and go to state 335
    procedure_identifier           shift and go to state 7
    function_identification        shift and go to state 6

state 333

    (72) procedure_and_function_declaration -> procedure_and_function_sub_declaration .

    DEDENT          reduce using rule 72 (procedure_and_function_declaration -> procedure_and_function_sub_declaration .)
    RW_PROCEDURE    reduce using rule 72 (procedure_and_function_declaration -> procedure_and_function_sub_declaration .)
    RW_FUNCTION     reduce using rule 72 (procedure_and_function_declaration -> procedure_and_function_sub_declaration .)


state 334

    (73) procedure_and_function_sub_declaration -> procedure_declaration .

    DEDENT          reduce using rule 73 (procedure_and_function_sub_declaration -> procedure_declaration .)
    RW_PROCEDURE    reduce using rule 73 (procedure_and_function_sub_declaration -> procedure_declaration .)
    RW_FUNCTION     reduce using rule 73 (procedure_and_function_sub_declaration -> procedure_declaration .)


state 335

    (74) procedure_and_function_sub_declaration -> function_declaration .

    DEDENT          reduce using rule 74 (procedure_and_function_sub_declaration -> function_declaration .)
    RW_PROCEDURE    reduce using rule 74 (procedure_and_function_sub_declaration -> function_declaration .)
    RW_FUNCTION     reduce using rule 74 (procedure_and_function_sub_declaration -> function_declaration .)


state 336

    (57) variable_declaration -> variable_declaration variable_sub_declaration .

    IDENTIFIER      reduce using rule 57 (variable_declaration -> variable_declaration variable_sub_declaration .)
    DEDENT          reduce using rule 57 (variable_declaration -> variable_declaration variable_sub_declaration .)
    RW_PROCEDURE    reduce using rule 57 (variable_declaration -> variable_declaration variable_sub_declaration .)
    RW_FUNCTION     reduce using rule 57 (variable_declaration -> variable_declaration variable_sub_declaration .)


state 337

    (67) type_sub_declaration -> RW_TYPE identifier S_COLON . type_variety
    (68) type_variety -> . type_denoter
    (69) type_variety -> . type_user_defined
    (34) type_denoter -> . ordinal_type
    (35) type_denoter -> . structured_type
    (36) type_denoter -> . RW_INTEGER
    (37) type_denoter -> . RW_REAL
    (38) type_denoter -> . RW_STRING
    (39) type_denoter -> . RW_CHARACTER
    (40) type_denoter -> . RW_BOOLEAN
    (70) type_user_defined -> . S_LESS_THAN variable_declaration_comma S_GREATER_THAN
    (41) ordinal_type -> . enumerated_type
    (42) ordinal_type -> . subrange_type
    (43) ordinal_type -> . identifier
    (50) structured_type -> . array_type
    (44) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (45) subrange_type -> . subrange_type_option
    (254) identifier -> . IDENTIFIER
    (51) array_type -> . RW_ARRAY array_index RW_OF component_type
    (46) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (47) subrange_option -> . identifier
    (48) subrange_option -> . constant
    (49) subrange_option -> . function_designator
    (153) constant -> . string_char_constant
    (154) constant -> . non_string_constant
    (155) constant -> . sign non_string_constant
    (156) constant -> . boolean_constant
    (157) constant -> . nil_constant
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (158) sign -> . S_PLUS
    (159) sign -> . S_MINUS
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    RW_INTEGER      shift and go to state 40
    RW_REAL         shift and go to state 41
    RW_STRING       shift and go to state 42
    RW_CHARACTER    shift and go to state 43
    RW_BOOLEAN      shift and go to state 44
    S_LESS_THAN     shift and go to state 380
    S_LEFT_BRACKET  shift and go to state 49
    IDENTIFIER      shift and go to state 11
    RW_ARRAY        shift and go to state 51
    S_PLUS          shift and go to state 68
    S_MINUS         shift and go to state 69
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    identifier                     shift and go to state 47
    type_variety                   shift and go to state 377
    type_denoter                   shift and go to state 378
    type_user_defined              shift and go to state 379
    ordinal_type                   shift and go to state 38
    structured_type                shift and go to state 39
    enumerated_type                shift and go to state 45
    subrange_type                  shift and go to state 46
    array_type                     shift and go to state 48
    subrange_type_option           shift and go to state 50
    subrange_option                shift and go to state 52
    constant                       shift and go to state 53
    function_designator            shift and go to state 54
    string_char_constant           shift and go to state 55
    non_string_constant            shift and go to state 56
    sign                           shift and go to state 57
    boolean_constant               shift and go to state 58
    nil_constant                   shift and go to state 59
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 338

    (64) constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter . S_EQUAL constant

    S_EQUAL         shift and go to state 381


state 339

    (28) procedure_implementation_block -> kamus_declaration INDENT constant_declaration_block . type_declaration_block variable_declaration_block DEDENT algorithm_block
    (13) type_declaration_block -> . empty
    (14) type_declaration_block -> . type_declaration
    (253) empty -> .
    (65) type_declaration -> . type_declaration type_sub_declaration
    (66) type_declaration -> . type_sub_declaration
    (67) type_sub_declaration -> . RW_TYPE identifier S_COLON type_variety

    IDENTIFIER      reduce using rule 253 (empty -> .)
    DEDENT          reduce using rule 253 (empty -> .)
    RW_TYPE         shift and go to state 163

    type_declaration_block         shift and go to state 382
    empty                          shift and go to state 160
    type_declaration               shift and go to state 161
    type_sub_declaration           shift and go to state 162

state 340

    (32) function_implementation_block -> kamus_declaration INDENT constant_declaration_block . type_declaration_block variable_declaration_block DEDENT algorithm_block
    (13) type_declaration_block -> . empty
    (14) type_declaration_block -> . type_declaration
    (253) empty -> .
    (65) type_declaration -> . type_declaration type_sub_declaration
    (66) type_declaration -> . type_sub_declaration
    (67) type_sub_declaration -> . RW_TYPE identifier S_COLON type_variety

    IDENTIFIER      reduce using rule 253 (empty -> .)
    DEDENT          reduce using rule 253 (empty -> .)
    RW_TYPE         shift and go to state 163

    type_declaration_block         shift and go to state 383
    empty                          shift and go to state 160
    type_declaration               shift and go to state 161
    type_sub_declaration           shift and go to state 162

state 341

    (101) statement_sequence -> statement_sequence S_SEMI_COLON statement .

    DEDENT          reduce using rule 101 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    S_SEMI_COLON    reduce using rule 101 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    S_RETURN        reduce using rule 101 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_IF           reduce using rule 101 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_DEPEND       reduce using rule 101 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_WHILE        reduce using rule 101 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_ITERATE      reduce using rule 101 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    IDENTIFIER      reduce using rule 101 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_REPEAT       reduce using rule 101 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_INPUT        reduce using rule 101 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_OUTPUT       reduce using rule 101 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)


state 342

    (113) assignment_statement -> variable_access S_ASSIGNMENT expression .
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    DEDENT          reduce using rule 113 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    S_SEMI_COLON    reduce using rule 113 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    S_RETURN        reduce using rule 113 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_IF           reduce using rule 113 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_DEPEND       reduce using rule 113 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_WHILE        reduce using rule 113 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_ITERATE      reduce using rule 113 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    IDENTIFIER      reduce using rule 113 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_REPEAT       reduce using rule 113 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_INPUT        reduce using rule 113 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_OUTPUT       reduce using rule 113 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 343

    (174) indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list . S_RIGHT_SQUARE_BRACKET
    (175) index_expression_list -> index_expression_list . S_COMMA expression

    S_RIGHT_SQUARE_BRACKET shift and go to state 384
    S_COMMA         shift and go to state 385


state 344

    (176) index_expression_list -> expression .
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_RIGHT_SQUARE_BRACKET reduce using rule 176 (index_expression_list -> expression .)
    S_COMMA         reduce using rule 176 (index_expression_list -> expression .)
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 345

    (177) field_designator -> variable_access S_DOT identifier .

    S_ASSIGNMENT    reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_LEFT_SQUARE_BRACKET reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_DOT           reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_POWER         reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_TIMES         reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_DIVIDE        reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    RW_DIV          reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    RW_MOD          reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    RW_AND          reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_PLUS          reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_MINUS         reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    RW_OR           reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    RW_XOR          reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_EQUAL         reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_NOT_EQUAL     reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_LESS_THAN_EQUAL reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_GREATER_THAN_EQUAL reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_LESS_THAN     reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_GREATER_THAN  reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_ELEMENT_OF    reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    RW_EQ           reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    RW_NEQ          reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_RIGHT_BRACKET reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_COMMA         reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    DEDENT          reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_SEMI_COLON    reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_RETURN        reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    RW_IF           reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    RW_DEPEND       reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    RW_WHILE        reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    RW_ITERATE      reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    IDENTIFIER      reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    RW_REPEAT       reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    RW_INPUT        reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    RW_OUTPUT       reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    RW_THEN         reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    RW_DO           reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    RW_TIMES        reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_UP_TO         reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    INDENT          reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)
    S_COLON         reduce using rule 177 (field_designator -> variable_access S_DOT identifier .)


state 346

    (115) procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list . S_RIGHT_BRACKET
    (117) actual_parameter_list -> actual_parameter_list . S_COMMA actual_parameter

    S_RIGHT_BRACKET shift and go to state 386
    S_COMMA         shift and go to state 284


state 347

    (135) if_statement -> RW_IF boolean_expression RW_THEN . compound_statement
    (136) if_statement -> RW_IF boolean_expression RW_THEN . compound_statement RW_ELSE compound_statement
    (100) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 127

    compound_statement             shift and go to state 387

state 348

    (131) depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET . input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (123) input_statement_parameter_list -> . input_statement_parameter_list S_COMMA input_statement_parameter
    (124) input_statement_parameter_list -> . input_statement_parameter
    (125) input_statement_parameter -> . variable_access
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier

    IDENTIFIER      shift and go to state 11

    input_statement_parameter_list shift and go to state 388
    input_statement_parameter      shift and go to state 358
    variable_access                shift and go to state 359
    identifier                     shift and go to state 360
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194

state 349

    (144) while_statement -> RW_WHILE boolean_expression RW_DO . compound_statement
    (100) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 127

    compound_statement             shift and go to state 389

state 350

    (146) traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value . compound_statement
    (100) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 127

    compound_statement             shift and go to state 390

state 351

    (147) traversal_range_value -> S_LEFT_SQUARE_BRACKET . subrange_type S_RIGHT_SQUARE_BRACKET
    (45) subrange_type -> . subrange_type_option
    (46) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (47) subrange_option -> . identifier
    (48) subrange_option -> . constant
    (49) subrange_option -> . function_designator
    (254) identifier -> . IDENTIFIER
    (153) constant -> . string_char_constant
    (154) constant -> . non_string_constant
    (155) constant -> . sign non_string_constant
    (156) constant -> . boolean_constant
    (157) constant -> . nil_constant
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (158) sign -> . S_PLUS
    (159) sign -> . S_MINUS
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    IDENTIFIER      shift and go to state 11
    S_PLUS          shift and go to state 68
    S_MINUS         shift and go to state 69
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    subrange_type                  shift and go to state 391
    subrange_type_option           shift and go to state 50
    subrange_option                shift and go to state 52
    identifier                     shift and go to state 233
    constant                       shift and go to state 53
    function_designator            shift and go to state 54
    string_char_constant           shift and go to state 55
    non_string_constant            shift and go to state 56
    sign                           shift and go to state 57
    boolean_constant               shift and go to state 58
    nil_constant                   shift and go to state 59
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 352

    (145) iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP . boolean_expression compound_statement
    (137) boolean_expression -> . expression
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    boolean_expression             shift and go to state 392
    expression                     shift and go to state 271
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 353

    (140) repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL . boolean_expression
    (137) boolean_expression -> . expression
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    boolean_expression             shift and go to state 393
    expression                     shift and go to state 271
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 354

    (141) repeat_times_statement -> RW_REPEAT variable_access RW_TIMES . compound_statement
    (100) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 127

    compound_statement             shift and go to state 394

state 355

    (142) repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES . compound_statement
    (100) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 127

    compound_statement             shift and go to state 395

state 356

    (143) repeat_times_statement -> RW_REPEAT function_designator RW_TIMES . compound_statement
    (100) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 127

    compound_statement             shift and go to state 396

state 357

    (122) input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list . S_RIGHT_BRACKET
    (123) input_statement_parameter_list -> input_statement_parameter_list . S_COMMA input_statement_parameter

    S_RIGHT_BRACKET shift and go to state 397
    S_COMMA         shift and go to state 398


state 358

    (124) input_statement_parameter_list -> input_statement_parameter .

    S_RIGHT_BRACKET reduce using rule 124 (input_statement_parameter_list -> input_statement_parameter .)
    S_COMMA         reduce using rule 124 (input_statement_parameter_list -> input_statement_parameter .)


state 359

    (125) input_statement_parameter -> variable_access .
    (174) indexed_variable -> variable_access . S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> variable_access . S_DOT identifier

    S_RIGHT_BRACKET reduce using rule 125 (input_statement_parameter -> variable_access .)
    S_COMMA         reduce using rule 125 (input_statement_parameter -> variable_access .)
    S_LEFT_SQUARE_BRACKET shift and go to state 266
    S_DOT           shift and go to state 267


state 360

    (171) variable_access -> identifier .

    S_LEFT_SQUARE_BRACKET reduce using rule 171 (variable_access -> identifier .)
    S_DOT           reduce using rule 171 (variable_access -> identifier .)
    S_RIGHT_BRACKET reduce using rule 171 (variable_access -> identifier .)
    S_COMMA         reduce using rule 171 (variable_access -> identifier .)


state 361

    (126) output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list . S_RIGHT_BRACKET
    (127) output_statement_parameter_list -> output_statement_parameter_list . S_COMMA output_statement_parameter

    S_RIGHT_BRACKET shift and go to state 399
    S_COMMA         shift and go to state 400


state 362

    (128) output_statement_parameter_list -> output_statement_parameter .

    S_RIGHT_BRACKET reduce using rule 128 (output_statement_parameter_list -> output_statement_parameter .)
    S_COMMA         reduce using rule 128 (output_statement_parameter_list -> output_statement_parameter .)


state 363

    (129) output_statement_parameter -> expression .
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET reduce using rule 129 (output_statement_parameter -> expression .)
    S_COMMA         reduce using rule 129 (output_statement_parameter -> expression .)
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 364

    (211) primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_POWER         reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_UP_TO         reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 211 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 365

    (117) actual_parameter_list -> actual_parameter_list S_COMMA actual_parameter .

    S_RIGHT_BRACKET reduce using rule 117 (actual_parameter_list -> actual_parameter_list S_COMMA actual_parameter .)
    S_COMMA         reduce using rule 117 (actual_parameter_list -> actual_parameter_list S_COMMA actual_parameter .)


state 366

    (178) expression -> expression relational_op additive_expression .
    (189) additive_expression -> additive_expression . additive_op multiplicative_expression
    (191) additive_op -> . S_PLUS
    (192) additive_op -> . S_MINUS
    (193) additive_op -> . RW_OR
    (194) additive_op -> . RW_XOR

    S_EQUAL         reduce using rule 178 (expression -> expression relational_op additive_expression .)
    S_NOT_EQUAL     reduce using rule 178 (expression -> expression relational_op additive_expression .)
    S_LESS_THAN_EQUAL reduce using rule 178 (expression -> expression relational_op additive_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 178 (expression -> expression relational_op additive_expression .)
    S_LESS_THAN     reduce using rule 178 (expression -> expression relational_op additive_expression .)
    S_GREATER_THAN  reduce using rule 178 (expression -> expression relational_op additive_expression .)
    S_ELEMENT_OF    reduce using rule 178 (expression -> expression relational_op additive_expression .)
    RW_EQ           reduce using rule 178 (expression -> expression relational_op additive_expression .)
    RW_NEQ          reduce using rule 178 (expression -> expression relational_op additive_expression .)
    S_RIGHT_BRACKET reduce using rule 178 (expression -> expression relational_op additive_expression .)
    S_COMMA         reduce using rule 178 (expression -> expression relational_op additive_expression .)
    DEDENT          reduce using rule 178 (expression -> expression relational_op additive_expression .)
    S_SEMI_COLON    reduce using rule 178 (expression -> expression relational_op additive_expression .)
    S_RETURN        reduce using rule 178 (expression -> expression relational_op additive_expression .)
    RW_IF           reduce using rule 178 (expression -> expression relational_op additive_expression .)
    RW_DEPEND       reduce using rule 178 (expression -> expression relational_op additive_expression .)
    RW_WHILE        reduce using rule 178 (expression -> expression relational_op additive_expression .)
    RW_ITERATE      reduce using rule 178 (expression -> expression relational_op additive_expression .)
    IDENTIFIER      reduce using rule 178 (expression -> expression relational_op additive_expression .)
    RW_REPEAT       reduce using rule 178 (expression -> expression relational_op additive_expression .)
    RW_INPUT        reduce using rule 178 (expression -> expression relational_op additive_expression .)
    RW_OUTPUT       reduce using rule 178 (expression -> expression relational_op additive_expression .)
    RW_THEN         reduce using rule 178 (expression -> expression relational_op additive_expression .)
    RW_DO           reduce using rule 178 (expression -> expression relational_op additive_expression .)
    S_UP_TO         reduce using rule 178 (expression -> expression relational_op additive_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 178 (expression -> expression relational_op additive_expression .)
    INDENT          reduce using rule 178 (expression -> expression relational_op additive_expression .)
    S_COLON         reduce using rule 178 (expression -> expression relational_op additive_expression .)
    S_PLUS          shift and go to state 296
    S_MINUS         shift and go to state 297
    RW_OR           shift and go to state 298
    RW_XOR          shift and go to state 299

    additive_op                    shift and go to state 295

state 367

    (189) additive_expression -> additive_expression additive_op multiplicative_expression .
    (195) multiplicative_expression -> multiplicative_expression . multiplicative_op unary_expression
    (197) multiplicative_op -> . S_TIMES
    (198) multiplicative_op -> . S_DIVIDE
    (199) multiplicative_op -> . RW_DIV
    (200) multiplicative_op -> . RW_MOD
    (201) multiplicative_op -> . RW_AND

    S_PLUS          reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_MINUS         reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_OR           reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_XOR          reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_EQUAL         reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_NOT_EQUAL     reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_LESS_THAN_EQUAL reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_LESS_THAN     reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_GREATER_THAN  reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_ELEMENT_OF    reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_EQ           reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_NEQ          reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_RIGHT_BRACKET reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_COMMA         reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    DEDENT          reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_SEMI_COLON    reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_RETURN        reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_IF           reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_DEPEND       reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_WHILE        reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_ITERATE      reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    IDENTIFIER      reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_REPEAT       reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_INPUT        reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_OUTPUT       reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_THEN         reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_DO           reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_UP_TO         reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    INDENT          reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_COLON         reduce using rule 189 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_TIMES         shift and go to state 301
    S_DIVIDE        shift and go to state 302
    RW_DIV          shift and go to state 303
    RW_MOD          shift and go to state 304
    RW_AND          shift and go to state 305

    multiplicative_op              shift and go to state 300

state 368

    (195) multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .

    S_TIMES         reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_DIVIDE        reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_DIV          reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_MOD          reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_AND          reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_PLUS          reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_MINUS         reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_OR           reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_XOR          reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_EQUAL         reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_NOT_EQUAL     reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_LESS_THAN_EQUAL reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_LESS_THAN     reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_GREATER_THAN  reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_ELEMENT_OF    reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_EQ           reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_NEQ          reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_RIGHT_BRACKET reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_COMMA         reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    DEDENT          reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_SEMI_COLON    reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_RETURN        reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_IF           reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_DEPEND       reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_WHILE        reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_ITERATE      reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    IDENTIFIER      reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_REPEAT       reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_INPUT        reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_OUTPUT       reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_THEN         reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_DO           reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_UP_TO         reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    INDENT          reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_COLON         reduce using rule 195 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)


state 369

    (205) exponentiation_expression -> primary_expression S_POWER exponentiation_expression .

    S_TIMES         reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_DIVIDE        reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_DIV          reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_MOD          reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_AND          reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_PLUS          reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_MINUS         reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_OR           reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_XOR          reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_EQUAL         reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_NOT_EQUAL     reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_LESS_THAN_EQUAL reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_LESS_THAN     reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_GREATER_THAN  reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_ELEMENT_OF    reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_EQ           reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_NEQ          reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_RIGHT_BRACKET reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_COMMA         reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    DEDENT          reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_SEMI_COLON    reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_RETURN        reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_IF           reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_DEPEND       reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_WHILE        reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_ITERATE      reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    IDENTIFIER      reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_REPEAT       reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_INPUT        reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_OUTPUT       reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_THEN         reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_DO           reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_UP_TO         reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    INDENT          reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_COLON         reduce using rule 205 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)


state 370

    (214) set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .

    S_POWER         reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_TIMES         reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_DIVIDE        reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_DIV          reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_MOD          reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_AND          reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_PLUS          reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_MINUS         reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_OR           reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_XOR          reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_EQUAL         reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_NOT_EQUAL     reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_LESS_THAN     reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_GREATER_THAN  reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_ELEMENT_OF    reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_EQ           reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_NEQ          reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_COMMA         reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    DEDENT          reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_SEMI_COLON    reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_RETURN        reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_IF           reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_DEPEND       reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_WHILE        reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_ITERATE      reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    IDENTIFIER      reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_REPEAT       reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_INPUT        reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_OUTPUT       reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_THEN         reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_DO           reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_UP_TO         reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    INDENT          reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_COLON         reduce using rule 214 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)


state 371

    (216) member_designator_list -> member_designator_list S_COMMA . member_designator
    (218) member_designator -> . member_designator S_UP_TO expression
    (219) member_designator -> . expression
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    member_designator              shift and go to state 401
    expression                     shift and go to state 311
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 372

    (218) member_designator -> member_designator S_UP_TO . expression
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    expression                     shift and go to state 402
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 373

    (53) index_list -> index_list S_COMMA index_type .

    S_RIGHT_SQUARE_BRACKET reduce using rule 53 (index_list -> index_list S_COMMA index_type .)
    S_COMMA         reduce using rule 53 (index_list -> index_list S_COMMA index_type .)


state 374

    (9) block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block . procedure_and_function_implementation_block
    (20) procedure_and_function_implementation_block -> . empty
    (21) procedure_and_function_implementation_block -> . subprogram_implementation_list
    (253) empty -> .
    (22) subprogram_implementation_list -> . subprogram_implementation_list subprogram_implementation
    (23) subprogram_implementation_list -> . subprogram_implementation
    (24) subprogram_implementation -> . procedure_implementation
    (25) subprogram_implementation -> . function_implementation
    (26) procedure_implementation -> . procedure_declaration procedure_implementation_block
    (27) procedure_implementation -> . procedure_declaration
    (30) function_implementation -> . function_declaration function_implementation_block
    (31) function_implementation -> . function_declaration
    (75) procedure_declaration -> . procedure_identifier formal_parameter_list
    (87) function_declaration -> . function_identification function_formal_parameter_list function_return_type
    (88) function_declaration -> . function_identification function_return_type
    (76) procedure_identifier -> . RW_PROCEDURE identifier
    (89) function_identification -> . RW_FUNCTION identifier

    $end            reduce using rule 253 (empty -> .)
    RW_PROCEDURE    shift and go to state 9
    RW_FUNCTION     shift and go to state 8

    procedure_and_function_implementation_block shift and go to state 403
    empty                          shift and go to state 118
    subprogram_implementation_list shift and go to state 119
    subprogram_implementation      shift and go to state 120
    procedure_implementation       shift and go to state 121
    function_implementation        shift and go to state 122
    procedure_declaration          shift and go to state 123
    function_declaration           shift and go to state 124
    procedure_identifier           shift and go to state 7
    function_identification        shift and go to state 6

state 375

    (18) procedure_and_function_declaration_block -> procedure_and_function_declaration DEDENT .

    RW_ALGORITMA    reduce using rule 18 (procedure_and_function_declaration_block -> procedure_and_function_declaration DEDENT .)


state 376

    (71) procedure_and_function_declaration -> procedure_and_function_declaration procedure_and_function_sub_declaration .

    DEDENT          reduce using rule 71 (procedure_and_function_declaration -> procedure_and_function_declaration procedure_and_function_sub_declaration .)
    RW_PROCEDURE    reduce using rule 71 (procedure_and_function_declaration -> procedure_and_function_declaration procedure_and_function_sub_declaration .)
    RW_FUNCTION     reduce using rule 71 (procedure_and_function_declaration -> procedure_and_function_declaration procedure_and_function_sub_declaration .)


state 377

    (67) type_sub_declaration -> RW_TYPE identifier S_COLON type_variety .

    RW_TYPE         reduce using rule 67 (type_sub_declaration -> RW_TYPE identifier S_COLON type_variety .)
    IDENTIFIER      reduce using rule 67 (type_sub_declaration -> RW_TYPE identifier S_COLON type_variety .)
    DEDENT          reduce using rule 67 (type_sub_declaration -> RW_TYPE identifier S_COLON type_variety .)
    RW_PROCEDURE    reduce using rule 67 (type_sub_declaration -> RW_TYPE identifier S_COLON type_variety .)
    RW_FUNCTION     reduce using rule 67 (type_sub_declaration -> RW_TYPE identifier S_COLON type_variety .)


state 378

    (68) type_variety -> type_denoter .

    RW_TYPE         reduce using rule 68 (type_variety -> type_denoter .)
    IDENTIFIER      reduce using rule 68 (type_variety -> type_denoter .)
    DEDENT          reduce using rule 68 (type_variety -> type_denoter .)
    RW_PROCEDURE    reduce using rule 68 (type_variety -> type_denoter .)
    RW_FUNCTION     reduce using rule 68 (type_variety -> type_denoter .)


state 379

    (69) type_variety -> type_user_defined .

    RW_TYPE         reduce using rule 69 (type_variety -> type_user_defined .)
    IDENTIFIER      reduce using rule 69 (type_variety -> type_user_defined .)
    DEDENT          reduce using rule 69 (type_variety -> type_user_defined .)
    RW_PROCEDURE    reduce using rule 69 (type_variety -> type_user_defined .)
    RW_FUNCTION     reduce using rule 69 (type_variety -> type_user_defined .)


state 380

    (70) type_user_defined -> S_LESS_THAN . variable_declaration_comma S_GREATER_THAN
    (60) variable_declaration_comma -> . variable_sub_declaration
    (61) variable_declaration_comma -> . variable_sub_declaration S_COMMA variable_declaration_comma
    (59) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (254) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    variable_declaration_comma     shift and go to state 404
    variable_sub_declaration       shift and go to state 405
    identifier_list                shift and go to state 35
    identifier                     shift and go to state 36

state 381

    (64) constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL . constant
    (153) constant -> . string_char_constant
    (154) constant -> . non_string_constant
    (155) constant -> . sign non_string_constant
    (156) constant -> . boolean_constant
    (157) constant -> . nil_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (158) sign -> . S_PLUS
    (159) sign -> . S_MINUS
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER

    S_PLUS          shift and go to state 68
    S_MINUS         shift and go to state 69
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90

    constant                       shift and go to state 406
    string_char_constant           shift and go to state 55
    non_string_constant            shift and go to state 56
    sign                           shift and go to state 57
    boolean_constant               shift and go to state 58
    nil_constant                   shift and go to state 59
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67

state 382

    (28) procedure_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block . variable_declaration_block DEDENT algorithm_block
    (15) variable_declaration_block -> . empty
    (16) variable_declaration_block -> . variable_declaration
    (253) empty -> .
    (57) variable_declaration -> . variable_declaration variable_sub_declaration
    (58) variable_declaration -> . variable_sub_declaration
    (59) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (254) identifier -> . IDENTIFIER

    DEDENT          reduce using rule 253 (empty -> .)
    IDENTIFIER      shift and go to state 11

    variable_declaration_block     shift and go to state 407
    empty                          shift and go to state 252
    variable_declaration           shift and go to state 253
    variable_sub_declaration       shift and go to state 254
    identifier_list                shift and go to state 35
    identifier                     shift and go to state 36

state 383

    (32) function_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block . variable_declaration_block DEDENT algorithm_block
    (15) variable_declaration_block -> . empty
    (16) variable_declaration_block -> . variable_declaration
    (253) empty -> .
    (57) variable_declaration -> . variable_declaration variable_sub_declaration
    (58) variable_declaration -> . variable_sub_declaration
    (59) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (254) identifier -> . IDENTIFIER

    DEDENT          reduce using rule 253 (empty -> .)
    IDENTIFIER      shift and go to state 11

    variable_declaration_block     shift and go to state 408
    empty                          shift and go to state 252
    variable_declaration           shift and go to state 253
    variable_sub_declaration       shift and go to state 254
    identifier_list                shift and go to state 35
    identifier                     shift and go to state 36

state 384

    (174) indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .

    S_ASSIGNMENT    reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_LEFT_SQUARE_BRACKET reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_DOT           reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_POWER         reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_TIMES         reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_DIVIDE        reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_DIV          reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_MOD          reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_AND          reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_PLUS          reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_MINUS         reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_OR           reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_XOR          reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_EQUAL         reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_NOT_EQUAL     reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_LESS_THAN     reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_GREATER_THAN  reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_ELEMENT_OF    reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_EQ           reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_NEQ          reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_COMMA         reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    DEDENT          reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_SEMI_COLON    reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_RETURN        reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_IF           reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_DEPEND       reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_WHILE        reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_ITERATE      reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    IDENTIFIER      reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_REPEAT       reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_INPUT        reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_OUTPUT       reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_THEN         reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_DO           reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_TIMES        reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_UP_TO         reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    INDENT          reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_COLON         reduce using rule 174 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)


state 385

    (175) index_expression_list -> index_expression_list S_COMMA . expression
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    expression                     shift and go to state 409
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 386

    (115) procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .

    DEDENT          reduce using rule 115 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 115 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 115 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 115 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 115 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 115 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 115 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 115 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 115 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 115 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 115 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)


state 387

    (135) if_statement -> RW_IF boolean_expression RW_THEN compound_statement .
    (136) if_statement -> RW_IF boolean_expression RW_THEN compound_statement . RW_ELSE compound_statement

    DEDENT          reduce using rule 135 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    S_SEMI_COLON    reduce using rule 135 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    S_RETURN        reduce using rule 135 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_IF           reduce using rule 135 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_DEPEND       reduce using rule 135 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_WHILE        reduce using rule 135 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_ITERATE      reduce using rule 135 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    IDENTIFIER      reduce using rule 135 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_REPEAT       reduce using rule 135 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_INPUT        reduce using rule 135 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_OUTPUT       reduce using rule 135 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_ELSE         shift and go to state 410


state 388

    (131) depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list . S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (123) input_statement_parameter_list -> input_statement_parameter_list . S_COMMA input_statement_parameter

    S_RIGHT_BRACKET shift and go to state 411
    S_COMMA         shift and go to state 398


state 389

    (144) while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .

    DEDENT          reduce using rule 144 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    S_SEMI_COLON    reduce using rule 144 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    S_RETURN        reduce using rule 144 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_IF           reduce using rule 144 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_DEPEND       reduce using rule 144 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_WHILE        reduce using rule 144 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_ITERATE      reduce using rule 144 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    IDENTIFIER      reduce using rule 144 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_REPEAT       reduce using rule 144 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_INPUT        reduce using rule 144 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_OUTPUT       reduce using rule 144 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)


state 390

    (146) traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .

    DEDENT          reduce using rule 146 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    S_SEMI_COLON    reduce using rule 146 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    S_RETURN        reduce using rule 146 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_IF           reduce using rule 146 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_DEPEND       reduce using rule 146 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_WHILE        reduce using rule 146 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_ITERATE      reduce using rule 146 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    IDENTIFIER      reduce using rule 146 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_REPEAT       reduce using rule 146 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_INPUT        reduce using rule 146 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_OUTPUT       reduce using rule 146 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)


state 391

    (147) traversal_range_value -> S_LEFT_SQUARE_BRACKET subrange_type . S_RIGHT_SQUARE_BRACKET

    S_RIGHT_SQUARE_BRACKET shift and go to state 412


state 392

    (145) iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression . compound_statement
    (100) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 127

    compound_statement             shift and go to state 413

state 393

    (140) repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .

    DEDENT          reduce using rule 140 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    S_SEMI_COLON    reduce using rule 140 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    S_RETURN        reduce using rule 140 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_IF           reduce using rule 140 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_DEPEND       reduce using rule 140 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_WHILE        reduce using rule 140 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_ITERATE      reduce using rule 140 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    IDENTIFIER      reduce using rule 140 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_REPEAT       reduce using rule 140 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_INPUT        reduce using rule 140 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_OUTPUT       reduce using rule 140 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)


state 394

    (141) repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .

    DEDENT          reduce using rule 141 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    S_SEMI_COLON    reduce using rule 141 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    S_RETURN        reduce using rule 141 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_IF           reduce using rule 141 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_DEPEND       reduce using rule 141 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_WHILE        reduce using rule 141 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_ITERATE      reduce using rule 141 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    IDENTIFIER      reduce using rule 141 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_REPEAT       reduce using rule 141 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_INPUT        reduce using rule 141 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_OUTPUT       reduce using rule 141 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)


state 395

    (142) repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .

    DEDENT          reduce using rule 142 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    S_SEMI_COLON    reduce using rule 142 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    S_RETURN        reduce using rule 142 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_IF           reduce using rule 142 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_DEPEND       reduce using rule 142 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_WHILE        reduce using rule 142 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_ITERATE      reduce using rule 142 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    IDENTIFIER      reduce using rule 142 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_REPEAT       reduce using rule 142 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_INPUT        reduce using rule 142 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_OUTPUT       reduce using rule 142 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)


state 396

    (143) repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .

    DEDENT          reduce using rule 143 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    S_SEMI_COLON    reduce using rule 143 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    S_RETURN        reduce using rule 143 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_IF           reduce using rule 143 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_DEPEND       reduce using rule 143 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_WHILE        reduce using rule 143 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_ITERATE      reduce using rule 143 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    IDENTIFIER      reduce using rule 143 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_REPEAT       reduce using rule 143 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_INPUT        reduce using rule 143 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_OUTPUT       reduce using rule 143 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)


state 397

    (122) input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .

    DEDENT          reduce using rule 122 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 122 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 122 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 122 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 122 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 122 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 122 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 122 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 122 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 122 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 122 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)


state 398

    (123) input_statement_parameter_list -> input_statement_parameter_list S_COMMA . input_statement_parameter
    (125) input_statement_parameter -> . variable_access
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier

    IDENTIFIER      shift and go to state 11

    input_statement_parameter      shift and go to state 414
    variable_access                shift and go to state 359
    identifier                     shift and go to state 360
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194

state 399

    (126) output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .

    DEDENT          reduce using rule 126 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 126 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 126 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 126 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 126 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 126 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 126 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 126 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 126 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 126 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 126 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)


state 400

    (127) output_statement_parameter_list -> output_statement_parameter_list S_COMMA . output_statement_parameter
    (129) output_statement_parameter -> . expression
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    output_statement_parameter     shift and go to state 415
    expression                     shift and go to state 363
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 401

    (216) member_designator_list -> member_designator_list S_COMMA member_designator .
    (218) member_designator -> member_designator . S_UP_TO expression

    S_RIGHT_SQUARE_BRACKET reduce using rule 216 (member_designator_list -> member_designator_list S_COMMA member_designator .)
    S_COMMA         reduce using rule 216 (member_designator_list -> member_designator_list S_COMMA member_designator .)
    S_UP_TO         shift and go to state 372


state 402

    (218) member_designator -> member_designator S_UP_TO expression .
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_UP_TO         reduce using rule 218 (member_designator -> member_designator S_UP_TO expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 218 (member_designator -> member_designator S_UP_TO expression .)
    S_COMMA         reduce using rule 218 (member_designator -> member_designator S_UP_TO expression .)
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 403

    (9) block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block .

    $end            reduce using rule 9 (block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block .)


state 404

    (70) type_user_defined -> S_LESS_THAN variable_declaration_comma . S_GREATER_THAN

    S_GREATER_THAN  shift and go to state 416


state 405

    (60) variable_declaration_comma -> variable_sub_declaration .
    (61) variable_declaration_comma -> variable_sub_declaration . S_COMMA variable_declaration_comma

    S_GREATER_THAN  reduce using rule 60 (variable_declaration_comma -> variable_sub_declaration .)
    S_COMMA         shift and go to state 417


state 406

    (64) constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .

    RW_CONSTANT     reduce using rule 64 (constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .)
    RW_TYPE         reduce using rule 64 (constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .)
    IDENTIFIER      reduce using rule 64 (constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .)
    DEDENT          reduce using rule 64 (constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .)
    RW_PROCEDURE    reduce using rule 64 (constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .)
    RW_FUNCTION     reduce using rule 64 (constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .)


state 407

    (28) procedure_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block . DEDENT algorithm_block

    DEDENT          shift and go to state 418


state 408

    (32) function_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block . DEDENT algorithm_block

    DEDENT          shift and go to state 419


state 409

    (175) index_expression_list -> index_expression_list S_COMMA expression .
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_RIGHT_SQUARE_BRACKET reduce using rule 175 (index_expression_list -> index_expression_list S_COMMA expression .)
    S_COMMA         reduce using rule 175 (index_expression_list -> index_expression_list S_COMMA expression .)
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 410

    (136) if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE . compound_statement
    (100) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 127

    compound_statement             shift and go to state 420

state 411

    (131) depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET . INDENT depend_on_action_list DEDENT

    INDENT          shift and go to state 421


state 412

    (147) traversal_range_value -> S_LEFT_SQUARE_BRACKET subrange_type S_RIGHT_SQUARE_BRACKET .

    INDENT          reduce using rule 147 (traversal_range_value -> S_LEFT_SQUARE_BRACKET subrange_type S_RIGHT_SQUARE_BRACKET .)


state 413

    (145) iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .

    DEDENT          reduce using rule 145 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    S_SEMI_COLON    reduce using rule 145 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    S_RETURN        reduce using rule 145 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_IF           reduce using rule 145 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_DEPEND       reduce using rule 145 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_WHILE        reduce using rule 145 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_ITERATE      reduce using rule 145 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    IDENTIFIER      reduce using rule 145 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_REPEAT       reduce using rule 145 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_INPUT        reduce using rule 145 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_OUTPUT       reduce using rule 145 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)


state 414

    (123) input_statement_parameter_list -> input_statement_parameter_list S_COMMA input_statement_parameter .

    S_RIGHT_BRACKET reduce using rule 123 (input_statement_parameter_list -> input_statement_parameter_list S_COMMA input_statement_parameter .)
    S_COMMA         reduce using rule 123 (input_statement_parameter_list -> input_statement_parameter_list S_COMMA input_statement_parameter .)


state 415

    (127) output_statement_parameter_list -> output_statement_parameter_list S_COMMA output_statement_parameter .

    S_RIGHT_BRACKET reduce using rule 127 (output_statement_parameter_list -> output_statement_parameter_list S_COMMA output_statement_parameter .)
    S_COMMA         reduce using rule 127 (output_statement_parameter_list -> output_statement_parameter_list S_COMMA output_statement_parameter .)


state 416

    (70) type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN .

    RW_TYPE         reduce using rule 70 (type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN .)
    IDENTIFIER      reduce using rule 70 (type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN .)
    DEDENT          reduce using rule 70 (type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN .)
    RW_PROCEDURE    reduce using rule 70 (type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN .)
    RW_FUNCTION     reduce using rule 70 (type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN .)


state 417

    (61) variable_declaration_comma -> variable_sub_declaration S_COMMA . variable_declaration_comma
    (60) variable_declaration_comma -> . variable_sub_declaration
    (61) variable_declaration_comma -> . variable_sub_declaration S_COMMA variable_declaration_comma
    (59) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (254) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    variable_sub_declaration       shift and go to state 405
    variable_declaration_comma     shift and go to state 422
    identifier_list                shift and go to state 35
    identifier                     shift and go to state 36

state 418

    (28) procedure_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT . algorithm_block
    (19) algorithm_block -> . RW_ALGORITMA statement_part

    RW_ALGORITMA    shift and go to state 27

    algorithm_block                shift and go to state 423

state 419

    (32) function_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT . algorithm_block
    (19) algorithm_block -> . RW_ALGORITMA statement_part

    RW_ALGORITMA    shift and go to state 27

    algorithm_block                shift and go to state 424

state 420

    (136) if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .

    DEDENT          reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    S_SEMI_COLON    reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    S_RETURN        reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_IF           reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_DEPEND       reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_WHILE        reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_ITERATE      reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    IDENTIFIER      reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_REPEAT       reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_INPUT        reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_OUTPUT       reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)


state 421

    (131) depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT . depend_on_action_list DEDENT
    (132) depend_on_action_list -> . depend_on_action_list depend_on_action
    (133) depend_on_action_list -> . depend_on_action
    (134) depend_on_action -> . expression S_COLON INDENT statement_sequence DEDENT
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    depend_on_action_list          shift and go to state 425
    depend_on_action               shift and go to state 426
    expression                     shift and go to state 427
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 422

    (61) variable_declaration_comma -> variable_sub_declaration S_COMMA variable_declaration_comma .

    S_GREATER_THAN  reduce using rule 61 (variable_declaration_comma -> variable_sub_declaration S_COMMA variable_declaration_comma .)


state 423

    (28) procedure_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .

    RW_PROCEDURE    reduce using rule 28 (procedure_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .)
    RW_FUNCTION     reduce using rule 28 (procedure_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .)
    $end            reduce using rule 28 (procedure_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .)


state 424

    (32) function_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .

    RW_PROCEDURE    reduce using rule 32 (function_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .)
    RW_FUNCTION     reduce using rule 32 (function_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .)
    $end            reduce using rule 32 (function_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .)


state 425

    (131) depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list . DEDENT
    (132) depend_on_action_list -> depend_on_action_list . depend_on_action
    (134) depend_on_action -> . expression S_COLON INDENT statement_sequence DEDENT
    (178) expression -> . expression relational_op additive_expression
    (179) expression -> . additive_expression
    (189) additive_expression -> . additive_expression additive_op multiplicative_expression
    (190) additive_expression -> . multiplicative_expression
    (195) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (196) multiplicative_expression -> . unary_expression
    (202) unary_expression -> . unary_op unary_expression
    (203) unary_expression -> . exponentiation_expression
    (206) unary_op -> . S_PLUS
    (207) unary_op -> . S_MINUS
    (208) unary_op -> . RW_NOT
    (204) exponentiation_expression -> . primary_expression
    (205) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (209) primary_expression -> . variable_access
    (210) primary_expression -> . unsigned_constant
    (211) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (212) primary_expression -> . set_constructor
    (213) primary_expression -> . function_designator
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (149) unsigned_constant -> . non_string_constant
    (150) unsigned_constant -> . string_char_constant
    (151) unsigned_constant -> . boolean_constant
    (152) unsigned_constant -> . nil_constant
    (214) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (215) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (220) function_designator -> . user_defined_function_call
    (221) function_designator -> . math_function_call
    (222) function_designator -> . string_function_call
    (223) function_designator -> . converter_function_call
    (254) identifier -> . IDENTIFIER
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (162) non_string_constant -> . integer_constant
    (163) non_string_constant -> . real_constant
    (166) string_char_constant -> . string_constant
    (167) string_char_constant -> . char_constant
    (160) boolean_constant -> . L_BOOLEAN_TRUE
    (161) boolean_constant -> . L_BOOLEAN_FALSE
    (170) nil_constant -> . L_NIL
    (224) user_defined_function_call -> . identifier function_actual_parameter_list
    (225) math_function_call -> . abs_function
    (226) math_function_call -> . sin_function
    (227) math_function_call -> . cos_function
    (228) math_function_call -> . tan_function
    (229) math_function_call -> . succ_function
    (230) math_function_call -> . pred_function
    (237) string_function_call -> . awal_function
    (238) string_function_call -> . akhir_function
    (239) string_function_call -> . firstchar_function
    (240) string_function_call -> . lastchar_function
    (241) string_function_call -> . long_function
    (242) string_function_call -> . iskosong_function
    (249) converter_function_call -> . integer_to_real
    (250) converter_function_call -> . real_to_integer
    (164) integer_constant -> . L_INTEGER_NUMBER
    (165) real_constant -> . L_REAL_NUMBER
    (168) string_constant -> . L_STRING
    (169) char_constant -> . L_CHARACTER
    (231) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (232) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (233) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (251) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (252) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    DEDENT          shift and go to state 428
    S_PLUS          shift and go to state 213
    S_MINUS         shift and go to state 214
    RW_NOT          shift and go to state 215
    S_LEFT_BRACKET  shift and go to state 204
    S_LEFT_SQUARE_BRACKET shift and go to state 226
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 70
    L_BOOLEAN_FALSE shift and go to state 71
    L_NIL           shift and go to state 72
    L_INTEGER_NUMBER shift and go to state 89
    L_REAL_NUMBER   shift and go to state 90
    L_STRING        shift and go to state 87
    L_CHARACTER     shift and go to state 88
    RW_ABS          shift and go to state 91
    RW_SIN          shift and go to state 92
    RW_COS          shift and go to state 93
    RW_TAN          shift and go to state 94
    RW_SUCC         shift and go to state 95
    RW_PRED         shift and go to state 96
    RW_AWAL         shift and go to state 97
    RW_AKHIR        shift and go to state 98
    RW_FIRSTCHAR    shift and go to state 99
    RW_LASTCHAR     shift and go to state 100
    RW_LONG         shift and go to state 101
    RW_ISKOSONG     shift and go to state 102
    RW_INTEGERTOREAL shift and go to state 103
    RW_REALTOINTEGER shift and go to state 104

    depend_on_action               shift and go to state 429
    expression                     shift and go to state 427
    additive_expression            shift and go to state 208
    multiplicative_expression      shift and go to state 209
    unary_expression               shift and go to state 210
    unary_op                       shift and go to state 211
    exponentiation_expression      shift and go to state 212
    primary_expression             shift and go to state 216
    variable_access                shift and go to state 217
    unsigned_constant              shift and go to state 218
    set_constructor                shift and go to state 219
    function_designator            shift and go to state 220
    identifier                     shift and go to state 221
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    non_string_constant            shift and go to state 222
    string_char_constant           shift and go to state 223
    boolean_constant               shift and go to state 224
    nil_constant                   shift and go to state 225
    user_defined_function_call     shift and go to state 60
    math_function_call             shift and go to state 61
    string_function_call           shift and go to state 62
    converter_function_call        shift and go to state 63
    integer_constant               shift and go to state 66
    real_constant                  shift and go to state 67
    string_constant                shift and go to state 64
    char_constant                  shift and go to state 65
    abs_function                   shift and go to state 73
    sin_function                   shift and go to state 74
    cos_function                   shift and go to state 75
    tan_function                   shift and go to state 76
    succ_function                  shift and go to state 77
    pred_function                  shift and go to state 78
    awal_function                  shift and go to state 79
    akhir_function                 shift and go to state 80
    firstchar_function             shift and go to state 81
    lastchar_function              shift and go to state 82
    long_function                  shift and go to state 83
    iskosong_function              shift and go to state 84
    integer_to_real                shift and go to state 85
    real_to_integer                shift and go to state 86

state 426

    (133) depend_on_action_list -> depend_on_action .

    DEDENT          reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    S_PLUS          reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    S_MINUS         reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    RW_NOT          reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    S_LEFT_BRACKET  reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    S_LEFT_SQUARE_BRACKET reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    IDENTIFIER      reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    L_BOOLEAN_TRUE  reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    L_BOOLEAN_FALSE reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    L_NIL           reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    L_INTEGER_NUMBER reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    L_REAL_NUMBER   reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    L_STRING        reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    L_CHARACTER     reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    RW_ABS          reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    RW_SIN          reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    RW_COS          reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    RW_TAN          reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    RW_SUCC         reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    RW_PRED         reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    RW_AWAL         reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    RW_AKHIR        reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    RW_FIRSTCHAR    reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    RW_LASTCHAR     reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    RW_LONG         reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    RW_ISKOSONG     reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    RW_INTEGERTOREAL reduce using rule 133 (depend_on_action_list -> depend_on_action .)
    RW_REALTOINTEGER reduce using rule 133 (depend_on_action_list -> depend_on_action .)


state 427

    (134) depend_on_action -> expression . S_COLON INDENT statement_sequence DEDENT
    (178) expression -> expression . relational_op additive_expression
    (180) relational_op -> . S_EQUAL
    (181) relational_op -> . S_NOT_EQUAL
    (182) relational_op -> . S_LESS_THAN_EQUAL
    (183) relational_op -> . S_GREATER_THAN_EQUAL
    (184) relational_op -> . S_LESS_THAN
    (185) relational_op -> . S_GREATER_THAN
    (186) relational_op -> . S_ELEMENT_OF
    (187) relational_op -> . RW_EQ
    (188) relational_op -> . RW_NEQ

    S_COLON         shift and go to state 430
    S_EQUAL         shift and go to state 286
    S_NOT_EQUAL     shift and go to state 287
    S_LESS_THAN_EQUAL shift and go to state 288
    S_GREATER_THAN_EQUAL shift and go to state 289
    S_LESS_THAN     shift and go to state 290
    S_GREATER_THAN  shift and go to state 291
    S_ELEMENT_OF    shift and go to state 292
    RW_EQ           shift and go to state 293
    RW_NEQ          shift and go to state 294

    relational_op                  shift and go to state 285

state 428

    (131) depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .

    DEDENT          reduce using rule 131 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    S_SEMI_COLON    reduce using rule 131 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    S_RETURN        reduce using rule 131 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_IF           reduce using rule 131 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_DEPEND       reduce using rule 131 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_WHILE        reduce using rule 131 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_ITERATE      reduce using rule 131 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    IDENTIFIER      reduce using rule 131 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_REPEAT       reduce using rule 131 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_INPUT        reduce using rule 131 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_OUTPUT       reduce using rule 131 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)


state 429

    (132) depend_on_action_list -> depend_on_action_list depend_on_action .

    DEDENT          reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    S_PLUS          reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    S_MINUS         reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_NOT          reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    S_LEFT_BRACKET  reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    S_LEFT_SQUARE_BRACKET reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    IDENTIFIER      reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_BOOLEAN_TRUE  reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_BOOLEAN_FALSE reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_NIL           reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_INTEGER_NUMBER reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_REAL_NUMBER   reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_STRING        reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_CHARACTER     reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_ABS          reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_SIN          reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_COS          reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_TAN          reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_SUCC         reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_PRED         reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_AWAL         reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_AKHIR        reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_FIRSTCHAR    reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_LASTCHAR     reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_LONG         reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_ISKOSONG     reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_INTEGERTOREAL reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_REALTOINTEGER reduce using rule 132 (depend_on_action_list -> depend_on_action_list depend_on_action .)


state 430

    (134) depend_on_action -> expression S_COLON . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 431


state 431

    (134) depend_on_action -> expression S_COLON INDENT . statement_sequence DEDENT
    (101) statement_sequence -> . statement_sequence S_SEMI_COLON statement
    (102) statement_sequence -> . statement_sequence statement
    (103) statement_sequence -> . statement
    (104) statement -> . assignment_statement
    (105) statement -> . procedure_statement
    (106) statement -> . function_returned_statement
    (107) statement -> . if_statement
    (108) statement -> . depend_on_statement
    (109) statement -> . while_statement
    (110) statement -> . traversal_statement
    (111) statement -> . repeat_statement
    (112) statement -> . iterate_stop_statement
    (113) assignment_statement -> . variable_access S_ASSIGNMENT expression
    (114) procedure_statement -> . builtin_procedure_statements
    (115) procedure_statement -> . identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
    (116) procedure_statement -> . identifier
    (130) function_returned_statement -> . S_RETURN expression
    (135) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement
    (136) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
    (131) depend_on_statement -> . RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (144) while_statement -> . RW_WHILE boolean_expression RW_DO compound_statement
    (146) traversal_statement -> . control_variable RW_TRAVERSAL traversal_range_value compound_statement
    (138) repeat_statement -> . repeat_until_statement
    (139) repeat_statement -> . repeat_times_statement
    (145) iterate_stop_statement -> . RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (120) builtin_procedure_statements -> . input_statement
    (121) builtin_procedure_statements -> . output_statement
    (254) identifier -> . IDENTIFIER
    (148) control_variable -> . identifier
    (140) repeat_until_statement -> . RW_REPEAT compound_statement RW_UNTIL boolean_expression
    (141) repeat_times_statement -> . RW_REPEAT variable_access RW_TIMES compound_statement
    (142) repeat_times_statement -> . RW_REPEAT integer_constant RW_TIMES compound_statement
    (143) repeat_times_statement -> . RW_REPEAT function_designator RW_TIMES compound_statement
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (122) input_statement -> . RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET
    (126) output_statement -> . RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET

    S_RETURN        shift and go to state 185
    RW_IF           shift and go to state 186
    RW_DEPEND       shift and go to state 187
    RW_WHILE        shift and go to state 188
    RW_ITERATE      shift and go to state 192
    IDENTIFIER      shift and go to state 11
    RW_REPEAT       shift and go to state 197
    RW_INPUT        shift and go to state 198
    RW_OUTPUT       shift and go to state 199

    statement_sequence             shift and go to state 432
    statement                      shift and go to state 172
    assignment_statement           shift and go to state 173
    procedure_statement            shift and go to state 174
    function_returned_statement    shift and go to state 175
    if_statement                   shift and go to state 176
    depend_on_statement            shift and go to state 177
    while_statement                shift and go to state 178
    traversal_statement            shift and go to state 179
    repeat_statement               shift and go to state 180
    iterate_stop_statement         shift and go to state 181
    variable_access                shift and go to state 182
    builtin_procedure_statements   shift and go to state 183
    identifier                     shift and go to state 184
    control_variable               shift and go to state 189
    repeat_until_statement         shift and go to state 190
    repeat_times_statement         shift and go to state 191
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    input_statement                shift and go to state 195
    output_statement               shift and go to state 196

state 432

    (134) depend_on_action -> expression S_COLON INDENT statement_sequence . DEDENT
    (101) statement_sequence -> statement_sequence . S_SEMI_COLON statement
    (102) statement_sequence -> statement_sequence . statement
    (104) statement -> . assignment_statement
    (105) statement -> . procedure_statement
    (106) statement -> . function_returned_statement
    (107) statement -> . if_statement
    (108) statement -> . depend_on_statement
    (109) statement -> . while_statement
    (110) statement -> . traversal_statement
    (111) statement -> . repeat_statement
    (112) statement -> . iterate_stop_statement
    (113) assignment_statement -> . variable_access S_ASSIGNMENT expression
    (114) procedure_statement -> . builtin_procedure_statements
    (115) procedure_statement -> . identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
    (116) procedure_statement -> . identifier
    (130) function_returned_statement -> . S_RETURN expression
    (135) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement
    (136) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
    (131) depend_on_statement -> . RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (144) while_statement -> . RW_WHILE boolean_expression RW_DO compound_statement
    (146) traversal_statement -> . control_variable RW_TRAVERSAL traversal_range_value compound_statement
    (138) repeat_statement -> . repeat_until_statement
    (139) repeat_statement -> . repeat_times_statement
    (145) iterate_stop_statement -> . RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement
    (171) variable_access -> . identifier
    (172) variable_access -> . indexed_variable
    (173) variable_access -> . field_designator
    (120) builtin_procedure_statements -> . input_statement
    (121) builtin_procedure_statements -> . output_statement
    (254) identifier -> . IDENTIFIER
    (148) control_variable -> . identifier
    (140) repeat_until_statement -> . RW_REPEAT compound_statement RW_UNTIL boolean_expression
    (141) repeat_times_statement -> . RW_REPEAT variable_access RW_TIMES compound_statement
    (142) repeat_times_statement -> . RW_REPEAT integer_constant RW_TIMES compound_statement
    (143) repeat_times_statement -> . RW_REPEAT function_designator RW_TIMES compound_statement
    (174) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) field_designator -> . variable_access S_DOT identifier
    (122) input_statement -> . RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET
    (126) output_statement -> . RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET

    DEDENT          shift and go to state 433
    S_SEMI_COLON    shift and go to state 263
    S_RETURN        shift and go to state 185
    RW_IF           shift and go to state 186
    RW_DEPEND       shift and go to state 187
    RW_WHILE        shift and go to state 188
    RW_ITERATE      shift and go to state 192
    IDENTIFIER      shift and go to state 11
    RW_REPEAT       shift and go to state 197
    RW_INPUT        shift and go to state 198
    RW_OUTPUT       shift and go to state 199

    statement                      shift and go to state 264
    assignment_statement           shift and go to state 173
    procedure_statement            shift and go to state 174
    function_returned_statement    shift and go to state 175
    if_statement                   shift and go to state 176
    depend_on_statement            shift and go to state 177
    while_statement                shift and go to state 178
    traversal_statement            shift and go to state 179
    repeat_statement               shift and go to state 180
    iterate_stop_statement         shift and go to state 181
    variable_access                shift and go to state 182
    builtin_procedure_statements   shift and go to state 183
    identifier                     shift and go to state 184
    control_variable               shift and go to state 189
    repeat_until_statement         shift and go to state 190
    repeat_times_statement         shift and go to state 191
    indexed_variable               shift and go to state 193
    field_designator               shift and go to state 194
    input_statement                shift and go to state 195
    output_statement               shift and go to state 196

state 433

    (134) depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .

    DEDENT          reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    S_PLUS          reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    S_MINUS         reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_NOT          reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    S_LEFT_BRACKET  reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    S_LEFT_SQUARE_BRACKET reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    IDENTIFIER      reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_BOOLEAN_TRUE  reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_BOOLEAN_FALSE reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_NIL           reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_INTEGER_NUMBER reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_REAL_NUMBER   reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_STRING        reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_CHARACTER     reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_ABS          reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_SIN          reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_COS          reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_TAN          reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_SUCC         reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_PRED         reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_AWAL         reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_AKHIR        reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_FIRSTCHAR    reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_LASTCHAR     reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_LONG         reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_ISKOSONG     reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_INTEGERTOREAL reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_REALTOINTEGER reduce using rule 134 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)

