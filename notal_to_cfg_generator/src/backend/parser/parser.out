Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    RW_CLOSE
    RW_JUDUL
    RW_MODUL
    RW_OPEN
    RW_READ
    RW_REWRITE
    RW_SEQFILE
    S_CONCATENATION
    S_DOUBLE_QUOTE
    S_LEFT_CURLY_BRACKET
    S_RIGHT_CURLY_BRACKET
    S_SINGLE_QUOTE
    WHITESPACE

Grammar

Rule 0     S' -> file
Rule 1     file -> program
Rule 2     program -> RW_PROGRAM identifier block
Rule 3     identifier_list -> identifier_list S_COMMA identifier
Rule 4     identifier_list -> identifier
Rule 5     block -> RW_KAMUS INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
Rule 6     block -> RW_KAMUS algorithm_block procedure_and_function_implementation_block
Rule 7     constant_declaration_block -> empty
Rule 8     constant_declaration_block -> constant_declaration
Rule 9     type_declaration_block -> empty
Rule 10    type_declaration_block -> type_declaration
Rule 11    variable_declaration_block -> empty
Rule 12    variable_declaration_block -> variable_declaration
Rule 13    procedure_and_function_declaration_block -> DEDENT
Rule 14    procedure_and_function_declaration_block -> procedure_and_function_declaration DEDENT
Rule 15    algorithm_block -> RW_ALGORITMA statement_part
Rule 16    procedure_and_function_implementation_block -> empty
Rule 17    procedure_and_function_implementation_block -> subprogram_implementation_list
Rule 18    subprogram_implementation_list -> subprogram_implementation_list subprogram_implementation
Rule 19    subprogram_implementation_list -> subprogram_implementation
Rule 20    subprogram_implementation -> procedure_implementation
Rule 21    subprogram_implementation -> function_implementation
Rule 22    procedure_implementation -> procedure_declaration procedure_implementation_block
Rule 23    procedure_implementation_block -> RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
Rule 24    procedure_implementation_block -> RW_KAMUS RW_LOKAL algorithm_block
Rule 25    function_implementation -> function_declaration function_implementation_block
Rule 26    function_implementation_block -> RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
Rule 27    function_implementation_block -> RW_KAMUS RW_LOKAL algorithm_block
Rule 28    type_denoter -> ordinal_type
Rule 29    type_denoter -> structured_type
Rule 30    type_denoter -> RW_INTEGER
Rule 31    type_denoter -> RW_REAL
Rule 32    type_denoter -> RW_STRING
Rule 33    type_denoter -> RW_CHARACTER
Rule 34    type_denoter -> RW_BOOLEAN
Rule 35    ordinal_type -> enumerated_type
Rule 36    ordinal_type -> subrange_type
Rule 37    ordinal_type -> identifier
Rule 38    enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
Rule 39    subrange_type -> subrange_type_option
Rule 40    subrange_type_option -> subrange_option S_UP_TO subrange_option
Rule 41    subrange_option -> identifier
Rule 42    subrange_option -> constant
Rule 43    subrange_option -> function_designator
Rule 44    structured_type -> array_type
Rule 45    array_type -> RW_ARRAY array_index RW_OF component_type
Rule 46    array_index -> S_LEFT_SQUARE_BRACKET index_list S_RIGHT_SQUARE_BRACKET
Rule 47    index_list -> index_list S_COMMA index_type
Rule 48    index_list -> index_type
Rule 49    index_type -> ordinal_type
Rule 50    component_type -> type_denoter
Rule 51    variable_declaration -> variable_declaration variable_sub_declaration
Rule 52    variable_declaration -> variable_sub_declaration
Rule 53    variable_sub_declaration -> identifier_list S_COLON type_denoter
Rule 54    variable_declaration_comma -> variable_sub_declaration
Rule 55    variable_declaration_comma -> variable_sub_declaration S_COMMA variable_declaration_comma
Rule 56    constant_declaration -> constant_declaration constant_sub_declaration
Rule 57    constant_declaration -> constant_sub_declaration
Rule 58    constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant
Rule 59    type_declaration -> type_declaration type_sub_declaration
Rule 60    type_declaration -> type_sub_declaration
Rule 61    type_sub_declaration -> RW_TYPE identifier S_COLON type_variety
Rule 62    type_variety -> type_denoter
Rule 63    type_variety -> type_user_defined
Rule 64    type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN
Rule 65    procedure_and_function_declaration -> procedure_and_function_declaration procedure_and_function_sub_declaration
Rule 66    procedure_and_function_declaration -> procedure_and_function_sub_declaration
Rule 67    procedure_and_function_sub_declaration -> procedure_declaration
Rule 68    procedure_and_function_sub_declaration -> function_declaration
Rule 69    procedure_declaration -> procedure_identifier formal_parameter_list
Rule 70    procedure_identifier -> RW_PROCEDURE identifier
Rule 71    formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET
Rule 72    formal_parameter_section_list -> empty
Rule 73    formal_parameter_section_list -> formal_parameter_section
Rule 74    formal_parameter_section -> formal_parameter_section S_SEMI_COLON parameter_specification
Rule 75    formal_parameter_section -> parameter_specification
Rule 76    parameter_specification -> procedure_parameter_type variable_sub_declaration
Rule 77    procedure_parameter_type -> RW_INPUT
Rule 78    procedure_parameter_type -> RW_OUTPUT
Rule 79    procedure_parameter_type -> RW_INPUT S_DIVIDE RW_OUTPUT
Rule 80    function_declaration -> function_identification function_formal_parameter_list function_return_type
Rule 81    function_declaration -> function_identification function_return_type
Rule 82    function_identification -> RW_FUNCTION identifier
Rule 83    function_return_type -> S_RETURN type_denoter
Rule 84    function_formal_parameter_list -> S_LEFT_BRACKET function_parameter_list_option S_RIGHT_BRACKET
Rule 85    function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
Rule 86    function_parameter_list_option -> function_parameter_list
Rule 87    function_parameter_list_option -> empty
Rule 88    function_parameter_list -> function_parameter_list S_SEMI_COLON function_parameter_declaration
Rule 89    function_parameter_list -> function_parameter_declaration
Rule 90    function_parameter_declaration -> variable_sub_declaration
Rule 91    statement_part -> compound_statement
Rule 92    compound_statement -> INDENT statement_sequence DEDENT
Rule 93    statement_sequence -> statement_sequence S_SEMI_COLON statement
Rule 94    statement_sequence -> statement_sequence statement
Rule 95    statement_sequence -> statement
Rule 96    statement -> assignment_statement
Rule 97    statement -> procedure_statement
Rule 98    statement -> function_returned_statement
Rule 99    statement -> if_statement
Rule 100   statement -> depend_on_statement
Rule 101   statement -> while_statement
Rule 102   statement -> traversal_statement
Rule 103   statement -> repeat_statement
Rule 104   statement -> iterate_stop_statement
Rule 105   assignment_statement -> variable_access S_ASSIGNMENT expression
Rule 106   procedure_statement -> input_output_procedure_statement
Rule 107   procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
Rule 108   procedure_statement -> identifier
Rule 109   actual_parameter_list -> actual_parameter_list S_COMMA actual_parameter
Rule 110   actual_parameter_list -> actual_parameter
Rule 111   actual_parameter -> expression
Rule 112   input_output_procedure_statement -> input_statement
Rule 113   input_output_procedure_statement -> output_statement
Rule 114   input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET
Rule 115   input_statement_parameter_list -> input_statement_parameter_list S_COMMA input_statement_parameter
Rule 116   input_statement_parameter_list -> input_statement_parameter
Rule 117   input_statement_parameter -> variable_access
Rule 118   output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET
Rule 119   output_statement_parameter_list -> output_statement_parameter_list S_COMMA output_statement_parameter
Rule 120   output_statement_parameter_list -> output_statement_parameter
Rule 121   output_statement_parameter -> expression
Rule 122   function_returned_statement -> S_RETURN expression
Rule 123   depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
Rule 124   depend_on_action_list -> depend_on_action_list depend_on_action
Rule 125   depend_on_action_list -> depend_on_action
Rule 126   depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT
Rule 127   if_statement -> RW_IF boolean_expression RW_THEN compound_statement
Rule 128   if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
Rule 129   boolean_expression -> expression
Rule 130   repeat_statement -> repeat_until_statement
Rule 131   repeat_statement -> repeat_times_statement
Rule 132   repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression
Rule 133   repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement
Rule 134   repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement
Rule 135   repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement
Rule 136   while_statement -> RW_WHILE boolean_expression RW_DO compound_statement
Rule 137   iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement
Rule 138   traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement
Rule 139   traversal_range_value -> S_LEFT_SQUARE_BRACKET subrange_type S_RIGHT_SQUARE_BRACKET
Rule 140   control_variable -> identifier
Rule 141   unsigned_constant -> non_string_constant
Rule 142   unsigned_constant -> string_char_constant
Rule 143   unsigned_constant -> boolean_constant
Rule 144   unsigned_constant -> nil_constant
Rule 145   constant -> string_char_constant
Rule 146   constant -> non_string_constant
Rule 147   constant -> sign non_string_constant
Rule 148   constant -> boolean_constant
Rule 149   constant -> nil_constant
Rule 150   sign -> S_PLUS
Rule 151   sign -> S_MINUS
Rule 152   boolean_constant -> L_BOOLEAN_TRUE
Rule 153   boolean_constant -> L_BOOLEAN_FALSE
Rule 154   non_string_constant -> integer_constant
Rule 155   non_string_constant -> real_constant
Rule 156   integer_constant -> L_INTEGER_NUMBER
Rule 157   real_constant -> L_REAL_NUMBER
Rule 158   string_char_constant -> string_constant
Rule 159   string_char_constant -> char_constant
Rule 160   string_constant -> L_STRING
Rule 161   char_constant -> L_CHARACTER
Rule 162   nil_constant -> L_NIL
Rule 163   variable_access -> identifier
Rule 164   variable_access -> indexed_variable
Rule 165   variable_access -> field_designator
Rule 166   indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
Rule 167   index_expression_list -> index_expression_list S_COMMA expression
Rule 168   index_expression_list -> expression
Rule 169   field_designator -> variable_access S_DOT identifier
Rule 170   expression -> expression relational_op additive_expression
Rule 171   expression -> additive_expression
Rule 172   relational_op -> S_EQUAL
Rule 173   relational_op -> S_NOT_EQUAL
Rule 174   relational_op -> S_LESS_THAN_EQUAL
Rule 175   relational_op -> S_GREATER_THAN_EQUAL
Rule 176   relational_op -> S_LESS_THAN
Rule 177   relational_op -> S_GREATER_THAN
Rule 178   relational_op -> S_ELEMENT_OF
Rule 179   relational_op -> RW_EQ
Rule 180   relational_op -> RW_NEQ
Rule 181   additive_expression -> additive_expression additive_op multiplicative_expression
Rule 182   additive_expression -> multiplicative_expression
Rule 183   additive_op -> S_PLUS
Rule 184   additive_op -> S_MINUS
Rule 185   additive_op -> RW_OR
Rule 186   additive_op -> RW_XOR
Rule 187   multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression
Rule 188   multiplicative_expression -> unary_expression
Rule 189   multiplicative_op -> S_TIMES
Rule 190   multiplicative_op -> S_DIVIDE
Rule 191   multiplicative_op -> RW_DIV
Rule 192   multiplicative_op -> RW_MOD
Rule 193   multiplicative_op -> RW_AND
Rule 194   unary_expression -> unary_op unary_expression
Rule 195   unary_expression -> exponentiation_expression
Rule 196   exponentiation_expression -> primary_expression
Rule 197   exponentiation_expression -> primary_expression S_POWER exponentiation_expression
Rule 198   unary_op -> S_PLUS
Rule 199   unary_op -> S_MINUS
Rule 200   unary_op -> RW_NOT
Rule 201   primary_expression -> variable_access
Rule 202   primary_expression -> unsigned_constant
Rule 203   primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 204   primary_expression -> set_constructor
Rule 205   primary_expression -> function_designator
Rule 206   set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
Rule 207   set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
Rule 208   member_designator_list -> member_designator_list S_COMMA member_designator
Rule 209   member_designator_list -> member_designator
Rule 210   member_designator -> member_designator S_UP_TO expression
Rule 211   member_designator -> expression
Rule 212   function_designator -> user_defined_function_call
Rule 213   function_designator -> math_function_call
Rule 214   function_designator -> string_function_call
Rule 215   function_designator -> converter_function_call
Rule 216   user_defined_function_call -> identifier function_actual_parameter_list
Rule 217   math_function_call -> abs_function
Rule 218   math_function_call -> sin_function
Rule 219   math_function_call -> cos_function
Rule 220   math_function_call -> tan_function
Rule 221   math_function_call -> succ_function
Rule 222   math_function_call -> pred_function
Rule 223   abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 224   sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 225   cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 226   tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 227   succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 228   pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 229   string_function_call -> awal_function
Rule 230   string_function_call -> akhir_function
Rule 231   string_function_call -> firstchar_function
Rule 232   string_function_call -> lastchar_function
Rule 233   string_function_call -> long_function
Rule 234   string_function_call -> iskosong_function
Rule 235   awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 236   akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 237   firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 238   lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 239   long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 240   iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 241   converter_function_call -> integer_to_real
Rule 242   converter_function_call -> real_to_integer
Rule 243   integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 244   real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 245   empty -> <empty>
Rule 246   identifier -> IDENTIFIER

Terminals, with rules where they appear

COMMENT              : 
DEDENT               : 13 14 23 26 92 123 126
IDENTIFIER           : 246
INDENT               : 5 23 26 92 123 126
L_BOOLEAN_FALSE      : 153
L_BOOLEAN_TRUE       : 152
L_CHARACTER          : 161
L_INTEGER_NUMBER     : 156
L_NIL                : 162
L_REAL_NUMBER        : 157
L_STRING             : 160
RW_ABS               : 223
RW_AKHIR             : 236
RW_ALGORITMA         : 15
RW_AND               : 193
RW_ARRAY             : 45
RW_AWAL              : 235
RW_BOOLEAN           : 34
RW_CHARACTER         : 33
RW_CLOSE             : 
RW_CONSTANT          : 58
RW_COS               : 225
RW_DEPEND            : 123
RW_DIV               : 191
RW_DO                : 136
RW_ELSE              : 128
RW_EQ                : 179
RW_FIRSTCHAR         : 237
RW_FUNCTION          : 82
RW_IF                : 127 128
RW_INPUT             : 77 79 114
RW_INTEGER           : 30
RW_INTEGERTOREAL     : 243
RW_ISKOSONG          : 240
RW_ITERATE           : 137
RW_JUDUL             : 
RW_KAMUS             : 5 6 23 24 26 27
RW_LASTCHAR          : 238
RW_LOKAL             : 23 24 26 27
RW_LONG              : 239
RW_MOD               : 192
RW_MODUL             : 
RW_NEQ               : 180
RW_NOT               : 200
RW_OF                : 45
RW_ON                : 123
RW_OPEN              : 
RW_OR                : 185
RW_OUTPUT            : 78 79 118
RW_PRED              : 228
RW_PROCEDURE         : 70
RW_PROGRAM           : 2
RW_READ              : 
RW_REAL              : 31
RW_REALTOINTEGER     : 244
RW_REPEAT            : 132 133 134 135
RW_REWRITE           : 
RW_SEQFILE           : 
RW_SIN               : 224
RW_STOP              : 137
RW_STRING            : 32
RW_SUCC              : 227
RW_TAN               : 226
RW_THEN              : 127 128
RW_TIMES             : 133 134 135
RW_TRAVERSAL         : 138
RW_TYPE              : 61
RW_UNTIL             : 132
RW_WHILE             : 136
RW_XOR               : 186
S_ASSIGNMENT         : 105
S_COLON              : 53 58 61 126
S_COMMA              : 3 47 55 109 115 119 167 208
S_CONCATENATION      : 
S_DIVIDE             : 79 190
S_DOT                : 169
S_DOUBLE_QUOTE       : 
S_ELEMENT_OF         : 178
S_EQUAL              : 58 172
S_GREATER_THAN       : 64 177
S_GREATER_THAN_EQUAL : 175
S_LEFT_BRACKET       : 38 71 84 85 107 114 118 123 203 223 224 225 226 227 228 235 236 237 238 239 240 243 244
S_LEFT_CURLY_BRACKET : 
S_LEFT_SQUARE_BRACKET : 46 139 166 206 207
S_LESS_THAN          : 64 176
S_LESS_THAN_EQUAL    : 174
S_MINUS              : 151 184 199
S_NOT_EQUAL          : 173
S_PLUS               : 150 183 198
S_POWER              : 197
S_RETURN             : 83 122
S_RIGHT_BRACKET      : 38 71 84 85 107 114 118 123 203 223 224 225 226 227 228 235 236 237 238 239 240 243 244
S_RIGHT_CURLY_BRACKET : 
S_RIGHT_SQUARE_BRACKET : 46 139 166 206 207
S_SEMI_COLON         : 74 88 93
S_SINGLE_QUOTE       : 
S_TIMES              : 189
S_UP_TO              : 40 210
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

abs_function         : 217
actual_parameter     : 109 110
actual_parameter_list : 85 107 109
additive_expression  : 170 171 181
additive_op          : 181
akhir_function       : 230
algorithm_block      : 5 6 23 24 26 27
array_index          : 45
array_type           : 44
assignment_statement : 96
awal_function        : 229
block                : 2
boolean_constant     : 143 148
boolean_expression   : 127 128 132 136 137
char_constant        : 159
component_type       : 45
compound_statement   : 91 127 128 128 132 133 134 135 136 137 137 138
constant             : 42 58
constant_declaration : 8 56
constant_declaration_block : 5 23 26
constant_sub_declaration : 56 57
control_variable     : 138
converter_function_call : 215
cos_function         : 219
depend_on_action     : 124 125
depend_on_action_list : 123 124
depend_on_statement  : 100
empty                : 7 9 11 16 72 87
enumerated_type      : 35
exponentiation_expression : 195 197
expression           : 105 111 121 122 126 129 167 168 170 203 210 211 223 224 225 226 227 228 235 236 237 238 239 240 243 244
field_designator     : 165
file                 : 0
firstchar_function   : 231
formal_parameter_list : 69
formal_parameter_section : 73 74
formal_parameter_section_list : 71
function_actual_parameter_list : 216
function_declaration : 25 68
function_designator  : 43 135 205
function_formal_parameter_list : 80
function_identification : 80 81
function_implementation : 21
function_implementation_block : 25
function_parameter_declaration : 88 89
function_parameter_list : 86 88
function_parameter_list_option : 84
function_return_type : 80 81
function_returned_statement : 98
identifier           : 2 3 4 37 41 58 61 70 82 107 108 140 163 169 216
identifier_list      : 3 38 53
if_statement         : 99
index_expression_list : 166 167
index_list           : 46 47
index_type           : 47 48
indexed_variable     : 164
input_output_procedure_statement : 106
input_statement      : 112
input_statement_parameter : 115 116
input_statement_parameter_list : 114 115 123
integer_constant     : 134 154
integer_to_real      : 241
iskosong_function    : 234
iterate_stop_statement : 104
lastchar_function    : 232
long_function        : 233
math_function_call   : 213
member_designator    : 208 209 210
member_designator_list : 206 208
multiplicative_expression : 181 182 187
multiplicative_op    : 187
nil_constant         : 144 149
non_string_constant  : 141 146 147
ordinal_type         : 28 49
output_statement     : 113
output_statement_parameter : 119 120
output_statement_parameter_list : 118 119
parameter_specification : 74 75
pred_function        : 222
primary_expression   : 196 197
procedure_and_function_declaration : 14 65
procedure_and_function_declaration_block : 5
procedure_and_function_implementation_block : 5 6
procedure_and_function_sub_declaration : 65 66
procedure_declaration : 22 67
procedure_identifier : 69
procedure_implementation : 20
procedure_implementation_block : 22
procedure_parameter_type : 76
procedure_statement  : 97
program              : 1
real_constant        : 155
real_to_integer      : 242
relational_op        : 170
repeat_statement     : 103
repeat_times_statement : 131
repeat_until_statement : 130
set_constructor      : 204
sign                 : 147
sin_function         : 218
statement            : 93 94 95
statement_part       : 15
statement_sequence   : 92 93 94 126
string_char_constant : 142 145
string_constant      : 158
string_function_call : 214
structured_type      : 29
subprogram_implementation : 18 19
subprogram_implementation_list : 17 18
subrange_option      : 40 40
subrange_type        : 36 139
subrange_type_option : 39
succ_function        : 221
tan_function         : 220
traversal_range_value : 138
traversal_statement  : 102
type_declaration     : 10 59
type_declaration_block : 5 23 26
type_denoter         : 50 53 58 62 83
type_sub_declaration : 59 60
type_user_defined    : 63
type_variety         : 61
unary_expression     : 187 188 194
unary_op             : 194
unsigned_constant    : 202
user_defined_function_call : 212
variable_access      : 105 117 133 166 169 201
variable_declaration : 12 51
variable_declaration_block : 5 23 26
variable_declaration_comma : 55 64
variable_sub_declaration : 51 52 54 55 76 90
while_statement      : 101

Parsing method: LALR

state 0

    (0) S' -> . file
    (1) file -> . program
    (2) program -> . RW_PROGRAM identifier block

    RW_PROGRAM      shift and go to state 3

    file                           shift and go to state 1
    program                        shift and go to state 2

state 1

    (0) S' -> file .



state 2

    (1) file -> program .

    $end            reduce using rule 1 (file -> program .)


state 3

    (2) program -> RW_PROGRAM . identifier block
    (246) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 5

    identifier                     shift and go to state 4

state 4

    (2) program -> RW_PROGRAM identifier . block
    (5) block -> . RW_KAMUS INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (6) block -> . RW_KAMUS algorithm_block procedure_and_function_implementation_block

    RW_KAMUS        shift and go to state 7

    block                          shift and go to state 6

state 5

    (246) identifier -> IDENTIFIER .

    RW_KAMUS        reduce using rule 246 (identifier -> IDENTIFIER .)
    S_COLON         reduce using rule 246 (identifier -> IDENTIFIER .)
    S_LEFT_BRACKET  reduce using rule 246 (identifier -> IDENTIFIER .)
    S_RETURN        reduce using rule 246 (identifier -> IDENTIFIER .)
    DEDENT          reduce using rule 246 (identifier -> IDENTIFIER .)
    S_SEMI_COLON    reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_IF           reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_DEPEND       reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_WHILE        reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_ITERATE      reduce using rule 246 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_REPEAT       reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_INPUT        reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_OUTPUT       reduce using rule 246 (identifier -> IDENTIFIER .)
    S_ASSIGNMENT    reduce using rule 246 (identifier -> IDENTIFIER .)
    S_LEFT_SQUARE_BRACKET reduce using rule 246 (identifier -> IDENTIFIER .)
    S_DOT           reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_TRAVERSAL    reduce using rule 246 (identifier -> IDENTIFIER .)
    S_COMMA         reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_PROCEDURE    reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_FUNCTION     reduce using rule 246 (identifier -> IDENTIFIER .)
    S_UP_TO         reduce using rule 246 (identifier -> IDENTIFIER .)
    S_POWER         reduce using rule 246 (identifier -> IDENTIFIER .)
    S_TIMES         reduce using rule 246 (identifier -> IDENTIFIER .)
    S_DIVIDE        reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_DIV          reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_MOD          reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_AND          reduce using rule 246 (identifier -> IDENTIFIER .)
    S_PLUS          reduce using rule 246 (identifier -> IDENTIFIER .)
    S_MINUS         reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_OR           reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_XOR          reduce using rule 246 (identifier -> IDENTIFIER .)
    S_EQUAL         reduce using rule 246 (identifier -> IDENTIFIER .)
    S_NOT_EQUAL     reduce using rule 246 (identifier -> IDENTIFIER .)
    S_LESS_THAN_EQUAL reduce using rule 246 (identifier -> IDENTIFIER .)
    S_GREATER_THAN_EQUAL reduce using rule 246 (identifier -> IDENTIFIER .)
    S_LESS_THAN     reduce using rule 246 (identifier -> IDENTIFIER .)
    S_GREATER_THAN  reduce using rule 246 (identifier -> IDENTIFIER .)
    S_ELEMENT_OF    reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_EQ           reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_NEQ          reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_THEN         reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_DO           reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_TIMES        reduce using rule 246 (identifier -> IDENTIFIER .)
    S_RIGHT_BRACKET reduce using rule 246 (identifier -> IDENTIFIER .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 246 (identifier -> IDENTIFIER .)
    INDENT          reduce using rule 246 (identifier -> IDENTIFIER .)
    RW_TYPE         reduce using rule 246 (identifier -> IDENTIFIER .)


state 6

    (2) program -> RW_PROGRAM identifier block .

    $end            reduce using rule 2 (program -> RW_PROGRAM identifier block .)


state 7

    (5) block -> RW_KAMUS . INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (6) block -> RW_KAMUS . algorithm_block procedure_and_function_implementation_block
    (15) algorithm_block -> . RW_ALGORITMA statement_part

    INDENT          shift and go to state 8
    RW_ALGORITMA    shift and go to state 10

    algorithm_block                shift and go to state 9

state 8

    (5) block -> RW_KAMUS INDENT . constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (7) constant_declaration_block -> . empty
    (8) constant_declaration_block -> . constant_declaration
    (245) empty -> .
    (56) constant_declaration -> . constant_declaration constant_sub_declaration
    (57) constant_declaration -> . constant_sub_declaration
    (58) constant_sub_declaration -> . RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant

    RW_TYPE         reduce using rule 245 (empty -> .)
    IDENTIFIER      reduce using rule 245 (empty -> .)
    DEDENT          reduce using rule 245 (empty -> .)
    RW_PROCEDURE    reduce using rule 245 (empty -> .)
    RW_FUNCTION     reduce using rule 245 (empty -> .)
    RW_CONSTANT     shift and go to state 15

    constant_declaration_block     shift and go to state 11
    empty                          shift and go to state 12
    constant_declaration           shift and go to state 13
    constant_sub_declaration       shift and go to state 14

state 9

    (6) block -> RW_KAMUS algorithm_block . procedure_and_function_implementation_block
    (16) procedure_and_function_implementation_block -> . empty
    (17) procedure_and_function_implementation_block -> . subprogram_implementation_list
    (245) empty -> .
    (18) subprogram_implementation_list -> . subprogram_implementation_list subprogram_implementation
    (19) subprogram_implementation_list -> . subprogram_implementation
    (20) subprogram_implementation -> . procedure_implementation
    (21) subprogram_implementation -> . function_implementation
    (22) procedure_implementation -> . procedure_declaration procedure_implementation_block
    (25) function_implementation -> . function_declaration function_implementation_block
    (69) procedure_declaration -> . procedure_identifier formal_parameter_list
    (80) function_declaration -> . function_identification function_formal_parameter_list function_return_type
    (81) function_declaration -> . function_identification function_return_type
    (70) procedure_identifier -> . RW_PROCEDURE identifier
    (82) function_identification -> . RW_FUNCTION identifier

    $end            reduce using rule 245 (empty -> .)
    RW_PROCEDURE    shift and go to state 26
    RW_FUNCTION     shift and go to state 27

    procedure_and_function_implementation_block shift and go to state 16
    empty                          shift and go to state 17
    subprogram_implementation_list shift and go to state 18
    subprogram_implementation      shift and go to state 19
    procedure_implementation       shift and go to state 20
    function_implementation        shift and go to state 21
    procedure_declaration          shift and go to state 22
    function_declaration           shift and go to state 23
    procedure_identifier           shift and go to state 24
    function_identification        shift and go to state 25

state 10

    (15) algorithm_block -> RW_ALGORITMA . statement_part
    (91) statement_part -> . compound_statement
    (92) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 30

    statement_part                 shift and go to state 28
    compound_statement             shift and go to state 29

state 11

    (5) block -> RW_KAMUS INDENT constant_declaration_block . type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (9) type_declaration_block -> . empty
    (10) type_declaration_block -> . type_declaration
    (245) empty -> .
    (59) type_declaration -> . type_declaration type_sub_declaration
    (60) type_declaration -> . type_sub_declaration
    (61) type_sub_declaration -> . RW_TYPE identifier S_COLON type_variety

    IDENTIFIER      reduce using rule 245 (empty -> .)
    DEDENT          reduce using rule 245 (empty -> .)
    RW_PROCEDURE    reduce using rule 245 (empty -> .)
    RW_FUNCTION     reduce using rule 245 (empty -> .)
    RW_TYPE         shift and go to state 35

    type_declaration_block         shift and go to state 31
    empty                          shift and go to state 32
    type_declaration               shift and go to state 33
    type_sub_declaration           shift and go to state 34

state 12

    (7) constant_declaration_block -> empty .

    RW_TYPE         reduce using rule 7 (constant_declaration_block -> empty .)
    IDENTIFIER      reduce using rule 7 (constant_declaration_block -> empty .)
    DEDENT          reduce using rule 7 (constant_declaration_block -> empty .)
    RW_PROCEDURE    reduce using rule 7 (constant_declaration_block -> empty .)
    RW_FUNCTION     reduce using rule 7 (constant_declaration_block -> empty .)


state 13

    (8) constant_declaration_block -> constant_declaration .
    (56) constant_declaration -> constant_declaration . constant_sub_declaration
    (58) constant_sub_declaration -> . RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant

    RW_TYPE         reduce using rule 8 (constant_declaration_block -> constant_declaration .)
    IDENTIFIER      reduce using rule 8 (constant_declaration_block -> constant_declaration .)
    DEDENT          reduce using rule 8 (constant_declaration_block -> constant_declaration .)
    RW_PROCEDURE    reduce using rule 8 (constant_declaration_block -> constant_declaration .)
    RW_FUNCTION     reduce using rule 8 (constant_declaration_block -> constant_declaration .)
    RW_CONSTANT     shift and go to state 15

    constant_sub_declaration       shift and go to state 36

state 14

    (57) constant_declaration -> constant_sub_declaration .

    RW_CONSTANT     reduce using rule 57 (constant_declaration -> constant_sub_declaration .)
    RW_TYPE         reduce using rule 57 (constant_declaration -> constant_sub_declaration .)
    IDENTIFIER      reduce using rule 57 (constant_declaration -> constant_sub_declaration .)
    DEDENT          reduce using rule 57 (constant_declaration -> constant_sub_declaration .)
    RW_PROCEDURE    reduce using rule 57 (constant_declaration -> constant_sub_declaration .)
    RW_FUNCTION     reduce using rule 57 (constant_declaration -> constant_sub_declaration .)


state 15

    (58) constant_sub_declaration -> RW_CONSTANT . identifier S_COLON type_denoter S_EQUAL constant
    (246) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 5

    identifier                     shift and go to state 37

state 16

    (6) block -> RW_KAMUS algorithm_block procedure_and_function_implementation_block .

    $end            reduce using rule 6 (block -> RW_KAMUS algorithm_block procedure_and_function_implementation_block .)


state 17

    (16) procedure_and_function_implementation_block -> empty .

    $end            reduce using rule 16 (procedure_and_function_implementation_block -> empty .)


state 18

    (17) procedure_and_function_implementation_block -> subprogram_implementation_list .
    (18) subprogram_implementation_list -> subprogram_implementation_list . subprogram_implementation
    (20) subprogram_implementation -> . procedure_implementation
    (21) subprogram_implementation -> . function_implementation
    (22) procedure_implementation -> . procedure_declaration procedure_implementation_block
    (25) function_implementation -> . function_declaration function_implementation_block
    (69) procedure_declaration -> . procedure_identifier formal_parameter_list
    (80) function_declaration -> . function_identification function_formal_parameter_list function_return_type
    (81) function_declaration -> . function_identification function_return_type
    (70) procedure_identifier -> . RW_PROCEDURE identifier
    (82) function_identification -> . RW_FUNCTION identifier

    $end            reduce using rule 17 (procedure_and_function_implementation_block -> subprogram_implementation_list .)
    RW_PROCEDURE    shift and go to state 26
    RW_FUNCTION     shift and go to state 27

    subprogram_implementation      shift and go to state 38
    procedure_implementation       shift and go to state 20
    function_implementation        shift and go to state 21
    procedure_declaration          shift and go to state 22
    function_declaration           shift and go to state 23
    procedure_identifier           shift and go to state 24
    function_identification        shift and go to state 25

state 19

    (19) subprogram_implementation_list -> subprogram_implementation .

    RW_PROCEDURE    reduce using rule 19 (subprogram_implementation_list -> subprogram_implementation .)
    RW_FUNCTION     reduce using rule 19 (subprogram_implementation_list -> subprogram_implementation .)
    $end            reduce using rule 19 (subprogram_implementation_list -> subprogram_implementation .)


state 20

    (20) subprogram_implementation -> procedure_implementation .

    RW_PROCEDURE    reduce using rule 20 (subprogram_implementation -> procedure_implementation .)
    RW_FUNCTION     reduce using rule 20 (subprogram_implementation -> procedure_implementation .)
    $end            reduce using rule 20 (subprogram_implementation -> procedure_implementation .)


state 21

    (21) subprogram_implementation -> function_implementation .

    RW_PROCEDURE    reduce using rule 21 (subprogram_implementation -> function_implementation .)
    RW_FUNCTION     reduce using rule 21 (subprogram_implementation -> function_implementation .)
    $end            reduce using rule 21 (subprogram_implementation -> function_implementation .)


state 22

    (22) procedure_implementation -> procedure_declaration . procedure_implementation_block
    (23) procedure_implementation_block -> . RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
    (24) procedure_implementation_block -> . RW_KAMUS RW_LOKAL algorithm_block

    RW_KAMUS        shift and go to state 40

    procedure_implementation_block shift and go to state 39

state 23

    (25) function_implementation -> function_declaration . function_implementation_block
    (26) function_implementation_block -> . RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
    (27) function_implementation_block -> . RW_KAMUS RW_LOKAL algorithm_block

    RW_KAMUS        shift and go to state 42

    function_implementation_block  shift and go to state 41

state 24

    (69) procedure_declaration -> procedure_identifier . formal_parameter_list
    (71) formal_parameter_list -> . S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 44

    formal_parameter_list          shift and go to state 43

state 25

    (80) function_declaration -> function_identification . function_formal_parameter_list function_return_type
    (81) function_declaration -> function_identification . function_return_type
    (84) function_formal_parameter_list -> . S_LEFT_BRACKET function_parameter_list_option S_RIGHT_BRACKET
    (83) function_return_type -> . S_RETURN type_denoter

    S_LEFT_BRACKET  shift and go to state 47
    S_RETURN        shift and go to state 48

    function_formal_parameter_list shift and go to state 45
    function_return_type           shift and go to state 46

state 26

    (70) procedure_identifier -> RW_PROCEDURE . identifier
    (246) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 5

    identifier                     shift and go to state 49

state 27

    (82) function_identification -> RW_FUNCTION . identifier
    (246) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 5

    identifier                     shift and go to state 50

state 28

    (15) algorithm_block -> RW_ALGORITMA statement_part .

    RW_PROCEDURE    reduce using rule 15 (algorithm_block -> RW_ALGORITMA statement_part .)
    RW_FUNCTION     reduce using rule 15 (algorithm_block -> RW_ALGORITMA statement_part .)
    $end            reduce using rule 15 (algorithm_block -> RW_ALGORITMA statement_part .)


state 29

    (91) statement_part -> compound_statement .

    RW_PROCEDURE    reduce using rule 91 (statement_part -> compound_statement .)
    RW_FUNCTION     reduce using rule 91 (statement_part -> compound_statement .)
    $end            reduce using rule 91 (statement_part -> compound_statement .)


state 30

    (92) compound_statement -> INDENT . statement_sequence DEDENT
    (93) statement_sequence -> . statement_sequence S_SEMI_COLON statement
    (94) statement_sequence -> . statement_sequence statement
    (95) statement_sequence -> . statement
    (96) statement -> . assignment_statement
    (97) statement -> . procedure_statement
    (98) statement -> . function_returned_statement
    (99) statement -> . if_statement
    (100) statement -> . depend_on_statement
    (101) statement -> . while_statement
    (102) statement -> . traversal_statement
    (103) statement -> . repeat_statement
    (104) statement -> . iterate_stop_statement
    (105) assignment_statement -> . variable_access S_ASSIGNMENT expression
    (106) procedure_statement -> . input_output_procedure_statement
    (107) procedure_statement -> . identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
    (108) procedure_statement -> . identifier
    (122) function_returned_statement -> . S_RETURN expression
    (127) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement
    (128) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
    (123) depend_on_statement -> . RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (136) while_statement -> . RW_WHILE boolean_expression RW_DO compound_statement
    (138) traversal_statement -> . control_variable RW_TRAVERSAL traversal_range_value compound_statement
    (130) repeat_statement -> . repeat_until_statement
    (131) repeat_statement -> . repeat_times_statement
    (137) iterate_stop_statement -> . RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (112) input_output_procedure_statement -> . input_statement
    (113) input_output_procedure_statement -> . output_statement
    (246) identifier -> . IDENTIFIER
    (140) control_variable -> . identifier
    (132) repeat_until_statement -> . RW_REPEAT compound_statement RW_UNTIL boolean_expression
    (133) repeat_times_statement -> . RW_REPEAT variable_access RW_TIMES compound_statement
    (134) repeat_times_statement -> . RW_REPEAT integer_constant RW_TIMES compound_statement
    (135) repeat_times_statement -> . RW_REPEAT function_designator RW_TIMES compound_statement
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (114) input_statement -> . RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET
    (118) output_statement -> . RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET

    S_RETURN        shift and go to state 65
    RW_IF           shift and go to state 66
    RW_DEPEND       shift and go to state 67
    RW_WHILE        shift and go to state 68
    RW_ITERATE      shift and go to state 72
    IDENTIFIER      shift and go to state 5
    RW_REPEAT       shift and go to state 77
    RW_INPUT        shift and go to state 78
    RW_OUTPUT       shift and go to state 79

    statement_sequence             shift and go to state 51
    statement                      shift and go to state 52
    assignment_statement           shift and go to state 53
    procedure_statement            shift and go to state 54
    function_returned_statement    shift and go to state 55
    if_statement                   shift and go to state 56
    depend_on_statement            shift and go to state 57
    while_statement                shift and go to state 58
    traversal_statement            shift and go to state 59
    repeat_statement               shift and go to state 60
    iterate_stop_statement         shift and go to state 61
    variable_access                shift and go to state 62
    input_output_procedure_statement shift and go to state 63
    identifier                     shift and go to state 64
    control_variable               shift and go to state 69
    repeat_until_statement         shift and go to state 70
    repeat_times_statement         shift and go to state 71
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    input_statement                shift and go to state 75
    output_statement               shift and go to state 76

state 31

    (5) block -> RW_KAMUS INDENT constant_declaration_block type_declaration_block . variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (11) variable_declaration_block -> . empty
    (12) variable_declaration_block -> . variable_declaration
    (245) empty -> .
    (51) variable_declaration -> . variable_declaration variable_sub_declaration
    (52) variable_declaration -> . variable_sub_declaration
    (53) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (3) identifier_list -> . identifier_list S_COMMA identifier
    (4) identifier_list -> . identifier
    (246) identifier -> . IDENTIFIER

    DEDENT          reduce using rule 245 (empty -> .)
    RW_PROCEDURE    reduce using rule 245 (empty -> .)
    RW_FUNCTION     reduce using rule 245 (empty -> .)
    IDENTIFIER      shift and go to state 5

    variable_declaration_block     shift and go to state 80
    empty                          shift and go to state 81
    variable_declaration           shift and go to state 82
    variable_sub_declaration       shift and go to state 83
    identifier_list                shift and go to state 84
    identifier                     shift and go to state 85

state 32

    (9) type_declaration_block -> empty .

    IDENTIFIER      reduce using rule 9 (type_declaration_block -> empty .)
    DEDENT          reduce using rule 9 (type_declaration_block -> empty .)
    RW_PROCEDURE    reduce using rule 9 (type_declaration_block -> empty .)
    RW_FUNCTION     reduce using rule 9 (type_declaration_block -> empty .)


state 33

    (10) type_declaration_block -> type_declaration .
    (59) type_declaration -> type_declaration . type_sub_declaration
    (61) type_sub_declaration -> . RW_TYPE identifier S_COLON type_variety

    IDENTIFIER      reduce using rule 10 (type_declaration_block -> type_declaration .)
    DEDENT          reduce using rule 10 (type_declaration_block -> type_declaration .)
    RW_PROCEDURE    reduce using rule 10 (type_declaration_block -> type_declaration .)
    RW_FUNCTION     reduce using rule 10 (type_declaration_block -> type_declaration .)
    RW_TYPE         shift and go to state 35

    type_sub_declaration           shift and go to state 86

state 34

    (60) type_declaration -> type_sub_declaration .

    RW_TYPE         reduce using rule 60 (type_declaration -> type_sub_declaration .)
    IDENTIFIER      reduce using rule 60 (type_declaration -> type_sub_declaration .)
    DEDENT          reduce using rule 60 (type_declaration -> type_sub_declaration .)
    RW_PROCEDURE    reduce using rule 60 (type_declaration -> type_sub_declaration .)
    RW_FUNCTION     reduce using rule 60 (type_declaration -> type_sub_declaration .)


state 35

    (61) type_sub_declaration -> RW_TYPE . identifier S_COLON type_variety
    (246) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 5

    identifier                     shift and go to state 87

state 36

    (56) constant_declaration -> constant_declaration constant_sub_declaration .

    RW_CONSTANT     reduce using rule 56 (constant_declaration -> constant_declaration constant_sub_declaration .)
    RW_TYPE         reduce using rule 56 (constant_declaration -> constant_declaration constant_sub_declaration .)
    IDENTIFIER      reduce using rule 56 (constant_declaration -> constant_declaration constant_sub_declaration .)
    DEDENT          reduce using rule 56 (constant_declaration -> constant_declaration constant_sub_declaration .)
    RW_PROCEDURE    reduce using rule 56 (constant_declaration -> constant_declaration constant_sub_declaration .)
    RW_FUNCTION     reduce using rule 56 (constant_declaration -> constant_declaration constant_sub_declaration .)


state 37

    (58) constant_sub_declaration -> RW_CONSTANT identifier . S_COLON type_denoter S_EQUAL constant

    S_COLON         shift and go to state 88


state 38

    (18) subprogram_implementation_list -> subprogram_implementation_list subprogram_implementation .

    RW_PROCEDURE    reduce using rule 18 (subprogram_implementation_list -> subprogram_implementation_list subprogram_implementation .)
    RW_FUNCTION     reduce using rule 18 (subprogram_implementation_list -> subprogram_implementation_list subprogram_implementation .)
    $end            reduce using rule 18 (subprogram_implementation_list -> subprogram_implementation_list subprogram_implementation .)


state 39

    (22) procedure_implementation -> procedure_declaration procedure_implementation_block .

    RW_PROCEDURE    reduce using rule 22 (procedure_implementation -> procedure_declaration procedure_implementation_block .)
    RW_FUNCTION     reduce using rule 22 (procedure_implementation -> procedure_declaration procedure_implementation_block .)
    $end            reduce using rule 22 (procedure_implementation -> procedure_declaration procedure_implementation_block .)


state 40

    (23) procedure_implementation_block -> RW_KAMUS . RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
    (24) procedure_implementation_block -> RW_KAMUS . RW_LOKAL algorithm_block

    RW_LOKAL        shift and go to state 89


state 41

    (25) function_implementation -> function_declaration function_implementation_block .

    RW_PROCEDURE    reduce using rule 25 (function_implementation -> function_declaration function_implementation_block .)
    RW_FUNCTION     reduce using rule 25 (function_implementation -> function_declaration function_implementation_block .)
    $end            reduce using rule 25 (function_implementation -> function_declaration function_implementation_block .)


state 42

    (26) function_implementation_block -> RW_KAMUS . RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
    (27) function_implementation_block -> RW_KAMUS . RW_LOKAL algorithm_block

    RW_LOKAL        shift and go to state 90


state 43

    (69) procedure_declaration -> procedure_identifier formal_parameter_list .

    RW_KAMUS        reduce using rule 69 (procedure_declaration -> procedure_identifier formal_parameter_list .)
    DEDENT          reduce using rule 69 (procedure_declaration -> procedure_identifier formal_parameter_list .)
    RW_PROCEDURE    reduce using rule 69 (procedure_declaration -> procedure_identifier formal_parameter_list .)
    RW_FUNCTION     reduce using rule 69 (procedure_declaration -> procedure_identifier formal_parameter_list .)


state 44

    (71) formal_parameter_list -> S_LEFT_BRACKET . formal_parameter_section_list S_RIGHT_BRACKET
    (72) formal_parameter_section_list -> . empty
    (73) formal_parameter_section_list -> . formal_parameter_section
    (245) empty -> .
    (74) formal_parameter_section -> . formal_parameter_section S_SEMI_COLON parameter_specification
    (75) formal_parameter_section -> . parameter_specification
    (76) parameter_specification -> . procedure_parameter_type variable_sub_declaration
    (77) procedure_parameter_type -> . RW_INPUT
    (78) procedure_parameter_type -> . RW_OUTPUT
    (79) procedure_parameter_type -> . RW_INPUT S_DIVIDE RW_OUTPUT

    S_RIGHT_BRACKET reduce using rule 245 (empty -> .)
    RW_INPUT        shift and go to state 96
    RW_OUTPUT       shift and go to state 97

    formal_parameter_section_list  shift and go to state 91
    empty                          shift and go to state 92
    formal_parameter_section       shift and go to state 93
    parameter_specification        shift and go to state 94
    procedure_parameter_type       shift and go to state 95

state 45

    (80) function_declaration -> function_identification function_formal_parameter_list . function_return_type
    (83) function_return_type -> . S_RETURN type_denoter

    S_RETURN        shift and go to state 48

    function_return_type           shift and go to state 98

state 46

    (81) function_declaration -> function_identification function_return_type .

    RW_KAMUS        reduce using rule 81 (function_declaration -> function_identification function_return_type .)
    DEDENT          reduce using rule 81 (function_declaration -> function_identification function_return_type .)
    RW_PROCEDURE    reduce using rule 81 (function_declaration -> function_identification function_return_type .)
    RW_FUNCTION     reduce using rule 81 (function_declaration -> function_identification function_return_type .)


state 47

    (84) function_formal_parameter_list -> S_LEFT_BRACKET . function_parameter_list_option S_RIGHT_BRACKET
    (86) function_parameter_list_option -> . function_parameter_list
    (87) function_parameter_list_option -> . empty
    (88) function_parameter_list -> . function_parameter_list S_SEMI_COLON function_parameter_declaration
    (89) function_parameter_list -> . function_parameter_declaration
    (245) empty -> .
    (90) function_parameter_declaration -> . variable_sub_declaration
    (53) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (3) identifier_list -> . identifier_list S_COMMA identifier
    (4) identifier_list -> . identifier
    (246) identifier -> . IDENTIFIER

    S_RIGHT_BRACKET reduce using rule 245 (empty -> .)
    IDENTIFIER      shift and go to state 5

    function_parameter_list_option shift and go to state 99
    function_parameter_list        shift and go to state 100
    empty                          shift and go to state 101
    function_parameter_declaration shift and go to state 102
    variable_sub_declaration       shift and go to state 103
    identifier_list                shift and go to state 84
    identifier                     shift and go to state 85

state 48

    (83) function_return_type -> S_RETURN . type_denoter
    (28) type_denoter -> . ordinal_type
    (29) type_denoter -> . structured_type
    (30) type_denoter -> . RW_INTEGER
    (31) type_denoter -> . RW_REAL
    (32) type_denoter -> . RW_STRING
    (33) type_denoter -> . RW_CHARACTER
    (34) type_denoter -> . RW_BOOLEAN
    (35) ordinal_type -> . enumerated_type
    (36) ordinal_type -> . subrange_type
    (37) ordinal_type -> . identifier
    (44) structured_type -> . array_type
    (38) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (39) subrange_type -> . subrange_type_option
    (246) identifier -> . IDENTIFIER
    (45) array_type -> . RW_ARRAY array_index RW_OF component_type
    (40) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (41) subrange_option -> . identifier
    (42) subrange_option -> . constant
    (43) subrange_option -> . function_designator
    (145) constant -> . string_char_constant
    (146) constant -> . non_string_constant
    (147) constant -> . sign non_string_constant
    (148) constant -> . boolean_constant
    (149) constant -> . nil_constant
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (150) sign -> . S_PLUS
    (151) sign -> . S_MINUS
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    RW_INTEGER      shift and go to state 107
    RW_REAL         shift and go to state 108
    RW_STRING       shift and go to state 109
    RW_CHARACTER    shift and go to state 110
    RW_BOOLEAN      shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 116
    IDENTIFIER      shift and go to state 5
    RW_ARRAY        shift and go to state 118
    S_PLUS          shift and go to state 135
    S_MINUS         shift and go to state 136
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    type_denoter                   shift and go to state 104
    ordinal_type                   shift and go to state 105
    structured_type                shift and go to state 106
    enumerated_type                shift and go to state 112
    subrange_type                  shift and go to state 113
    identifier                     shift and go to state 114
    array_type                     shift and go to state 115
    subrange_type_option           shift and go to state 117
    subrange_option                shift and go to state 119
    constant                       shift and go to state 120
    function_designator            shift and go to state 121
    string_char_constant           shift and go to state 122
    non_string_constant            shift and go to state 123
    sign                           shift and go to state 124
    boolean_constant               shift and go to state 125
    nil_constant                   shift and go to state 126
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 49

    (70) procedure_identifier -> RW_PROCEDURE identifier .

    S_LEFT_BRACKET  reduce using rule 70 (procedure_identifier -> RW_PROCEDURE identifier .)


state 50

    (82) function_identification -> RW_FUNCTION identifier .

    S_LEFT_BRACKET  reduce using rule 82 (function_identification -> RW_FUNCTION identifier .)
    S_RETURN        reduce using rule 82 (function_identification -> RW_FUNCTION identifier .)


state 51

    (92) compound_statement -> INDENT statement_sequence . DEDENT
    (93) statement_sequence -> statement_sequence . S_SEMI_COLON statement
    (94) statement_sequence -> statement_sequence . statement
    (96) statement -> . assignment_statement
    (97) statement -> . procedure_statement
    (98) statement -> . function_returned_statement
    (99) statement -> . if_statement
    (100) statement -> . depend_on_statement
    (101) statement -> . while_statement
    (102) statement -> . traversal_statement
    (103) statement -> . repeat_statement
    (104) statement -> . iterate_stop_statement
    (105) assignment_statement -> . variable_access S_ASSIGNMENT expression
    (106) procedure_statement -> . input_output_procedure_statement
    (107) procedure_statement -> . identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
    (108) procedure_statement -> . identifier
    (122) function_returned_statement -> . S_RETURN expression
    (127) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement
    (128) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
    (123) depend_on_statement -> . RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (136) while_statement -> . RW_WHILE boolean_expression RW_DO compound_statement
    (138) traversal_statement -> . control_variable RW_TRAVERSAL traversal_range_value compound_statement
    (130) repeat_statement -> . repeat_until_statement
    (131) repeat_statement -> . repeat_times_statement
    (137) iterate_stop_statement -> . RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (112) input_output_procedure_statement -> . input_statement
    (113) input_output_procedure_statement -> . output_statement
    (246) identifier -> . IDENTIFIER
    (140) control_variable -> . identifier
    (132) repeat_until_statement -> . RW_REPEAT compound_statement RW_UNTIL boolean_expression
    (133) repeat_times_statement -> . RW_REPEAT variable_access RW_TIMES compound_statement
    (134) repeat_times_statement -> . RW_REPEAT integer_constant RW_TIMES compound_statement
    (135) repeat_times_statement -> . RW_REPEAT function_designator RW_TIMES compound_statement
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (114) input_statement -> . RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET
    (118) output_statement -> . RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET

    DEDENT          shift and go to state 172
    S_SEMI_COLON    shift and go to state 173
    S_RETURN        shift and go to state 65
    RW_IF           shift and go to state 66
    RW_DEPEND       shift and go to state 67
    RW_WHILE        shift and go to state 68
    RW_ITERATE      shift and go to state 72
    IDENTIFIER      shift and go to state 5
    RW_REPEAT       shift and go to state 77
    RW_INPUT        shift and go to state 78
    RW_OUTPUT       shift and go to state 79

    statement                      shift and go to state 174
    assignment_statement           shift and go to state 53
    procedure_statement            shift and go to state 54
    function_returned_statement    shift and go to state 55
    if_statement                   shift and go to state 56
    depend_on_statement            shift and go to state 57
    while_statement                shift and go to state 58
    traversal_statement            shift and go to state 59
    repeat_statement               shift and go to state 60
    iterate_stop_statement         shift and go to state 61
    variable_access                shift and go to state 62
    input_output_procedure_statement shift and go to state 63
    identifier                     shift and go to state 64
    control_variable               shift and go to state 69
    repeat_until_statement         shift and go to state 70
    repeat_times_statement         shift and go to state 71
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    input_statement                shift and go to state 75
    output_statement               shift and go to state 76

state 52

    (95) statement_sequence -> statement .

    DEDENT          reduce using rule 95 (statement_sequence -> statement .)
    S_SEMI_COLON    reduce using rule 95 (statement_sequence -> statement .)
    S_RETURN        reduce using rule 95 (statement_sequence -> statement .)
    RW_IF           reduce using rule 95 (statement_sequence -> statement .)
    RW_DEPEND       reduce using rule 95 (statement_sequence -> statement .)
    RW_WHILE        reduce using rule 95 (statement_sequence -> statement .)
    RW_ITERATE      reduce using rule 95 (statement_sequence -> statement .)
    IDENTIFIER      reduce using rule 95 (statement_sequence -> statement .)
    RW_REPEAT       reduce using rule 95 (statement_sequence -> statement .)
    RW_INPUT        reduce using rule 95 (statement_sequence -> statement .)
    RW_OUTPUT       reduce using rule 95 (statement_sequence -> statement .)


state 53

    (96) statement -> assignment_statement .

    DEDENT          reduce using rule 96 (statement -> assignment_statement .)
    S_SEMI_COLON    reduce using rule 96 (statement -> assignment_statement .)
    S_RETURN        reduce using rule 96 (statement -> assignment_statement .)
    RW_IF           reduce using rule 96 (statement -> assignment_statement .)
    RW_DEPEND       reduce using rule 96 (statement -> assignment_statement .)
    RW_WHILE        reduce using rule 96 (statement -> assignment_statement .)
    RW_ITERATE      reduce using rule 96 (statement -> assignment_statement .)
    IDENTIFIER      reduce using rule 96 (statement -> assignment_statement .)
    RW_REPEAT       reduce using rule 96 (statement -> assignment_statement .)
    RW_INPUT        reduce using rule 96 (statement -> assignment_statement .)
    RW_OUTPUT       reduce using rule 96 (statement -> assignment_statement .)


state 54

    (97) statement -> procedure_statement .

    DEDENT          reduce using rule 97 (statement -> procedure_statement .)
    S_SEMI_COLON    reduce using rule 97 (statement -> procedure_statement .)
    S_RETURN        reduce using rule 97 (statement -> procedure_statement .)
    RW_IF           reduce using rule 97 (statement -> procedure_statement .)
    RW_DEPEND       reduce using rule 97 (statement -> procedure_statement .)
    RW_WHILE        reduce using rule 97 (statement -> procedure_statement .)
    RW_ITERATE      reduce using rule 97 (statement -> procedure_statement .)
    IDENTIFIER      reduce using rule 97 (statement -> procedure_statement .)
    RW_REPEAT       reduce using rule 97 (statement -> procedure_statement .)
    RW_INPUT        reduce using rule 97 (statement -> procedure_statement .)
    RW_OUTPUT       reduce using rule 97 (statement -> procedure_statement .)


state 55

    (98) statement -> function_returned_statement .

    DEDENT          reduce using rule 98 (statement -> function_returned_statement .)
    S_SEMI_COLON    reduce using rule 98 (statement -> function_returned_statement .)
    S_RETURN        reduce using rule 98 (statement -> function_returned_statement .)
    RW_IF           reduce using rule 98 (statement -> function_returned_statement .)
    RW_DEPEND       reduce using rule 98 (statement -> function_returned_statement .)
    RW_WHILE        reduce using rule 98 (statement -> function_returned_statement .)
    RW_ITERATE      reduce using rule 98 (statement -> function_returned_statement .)
    IDENTIFIER      reduce using rule 98 (statement -> function_returned_statement .)
    RW_REPEAT       reduce using rule 98 (statement -> function_returned_statement .)
    RW_INPUT        reduce using rule 98 (statement -> function_returned_statement .)
    RW_OUTPUT       reduce using rule 98 (statement -> function_returned_statement .)


state 56

    (99) statement -> if_statement .

    DEDENT          reduce using rule 99 (statement -> if_statement .)
    S_SEMI_COLON    reduce using rule 99 (statement -> if_statement .)
    S_RETURN        reduce using rule 99 (statement -> if_statement .)
    RW_IF           reduce using rule 99 (statement -> if_statement .)
    RW_DEPEND       reduce using rule 99 (statement -> if_statement .)
    RW_WHILE        reduce using rule 99 (statement -> if_statement .)
    RW_ITERATE      reduce using rule 99 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 99 (statement -> if_statement .)
    RW_REPEAT       reduce using rule 99 (statement -> if_statement .)
    RW_INPUT        reduce using rule 99 (statement -> if_statement .)
    RW_OUTPUT       reduce using rule 99 (statement -> if_statement .)


state 57

    (100) statement -> depend_on_statement .

    DEDENT          reduce using rule 100 (statement -> depend_on_statement .)
    S_SEMI_COLON    reduce using rule 100 (statement -> depend_on_statement .)
    S_RETURN        reduce using rule 100 (statement -> depend_on_statement .)
    RW_IF           reduce using rule 100 (statement -> depend_on_statement .)
    RW_DEPEND       reduce using rule 100 (statement -> depend_on_statement .)
    RW_WHILE        reduce using rule 100 (statement -> depend_on_statement .)
    RW_ITERATE      reduce using rule 100 (statement -> depend_on_statement .)
    IDENTIFIER      reduce using rule 100 (statement -> depend_on_statement .)
    RW_REPEAT       reduce using rule 100 (statement -> depend_on_statement .)
    RW_INPUT        reduce using rule 100 (statement -> depend_on_statement .)
    RW_OUTPUT       reduce using rule 100 (statement -> depend_on_statement .)


state 58

    (101) statement -> while_statement .

    DEDENT          reduce using rule 101 (statement -> while_statement .)
    S_SEMI_COLON    reduce using rule 101 (statement -> while_statement .)
    S_RETURN        reduce using rule 101 (statement -> while_statement .)
    RW_IF           reduce using rule 101 (statement -> while_statement .)
    RW_DEPEND       reduce using rule 101 (statement -> while_statement .)
    RW_WHILE        reduce using rule 101 (statement -> while_statement .)
    RW_ITERATE      reduce using rule 101 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 101 (statement -> while_statement .)
    RW_REPEAT       reduce using rule 101 (statement -> while_statement .)
    RW_INPUT        reduce using rule 101 (statement -> while_statement .)
    RW_OUTPUT       reduce using rule 101 (statement -> while_statement .)


state 59

    (102) statement -> traversal_statement .

    DEDENT          reduce using rule 102 (statement -> traversal_statement .)
    S_SEMI_COLON    reduce using rule 102 (statement -> traversal_statement .)
    S_RETURN        reduce using rule 102 (statement -> traversal_statement .)
    RW_IF           reduce using rule 102 (statement -> traversal_statement .)
    RW_DEPEND       reduce using rule 102 (statement -> traversal_statement .)
    RW_WHILE        reduce using rule 102 (statement -> traversal_statement .)
    RW_ITERATE      reduce using rule 102 (statement -> traversal_statement .)
    IDENTIFIER      reduce using rule 102 (statement -> traversal_statement .)
    RW_REPEAT       reduce using rule 102 (statement -> traversal_statement .)
    RW_INPUT        reduce using rule 102 (statement -> traversal_statement .)
    RW_OUTPUT       reduce using rule 102 (statement -> traversal_statement .)


state 60

    (103) statement -> repeat_statement .

    DEDENT          reduce using rule 103 (statement -> repeat_statement .)
    S_SEMI_COLON    reduce using rule 103 (statement -> repeat_statement .)
    S_RETURN        reduce using rule 103 (statement -> repeat_statement .)
    RW_IF           reduce using rule 103 (statement -> repeat_statement .)
    RW_DEPEND       reduce using rule 103 (statement -> repeat_statement .)
    RW_WHILE        reduce using rule 103 (statement -> repeat_statement .)
    RW_ITERATE      reduce using rule 103 (statement -> repeat_statement .)
    IDENTIFIER      reduce using rule 103 (statement -> repeat_statement .)
    RW_REPEAT       reduce using rule 103 (statement -> repeat_statement .)
    RW_INPUT        reduce using rule 103 (statement -> repeat_statement .)
    RW_OUTPUT       reduce using rule 103 (statement -> repeat_statement .)


state 61

    (104) statement -> iterate_stop_statement .

    DEDENT          reduce using rule 104 (statement -> iterate_stop_statement .)
    S_SEMI_COLON    reduce using rule 104 (statement -> iterate_stop_statement .)
    S_RETURN        reduce using rule 104 (statement -> iterate_stop_statement .)
    RW_IF           reduce using rule 104 (statement -> iterate_stop_statement .)
    RW_DEPEND       reduce using rule 104 (statement -> iterate_stop_statement .)
    RW_WHILE        reduce using rule 104 (statement -> iterate_stop_statement .)
    RW_ITERATE      reduce using rule 104 (statement -> iterate_stop_statement .)
    IDENTIFIER      reduce using rule 104 (statement -> iterate_stop_statement .)
    RW_REPEAT       reduce using rule 104 (statement -> iterate_stop_statement .)
    RW_INPUT        reduce using rule 104 (statement -> iterate_stop_statement .)
    RW_OUTPUT       reduce using rule 104 (statement -> iterate_stop_statement .)


state 62

    (105) assignment_statement -> variable_access . S_ASSIGNMENT expression
    (166) indexed_variable -> variable_access . S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> variable_access . S_DOT identifier

    S_ASSIGNMENT    shift and go to state 175
    S_LEFT_SQUARE_BRACKET shift and go to state 176
    S_DOT           shift and go to state 177


state 63

    (106) procedure_statement -> input_output_procedure_statement .

    DEDENT          reduce using rule 106 (procedure_statement -> input_output_procedure_statement .)
    S_SEMI_COLON    reduce using rule 106 (procedure_statement -> input_output_procedure_statement .)
    S_RETURN        reduce using rule 106 (procedure_statement -> input_output_procedure_statement .)
    RW_IF           reduce using rule 106 (procedure_statement -> input_output_procedure_statement .)
    RW_DEPEND       reduce using rule 106 (procedure_statement -> input_output_procedure_statement .)
    RW_WHILE        reduce using rule 106 (procedure_statement -> input_output_procedure_statement .)
    RW_ITERATE      reduce using rule 106 (procedure_statement -> input_output_procedure_statement .)
    IDENTIFIER      reduce using rule 106 (procedure_statement -> input_output_procedure_statement .)
    RW_REPEAT       reduce using rule 106 (procedure_statement -> input_output_procedure_statement .)
    RW_INPUT        reduce using rule 106 (procedure_statement -> input_output_procedure_statement .)
    RW_OUTPUT       reduce using rule 106 (procedure_statement -> input_output_procedure_statement .)


state 64

    (107) procedure_statement -> identifier . S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
    (108) procedure_statement -> identifier .
    (163) variable_access -> identifier .
    (140) control_variable -> identifier .

    S_LEFT_BRACKET  shift and go to state 178
    DEDENT          reduce using rule 108 (procedure_statement -> identifier .)
    S_SEMI_COLON    reduce using rule 108 (procedure_statement -> identifier .)
    S_RETURN        reduce using rule 108 (procedure_statement -> identifier .)
    RW_IF           reduce using rule 108 (procedure_statement -> identifier .)
    RW_DEPEND       reduce using rule 108 (procedure_statement -> identifier .)
    RW_WHILE        reduce using rule 108 (procedure_statement -> identifier .)
    RW_ITERATE      reduce using rule 108 (procedure_statement -> identifier .)
    IDENTIFIER      reduce using rule 108 (procedure_statement -> identifier .)
    RW_REPEAT       reduce using rule 108 (procedure_statement -> identifier .)
    RW_INPUT        reduce using rule 108 (procedure_statement -> identifier .)
    RW_OUTPUT       reduce using rule 108 (procedure_statement -> identifier .)
    S_ASSIGNMENT    reduce using rule 163 (variable_access -> identifier .)
    S_LEFT_SQUARE_BRACKET reduce using rule 163 (variable_access -> identifier .)
    S_DOT           reduce using rule 163 (variable_access -> identifier .)
    RW_TRAVERSAL    reduce using rule 140 (control_variable -> identifier .)


state 65

    (122) function_returned_statement -> S_RETURN . expression
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    expression                     shift and go to state 179
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 66

    (127) if_statement -> RW_IF . boolean_expression RW_THEN compound_statement
    (128) if_statement -> RW_IF . boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
    (129) boolean_expression -> . expression
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    boolean_expression             shift and go to state 200
    expression                     shift and go to state 201
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 67

    (123) depend_on_statement -> RW_DEPEND . RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT

    RW_ON           shift and go to state 202


state 68

    (136) while_statement -> RW_WHILE . boolean_expression RW_DO compound_statement
    (129) boolean_expression -> . expression
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    boolean_expression             shift and go to state 203
    expression                     shift and go to state 201
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 69

    (138) traversal_statement -> control_variable . RW_TRAVERSAL traversal_range_value compound_statement

    RW_TRAVERSAL    shift and go to state 204


state 70

    (130) repeat_statement -> repeat_until_statement .

    DEDENT          reduce using rule 130 (repeat_statement -> repeat_until_statement .)
    S_SEMI_COLON    reduce using rule 130 (repeat_statement -> repeat_until_statement .)
    S_RETURN        reduce using rule 130 (repeat_statement -> repeat_until_statement .)
    RW_IF           reduce using rule 130 (repeat_statement -> repeat_until_statement .)
    RW_DEPEND       reduce using rule 130 (repeat_statement -> repeat_until_statement .)
    RW_WHILE        reduce using rule 130 (repeat_statement -> repeat_until_statement .)
    RW_ITERATE      reduce using rule 130 (repeat_statement -> repeat_until_statement .)
    IDENTIFIER      reduce using rule 130 (repeat_statement -> repeat_until_statement .)
    RW_REPEAT       reduce using rule 130 (repeat_statement -> repeat_until_statement .)
    RW_INPUT        reduce using rule 130 (repeat_statement -> repeat_until_statement .)
    RW_OUTPUT       reduce using rule 130 (repeat_statement -> repeat_until_statement .)


state 71

    (131) repeat_statement -> repeat_times_statement .

    DEDENT          reduce using rule 131 (repeat_statement -> repeat_times_statement .)
    S_SEMI_COLON    reduce using rule 131 (repeat_statement -> repeat_times_statement .)
    S_RETURN        reduce using rule 131 (repeat_statement -> repeat_times_statement .)
    RW_IF           reduce using rule 131 (repeat_statement -> repeat_times_statement .)
    RW_DEPEND       reduce using rule 131 (repeat_statement -> repeat_times_statement .)
    RW_WHILE        reduce using rule 131 (repeat_statement -> repeat_times_statement .)
    RW_ITERATE      reduce using rule 131 (repeat_statement -> repeat_times_statement .)
    IDENTIFIER      reduce using rule 131 (repeat_statement -> repeat_times_statement .)
    RW_REPEAT       reduce using rule 131 (repeat_statement -> repeat_times_statement .)
    RW_INPUT        reduce using rule 131 (repeat_statement -> repeat_times_statement .)
    RW_OUTPUT       reduce using rule 131 (repeat_statement -> repeat_times_statement .)


state 72

    (137) iterate_stop_statement -> RW_ITERATE . compound_statement RW_STOP boolean_expression compound_statement
    (92) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 30

    compound_statement             shift and go to state 205

state 73

    (164) variable_access -> indexed_variable .

    S_ASSIGNMENT    reduce using rule 164 (variable_access -> indexed_variable .)
    S_LEFT_SQUARE_BRACKET reduce using rule 164 (variable_access -> indexed_variable .)
    S_DOT           reduce using rule 164 (variable_access -> indexed_variable .)
    S_POWER         reduce using rule 164 (variable_access -> indexed_variable .)
    S_TIMES         reduce using rule 164 (variable_access -> indexed_variable .)
    S_DIVIDE        reduce using rule 164 (variable_access -> indexed_variable .)
    RW_DIV          reduce using rule 164 (variable_access -> indexed_variable .)
    RW_MOD          reduce using rule 164 (variable_access -> indexed_variable .)
    RW_AND          reduce using rule 164 (variable_access -> indexed_variable .)
    S_PLUS          reduce using rule 164 (variable_access -> indexed_variable .)
    S_MINUS         reduce using rule 164 (variable_access -> indexed_variable .)
    RW_OR           reduce using rule 164 (variable_access -> indexed_variable .)
    RW_XOR          reduce using rule 164 (variable_access -> indexed_variable .)
    S_EQUAL         reduce using rule 164 (variable_access -> indexed_variable .)
    S_NOT_EQUAL     reduce using rule 164 (variable_access -> indexed_variable .)
    S_LESS_THAN_EQUAL reduce using rule 164 (variable_access -> indexed_variable .)
    S_GREATER_THAN_EQUAL reduce using rule 164 (variable_access -> indexed_variable .)
    S_LESS_THAN     reduce using rule 164 (variable_access -> indexed_variable .)
    S_GREATER_THAN  reduce using rule 164 (variable_access -> indexed_variable .)
    S_ELEMENT_OF    reduce using rule 164 (variable_access -> indexed_variable .)
    RW_EQ           reduce using rule 164 (variable_access -> indexed_variable .)
    RW_NEQ          reduce using rule 164 (variable_access -> indexed_variable .)
    DEDENT          reduce using rule 164 (variable_access -> indexed_variable .)
    S_SEMI_COLON    reduce using rule 164 (variable_access -> indexed_variable .)
    S_RETURN        reduce using rule 164 (variable_access -> indexed_variable .)
    RW_IF           reduce using rule 164 (variable_access -> indexed_variable .)
    RW_DEPEND       reduce using rule 164 (variable_access -> indexed_variable .)
    RW_WHILE        reduce using rule 164 (variable_access -> indexed_variable .)
    RW_ITERATE      reduce using rule 164 (variable_access -> indexed_variable .)
    IDENTIFIER      reduce using rule 164 (variable_access -> indexed_variable .)
    RW_REPEAT       reduce using rule 164 (variable_access -> indexed_variable .)
    RW_INPUT        reduce using rule 164 (variable_access -> indexed_variable .)
    RW_OUTPUT       reduce using rule 164 (variable_access -> indexed_variable .)
    RW_THEN         reduce using rule 164 (variable_access -> indexed_variable .)
    RW_DO           reduce using rule 164 (variable_access -> indexed_variable .)
    RW_TIMES        reduce using rule 164 (variable_access -> indexed_variable .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 164 (variable_access -> indexed_variable .)
    S_COMMA         reduce using rule 164 (variable_access -> indexed_variable .)
    S_RIGHT_BRACKET reduce using rule 164 (variable_access -> indexed_variable .)
    S_UP_TO         reduce using rule 164 (variable_access -> indexed_variable .)
    INDENT          reduce using rule 164 (variable_access -> indexed_variable .)
    S_COLON         reduce using rule 164 (variable_access -> indexed_variable .)


state 74

    (165) variable_access -> field_designator .

    S_ASSIGNMENT    reduce using rule 165 (variable_access -> field_designator .)
    S_LEFT_SQUARE_BRACKET reduce using rule 165 (variable_access -> field_designator .)
    S_DOT           reduce using rule 165 (variable_access -> field_designator .)
    S_POWER         reduce using rule 165 (variable_access -> field_designator .)
    S_TIMES         reduce using rule 165 (variable_access -> field_designator .)
    S_DIVIDE        reduce using rule 165 (variable_access -> field_designator .)
    RW_DIV          reduce using rule 165 (variable_access -> field_designator .)
    RW_MOD          reduce using rule 165 (variable_access -> field_designator .)
    RW_AND          reduce using rule 165 (variable_access -> field_designator .)
    S_PLUS          reduce using rule 165 (variable_access -> field_designator .)
    S_MINUS         reduce using rule 165 (variable_access -> field_designator .)
    RW_OR           reduce using rule 165 (variable_access -> field_designator .)
    RW_XOR          reduce using rule 165 (variable_access -> field_designator .)
    S_EQUAL         reduce using rule 165 (variable_access -> field_designator .)
    S_NOT_EQUAL     reduce using rule 165 (variable_access -> field_designator .)
    S_LESS_THAN_EQUAL reduce using rule 165 (variable_access -> field_designator .)
    S_GREATER_THAN_EQUAL reduce using rule 165 (variable_access -> field_designator .)
    S_LESS_THAN     reduce using rule 165 (variable_access -> field_designator .)
    S_GREATER_THAN  reduce using rule 165 (variable_access -> field_designator .)
    S_ELEMENT_OF    reduce using rule 165 (variable_access -> field_designator .)
    RW_EQ           reduce using rule 165 (variable_access -> field_designator .)
    RW_NEQ          reduce using rule 165 (variable_access -> field_designator .)
    DEDENT          reduce using rule 165 (variable_access -> field_designator .)
    S_SEMI_COLON    reduce using rule 165 (variable_access -> field_designator .)
    S_RETURN        reduce using rule 165 (variable_access -> field_designator .)
    RW_IF           reduce using rule 165 (variable_access -> field_designator .)
    RW_DEPEND       reduce using rule 165 (variable_access -> field_designator .)
    RW_WHILE        reduce using rule 165 (variable_access -> field_designator .)
    RW_ITERATE      reduce using rule 165 (variable_access -> field_designator .)
    IDENTIFIER      reduce using rule 165 (variable_access -> field_designator .)
    RW_REPEAT       reduce using rule 165 (variable_access -> field_designator .)
    RW_INPUT        reduce using rule 165 (variable_access -> field_designator .)
    RW_OUTPUT       reduce using rule 165 (variable_access -> field_designator .)
    RW_THEN         reduce using rule 165 (variable_access -> field_designator .)
    RW_DO           reduce using rule 165 (variable_access -> field_designator .)
    RW_TIMES        reduce using rule 165 (variable_access -> field_designator .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 165 (variable_access -> field_designator .)
    S_COMMA         reduce using rule 165 (variable_access -> field_designator .)
    S_RIGHT_BRACKET reduce using rule 165 (variable_access -> field_designator .)
    S_UP_TO         reduce using rule 165 (variable_access -> field_designator .)
    INDENT          reduce using rule 165 (variable_access -> field_designator .)
    S_COLON         reduce using rule 165 (variable_access -> field_designator .)


state 75

    (112) input_output_procedure_statement -> input_statement .

    DEDENT          reduce using rule 112 (input_output_procedure_statement -> input_statement .)
    S_SEMI_COLON    reduce using rule 112 (input_output_procedure_statement -> input_statement .)
    S_RETURN        reduce using rule 112 (input_output_procedure_statement -> input_statement .)
    RW_IF           reduce using rule 112 (input_output_procedure_statement -> input_statement .)
    RW_DEPEND       reduce using rule 112 (input_output_procedure_statement -> input_statement .)
    RW_WHILE        reduce using rule 112 (input_output_procedure_statement -> input_statement .)
    RW_ITERATE      reduce using rule 112 (input_output_procedure_statement -> input_statement .)
    IDENTIFIER      reduce using rule 112 (input_output_procedure_statement -> input_statement .)
    RW_REPEAT       reduce using rule 112 (input_output_procedure_statement -> input_statement .)
    RW_INPUT        reduce using rule 112 (input_output_procedure_statement -> input_statement .)
    RW_OUTPUT       reduce using rule 112 (input_output_procedure_statement -> input_statement .)


state 76

    (113) input_output_procedure_statement -> output_statement .

    DEDENT          reduce using rule 113 (input_output_procedure_statement -> output_statement .)
    S_SEMI_COLON    reduce using rule 113 (input_output_procedure_statement -> output_statement .)
    S_RETURN        reduce using rule 113 (input_output_procedure_statement -> output_statement .)
    RW_IF           reduce using rule 113 (input_output_procedure_statement -> output_statement .)
    RW_DEPEND       reduce using rule 113 (input_output_procedure_statement -> output_statement .)
    RW_WHILE        reduce using rule 113 (input_output_procedure_statement -> output_statement .)
    RW_ITERATE      reduce using rule 113 (input_output_procedure_statement -> output_statement .)
    IDENTIFIER      reduce using rule 113 (input_output_procedure_statement -> output_statement .)
    RW_REPEAT       reduce using rule 113 (input_output_procedure_statement -> output_statement .)
    RW_INPUT        reduce using rule 113 (input_output_procedure_statement -> output_statement .)
    RW_OUTPUT       reduce using rule 113 (input_output_procedure_statement -> output_statement .)


state 77

    (132) repeat_until_statement -> RW_REPEAT . compound_statement RW_UNTIL boolean_expression
    (133) repeat_times_statement -> RW_REPEAT . variable_access RW_TIMES compound_statement
    (134) repeat_times_statement -> RW_REPEAT . integer_constant RW_TIMES compound_statement
    (135) repeat_times_statement -> RW_REPEAT . function_designator RW_TIMES compound_statement
    (92) compound_statement -> . INDENT statement_sequence DEDENT
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (156) integer_constant -> . L_INTEGER_NUMBER
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    INDENT          shift and go to state 30
    L_INTEGER_NUMBER shift and go to state 156
    IDENTIFIER      shift and go to state 5
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    compound_statement             shift and go to state 206
    variable_access                shift and go to state 207
    integer_constant               shift and go to state 208
    function_designator            shift and go to state 209
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 78

    (114) input_statement -> RW_INPUT . S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 210


state 79

    (118) output_statement -> RW_OUTPUT . S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 211


state 80

    (5) block -> RW_KAMUS INDENT constant_declaration_block type_declaration_block variable_declaration_block . procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (13) procedure_and_function_declaration_block -> . DEDENT
    (14) procedure_and_function_declaration_block -> . procedure_and_function_declaration DEDENT
    (65) procedure_and_function_declaration -> . procedure_and_function_declaration procedure_and_function_sub_declaration
    (66) procedure_and_function_declaration -> . procedure_and_function_sub_declaration
    (67) procedure_and_function_sub_declaration -> . procedure_declaration
    (68) procedure_and_function_sub_declaration -> . function_declaration
    (69) procedure_declaration -> . procedure_identifier formal_parameter_list
    (80) function_declaration -> . function_identification function_formal_parameter_list function_return_type
    (81) function_declaration -> . function_identification function_return_type
    (70) procedure_identifier -> . RW_PROCEDURE identifier
    (82) function_identification -> . RW_FUNCTION identifier

    DEDENT          shift and go to state 213
    RW_PROCEDURE    shift and go to state 26
    RW_FUNCTION     shift and go to state 27

    procedure_and_function_declaration_block shift and go to state 212
    procedure_and_function_declaration shift and go to state 214
    procedure_and_function_sub_declaration shift and go to state 215
    procedure_declaration          shift and go to state 216
    function_declaration           shift and go to state 217
    procedure_identifier           shift and go to state 24
    function_identification        shift and go to state 25

state 81

    (11) variable_declaration_block -> empty .

    DEDENT          reduce using rule 11 (variable_declaration_block -> empty .)
    RW_PROCEDURE    reduce using rule 11 (variable_declaration_block -> empty .)
    RW_FUNCTION     reduce using rule 11 (variable_declaration_block -> empty .)


state 82

    (12) variable_declaration_block -> variable_declaration .
    (51) variable_declaration -> variable_declaration . variable_sub_declaration
    (53) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (3) identifier_list -> . identifier_list S_COMMA identifier
    (4) identifier_list -> . identifier
    (246) identifier -> . IDENTIFIER

    DEDENT          reduce using rule 12 (variable_declaration_block -> variable_declaration .)
    RW_PROCEDURE    reduce using rule 12 (variable_declaration_block -> variable_declaration .)
    RW_FUNCTION     reduce using rule 12 (variable_declaration_block -> variable_declaration .)
    IDENTIFIER      shift and go to state 5

    variable_sub_declaration       shift and go to state 218
    identifier_list                shift and go to state 84
    identifier                     shift and go to state 85

state 83

    (52) variable_declaration -> variable_sub_declaration .

    IDENTIFIER      reduce using rule 52 (variable_declaration -> variable_sub_declaration .)
    DEDENT          reduce using rule 52 (variable_declaration -> variable_sub_declaration .)
    RW_PROCEDURE    reduce using rule 52 (variable_declaration -> variable_sub_declaration .)
    RW_FUNCTION     reduce using rule 52 (variable_declaration -> variable_sub_declaration .)


state 84

    (53) variable_sub_declaration -> identifier_list . S_COLON type_denoter
    (3) identifier_list -> identifier_list . S_COMMA identifier

    S_COLON         shift and go to state 219
    S_COMMA         shift and go to state 220


state 85

    (4) identifier_list -> identifier .

    S_COLON         reduce using rule 4 (identifier_list -> identifier .)
    S_COMMA         reduce using rule 4 (identifier_list -> identifier .)
    S_RIGHT_BRACKET reduce using rule 4 (identifier_list -> identifier .)


state 86

    (59) type_declaration -> type_declaration type_sub_declaration .

    RW_TYPE         reduce using rule 59 (type_declaration -> type_declaration type_sub_declaration .)
    IDENTIFIER      reduce using rule 59 (type_declaration -> type_declaration type_sub_declaration .)
    DEDENT          reduce using rule 59 (type_declaration -> type_declaration type_sub_declaration .)
    RW_PROCEDURE    reduce using rule 59 (type_declaration -> type_declaration type_sub_declaration .)
    RW_FUNCTION     reduce using rule 59 (type_declaration -> type_declaration type_sub_declaration .)


state 87

    (61) type_sub_declaration -> RW_TYPE identifier . S_COLON type_variety

    S_COLON         shift and go to state 221


state 88

    (58) constant_sub_declaration -> RW_CONSTANT identifier S_COLON . type_denoter S_EQUAL constant
    (28) type_denoter -> . ordinal_type
    (29) type_denoter -> . structured_type
    (30) type_denoter -> . RW_INTEGER
    (31) type_denoter -> . RW_REAL
    (32) type_denoter -> . RW_STRING
    (33) type_denoter -> . RW_CHARACTER
    (34) type_denoter -> . RW_BOOLEAN
    (35) ordinal_type -> . enumerated_type
    (36) ordinal_type -> . subrange_type
    (37) ordinal_type -> . identifier
    (44) structured_type -> . array_type
    (38) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (39) subrange_type -> . subrange_type_option
    (246) identifier -> . IDENTIFIER
    (45) array_type -> . RW_ARRAY array_index RW_OF component_type
    (40) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (41) subrange_option -> . identifier
    (42) subrange_option -> . constant
    (43) subrange_option -> . function_designator
    (145) constant -> . string_char_constant
    (146) constant -> . non_string_constant
    (147) constant -> . sign non_string_constant
    (148) constant -> . boolean_constant
    (149) constant -> . nil_constant
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (150) sign -> . S_PLUS
    (151) sign -> . S_MINUS
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    RW_INTEGER      shift and go to state 107
    RW_REAL         shift and go to state 108
    RW_STRING       shift and go to state 109
    RW_CHARACTER    shift and go to state 110
    RW_BOOLEAN      shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 116
    IDENTIFIER      shift and go to state 5
    RW_ARRAY        shift and go to state 118
    S_PLUS          shift and go to state 135
    S_MINUS         shift and go to state 136
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    identifier                     shift and go to state 114
    type_denoter                   shift and go to state 222
    constant                       shift and go to state 120
    ordinal_type                   shift and go to state 105
    structured_type                shift and go to state 106
    enumerated_type                shift and go to state 112
    subrange_type                  shift and go to state 113
    array_type                     shift and go to state 115
    subrange_type_option           shift and go to state 117
    subrange_option                shift and go to state 119
    function_designator            shift and go to state 121
    string_char_constant           shift and go to state 122
    non_string_constant            shift and go to state 123
    sign                           shift and go to state 124
    boolean_constant               shift and go to state 125
    nil_constant                   shift and go to state 126
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 89

    (23) procedure_implementation_block -> RW_KAMUS RW_LOKAL . INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
    (24) procedure_implementation_block -> RW_KAMUS RW_LOKAL . algorithm_block
    (15) algorithm_block -> . RW_ALGORITMA statement_part

    INDENT          shift and go to state 223
    RW_ALGORITMA    shift and go to state 10

    algorithm_block                shift and go to state 224

state 90

    (26) function_implementation_block -> RW_KAMUS RW_LOKAL . INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
    (27) function_implementation_block -> RW_KAMUS RW_LOKAL . algorithm_block
    (15) algorithm_block -> . RW_ALGORITMA statement_part

    INDENT          shift and go to state 225
    RW_ALGORITMA    shift and go to state 10

    algorithm_block                shift and go to state 226

state 91

    (71) formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list . S_RIGHT_BRACKET

    S_RIGHT_BRACKET shift and go to state 227


state 92

    (72) formal_parameter_section_list -> empty .

    S_RIGHT_BRACKET reduce using rule 72 (formal_parameter_section_list -> empty .)


state 93

    (73) formal_parameter_section_list -> formal_parameter_section .
    (74) formal_parameter_section -> formal_parameter_section . S_SEMI_COLON parameter_specification

    S_RIGHT_BRACKET reduce using rule 73 (formal_parameter_section_list -> formal_parameter_section .)
    S_SEMI_COLON    shift and go to state 228


state 94

    (75) formal_parameter_section -> parameter_specification .

    S_SEMI_COLON    reduce using rule 75 (formal_parameter_section -> parameter_specification .)
    S_RIGHT_BRACKET reduce using rule 75 (formal_parameter_section -> parameter_specification .)


state 95

    (76) parameter_specification -> procedure_parameter_type . variable_sub_declaration
    (53) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (3) identifier_list -> . identifier_list S_COMMA identifier
    (4) identifier_list -> . identifier
    (246) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 5

    variable_sub_declaration       shift and go to state 229
    identifier_list                shift and go to state 84
    identifier                     shift and go to state 85

state 96

    (77) procedure_parameter_type -> RW_INPUT .
    (79) procedure_parameter_type -> RW_INPUT . S_DIVIDE RW_OUTPUT

    IDENTIFIER      reduce using rule 77 (procedure_parameter_type -> RW_INPUT .)
    S_DIVIDE        shift and go to state 230


state 97

    (78) procedure_parameter_type -> RW_OUTPUT .

    IDENTIFIER      reduce using rule 78 (procedure_parameter_type -> RW_OUTPUT .)


state 98

    (80) function_declaration -> function_identification function_formal_parameter_list function_return_type .

    RW_KAMUS        reduce using rule 80 (function_declaration -> function_identification function_formal_parameter_list function_return_type .)
    DEDENT          reduce using rule 80 (function_declaration -> function_identification function_formal_parameter_list function_return_type .)
    RW_PROCEDURE    reduce using rule 80 (function_declaration -> function_identification function_formal_parameter_list function_return_type .)
    RW_FUNCTION     reduce using rule 80 (function_declaration -> function_identification function_formal_parameter_list function_return_type .)


state 99

    (84) function_formal_parameter_list -> S_LEFT_BRACKET function_parameter_list_option . S_RIGHT_BRACKET

    S_RIGHT_BRACKET shift and go to state 231


state 100

    (86) function_parameter_list_option -> function_parameter_list .
    (88) function_parameter_list -> function_parameter_list . S_SEMI_COLON function_parameter_declaration

    S_RIGHT_BRACKET reduce using rule 86 (function_parameter_list_option -> function_parameter_list .)
    S_SEMI_COLON    shift and go to state 232


state 101

    (87) function_parameter_list_option -> empty .

    S_RIGHT_BRACKET reduce using rule 87 (function_parameter_list_option -> empty .)


state 102

    (89) function_parameter_list -> function_parameter_declaration .

    S_SEMI_COLON    reduce using rule 89 (function_parameter_list -> function_parameter_declaration .)
    S_RIGHT_BRACKET reduce using rule 89 (function_parameter_list -> function_parameter_declaration .)


state 103

    (90) function_parameter_declaration -> variable_sub_declaration .

    S_SEMI_COLON    reduce using rule 90 (function_parameter_declaration -> variable_sub_declaration .)
    S_RIGHT_BRACKET reduce using rule 90 (function_parameter_declaration -> variable_sub_declaration .)


state 104

    (83) function_return_type -> S_RETURN type_denoter .

    RW_KAMUS        reduce using rule 83 (function_return_type -> S_RETURN type_denoter .)
    DEDENT          reduce using rule 83 (function_return_type -> S_RETURN type_denoter .)
    RW_PROCEDURE    reduce using rule 83 (function_return_type -> S_RETURN type_denoter .)
    RW_FUNCTION     reduce using rule 83 (function_return_type -> S_RETURN type_denoter .)


state 105

    (28) type_denoter -> ordinal_type .

    RW_KAMUS        reduce using rule 28 (type_denoter -> ordinal_type .)
    DEDENT          reduce using rule 28 (type_denoter -> ordinal_type .)
    RW_PROCEDURE    reduce using rule 28 (type_denoter -> ordinal_type .)
    RW_FUNCTION     reduce using rule 28 (type_denoter -> ordinal_type .)
    S_EQUAL         reduce using rule 28 (type_denoter -> ordinal_type .)
    IDENTIFIER      reduce using rule 28 (type_denoter -> ordinal_type .)
    S_SEMI_COLON    reduce using rule 28 (type_denoter -> ordinal_type .)
    S_RIGHT_BRACKET reduce using rule 28 (type_denoter -> ordinal_type .)
    S_COMMA         reduce using rule 28 (type_denoter -> ordinal_type .)
    S_GREATER_THAN  reduce using rule 28 (type_denoter -> ordinal_type .)
    RW_TYPE         reduce using rule 28 (type_denoter -> ordinal_type .)


state 106

    (29) type_denoter -> structured_type .

    RW_KAMUS        reduce using rule 29 (type_denoter -> structured_type .)
    DEDENT          reduce using rule 29 (type_denoter -> structured_type .)
    RW_PROCEDURE    reduce using rule 29 (type_denoter -> structured_type .)
    RW_FUNCTION     reduce using rule 29 (type_denoter -> structured_type .)
    S_EQUAL         reduce using rule 29 (type_denoter -> structured_type .)
    IDENTIFIER      reduce using rule 29 (type_denoter -> structured_type .)
    S_SEMI_COLON    reduce using rule 29 (type_denoter -> structured_type .)
    S_RIGHT_BRACKET reduce using rule 29 (type_denoter -> structured_type .)
    S_COMMA         reduce using rule 29 (type_denoter -> structured_type .)
    S_GREATER_THAN  reduce using rule 29 (type_denoter -> structured_type .)
    RW_TYPE         reduce using rule 29 (type_denoter -> structured_type .)


state 107

    (30) type_denoter -> RW_INTEGER .

    RW_KAMUS        reduce using rule 30 (type_denoter -> RW_INTEGER .)
    DEDENT          reduce using rule 30 (type_denoter -> RW_INTEGER .)
    RW_PROCEDURE    reduce using rule 30 (type_denoter -> RW_INTEGER .)
    RW_FUNCTION     reduce using rule 30 (type_denoter -> RW_INTEGER .)
    S_EQUAL         reduce using rule 30 (type_denoter -> RW_INTEGER .)
    IDENTIFIER      reduce using rule 30 (type_denoter -> RW_INTEGER .)
    S_SEMI_COLON    reduce using rule 30 (type_denoter -> RW_INTEGER .)
    S_RIGHT_BRACKET reduce using rule 30 (type_denoter -> RW_INTEGER .)
    S_COMMA         reduce using rule 30 (type_denoter -> RW_INTEGER .)
    S_GREATER_THAN  reduce using rule 30 (type_denoter -> RW_INTEGER .)
    RW_TYPE         reduce using rule 30 (type_denoter -> RW_INTEGER .)


state 108

    (31) type_denoter -> RW_REAL .

    RW_KAMUS        reduce using rule 31 (type_denoter -> RW_REAL .)
    DEDENT          reduce using rule 31 (type_denoter -> RW_REAL .)
    RW_PROCEDURE    reduce using rule 31 (type_denoter -> RW_REAL .)
    RW_FUNCTION     reduce using rule 31 (type_denoter -> RW_REAL .)
    S_EQUAL         reduce using rule 31 (type_denoter -> RW_REAL .)
    IDENTIFIER      reduce using rule 31 (type_denoter -> RW_REAL .)
    S_SEMI_COLON    reduce using rule 31 (type_denoter -> RW_REAL .)
    S_RIGHT_BRACKET reduce using rule 31 (type_denoter -> RW_REAL .)
    S_COMMA         reduce using rule 31 (type_denoter -> RW_REAL .)
    S_GREATER_THAN  reduce using rule 31 (type_denoter -> RW_REAL .)
    RW_TYPE         reduce using rule 31 (type_denoter -> RW_REAL .)


state 109

    (32) type_denoter -> RW_STRING .

    RW_KAMUS        reduce using rule 32 (type_denoter -> RW_STRING .)
    DEDENT          reduce using rule 32 (type_denoter -> RW_STRING .)
    RW_PROCEDURE    reduce using rule 32 (type_denoter -> RW_STRING .)
    RW_FUNCTION     reduce using rule 32 (type_denoter -> RW_STRING .)
    S_EQUAL         reduce using rule 32 (type_denoter -> RW_STRING .)
    IDENTIFIER      reduce using rule 32 (type_denoter -> RW_STRING .)
    S_SEMI_COLON    reduce using rule 32 (type_denoter -> RW_STRING .)
    S_RIGHT_BRACKET reduce using rule 32 (type_denoter -> RW_STRING .)
    S_COMMA         reduce using rule 32 (type_denoter -> RW_STRING .)
    S_GREATER_THAN  reduce using rule 32 (type_denoter -> RW_STRING .)
    RW_TYPE         reduce using rule 32 (type_denoter -> RW_STRING .)


state 110

    (33) type_denoter -> RW_CHARACTER .

    RW_KAMUS        reduce using rule 33 (type_denoter -> RW_CHARACTER .)
    DEDENT          reduce using rule 33 (type_denoter -> RW_CHARACTER .)
    RW_PROCEDURE    reduce using rule 33 (type_denoter -> RW_CHARACTER .)
    RW_FUNCTION     reduce using rule 33 (type_denoter -> RW_CHARACTER .)
    S_EQUAL         reduce using rule 33 (type_denoter -> RW_CHARACTER .)
    IDENTIFIER      reduce using rule 33 (type_denoter -> RW_CHARACTER .)
    S_SEMI_COLON    reduce using rule 33 (type_denoter -> RW_CHARACTER .)
    S_RIGHT_BRACKET reduce using rule 33 (type_denoter -> RW_CHARACTER .)
    S_COMMA         reduce using rule 33 (type_denoter -> RW_CHARACTER .)
    S_GREATER_THAN  reduce using rule 33 (type_denoter -> RW_CHARACTER .)
    RW_TYPE         reduce using rule 33 (type_denoter -> RW_CHARACTER .)


state 111

    (34) type_denoter -> RW_BOOLEAN .

    RW_KAMUS        reduce using rule 34 (type_denoter -> RW_BOOLEAN .)
    DEDENT          reduce using rule 34 (type_denoter -> RW_BOOLEAN .)
    RW_PROCEDURE    reduce using rule 34 (type_denoter -> RW_BOOLEAN .)
    RW_FUNCTION     reduce using rule 34 (type_denoter -> RW_BOOLEAN .)
    S_EQUAL         reduce using rule 34 (type_denoter -> RW_BOOLEAN .)
    IDENTIFIER      reduce using rule 34 (type_denoter -> RW_BOOLEAN .)
    S_SEMI_COLON    reduce using rule 34 (type_denoter -> RW_BOOLEAN .)
    S_RIGHT_BRACKET reduce using rule 34 (type_denoter -> RW_BOOLEAN .)
    S_COMMA         reduce using rule 34 (type_denoter -> RW_BOOLEAN .)
    S_GREATER_THAN  reduce using rule 34 (type_denoter -> RW_BOOLEAN .)
    RW_TYPE         reduce using rule 34 (type_denoter -> RW_BOOLEAN .)


state 112

    (35) ordinal_type -> enumerated_type .

    RW_KAMUS        reduce using rule 35 (ordinal_type -> enumerated_type .)
    DEDENT          reduce using rule 35 (ordinal_type -> enumerated_type .)
    RW_PROCEDURE    reduce using rule 35 (ordinal_type -> enumerated_type .)
    RW_FUNCTION     reduce using rule 35 (ordinal_type -> enumerated_type .)
    S_EQUAL         reduce using rule 35 (ordinal_type -> enumerated_type .)
    IDENTIFIER      reduce using rule 35 (ordinal_type -> enumerated_type .)
    S_SEMI_COLON    reduce using rule 35 (ordinal_type -> enumerated_type .)
    S_RIGHT_BRACKET reduce using rule 35 (ordinal_type -> enumerated_type .)
    S_COMMA         reduce using rule 35 (ordinal_type -> enumerated_type .)
    S_GREATER_THAN  reduce using rule 35 (ordinal_type -> enumerated_type .)
    RW_TYPE         reduce using rule 35 (ordinal_type -> enumerated_type .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 35 (ordinal_type -> enumerated_type .)


state 113

    (36) ordinal_type -> subrange_type .

    RW_KAMUS        reduce using rule 36 (ordinal_type -> subrange_type .)
    DEDENT          reduce using rule 36 (ordinal_type -> subrange_type .)
    RW_PROCEDURE    reduce using rule 36 (ordinal_type -> subrange_type .)
    RW_FUNCTION     reduce using rule 36 (ordinal_type -> subrange_type .)
    S_EQUAL         reduce using rule 36 (ordinal_type -> subrange_type .)
    IDENTIFIER      reduce using rule 36 (ordinal_type -> subrange_type .)
    S_SEMI_COLON    reduce using rule 36 (ordinal_type -> subrange_type .)
    S_RIGHT_BRACKET reduce using rule 36 (ordinal_type -> subrange_type .)
    S_COMMA         reduce using rule 36 (ordinal_type -> subrange_type .)
    S_GREATER_THAN  reduce using rule 36 (ordinal_type -> subrange_type .)
    RW_TYPE         reduce using rule 36 (ordinal_type -> subrange_type .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 36 (ordinal_type -> subrange_type .)


state 114

    (37) ordinal_type -> identifier .
    (41) subrange_option -> identifier .
    (216) user_defined_function_call -> identifier . function_actual_parameter_list
    (85) function_actual_parameter_list -> . S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET

    RW_KAMUS        reduce using rule 37 (ordinal_type -> identifier .)
    DEDENT          reduce using rule 37 (ordinal_type -> identifier .)
    RW_PROCEDURE    reduce using rule 37 (ordinal_type -> identifier .)
    RW_FUNCTION     reduce using rule 37 (ordinal_type -> identifier .)
    S_EQUAL         reduce using rule 37 (ordinal_type -> identifier .)
    IDENTIFIER      reduce using rule 37 (ordinal_type -> identifier .)
    S_SEMI_COLON    reduce using rule 37 (ordinal_type -> identifier .)
    S_RIGHT_BRACKET reduce using rule 37 (ordinal_type -> identifier .)
    S_COMMA         reduce using rule 37 (ordinal_type -> identifier .)
    S_GREATER_THAN  reduce using rule 37 (ordinal_type -> identifier .)
    RW_TYPE         reduce using rule 37 (ordinal_type -> identifier .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 37 (ordinal_type -> identifier .)
    S_UP_TO         reduce using rule 41 (subrange_option -> identifier .)
    S_LEFT_BRACKET  shift and go to state 234

    function_actual_parameter_list shift and go to state 233

state 115

    (44) structured_type -> array_type .

    RW_KAMUS        reduce using rule 44 (structured_type -> array_type .)
    DEDENT          reduce using rule 44 (structured_type -> array_type .)
    RW_PROCEDURE    reduce using rule 44 (structured_type -> array_type .)
    RW_FUNCTION     reduce using rule 44 (structured_type -> array_type .)
    S_EQUAL         reduce using rule 44 (structured_type -> array_type .)
    IDENTIFIER      reduce using rule 44 (structured_type -> array_type .)
    S_SEMI_COLON    reduce using rule 44 (structured_type -> array_type .)
    S_RIGHT_BRACKET reduce using rule 44 (structured_type -> array_type .)
    S_COMMA         reduce using rule 44 (structured_type -> array_type .)
    S_GREATER_THAN  reduce using rule 44 (structured_type -> array_type .)
    RW_TYPE         reduce using rule 44 (structured_type -> array_type .)


state 116

    (38) enumerated_type -> S_LEFT_BRACKET . identifier_list S_RIGHT_BRACKET
    (3) identifier_list -> . identifier_list S_COMMA identifier
    (4) identifier_list -> . identifier
    (246) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 5

    identifier_list                shift and go to state 235
    identifier                     shift and go to state 85

state 117

    (39) subrange_type -> subrange_type_option .

    RW_KAMUS        reduce using rule 39 (subrange_type -> subrange_type_option .)
    DEDENT          reduce using rule 39 (subrange_type -> subrange_type_option .)
    RW_PROCEDURE    reduce using rule 39 (subrange_type -> subrange_type_option .)
    RW_FUNCTION     reduce using rule 39 (subrange_type -> subrange_type_option .)
    S_EQUAL         reduce using rule 39 (subrange_type -> subrange_type_option .)
    IDENTIFIER      reduce using rule 39 (subrange_type -> subrange_type_option .)
    S_SEMI_COLON    reduce using rule 39 (subrange_type -> subrange_type_option .)
    S_RIGHT_BRACKET reduce using rule 39 (subrange_type -> subrange_type_option .)
    S_COMMA         reduce using rule 39 (subrange_type -> subrange_type_option .)
    S_GREATER_THAN  reduce using rule 39 (subrange_type -> subrange_type_option .)
    RW_TYPE         reduce using rule 39 (subrange_type -> subrange_type_option .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 39 (subrange_type -> subrange_type_option .)


state 118

    (45) array_type -> RW_ARRAY . array_index RW_OF component_type
    (46) array_index -> . S_LEFT_SQUARE_BRACKET index_list S_RIGHT_SQUARE_BRACKET

    S_LEFT_SQUARE_BRACKET shift and go to state 237

    array_index                    shift and go to state 236

state 119

    (40) subrange_type_option -> subrange_option . S_UP_TO subrange_option

    S_UP_TO         shift and go to state 238


state 120

    (42) subrange_option -> constant .

    S_UP_TO         reduce using rule 42 (subrange_option -> constant .)
    RW_KAMUS        reduce using rule 42 (subrange_option -> constant .)
    DEDENT          reduce using rule 42 (subrange_option -> constant .)
    RW_PROCEDURE    reduce using rule 42 (subrange_option -> constant .)
    RW_FUNCTION     reduce using rule 42 (subrange_option -> constant .)
    S_EQUAL         reduce using rule 42 (subrange_option -> constant .)
    IDENTIFIER      reduce using rule 42 (subrange_option -> constant .)
    S_SEMI_COLON    reduce using rule 42 (subrange_option -> constant .)
    S_RIGHT_BRACKET reduce using rule 42 (subrange_option -> constant .)
    S_COMMA         reduce using rule 42 (subrange_option -> constant .)
    S_GREATER_THAN  reduce using rule 42 (subrange_option -> constant .)
    RW_TYPE         reduce using rule 42 (subrange_option -> constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 42 (subrange_option -> constant .)


state 121

    (43) subrange_option -> function_designator .

    S_UP_TO         reduce using rule 43 (subrange_option -> function_designator .)
    RW_KAMUS        reduce using rule 43 (subrange_option -> function_designator .)
    DEDENT          reduce using rule 43 (subrange_option -> function_designator .)
    RW_PROCEDURE    reduce using rule 43 (subrange_option -> function_designator .)
    RW_FUNCTION     reduce using rule 43 (subrange_option -> function_designator .)
    S_EQUAL         reduce using rule 43 (subrange_option -> function_designator .)
    IDENTIFIER      reduce using rule 43 (subrange_option -> function_designator .)
    S_SEMI_COLON    reduce using rule 43 (subrange_option -> function_designator .)
    S_RIGHT_BRACKET reduce using rule 43 (subrange_option -> function_designator .)
    S_COMMA         reduce using rule 43 (subrange_option -> function_designator .)
    S_GREATER_THAN  reduce using rule 43 (subrange_option -> function_designator .)
    RW_TYPE         reduce using rule 43 (subrange_option -> function_designator .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 43 (subrange_option -> function_designator .)


state 122

    (145) constant -> string_char_constant .

    S_UP_TO         reduce using rule 145 (constant -> string_char_constant .)
    RW_KAMUS        reduce using rule 145 (constant -> string_char_constant .)
    DEDENT          reduce using rule 145 (constant -> string_char_constant .)
    RW_PROCEDURE    reduce using rule 145 (constant -> string_char_constant .)
    RW_FUNCTION     reduce using rule 145 (constant -> string_char_constant .)
    S_EQUAL         reduce using rule 145 (constant -> string_char_constant .)
    IDENTIFIER      reduce using rule 145 (constant -> string_char_constant .)
    S_SEMI_COLON    reduce using rule 145 (constant -> string_char_constant .)
    S_RIGHT_BRACKET reduce using rule 145 (constant -> string_char_constant .)
    S_COMMA         reduce using rule 145 (constant -> string_char_constant .)
    S_GREATER_THAN  reduce using rule 145 (constant -> string_char_constant .)
    RW_TYPE         reduce using rule 145 (constant -> string_char_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 145 (constant -> string_char_constant .)
    RW_CONSTANT     reduce using rule 145 (constant -> string_char_constant .)


state 123

    (146) constant -> non_string_constant .

    S_UP_TO         reduce using rule 146 (constant -> non_string_constant .)
    RW_KAMUS        reduce using rule 146 (constant -> non_string_constant .)
    DEDENT          reduce using rule 146 (constant -> non_string_constant .)
    RW_PROCEDURE    reduce using rule 146 (constant -> non_string_constant .)
    RW_FUNCTION     reduce using rule 146 (constant -> non_string_constant .)
    S_EQUAL         reduce using rule 146 (constant -> non_string_constant .)
    IDENTIFIER      reduce using rule 146 (constant -> non_string_constant .)
    S_SEMI_COLON    reduce using rule 146 (constant -> non_string_constant .)
    S_RIGHT_BRACKET reduce using rule 146 (constant -> non_string_constant .)
    S_COMMA         reduce using rule 146 (constant -> non_string_constant .)
    S_GREATER_THAN  reduce using rule 146 (constant -> non_string_constant .)
    RW_TYPE         reduce using rule 146 (constant -> non_string_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 146 (constant -> non_string_constant .)
    RW_CONSTANT     reduce using rule 146 (constant -> non_string_constant .)


state 124

    (147) constant -> sign . non_string_constant
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER

    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157

    non_string_constant            shift and go to state 239
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134

state 125

    (148) constant -> boolean_constant .

    S_UP_TO         reduce using rule 148 (constant -> boolean_constant .)
    RW_KAMUS        reduce using rule 148 (constant -> boolean_constant .)
    DEDENT          reduce using rule 148 (constant -> boolean_constant .)
    RW_PROCEDURE    reduce using rule 148 (constant -> boolean_constant .)
    RW_FUNCTION     reduce using rule 148 (constant -> boolean_constant .)
    S_EQUAL         reduce using rule 148 (constant -> boolean_constant .)
    IDENTIFIER      reduce using rule 148 (constant -> boolean_constant .)
    S_SEMI_COLON    reduce using rule 148 (constant -> boolean_constant .)
    S_RIGHT_BRACKET reduce using rule 148 (constant -> boolean_constant .)
    S_COMMA         reduce using rule 148 (constant -> boolean_constant .)
    S_GREATER_THAN  reduce using rule 148 (constant -> boolean_constant .)
    RW_TYPE         reduce using rule 148 (constant -> boolean_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 148 (constant -> boolean_constant .)
    RW_CONSTANT     reduce using rule 148 (constant -> boolean_constant .)


state 126

    (149) constant -> nil_constant .

    S_UP_TO         reduce using rule 149 (constant -> nil_constant .)
    RW_KAMUS        reduce using rule 149 (constant -> nil_constant .)
    DEDENT          reduce using rule 149 (constant -> nil_constant .)
    RW_PROCEDURE    reduce using rule 149 (constant -> nil_constant .)
    RW_FUNCTION     reduce using rule 149 (constant -> nil_constant .)
    S_EQUAL         reduce using rule 149 (constant -> nil_constant .)
    IDENTIFIER      reduce using rule 149 (constant -> nil_constant .)
    S_SEMI_COLON    reduce using rule 149 (constant -> nil_constant .)
    S_RIGHT_BRACKET reduce using rule 149 (constant -> nil_constant .)
    S_COMMA         reduce using rule 149 (constant -> nil_constant .)
    S_GREATER_THAN  reduce using rule 149 (constant -> nil_constant .)
    RW_TYPE         reduce using rule 149 (constant -> nil_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 149 (constant -> nil_constant .)
    RW_CONSTANT     reduce using rule 149 (constant -> nil_constant .)


state 127

    (212) function_designator -> user_defined_function_call .

    S_UP_TO         reduce using rule 212 (function_designator -> user_defined_function_call .)
    S_POWER         reduce using rule 212 (function_designator -> user_defined_function_call .)
    S_TIMES         reduce using rule 212 (function_designator -> user_defined_function_call .)
    S_DIVIDE        reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_DIV          reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_MOD          reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_AND          reduce using rule 212 (function_designator -> user_defined_function_call .)
    S_PLUS          reduce using rule 212 (function_designator -> user_defined_function_call .)
    S_MINUS         reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_OR           reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_XOR          reduce using rule 212 (function_designator -> user_defined_function_call .)
    S_EQUAL         reduce using rule 212 (function_designator -> user_defined_function_call .)
    S_NOT_EQUAL     reduce using rule 212 (function_designator -> user_defined_function_call .)
    S_LESS_THAN_EQUAL reduce using rule 212 (function_designator -> user_defined_function_call .)
    S_GREATER_THAN_EQUAL reduce using rule 212 (function_designator -> user_defined_function_call .)
    S_LESS_THAN     reduce using rule 212 (function_designator -> user_defined_function_call .)
    S_GREATER_THAN  reduce using rule 212 (function_designator -> user_defined_function_call .)
    S_ELEMENT_OF    reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_EQ           reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_NEQ          reduce using rule 212 (function_designator -> user_defined_function_call .)
    DEDENT          reduce using rule 212 (function_designator -> user_defined_function_call .)
    S_SEMI_COLON    reduce using rule 212 (function_designator -> user_defined_function_call .)
    S_RETURN        reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_IF           reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_DEPEND       reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_WHILE        reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_ITERATE      reduce using rule 212 (function_designator -> user_defined_function_call .)
    IDENTIFIER      reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_REPEAT       reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_INPUT        reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_OUTPUT       reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_THEN         reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_DO           reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_TIMES        reduce using rule 212 (function_designator -> user_defined_function_call .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 212 (function_designator -> user_defined_function_call .)
    S_COMMA         reduce using rule 212 (function_designator -> user_defined_function_call .)
    S_RIGHT_BRACKET reduce using rule 212 (function_designator -> user_defined_function_call .)
    INDENT          reduce using rule 212 (function_designator -> user_defined_function_call .)
    S_COLON         reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_KAMUS        reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_PROCEDURE    reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_FUNCTION     reduce using rule 212 (function_designator -> user_defined_function_call .)
    RW_TYPE         reduce using rule 212 (function_designator -> user_defined_function_call .)


state 128

    (213) function_designator -> math_function_call .

    S_UP_TO         reduce using rule 213 (function_designator -> math_function_call .)
    S_POWER         reduce using rule 213 (function_designator -> math_function_call .)
    S_TIMES         reduce using rule 213 (function_designator -> math_function_call .)
    S_DIVIDE        reduce using rule 213 (function_designator -> math_function_call .)
    RW_DIV          reduce using rule 213 (function_designator -> math_function_call .)
    RW_MOD          reduce using rule 213 (function_designator -> math_function_call .)
    RW_AND          reduce using rule 213 (function_designator -> math_function_call .)
    S_PLUS          reduce using rule 213 (function_designator -> math_function_call .)
    S_MINUS         reduce using rule 213 (function_designator -> math_function_call .)
    RW_OR           reduce using rule 213 (function_designator -> math_function_call .)
    RW_XOR          reduce using rule 213 (function_designator -> math_function_call .)
    S_EQUAL         reduce using rule 213 (function_designator -> math_function_call .)
    S_NOT_EQUAL     reduce using rule 213 (function_designator -> math_function_call .)
    S_LESS_THAN_EQUAL reduce using rule 213 (function_designator -> math_function_call .)
    S_GREATER_THAN_EQUAL reduce using rule 213 (function_designator -> math_function_call .)
    S_LESS_THAN     reduce using rule 213 (function_designator -> math_function_call .)
    S_GREATER_THAN  reduce using rule 213 (function_designator -> math_function_call .)
    S_ELEMENT_OF    reduce using rule 213 (function_designator -> math_function_call .)
    RW_EQ           reduce using rule 213 (function_designator -> math_function_call .)
    RW_NEQ          reduce using rule 213 (function_designator -> math_function_call .)
    DEDENT          reduce using rule 213 (function_designator -> math_function_call .)
    S_SEMI_COLON    reduce using rule 213 (function_designator -> math_function_call .)
    S_RETURN        reduce using rule 213 (function_designator -> math_function_call .)
    RW_IF           reduce using rule 213 (function_designator -> math_function_call .)
    RW_DEPEND       reduce using rule 213 (function_designator -> math_function_call .)
    RW_WHILE        reduce using rule 213 (function_designator -> math_function_call .)
    RW_ITERATE      reduce using rule 213 (function_designator -> math_function_call .)
    IDENTIFIER      reduce using rule 213 (function_designator -> math_function_call .)
    RW_REPEAT       reduce using rule 213 (function_designator -> math_function_call .)
    RW_INPUT        reduce using rule 213 (function_designator -> math_function_call .)
    RW_OUTPUT       reduce using rule 213 (function_designator -> math_function_call .)
    RW_THEN         reduce using rule 213 (function_designator -> math_function_call .)
    RW_DO           reduce using rule 213 (function_designator -> math_function_call .)
    RW_TIMES        reduce using rule 213 (function_designator -> math_function_call .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 213 (function_designator -> math_function_call .)
    S_COMMA         reduce using rule 213 (function_designator -> math_function_call .)
    S_RIGHT_BRACKET reduce using rule 213 (function_designator -> math_function_call .)
    INDENT          reduce using rule 213 (function_designator -> math_function_call .)
    S_COLON         reduce using rule 213 (function_designator -> math_function_call .)
    RW_KAMUS        reduce using rule 213 (function_designator -> math_function_call .)
    RW_PROCEDURE    reduce using rule 213 (function_designator -> math_function_call .)
    RW_FUNCTION     reduce using rule 213 (function_designator -> math_function_call .)
    RW_TYPE         reduce using rule 213 (function_designator -> math_function_call .)


state 129

    (214) function_designator -> string_function_call .

    S_UP_TO         reduce using rule 214 (function_designator -> string_function_call .)
    S_POWER         reduce using rule 214 (function_designator -> string_function_call .)
    S_TIMES         reduce using rule 214 (function_designator -> string_function_call .)
    S_DIVIDE        reduce using rule 214 (function_designator -> string_function_call .)
    RW_DIV          reduce using rule 214 (function_designator -> string_function_call .)
    RW_MOD          reduce using rule 214 (function_designator -> string_function_call .)
    RW_AND          reduce using rule 214 (function_designator -> string_function_call .)
    S_PLUS          reduce using rule 214 (function_designator -> string_function_call .)
    S_MINUS         reduce using rule 214 (function_designator -> string_function_call .)
    RW_OR           reduce using rule 214 (function_designator -> string_function_call .)
    RW_XOR          reduce using rule 214 (function_designator -> string_function_call .)
    S_EQUAL         reduce using rule 214 (function_designator -> string_function_call .)
    S_NOT_EQUAL     reduce using rule 214 (function_designator -> string_function_call .)
    S_LESS_THAN_EQUAL reduce using rule 214 (function_designator -> string_function_call .)
    S_GREATER_THAN_EQUAL reduce using rule 214 (function_designator -> string_function_call .)
    S_LESS_THAN     reduce using rule 214 (function_designator -> string_function_call .)
    S_GREATER_THAN  reduce using rule 214 (function_designator -> string_function_call .)
    S_ELEMENT_OF    reduce using rule 214 (function_designator -> string_function_call .)
    RW_EQ           reduce using rule 214 (function_designator -> string_function_call .)
    RW_NEQ          reduce using rule 214 (function_designator -> string_function_call .)
    DEDENT          reduce using rule 214 (function_designator -> string_function_call .)
    S_SEMI_COLON    reduce using rule 214 (function_designator -> string_function_call .)
    S_RETURN        reduce using rule 214 (function_designator -> string_function_call .)
    RW_IF           reduce using rule 214 (function_designator -> string_function_call .)
    RW_DEPEND       reduce using rule 214 (function_designator -> string_function_call .)
    RW_WHILE        reduce using rule 214 (function_designator -> string_function_call .)
    RW_ITERATE      reduce using rule 214 (function_designator -> string_function_call .)
    IDENTIFIER      reduce using rule 214 (function_designator -> string_function_call .)
    RW_REPEAT       reduce using rule 214 (function_designator -> string_function_call .)
    RW_INPUT        reduce using rule 214 (function_designator -> string_function_call .)
    RW_OUTPUT       reduce using rule 214 (function_designator -> string_function_call .)
    RW_THEN         reduce using rule 214 (function_designator -> string_function_call .)
    RW_DO           reduce using rule 214 (function_designator -> string_function_call .)
    RW_TIMES        reduce using rule 214 (function_designator -> string_function_call .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 214 (function_designator -> string_function_call .)
    S_COMMA         reduce using rule 214 (function_designator -> string_function_call .)
    S_RIGHT_BRACKET reduce using rule 214 (function_designator -> string_function_call .)
    INDENT          reduce using rule 214 (function_designator -> string_function_call .)
    S_COLON         reduce using rule 214 (function_designator -> string_function_call .)
    RW_KAMUS        reduce using rule 214 (function_designator -> string_function_call .)
    RW_PROCEDURE    reduce using rule 214 (function_designator -> string_function_call .)
    RW_FUNCTION     reduce using rule 214 (function_designator -> string_function_call .)
    RW_TYPE         reduce using rule 214 (function_designator -> string_function_call .)


state 130

    (215) function_designator -> converter_function_call .

    S_UP_TO         reduce using rule 215 (function_designator -> converter_function_call .)
    S_POWER         reduce using rule 215 (function_designator -> converter_function_call .)
    S_TIMES         reduce using rule 215 (function_designator -> converter_function_call .)
    S_DIVIDE        reduce using rule 215 (function_designator -> converter_function_call .)
    RW_DIV          reduce using rule 215 (function_designator -> converter_function_call .)
    RW_MOD          reduce using rule 215 (function_designator -> converter_function_call .)
    RW_AND          reduce using rule 215 (function_designator -> converter_function_call .)
    S_PLUS          reduce using rule 215 (function_designator -> converter_function_call .)
    S_MINUS         reduce using rule 215 (function_designator -> converter_function_call .)
    RW_OR           reduce using rule 215 (function_designator -> converter_function_call .)
    RW_XOR          reduce using rule 215 (function_designator -> converter_function_call .)
    S_EQUAL         reduce using rule 215 (function_designator -> converter_function_call .)
    S_NOT_EQUAL     reduce using rule 215 (function_designator -> converter_function_call .)
    S_LESS_THAN_EQUAL reduce using rule 215 (function_designator -> converter_function_call .)
    S_GREATER_THAN_EQUAL reduce using rule 215 (function_designator -> converter_function_call .)
    S_LESS_THAN     reduce using rule 215 (function_designator -> converter_function_call .)
    S_GREATER_THAN  reduce using rule 215 (function_designator -> converter_function_call .)
    S_ELEMENT_OF    reduce using rule 215 (function_designator -> converter_function_call .)
    RW_EQ           reduce using rule 215 (function_designator -> converter_function_call .)
    RW_NEQ          reduce using rule 215 (function_designator -> converter_function_call .)
    DEDENT          reduce using rule 215 (function_designator -> converter_function_call .)
    S_SEMI_COLON    reduce using rule 215 (function_designator -> converter_function_call .)
    S_RETURN        reduce using rule 215 (function_designator -> converter_function_call .)
    RW_IF           reduce using rule 215 (function_designator -> converter_function_call .)
    RW_DEPEND       reduce using rule 215 (function_designator -> converter_function_call .)
    RW_WHILE        reduce using rule 215 (function_designator -> converter_function_call .)
    RW_ITERATE      reduce using rule 215 (function_designator -> converter_function_call .)
    IDENTIFIER      reduce using rule 215 (function_designator -> converter_function_call .)
    RW_REPEAT       reduce using rule 215 (function_designator -> converter_function_call .)
    RW_INPUT        reduce using rule 215 (function_designator -> converter_function_call .)
    RW_OUTPUT       reduce using rule 215 (function_designator -> converter_function_call .)
    RW_THEN         reduce using rule 215 (function_designator -> converter_function_call .)
    RW_DO           reduce using rule 215 (function_designator -> converter_function_call .)
    RW_TIMES        reduce using rule 215 (function_designator -> converter_function_call .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 215 (function_designator -> converter_function_call .)
    S_COMMA         reduce using rule 215 (function_designator -> converter_function_call .)
    S_RIGHT_BRACKET reduce using rule 215 (function_designator -> converter_function_call .)
    INDENT          reduce using rule 215 (function_designator -> converter_function_call .)
    S_COLON         reduce using rule 215 (function_designator -> converter_function_call .)
    RW_KAMUS        reduce using rule 215 (function_designator -> converter_function_call .)
    RW_PROCEDURE    reduce using rule 215 (function_designator -> converter_function_call .)
    RW_FUNCTION     reduce using rule 215 (function_designator -> converter_function_call .)
    RW_TYPE         reduce using rule 215 (function_designator -> converter_function_call .)


state 131

    (158) string_char_constant -> string_constant .

    S_UP_TO         reduce using rule 158 (string_char_constant -> string_constant .)
    S_POWER         reduce using rule 158 (string_char_constant -> string_constant .)
    S_TIMES         reduce using rule 158 (string_char_constant -> string_constant .)
    S_DIVIDE        reduce using rule 158 (string_char_constant -> string_constant .)
    RW_DIV          reduce using rule 158 (string_char_constant -> string_constant .)
    RW_MOD          reduce using rule 158 (string_char_constant -> string_constant .)
    RW_AND          reduce using rule 158 (string_char_constant -> string_constant .)
    S_PLUS          reduce using rule 158 (string_char_constant -> string_constant .)
    S_MINUS         reduce using rule 158 (string_char_constant -> string_constant .)
    RW_OR           reduce using rule 158 (string_char_constant -> string_constant .)
    RW_XOR          reduce using rule 158 (string_char_constant -> string_constant .)
    S_EQUAL         reduce using rule 158 (string_char_constant -> string_constant .)
    S_NOT_EQUAL     reduce using rule 158 (string_char_constant -> string_constant .)
    S_LESS_THAN_EQUAL reduce using rule 158 (string_char_constant -> string_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 158 (string_char_constant -> string_constant .)
    S_LESS_THAN     reduce using rule 158 (string_char_constant -> string_constant .)
    S_GREATER_THAN  reduce using rule 158 (string_char_constant -> string_constant .)
    S_ELEMENT_OF    reduce using rule 158 (string_char_constant -> string_constant .)
    RW_EQ           reduce using rule 158 (string_char_constant -> string_constant .)
    RW_NEQ          reduce using rule 158 (string_char_constant -> string_constant .)
    DEDENT          reduce using rule 158 (string_char_constant -> string_constant .)
    S_SEMI_COLON    reduce using rule 158 (string_char_constant -> string_constant .)
    S_RETURN        reduce using rule 158 (string_char_constant -> string_constant .)
    RW_IF           reduce using rule 158 (string_char_constant -> string_constant .)
    RW_DEPEND       reduce using rule 158 (string_char_constant -> string_constant .)
    RW_WHILE        reduce using rule 158 (string_char_constant -> string_constant .)
    RW_ITERATE      reduce using rule 158 (string_char_constant -> string_constant .)
    IDENTIFIER      reduce using rule 158 (string_char_constant -> string_constant .)
    RW_REPEAT       reduce using rule 158 (string_char_constant -> string_constant .)
    RW_INPUT        reduce using rule 158 (string_char_constant -> string_constant .)
    RW_OUTPUT       reduce using rule 158 (string_char_constant -> string_constant .)
    RW_THEN         reduce using rule 158 (string_char_constant -> string_constant .)
    RW_DO           reduce using rule 158 (string_char_constant -> string_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 158 (string_char_constant -> string_constant .)
    S_COMMA         reduce using rule 158 (string_char_constant -> string_constant .)
    S_RIGHT_BRACKET reduce using rule 158 (string_char_constant -> string_constant .)
    INDENT          reduce using rule 158 (string_char_constant -> string_constant .)
    S_COLON         reduce using rule 158 (string_char_constant -> string_constant .)
    RW_KAMUS        reduce using rule 158 (string_char_constant -> string_constant .)
    RW_PROCEDURE    reduce using rule 158 (string_char_constant -> string_constant .)
    RW_FUNCTION     reduce using rule 158 (string_char_constant -> string_constant .)
    RW_TYPE         reduce using rule 158 (string_char_constant -> string_constant .)
    RW_CONSTANT     reduce using rule 158 (string_char_constant -> string_constant .)


state 132

    (159) string_char_constant -> char_constant .

    S_UP_TO         reduce using rule 159 (string_char_constant -> char_constant .)
    S_POWER         reduce using rule 159 (string_char_constant -> char_constant .)
    S_TIMES         reduce using rule 159 (string_char_constant -> char_constant .)
    S_DIVIDE        reduce using rule 159 (string_char_constant -> char_constant .)
    RW_DIV          reduce using rule 159 (string_char_constant -> char_constant .)
    RW_MOD          reduce using rule 159 (string_char_constant -> char_constant .)
    RW_AND          reduce using rule 159 (string_char_constant -> char_constant .)
    S_PLUS          reduce using rule 159 (string_char_constant -> char_constant .)
    S_MINUS         reduce using rule 159 (string_char_constant -> char_constant .)
    RW_OR           reduce using rule 159 (string_char_constant -> char_constant .)
    RW_XOR          reduce using rule 159 (string_char_constant -> char_constant .)
    S_EQUAL         reduce using rule 159 (string_char_constant -> char_constant .)
    S_NOT_EQUAL     reduce using rule 159 (string_char_constant -> char_constant .)
    S_LESS_THAN_EQUAL reduce using rule 159 (string_char_constant -> char_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 159 (string_char_constant -> char_constant .)
    S_LESS_THAN     reduce using rule 159 (string_char_constant -> char_constant .)
    S_GREATER_THAN  reduce using rule 159 (string_char_constant -> char_constant .)
    S_ELEMENT_OF    reduce using rule 159 (string_char_constant -> char_constant .)
    RW_EQ           reduce using rule 159 (string_char_constant -> char_constant .)
    RW_NEQ          reduce using rule 159 (string_char_constant -> char_constant .)
    DEDENT          reduce using rule 159 (string_char_constant -> char_constant .)
    S_SEMI_COLON    reduce using rule 159 (string_char_constant -> char_constant .)
    S_RETURN        reduce using rule 159 (string_char_constant -> char_constant .)
    RW_IF           reduce using rule 159 (string_char_constant -> char_constant .)
    RW_DEPEND       reduce using rule 159 (string_char_constant -> char_constant .)
    RW_WHILE        reduce using rule 159 (string_char_constant -> char_constant .)
    RW_ITERATE      reduce using rule 159 (string_char_constant -> char_constant .)
    IDENTIFIER      reduce using rule 159 (string_char_constant -> char_constant .)
    RW_REPEAT       reduce using rule 159 (string_char_constant -> char_constant .)
    RW_INPUT        reduce using rule 159 (string_char_constant -> char_constant .)
    RW_OUTPUT       reduce using rule 159 (string_char_constant -> char_constant .)
    RW_THEN         reduce using rule 159 (string_char_constant -> char_constant .)
    RW_DO           reduce using rule 159 (string_char_constant -> char_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 159 (string_char_constant -> char_constant .)
    S_COMMA         reduce using rule 159 (string_char_constant -> char_constant .)
    S_RIGHT_BRACKET reduce using rule 159 (string_char_constant -> char_constant .)
    INDENT          reduce using rule 159 (string_char_constant -> char_constant .)
    S_COLON         reduce using rule 159 (string_char_constant -> char_constant .)
    RW_KAMUS        reduce using rule 159 (string_char_constant -> char_constant .)
    RW_PROCEDURE    reduce using rule 159 (string_char_constant -> char_constant .)
    RW_FUNCTION     reduce using rule 159 (string_char_constant -> char_constant .)
    RW_TYPE         reduce using rule 159 (string_char_constant -> char_constant .)
    RW_CONSTANT     reduce using rule 159 (string_char_constant -> char_constant .)


state 133

    (154) non_string_constant -> integer_constant .

    S_UP_TO         reduce using rule 154 (non_string_constant -> integer_constant .)
    S_POWER         reduce using rule 154 (non_string_constant -> integer_constant .)
    S_TIMES         reduce using rule 154 (non_string_constant -> integer_constant .)
    S_DIVIDE        reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_DIV          reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_MOD          reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_AND          reduce using rule 154 (non_string_constant -> integer_constant .)
    S_PLUS          reduce using rule 154 (non_string_constant -> integer_constant .)
    S_MINUS         reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_OR           reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_XOR          reduce using rule 154 (non_string_constant -> integer_constant .)
    S_EQUAL         reduce using rule 154 (non_string_constant -> integer_constant .)
    S_NOT_EQUAL     reduce using rule 154 (non_string_constant -> integer_constant .)
    S_LESS_THAN_EQUAL reduce using rule 154 (non_string_constant -> integer_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 154 (non_string_constant -> integer_constant .)
    S_LESS_THAN     reduce using rule 154 (non_string_constant -> integer_constant .)
    S_GREATER_THAN  reduce using rule 154 (non_string_constant -> integer_constant .)
    S_ELEMENT_OF    reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_EQ           reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_NEQ          reduce using rule 154 (non_string_constant -> integer_constant .)
    DEDENT          reduce using rule 154 (non_string_constant -> integer_constant .)
    S_SEMI_COLON    reduce using rule 154 (non_string_constant -> integer_constant .)
    S_RETURN        reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_IF           reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_DEPEND       reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_WHILE        reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_ITERATE      reduce using rule 154 (non_string_constant -> integer_constant .)
    IDENTIFIER      reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_REPEAT       reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_INPUT        reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_OUTPUT       reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_THEN         reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_DO           reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_KAMUS        reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_PROCEDURE    reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_FUNCTION     reduce using rule 154 (non_string_constant -> integer_constant .)
    S_RIGHT_BRACKET reduce using rule 154 (non_string_constant -> integer_constant .)
    S_COMMA         reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_TYPE         reduce using rule 154 (non_string_constant -> integer_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 154 (non_string_constant -> integer_constant .)
    RW_CONSTANT     reduce using rule 154 (non_string_constant -> integer_constant .)
    INDENT          reduce using rule 154 (non_string_constant -> integer_constant .)
    S_COLON         reduce using rule 154 (non_string_constant -> integer_constant .)


state 134

    (155) non_string_constant -> real_constant .

    S_UP_TO         reduce using rule 155 (non_string_constant -> real_constant .)
    S_POWER         reduce using rule 155 (non_string_constant -> real_constant .)
    S_TIMES         reduce using rule 155 (non_string_constant -> real_constant .)
    S_DIVIDE        reduce using rule 155 (non_string_constant -> real_constant .)
    RW_DIV          reduce using rule 155 (non_string_constant -> real_constant .)
    RW_MOD          reduce using rule 155 (non_string_constant -> real_constant .)
    RW_AND          reduce using rule 155 (non_string_constant -> real_constant .)
    S_PLUS          reduce using rule 155 (non_string_constant -> real_constant .)
    S_MINUS         reduce using rule 155 (non_string_constant -> real_constant .)
    RW_OR           reduce using rule 155 (non_string_constant -> real_constant .)
    RW_XOR          reduce using rule 155 (non_string_constant -> real_constant .)
    S_EQUAL         reduce using rule 155 (non_string_constant -> real_constant .)
    S_NOT_EQUAL     reduce using rule 155 (non_string_constant -> real_constant .)
    S_LESS_THAN_EQUAL reduce using rule 155 (non_string_constant -> real_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 155 (non_string_constant -> real_constant .)
    S_LESS_THAN     reduce using rule 155 (non_string_constant -> real_constant .)
    S_GREATER_THAN  reduce using rule 155 (non_string_constant -> real_constant .)
    S_ELEMENT_OF    reduce using rule 155 (non_string_constant -> real_constant .)
    RW_EQ           reduce using rule 155 (non_string_constant -> real_constant .)
    RW_NEQ          reduce using rule 155 (non_string_constant -> real_constant .)
    DEDENT          reduce using rule 155 (non_string_constant -> real_constant .)
    S_SEMI_COLON    reduce using rule 155 (non_string_constant -> real_constant .)
    S_RETURN        reduce using rule 155 (non_string_constant -> real_constant .)
    RW_IF           reduce using rule 155 (non_string_constant -> real_constant .)
    RW_DEPEND       reduce using rule 155 (non_string_constant -> real_constant .)
    RW_WHILE        reduce using rule 155 (non_string_constant -> real_constant .)
    RW_ITERATE      reduce using rule 155 (non_string_constant -> real_constant .)
    IDENTIFIER      reduce using rule 155 (non_string_constant -> real_constant .)
    RW_REPEAT       reduce using rule 155 (non_string_constant -> real_constant .)
    RW_INPUT        reduce using rule 155 (non_string_constant -> real_constant .)
    RW_OUTPUT       reduce using rule 155 (non_string_constant -> real_constant .)
    RW_THEN         reduce using rule 155 (non_string_constant -> real_constant .)
    RW_DO           reduce using rule 155 (non_string_constant -> real_constant .)
    RW_KAMUS        reduce using rule 155 (non_string_constant -> real_constant .)
    RW_PROCEDURE    reduce using rule 155 (non_string_constant -> real_constant .)
    RW_FUNCTION     reduce using rule 155 (non_string_constant -> real_constant .)
    S_RIGHT_BRACKET reduce using rule 155 (non_string_constant -> real_constant .)
    S_COMMA         reduce using rule 155 (non_string_constant -> real_constant .)
    RW_TYPE         reduce using rule 155 (non_string_constant -> real_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 155 (non_string_constant -> real_constant .)
    RW_CONSTANT     reduce using rule 155 (non_string_constant -> real_constant .)
    INDENT          reduce using rule 155 (non_string_constant -> real_constant .)
    S_COLON         reduce using rule 155 (non_string_constant -> real_constant .)


state 135

    (150) sign -> S_PLUS .

    L_INTEGER_NUMBER reduce using rule 150 (sign -> S_PLUS .)
    L_REAL_NUMBER   reduce using rule 150 (sign -> S_PLUS .)


state 136

    (151) sign -> S_MINUS .

    L_INTEGER_NUMBER reduce using rule 151 (sign -> S_MINUS .)
    L_REAL_NUMBER   reduce using rule 151 (sign -> S_MINUS .)


state 137

    (152) boolean_constant -> L_BOOLEAN_TRUE .

    S_UP_TO         reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_POWER         reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_TIMES         reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_DIVIDE        reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_DIV          reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_MOD          reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_AND          reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_PLUS          reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_MINUS         reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_OR           reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_XOR          reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_EQUAL         reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_NOT_EQUAL     reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_LESS_THAN_EQUAL reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_GREATER_THAN_EQUAL reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_LESS_THAN     reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_GREATER_THAN  reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_ELEMENT_OF    reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_EQ           reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_NEQ          reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    DEDENT          reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_SEMI_COLON    reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_RETURN        reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_IF           reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_DEPEND       reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_WHILE        reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_ITERATE      reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    IDENTIFIER      reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_REPEAT       reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_INPUT        reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_OUTPUT       reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_THEN         reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_DO           reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_COMMA         reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_RIGHT_BRACKET reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    INDENT          reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_COLON         reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_KAMUS        reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_PROCEDURE    reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_FUNCTION     reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_TYPE         reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_CONSTANT     reduce using rule 152 (boolean_constant -> L_BOOLEAN_TRUE .)


state 138

    (153) boolean_constant -> L_BOOLEAN_FALSE .

    S_UP_TO         reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_POWER         reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_TIMES         reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_DIVIDE        reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_DIV          reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_MOD          reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_AND          reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_PLUS          reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_MINUS         reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_OR           reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_XOR          reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_EQUAL         reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_NOT_EQUAL     reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_LESS_THAN_EQUAL reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_GREATER_THAN_EQUAL reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_LESS_THAN     reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_GREATER_THAN  reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_ELEMENT_OF    reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_EQ           reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_NEQ          reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    DEDENT          reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_SEMI_COLON    reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_RETURN        reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_IF           reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_DEPEND       reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_WHILE        reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_ITERATE      reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    IDENTIFIER      reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_REPEAT       reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_INPUT        reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_OUTPUT       reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_THEN         reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_DO           reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_COMMA         reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_RIGHT_BRACKET reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    INDENT          reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_COLON         reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_KAMUS        reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_PROCEDURE    reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_FUNCTION     reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_TYPE         reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_CONSTANT     reduce using rule 153 (boolean_constant -> L_BOOLEAN_FALSE .)


state 139

    (162) nil_constant -> L_NIL .

    S_UP_TO         reduce using rule 162 (nil_constant -> L_NIL .)
    S_POWER         reduce using rule 162 (nil_constant -> L_NIL .)
    S_TIMES         reduce using rule 162 (nil_constant -> L_NIL .)
    S_DIVIDE        reduce using rule 162 (nil_constant -> L_NIL .)
    RW_DIV          reduce using rule 162 (nil_constant -> L_NIL .)
    RW_MOD          reduce using rule 162 (nil_constant -> L_NIL .)
    RW_AND          reduce using rule 162 (nil_constant -> L_NIL .)
    S_PLUS          reduce using rule 162 (nil_constant -> L_NIL .)
    S_MINUS         reduce using rule 162 (nil_constant -> L_NIL .)
    RW_OR           reduce using rule 162 (nil_constant -> L_NIL .)
    RW_XOR          reduce using rule 162 (nil_constant -> L_NIL .)
    S_EQUAL         reduce using rule 162 (nil_constant -> L_NIL .)
    S_NOT_EQUAL     reduce using rule 162 (nil_constant -> L_NIL .)
    S_LESS_THAN_EQUAL reduce using rule 162 (nil_constant -> L_NIL .)
    S_GREATER_THAN_EQUAL reduce using rule 162 (nil_constant -> L_NIL .)
    S_LESS_THAN     reduce using rule 162 (nil_constant -> L_NIL .)
    S_GREATER_THAN  reduce using rule 162 (nil_constant -> L_NIL .)
    S_ELEMENT_OF    reduce using rule 162 (nil_constant -> L_NIL .)
    RW_EQ           reduce using rule 162 (nil_constant -> L_NIL .)
    RW_NEQ          reduce using rule 162 (nil_constant -> L_NIL .)
    DEDENT          reduce using rule 162 (nil_constant -> L_NIL .)
    S_SEMI_COLON    reduce using rule 162 (nil_constant -> L_NIL .)
    S_RETURN        reduce using rule 162 (nil_constant -> L_NIL .)
    RW_IF           reduce using rule 162 (nil_constant -> L_NIL .)
    RW_DEPEND       reduce using rule 162 (nil_constant -> L_NIL .)
    RW_WHILE        reduce using rule 162 (nil_constant -> L_NIL .)
    RW_ITERATE      reduce using rule 162 (nil_constant -> L_NIL .)
    IDENTIFIER      reduce using rule 162 (nil_constant -> L_NIL .)
    RW_REPEAT       reduce using rule 162 (nil_constant -> L_NIL .)
    RW_INPUT        reduce using rule 162 (nil_constant -> L_NIL .)
    RW_OUTPUT       reduce using rule 162 (nil_constant -> L_NIL .)
    RW_THEN         reduce using rule 162 (nil_constant -> L_NIL .)
    RW_DO           reduce using rule 162 (nil_constant -> L_NIL .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 162 (nil_constant -> L_NIL .)
    S_COMMA         reduce using rule 162 (nil_constant -> L_NIL .)
    S_RIGHT_BRACKET reduce using rule 162 (nil_constant -> L_NIL .)
    INDENT          reduce using rule 162 (nil_constant -> L_NIL .)
    S_COLON         reduce using rule 162 (nil_constant -> L_NIL .)
    RW_KAMUS        reduce using rule 162 (nil_constant -> L_NIL .)
    RW_PROCEDURE    reduce using rule 162 (nil_constant -> L_NIL .)
    RW_FUNCTION     reduce using rule 162 (nil_constant -> L_NIL .)
    RW_TYPE         reduce using rule 162 (nil_constant -> L_NIL .)
    RW_CONSTANT     reduce using rule 162 (nil_constant -> L_NIL .)


state 140

    (217) math_function_call -> abs_function .

    S_UP_TO         reduce using rule 217 (math_function_call -> abs_function .)
    S_POWER         reduce using rule 217 (math_function_call -> abs_function .)
    S_TIMES         reduce using rule 217 (math_function_call -> abs_function .)
    S_DIVIDE        reduce using rule 217 (math_function_call -> abs_function .)
    RW_DIV          reduce using rule 217 (math_function_call -> abs_function .)
    RW_MOD          reduce using rule 217 (math_function_call -> abs_function .)
    RW_AND          reduce using rule 217 (math_function_call -> abs_function .)
    S_PLUS          reduce using rule 217 (math_function_call -> abs_function .)
    S_MINUS         reduce using rule 217 (math_function_call -> abs_function .)
    RW_OR           reduce using rule 217 (math_function_call -> abs_function .)
    RW_XOR          reduce using rule 217 (math_function_call -> abs_function .)
    S_EQUAL         reduce using rule 217 (math_function_call -> abs_function .)
    S_NOT_EQUAL     reduce using rule 217 (math_function_call -> abs_function .)
    S_LESS_THAN_EQUAL reduce using rule 217 (math_function_call -> abs_function .)
    S_GREATER_THAN_EQUAL reduce using rule 217 (math_function_call -> abs_function .)
    S_LESS_THAN     reduce using rule 217 (math_function_call -> abs_function .)
    S_GREATER_THAN  reduce using rule 217 (math_function_call -> abs_function .)
    S_ELEMENT_OF    reduce using rule 217 (math_function_call -> abs_function .)
    RW_EQ           reduce using rule 217 (math_function_call -> abs_function .)
    RW_NEQ          reduce using rule 217 (math_function_call -> abs_function .)
    DEDENT          reduce using rule 217 (math_function_call -> abs_function .)
    S_SEMI_COLON    reduce using rule 217 (math_function_call -> abs_function .)
    S_RETURN        reduce using rule 217 (math_function_call -> abs_function .)
    RW_IF           reduce using rule 217 (math_function_call -> abs_function .)
    RW_DEPEND       reduce using rule 217 (math_function_call -> abs_function .)
    RW_WHILE        reduce using rule 217 (math_function_call -> abs_function .)
    RW_ITERATE      reduce using rule 217 (math_function_call -> abs_function .)
    IDENTIFIER      reduce using rule 217 (math_function_call -> abs_function .)
    RW_REPEAT       reduce using rule 217 (math_function_call -> abs_function .)
    RW_INPUT        reduce using rule 217 (math_function_call -> abs_function .)
    RW_OUTPUT       reduce using rule 217 (math_function_call -> abs_function .)
    RW_THEN         reduce using rule 217 (math_function_call -> abs_function .)
    RW_DO           reduce using rule 217 (math_function_call -> abs_function .)
    RW_TIMES        reduce using rule 217 (math_function_call -> abs_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 217 (math_function_call -> abs_function .)
    S_COMMA         reduce using rule 217 (math_function_call -> abs_function .)
    S_RIGHT_BRACKET reduce using rule 217 (math_function_call -> abs_function .)
    INDENT          reduce using rule 217 (math_function_call -> abs_function .)
    S_COLON         reduce using rule 217 (math_function_call -> abs_function .)
    RW_KAMUS        reduce using rule 217 (math_function_call -> abs_function .)
    RW_PROCEDURE    reduce using rule 217 (math_function_call -> abs_function .)
    RW_FUNCTION     reduce using rule 217 (math_function_call -> abs_function .)
    RW_TYPE         reduce using rule 217 (math_function_call -> abs_function .)


state 141

    (218) math_function_call -> sin_function .

    S_UP_TO         reduce using rule 218 (math_function_call -> sin_function .)
    S_POWER         reduce using rule 218 (math_function_call -> sin_function .)
    S_TIMES         reduce using rule 218 (math_function_call -> sin_function .)
    S_DIVIDE        reduce using rule 218 (math_function_call -> sin_function .)
    RW_DIV          reduce using rule 218 (math_function_call -> sin_function .)
    RW_MOD          reduce using rule 218 (math_function_call -> sin_function .)
    RW_AND          reduce using rule 218 (math_function_call -> sin_function .)
    S_PLUS          reduce using rule 218 (math_function_call -> sin_function .)
    S_MINUS         reduce using rule 218 (math_function_call -> sin_function .)
    RW_OR           reduce using rule 218 (math_function_call -> sin_function .)
    RW_XOR          reduce using rule 218 (math_function_call -> sin_function .)
    S_EQUAL         reduce using rule 218 (math_function_call -> sin_function .)
    S_NOT_EQUAL     reduce using rule 218 (math_function_call -> sin_function .)
    S_LESS_THAN_EQUAL reduce using rule 218 (math_function_call -> sin_function .)
    S_GREATER_THAN_EQUAL reduce using rule 218 (math_function_call -> sin_function .)
    S_LESS_THAN     reduce using rule 218 (math_function_call -> sin_function .)
    S_GREATER_THAN  reduce using rule 218 (math_function_call -> sin_function .)
    S_ELEMENT_OF    reduce using rule 218 (math_function_call -> sin_function .)
    RW_EQ           reduce using rule 218 (math_function_call -> sin_function .)
    RW_NEQ          reduce using rule 218 (math_function_call -> sin_function .)
    DEDENT          reduce using rule 218 (math_function_call -> sin_function .)
    S_SEMI_COLON    reduce using rule 218 (math_function_call -> sin_function .)
    S_RETURN        reduce using rule 218 (math_function_call -> sin_function .)
    RW_IF           reduce using rule 218 (math_function_call -> sin_function .)
    RW_DEPEND       reduce using rule 218 (math_function_call -> sin_function .)
    RW_WHILE        reduce using rule 218 (math_function_call -> sin_function .)
    RW_ITERATE      reduce using rule 218 (math_function_call -> sin_function .)
    IDENTIFIER      reduce using rule 218 (math_function_call -> sin_function .)
    RW_REPEAT       reduce using rule 218 (math_function_call -> sin_function .)
    RW_INPUT        reduce using rule 218 (math_function_call -> sin_function .)
    RW_OUTPUT       reduce using rule 218 (math_function_call -> sin_function .)
    RW_THEN         reduce using rule 218 (math_function_call -> sin_function .)
    RW_DO           reduce using rule 218 (math_function_call -> sin_function .)
    RW_TIMES        reduce using rule 218 (math_function_call -> sin_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 218 (math_function_call -> sin_function .)
    S_COMMA         reduce using rule 218 (math_function_call -> sin_function .)
    S_RIGHT_BRACKET reduce using rule 218 (math_function_call -> sin_function .)
    INDENT          reduce using rule 218 (math_function_call -> sin_function .)
    S_COLON         reduce using rule 218 (math_function_call -> sin_function .)
    RW_KAMUS        reduce using rule 218 (math_function_call -> sin_function .)
    RW_PROCEDURE    reduce using rule 218 (math_function_call -> sin_function .)
    RW_FUNCTION     reduce using rule 218 (math_function_call -> sin_function .)
    RW_TYPE         reduce using rule 218 (math_function_call -> sin_function .)


state 142

    (219) math_function_call -> cos_function .

    S_UP_TO         reduce using rule 219 (math_function_call -> cos_function .)
    S_POWER         reduce using rule 219 (math_function_call -> cos_function .)
    S_TIMES         reduce using rule 219 (math_function_call -> cos_function .)
    S_DIVIDE        reduce using rule 219 (math_function_call -> cos_function .)
    RW_DIV          reduce using rule 219 (math_function_call -> cos_function .)
    RW_MOD          reduce using rule 219 (math_function_call -> cos_function .)
    RW_AND          reduce using rule 219 (math_function_call -> cos_function .)
    S_PLUS          reduce using rule 219 (math_function_call -> cos_function .)
    S_MINUS         reduce using rule 219 (math_function_call -> cos_function .)
    RW_OR           reduce using rule 219 (math_function_call -> cos_function .)
    RW_XOR          reduce using rule 219 (math_function_call -> cos_function .)
    S_EQUAL         reduce using rule 219 (math_function_call -> cos_function .)
    S_NOT_EQUAL     reduce using rule 219 (math_function_call -> cos_function .)
    S_LESS_THAN_EQUAL reduce using rule 219 (math_function_call -> cos_function .)
    S_GREATER_THAN_EQUAL reduce using rule 219 (math_function_call -> cos_function .)
    S_LESS_THAN     reduce using rule 219 (math_function_call -> cos_function .)
    S_GREATER_THAN  reduce using rule 219 (math_function_call -> cos_function .)
    S_ELEMENT_OF    reduce using rule 219 (math_function_call -> cos_function .)
    RW_EQ           reduce using rule 219 (math_function_call -> cos_function .)
    RW_NEQ          reduce using rule 219 (math_function_call -> cos_function .)
    DEDENT          reduce using rule 219 (math_function_call -> cos_function .)
    S_SEMI_COLON    reduce using rule 219 (math_function_call -> cos_function .)
    S_RETURN        reduce using rule 219 (math_function_call -> cos_function .)
    RW_IF           reduce using rule 219 (math_function_call -> cos_function .)
    RW_DEPEND       reduce using rule 219 (math_function_call -> cos_function .)
    RW_WHILE        reduce using rule 219 (math_function_call -> cos_function .)
    RW_ITERATE      reduce using rule 219 (math_function_call -> cos_function .)
    IDENTIFIER      reduce using rule 219 (math_function_call -> cos_function .)
    RW_REPEAT       reduce using rule 219 (math_function_call -> cos_function .)
    RW_INPUT        reduce using rule 219 (math_function_call -> cos_function .)
    RW_OUTPUT       reduce using rule 219 (math_function_call -> cos_function .)
    RW_THEN         reduce using rule 219 (math_function_call -> cos_function .)
    RW_DO           reduce using rule 219 (math_function_call -> cos_function .)
    RW_TIMES        reduce using rule 219 (math_function_call -> cos_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 219 (math_function_call -> cos_function .)
    S_COMMA         reduce using rule 219 (math_function_call -> cos_function .)
    S_RIGHT_BRACKET reduce using rule 219 (math_function_call -> cos_function .)
    INDENT          reduce using rule 219 (math_function_call -> cos_function .)
    S_COLON         reduce using rule 219 (math_function_call -> cos_function .)
    RW_KAMUS        reduce using rule 219 (math_function_call -> cos_function .)
    RW_PROCEDURE    reduce using rule 219 (math_function_call -> cos_function .)
    RW_FUNCTION     reduce using rule 219 (math_function_call -> cos_function .)
    RW_TYPE         reduce using rule 219 (math_function_call -> cos_function .)


state 143

    (220) math_function_call -> tan_function .

    S_UP_TO         reduce using rule 220 (math_function_call -> tan_function .)
    S_POWER         reduce using rule 220 (math_function_call -> tan_function .)
    S_TIMES         reduce using rule 220 (math_function_call -> tan_function .)
    S_DIVIDE        reduce using rule 220 (math_function_call -> tan_function .)
    RW_DIV          reduce using rule 220 (math_function_call -> tan_function .)
    RW_MOD          reduce using rule 220 (math_function_call -> tan_function .)
    RW_AND          reduce using rule 220 (math_function_call -> tan_function .)
    S_PLUS          reduce using rule 220 (math_function_call -> tan_function .)
    S_MINUS         reduce using rule 220 (math_function_call -> tan_function .)
    RW_OR           reduce using rule 220 (math_function_call -> tan_function .)
    RW_XOR          reduce using rule 220 (math_function_call -> tan_function .)
    S_EQUAL         reduce using rule 220 (math_function_call -> tan_function .)
    S_NOT_EQUAL     reduce using rule 220 (math_function_call -> tan_function .)
    S_LESS_THAN_EQUAL reduce using rule 220 (math_function_call -> tan_function .)
    S_GREATER_THAN_EQUAL reduce using rule 220 (math_function_call -> tan_function .)
    S_LESS_THAN     reduce using rule 220 (math_function_call -> tan_function .)
    S_GREATER_THAN  reduce using rule 220 (math_function_call -> tan_function .)
    S_ELEMENT_OF    reduce using rule 220 (math_function_call -> tan_function .)
    RW_EQ           reduce using rule 220 (math_function_call -> tan_function .)
    RW_NEQ          reduce using rule 220 (math_function_call -> tan_function .)
    DEDENT          reduce using rule 220 (math_function_call -> tan_function .)
    S_SEMI_COLON    reduce using rule 220 (math_function_call -> tan_function .)
    S_RETURN        reduce using rule 220 (math_function_call -> tan_function .)
    RW_IF           reduce using rule 220 (math_function_call -> tan_function .)
    RW_DEPEND       reduce using rule 220 (math_function_call -> tan_function .)
    RW_WHILE        reduce using rule 220 (math_function_call -> tan_function .)
    RW_ITERATE      reduce using rule 220 (math_function_call -> tan_function .)
    IDENTIFIER      reduce using rule 220 (math_function_call -> tan_function .)
    RW_REPEAT       reduce using rule 220 (math_function_call -> tan_function .)
    RW_INPUT        reduce using rule 220 (math_function_call -> tan_function .)
    RW_OUTPUT       reduce using rule 220 (math_function_call -> tan_function .)
    RW_THEN         reduce using rule 220 (math_function_call -> tan_function .)
    RW_DO           reduce using rule 220 (math_function_call -> tan_function .)
    RW_TIMES        reduce using rule 220 (math_function_call -> tan_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 220 (math_function_call -> tan_function .)
    S_COMMA         reduce using rule 220 (math_function_call -> tan_function .)
    S_RIGHT_BRACKET reduce using rule 220 (math_function_call -> tan_function .)
    INDENT          reduce using rule 220 (math_function_call -> tan_function .)
    S_COLON         reduce using rule 220 (math_function_call -> tan_function .)
    RW_KAMUS        reduce using rule 220 (math_function_call -> tan_function .)
    RW_PROCEDURE    reduce using rule 220 (math_function_call -> tan_function .)
    RW_FUNCTION     reduce using rule 220 (math_function_call -> tan_function .)
    RW_TYPE         reduce using rule 220 (math_function_call -> tan_function .)


state 144

    (221) math_function_call -> succ_function .

    S_UP_TO         reduce using rule 221 (math_function_call -> succ_function .)
    S_POWER         reduce using rule 221 (math_function_call -> succ_function .)
    S_TIMES         reduce using rule 221 (math_function_call -> succ_function .)
    S_DIVIDE        reduce using rule 221 (math_function_call -> succ_function .)
    RW_DIV          reduce using rule 221 (math_function_call -> succ_function .)
    RW_MOD          reduce using rule 221 (math_function_call -> succ_function .)
    RW_AND          reduce using rule 221 (math_function_call -> succ_function .)
    S_PLUS          reduce using rule 221 (math_function_call -> succ_function .)
    S_MINUS         reduce using rule 221 (math_function_call -> succ_function .)
    RW_OR           reduce using rule 221 (math_function_call -> succ_function .)
    RW_XOR          reduce using rule 221 (math_function_call -> succ_function .)
    S_EQUAL         reduce using rule 221 (math_function_call -> succ_function .)
    S_NOT_EQUAL     reduce using rule 221 (math_function_call -> succ_function .)
    S_LESS_THAN_EQUAL reduce using rule 221 (math_function_call -> succ_function .)
    S_GREATER_THAN_EQUAL reduce using rule 221 (math_function_call -> succ_function .)
    S_LESS_THAN     reduce using rule 221 (math_function_call -> succ_function .)
    S_GREATER_THAN  reduce using rule 221 (math_function_call -> succ_function .)
    S_ELEMENT_OF    reduce using rule 221 (math_function_call -> succ_function .)
    RW_EQ           reduce using rule 221 (math_function_call -> succ_function .)
    RW_NEQ          reduce using rule 221 (math_function_call -> succ_function .)
    DEDENT          reduce using rule 221 (math_function_call -> succ_function .)
    S_SEMI_COLON    reduce using rule 221 (math_function_call -> succ_function .)
    S_RETURN        reduce using rule 221 (math_function_call -> succ_function .)
    RW_IF           reduce using rule 221 (math_function_call -> succ_function .)
    RW_DEPEND       reduce using rule 221 (math_function_call -> succ_function .)
    RW_WHILE        reduce using rule 221 (math_function_call -> succ_function .)
    RW_ITERATE      reduce using rule 221 (math_function_call -> succ_function .)
    IDENTIFIER      reduce using rule 221 (math_function_call -> succ_function .)
    RW_REPEAT       reduce using rule 221 (math_function_call -> succ_function .)
    RW_INPUT        reduce using rule 221 (math_function_call -> succ_function .)
    RW_OUTPUT       reduce using rule 221 (math_function_call -> succ_function .)
    RW_THEN         reduce using rule 221 (math_function_call -> succ_function .)
    RW_DO           reduce using rule 221 (math_function_call -> succ_function .)
    RW_TIMES        reduce using rule 221 (math_function_call -> succ_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 221 (math_function_call -> succ_function .)
    S_COMMA         reduce using rule 221 (math_function_call -> succ_function .)
    S_RIGHT_BRACKET reduce using rule 221 (math_function_call -> succ_function .)
    INDENT          reduce using rule 221 (math_function_call -> succ_function .)
    S_COLON         reduce using rule 221 (math_function_call -> succ_function .)
    RW_KAMUS        reduce using rule 221 (math_function_call -> succ_function .)
    RW_PROCEDURE    reduce using rule 221 (math_function_call -> succ_function .)
    RW_FUNCTION     reduce using rule 221 (math_function_call -> succ_function .)
    RW_TYPE         reduce using rule 221 (math_function_call -> succ_function .)


state 145

    (222) math_function_call -> pred_function .

    S_UP_TO         reduce using rule 222 (math_function_call -> pred_function .)
    S_POWER         reduce using rule 222 (math_function_call -> pred_function .)
    S_TIMES         reduce using rule 222 (math_function_call -> pred_function .)
    S_DIVIDE        reduce using rule 222 (math_function_call -> pred_function .)
    RW_DIV          reduce using rule 222 (math_function_call -> pred_function .)
    RW_MOD          reduce using rule 222 (math_function_call -> pred_function .)
    RW_AND          reduce using rule 222 (math_function_call -> pred_function .)
    S_PLUS          reduce using rule 222 (math_function_call -> pred_function .)
    S_MINUS         reduce using rule 222 (math_function_call -> pred_function .)
    RW_OR           reduce using rule 222 (math_function_call -> pred_function .)
    RW_XOR          reduce using rule 222 (math_function_call -> pred_function .)
    S_EQUAL         reduce using rule 222 (math_function_call -> pred_function .)
    S_NOT_EQUAL     reduce using rule 222 (math_function_call -> pred_function .)
    S_LESS_THAN_EQUAL reduce using rule 222 (math_function_call -> pred_function .)
    S_GREATER_THAN_EQUAL reduce using rule 222 (math_function_call -> pred_function .)
    S_LESS_THAN     reduce using rule 222 (math_function_call -> pred_function .)
    S_GREATER_THAN  reduce using rule 222 (math_function_call -> pred_function .)
    S_ELEMENT_OF    reduce using rule 222 (math_function_call -> pred_function .)
    RW_EQ           reduce using rule 222 (math_function_call -> pred_function .)
    RW_NEQ          reduce using rule 222 (math_function_call -> pred_function .)
    DEDENT          reduce using rule 222 (math_function_call -> pred_function .)
    S_SEMI_COLON    reduce using rule 222 (math_function_call -> pred_function .)
    S_RETURN        reduce using rule 222 (math_function_call -> pred_function .)
    RW_IF           reduce using rule 222 (math_function_call -> pred_function .)
    RW_DEPEND       reduce using rule 222 (math_function_call -> pred_function .)
    RW_WHILE        reduce using rule 222 (math_function_call -> pred_function .)
    RW_ITERATE      reduce using rule 222 (math_function_call -> pred_function .)
    IDENTIFIER      reduce using rule 222 (math_function_call -> pred_function .)
    RW_REPEAT       reduce using rule 222 (math_function_call -> pred_function .)
    RW_INPUT        reduce using rule 222 (math_function_call -> pred_function .)
    RW_OUTPUT       reduce using rule 222 (math_function_call -> pred_function .)
    RW_THEN         reduce using rule 222 (math_function_call -> pred_function .)
    RW_DO           reduce using rule 222 (math_function_call -> pred_function .)
    RW_TIMES        reduce using rule 222 (math_function_call -> pred_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 222 (math_function_call -> pred_function .)
    S_COMMA         reduce using rule 222 (math_function_call -> pred_function .)
    S_RIGHT_BRACKET reduce using rule 222 (math_function_call -> pred_function .)
    INDENT          reduce using rule 222 (math_function_call -> pred_function .)
    S_COLON         reduce using rule 222 (math_function_call -> pred_function .)
    RW_KAMUS        reduce using rule 222 (math_function_call -> pred_function .)
    RW_PROCEDURE    reduce using rule 222 (math_function_call -> pred_function .)
    RW_FUNCTION     reduce using rule 222 (math_function_call -> pred_function .)
    RW_TYPE         reduce using rule 222 (math_function_call -> pred_function .)


state 146

    (229) string_function_call -> awal_function .

    S_UP_TO         reduce using rule 229 (string_function_call -> awal_function .)
    S_POWER         reduce using rule 229 (string_function_call -> awal_function .)
    S_TIMES         reduce using rule 229 (string_function_call -> awal_function .)
    S_DIVIDE        reduce using rule 229 (string_function_call -> awal_function .)
    RW_DIV          reduce using rule 229 (string_function_call -> awal_function .)
    RW_MOD          reduce using rule 229 (string_function_call -> awal_function .)
    RW_AND          reduce using rule 229 (string_function_call -> awal_function .)
    S_PLUS          reduce using rule 229 (string_function_call -> awal_function .)
    S_MINUS         reduce using rule 229 (string_function_call -> awal_function .)
    RW_OR           reduce using rule 229 (string_function_call -> awal_function .)
    RW_XOR          reduce using rule 229 (string_function_call -> awal_function .)
    S_EQUAL         reduce using rule 229 (string_function_call -> awal_function .)
    S_NOT_EQUAL     reduce using rule 229 (string_function_call -> awal_function .)
    S_LESS_THAN_EQUAL reduce using rule 229 (string_function_call -> awal_function .)
    S_GREATER_THAN_EQUAL reduce using rule 229 (string_function_call -> awal_function .)
    S_LESS_THAN     reduce using rule 229 (string_function_call -> awal_function .)
    S_GREATER_THAN  reduce using rule 229 (string_function_call -> awal_function .)
    S_ELEMENT_OF    reduce using rule 229 (string_function_call -> awal_function .)
    RW_EQ           reduce using rule 229 (string_function_call -> awal_function .)
    RW_NEQ          reduce using rule 229 (string_function_call -> awal_function .)
    DEDENT          reduce using rule 229 (string_function_call -> awal_function .)
    S_SEMI_COLON    reduce using rule 229 (string_function_call -> awal_function .)
    S_RETURN        reduce using rule 229 (string_function_call -> awal_function .)
    RW_IF           reduce using rule 229 (string_function_call -> awal_function .)
    RW_DEPEND       reduce using rule 229 (string_function_call -> awal_function .)
    RW_WHILE        reduce using rule 229 (string_function_call -> awal_function .)
    RW_ITERATE      reduce using rule 229 (string_function_call -> awal_function .)
    IDENTIFIER      reduce using rule 229 (string_function_call -> awal_function .)
    RW_REPEAT       reduce using rule 229 (string_function_call -> awal_function .)
    RW_INPUT        reduce using rule 229 (string_function_call -> awal_function .)
    RW_OUTPUT       reduce using rule 229 (string_function_call -> awal_function .)
    RW_THEN         reduce using rule 229 (string_function_call -> awal_function .)
    RW_DO           reduce using rule 229 (string_function_call -> awal_function .)
    RW_TIMES        reduce using rule 229 (string_function_call -> awal_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 229 (string_function_call -> awal_function .)
    S_COMMA         reduce using rule 229 (string_function_call -> awal_function .)
    S_RIGHT_BRACKET reduce using rule 229 (string_function_call -> awal_function .)
    INDENT          reduce using rule 229 (string_function_call -> awal_function .)
    S_COLON         reduce using rule 229 (string_function_call -> awal_function .)
    RW_KAMUS        reduce using rule 229 (string_function_call -> awal_function .)
    RW_PROCEDURE    reduce using rule 229 (string_function_call -> awal_function .)
    RW_FUNCTION     reduce using rule 229 (string_function_call -> awal_function .)
    RW_TYPE         reduce using rule 229 (string_function_call -> awal_function .)


state 147

    (230) string_function_call -> akhir_function .

    S_UP_TO         reduce using rule 230 (string_function_call -> akhir_function .)
    S_POWER         reduce using rule 230 (string_function_call -> akhir_function .)
    S_TIMES         reduce using rule 230 (string_function_call -> akhir_function .)
    S_DIVIDE        reduce using rule 230 (string_function_call -> akhir_function .)
    RW_DIV          reduce using rule 230 (string_function_call -> akhir_function .)
    RW_MOD          reduce using rule 230 (string_function_call -> akhir_function .)
    RW_AND          reduce using rule 230 (string_function_call -> akhir_function .)
    S_PLUS          reduce using rule 230 (string_function_call -> akhir_function .)
    S_MINUS         reduce using rule 230 (string_function_call -> akhir_function .)
    RW_OR           reduce using rule 230 (string_function_call -> akhir_function .)
    RW_XOR          reduce using rule 230 (string_function_call -> akhir_function .)
    S_EQUAL         reduce using rule 230 (string_function_call -> akhir_function .)
    S_NOT_EQUAL     reduce using rule 230 (string_function_call -> akhir_function .)
    S_LESS_THAN_EQUAL reduce using rule 230 (string_function_call -> akhir_function .)
    S_GREATER_THAN_EQUAL reduce using rule 230 (string_function_call -> akhir_function .)
    S_LESS_THAN     reduce using rule 230 (string_function_call -> akhir_function .)
    S_GREATER_THAN  reduce using rule 230 (string_function_call -> akhir_function .)
    S_ELEMENT_OF    reduce using rule 230 (string_function_call -> akhir_function .)
    RW_EQ           reduce using rule 230 (string_function_call -> akhir_function .)
    RW_NEQ          reduce using rule 230 (string_function_call -> akhir_function .)
    DEDENT          reduce using rule 230 (string_function_call -> akhir_function .)
    S_SEMI_COLON    reduce using rule 230 (string_function_call -> akhir_function .)
    S_RETURN        reduce using rule 230 (string_function_call -> akhir_function .)
    RW_IF           reduce using rule 230 (string_function_call -> akhir_function .)
    RW_DEPEND       reduce using rule 230 (string_function_call -> akhir_function .)
    RW_WHILE        reduce using rule 230 (string_function_call -> akhir_function .)
    RW_ITERATE      reduce using rule 230 (string_function_call -> akhir_function .)
    IDENTIFIER      reduce using rule 230 (string_function_call -> akhir_function .)
    RW_REPEAT       reduce using rule 230 (string_function_call -> akhir_function .)
    RW_INPUT        reduce using rule 230 (string_function_call -> akhir_function .)
    RW_OUTPUT       reduce using rule 230 (string_function_call -> akhir_function .)
    RW_THEN         reduce using rule 230 (string_function_call -> akhir_function .)
    RW_DO           reduce using rule 230 (string_function_call -> akhir_function .)
    RW_TIMES        reduce using rule 230 (string_function_call -> akhir_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 230 (string_function_call -> akhir_function .)
    S_COMMA         reduce using rule 230 (string_function_call -> akhir_function .)
    S_RIGHT_BRACKET reduce using rule 230 (string_function_call -> akhir_function .)
    INDENT          reduce using rule 230 (string_function_call -> akhir_function .)
    S_COLON         reduce using rule 230 (string_function_call -> akhir_function .)
    RW_KAMUS        reduce using rule 230 (string_function_call -> akhir_function .)
    RW_PROCEDURE    reduce using rule 230 (string_function_call -> akhir_function .)
    RW_FUNCTION     reduce using rule 230 (string_function_call -> akhir_function .)
    RW_TYPE         reduce using rule 230 (string_function_call -> akhir_function .)


state 148

    (231) string_function_call -> firstchar_function .

    S_UP_TO         reduce using rule 231 (string_function_call -> firstchar_function .)
    S_POWER         reduce using rule 231 (string_function_call -> firstchar_function .)
    S_TIMES         reduce using rule 231 (string_function_call -> firstchar_function .)
    S_DIVIDE        reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_DIV          reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_MOD          reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_AND          reduce using rule 231 (string_function_call -> firstchar_function .)
    S_PLUS          reduce using rule 231 (string_function_call -> firstchar_function .)
    S_MINUS         reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_OR           reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_XOR          reduce using rule 231 (string_function_call -> firstchar_function .)
    S_EQUAL         reduce using rule 231 (string_function_call -> firstchar_function .)
    S_NOT_EQUAL     reduce using rule 231 (string_function_call -> firstchar_function .)
    S_LESS_THAN_EQUAL reduce using rule 231 (string_function_call -> firstchar_function .)
    S_GREATER_THAN_EQUAL reduce using rule 231 (string_function_call -> firstchar_function .)
    S_LESS_THAN     reduce using rule 231 (string_function_call -> firstchar_function .)
    S_GREATER_THAN  reduce using rule 231 (string_function_call -> firstchar_function .)
    S_ELEMENT_OF    reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_EQ           reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_NEQ          reduce using rule 231 (string_function_call -> firstchar_function .)
    DEDENT          reduce using rule 231 (string_function_call -> firstchar_function .)
    S_SEMI_COLON    reduce using rule 231 (string_function_call -> firstchar_function .)
    S_RETURN        reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_IF           reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_DEPEND       reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_WHILE        reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_ITERATE      reduce using rule 231 (string_function_call -> firstchar_function .)
    IDENTIFIER      reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_REPEAT       reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_INPUT        reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_OUTPUT       reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_THEN         reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_DO           reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_TIMES        reduce using rule 231 (string_function_call -> firstchar_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 231 (string_function_call -> firstchar_function .)
    S_COMMA         reduce using rule 231 (string_function_call -> firstchar_function .)
    S_RIGHT_BRACKET reduce using rule 231 (string_function_call -> firstchar_function .)
    INDENT          reduce using rule 231 (string_function_call -> firstchar_function .)
    S_COLON         reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_KAMUS        reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_PROCEDURE    reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_FUNCTION     reduce using rule 231 (string_function_call -> firstchar_function .)
    RW_TYPE         reduce using rule 231 (string_function_call -> firstchar_function .)


state 149

    (232) string_function_call -> lastchar_function .

    S_UP_TO         reduce using rule 232 (string_function_call -> lastchar_function .)
    S_POWER         reduce using rule 232 (string_function_call -> lastchar_function .)
    S_TIMES         reduce using rule 232 (string_function_call -> lastchar_function .)
    S_DIVIDE        reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_DIV          reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_MOD          reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_AND          reduce using rule 232 (string_function_call -> lastchar_function .)
    S_PLUS          reduce using rule 232 (string_function_call -> lastchar_function .)
    S_MINUS         reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_OR           reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_XOR          reduce using rule 232 (string_function_call -> lastchar_function .)
    S_EQUAL         reduce using rule 232 (string_function_call -> lastchar_function .)
    S_NOT_EQUAL     reduce using rule 232 (string_function_call -> lastchar_function .)
    S_LESS_THAN_EQUAL reduce using rule 232 (string_function_call -> lastchar_function .)
    S_GREATER_THAN_EQUAL reduce using rule 232 (string_function_call -> lastchar_function .)
    S_LESS_THAN     reduce using rule 232 (string_function_call -> lastchar_function .)
    S_GREATER_THAN  reduce using rule 232 (string_function_call -> lastchar_function .)
    S_ELEMENT_OF    reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_EQ           reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_NEQ          reduce using rule 232 (string_function_call -> lastchar_function .)
    DEDENT          reduce using rule 232 (string_function_call -> lastchar_function .)
    S_SEMI_COLON    reduce using rule 232 (string_function_call -> lastchar_function .)
    S_RETURN        reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_IF           reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_DEPEND       reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_WHILE        reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_ITERATE      reduce using rule 232 (string_function_call -> lastchar_function .)
    IDENTIFIER      reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_REPEAT       reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_INPUT        reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_OUTPUT       reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_THEN         reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_DO           reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_TIMES        reduce using rule 232 (string_function_call -> lastchar_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 232 (string_function_call -> lastchar_function .)
    S_COMMA         reduce using rule 232 (string_function_call -> lastchar_function .)
    S_RIGHT_BRACKET reduce using rule 232 (string_function_call -> lastchar_function .)
    INDENT          reduce using rule 232 (string_function_call -> lastchar_function .)
    S_COLON         reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_KAMUS        reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_PROCEDURE    reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_FUNCTION     reduce using rule 232 (string_function_call -> lastchar_function .)
    RW_TYPE         reduce using rule 232 (string_function_call -> lastchar_function .)


state 150

    (233) string_function_call -> long_function .

    S_UP_TO         reduce using rule 233 (string_function_call -> long_function .)
    S_POWER         reduce using rule 233 (string_function_call -> long_function .)
    S_TIMES         reduce using rule 233 (string_function_call -> long_function .)
    S_DIVIDE        reduce using rule 233 (string_function_call -> long_function .)
    RW_DIV          reduce using rule 233 (string_function_call -> long_function .)
    RW_MOD          reduce using rule 233 (string_function_call -> long_function .)
    RW_AND          reduce using rule 233 (string_function_call -> long_function .)
    S_PLUS          reduce using rule 233 (string_function_call -> long_function .)
    S_MINUS         reduce using rule 233 (string_function_call -> long_function .)
    RW_OR           reduce using rule 233 (string_function_call -> long_function .)
    RW_XOR          reduce using rule 233 (string_function_call -> long_function .)
    S_EQUAL         reduce using rule 233 (string_function_call -> long_function .)
    S_NOT_EQUAL     reduce using rule 233 (string_function_call -> long_function .)
    S_LESS_THAN_EQUAL reduce using rule 233 (string_function_call -> long_function .)
    S_GREATER_THAN_EQUAL reduce using rule 233 (string_function_call -> long_function .)
    S_LESS_THAN     reduce using rule 233 (string_function_call -> long_function .)
    S_GREATER_THAN  reduce using rule 233 (string_function_call -> long_function .)
    S_ELEMENT_OF    reduce using rule 233 (string_function_call -> long_function .)
    RW_EQ           reduce using rule 233 (string_function_call -> long_function .)
    RW_NEQ          reduce using rule 233 (string_function_call -> long_function .)
    DEDENT          reduce using rule 233 (string_function_call -> long_function .)
    S_SEMI_COLON    reduce using rule 233 (string_function_call -> long_function .)
    S_RETURN        reduce using rule 233 (string_function_call -> long_function .)
    RW_IF           reduce using rule 233 (string_function_call -> long_function .)
    RW_DEPEND       reduce using rule 233 (string_function_call -> long_function .)
    RW_WHILE        reduce using rule 233 (string_function_call -> long_function .)
    RW_ITERATE      reduce using rule 233 (string_function_call -> long_function .)
    IDENTIFIER      reduce using rule 233 (string_function_call -> long_function .)
    RW_REPEAT       reduce using rule 233 (string_function_call -> long_function .)
    RW_INPUT        reduce using rule 233 (string_function_call -> long_function .)
    RW_OUTPUT       reduce using rule 233 (string_function_call -> long_function .)
    RW_THEN         reduce using rule 233 (string_function_call -> long_function .)
    RW_DO           reduce using rule 233 (string_function_call -> long_function .)
    RW_TIMES        reduce using rule 233 (string_function_call -> long_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 233 (string_function_call -> long_function .)
    S_COMMA         reduce using rule 233 (string_function_call -> long_function .)
    S_RIGHT_BRACKET reduce using rule 233 (string_function_call -> long_function .)
    INDENT          reduce using rule 233 (string_function_call -> long_function .)
    S_COLON         reduce using rule 233 (string_function_call -> long_function .)
    RW_KAMUS        reduce using rule 233 (string_function_call -> long_function .)
    RW_PROCEDURE    reduce using rule 233 (string_function_call -> long_function .)
    RW_FUNCTION     reduce using rule 233 (string_function_call -> long_function .)
    RW_TYPE         reduce using rule 233 (string_function_call -> long_function .)


state 151

    (234) string_function_call -> iskosong_function .

    S_UP_TO         reduce using rule 234 (string_function_call -> iskosong_function .)
    S_POWER         reduce using rule 234 (string_function_call -> iskosong_function .)
    S_TIMES         reduce using rule 234 (string_function_call -> iskosong_function .)
    S_DIVIDE        reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_DIV          reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_MOD          reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_AND          reduce using rule 234 (string_function_call -> iskosong_function .)
    S_PLUS          reduce using rule 234 (string_function_call -> iskosong_function .)
    S_MINUS         reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_OR           reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_XOR          reduce using rule 234 (string_function_call -> iskosong_function .)
    S_EQUAL         reduce using rule 234 (string_function_call -> iskosong_function .)
    S_NOT_EQUAL     reduce using rule 234 (string_function_call -> iskosong_function .)
    S_LESS_THAN_EQUAL reduce using rule 234 (string_function_call -> iskosong_function .)
    S_GREATER_THAN_EQUAL reduce using rule 234 (string_function_call -> iskosong_function .)
    S_LESS_THAN     reduce using rule 234 (string_function_call -> iskosong_function .)
    S_GREATER_THAN  reduce using rule 234 (string_function_call -> iskosong_function .)
    S_ELEMENT_OF    reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_EQ           reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_NEQ          reduce using rule 234 (string_function_call -> iskosong_function .)
    DEDENT          reduce using rule 234 (string_function_call -> iskosong_function .)
    S_SEMI_COLON    reduce using rule 234 (string_function_call -> iskosong_function .)
    S_RETURN        reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_IF           reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_DEPEND       reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_WHILE        reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_ITERATE      reduce using rule 234 (string_function_call -> iskosong_function .)
    IDENTIFIER      reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_REPEAT       reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_INPUT        reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_OUTPUT       reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_THEN         reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_DO           reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_TIMES        reduce using rule 234 (string_function_call -> iskosong_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 234 (string_function_call -> iskosong_function .)
    S_COMMA         reduce using rule 234 (string_function_call -> iskosong_function .)
    S_RIGHT_BRACKET reduce using rule 234 (string_function_call -> iskosong_function .)
    INDENT          reduce using rule 234 (string_function_call -> iskosong_function .)
    S_COLON         reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_KAMUS        reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_PROCEDURE    reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_FUNCTION     reduce using rule 234 (string_function_call -> iskosong_function .)
    RW_TYPE         reduce using rule 234 (string_function_call -> iskosong_function .)


state 152

    (241) converter_function_call -> integer_to_real .

    S_UP_TO         reduce using rule 241 (converter_function_call -> integer_to_real .)
    S_POWER         reduce using rule 241 (converter_function_call -> integer_to_real .)
    S_TIMES         reduce using rule 241 (converter_function_call -> integer_to_real .)
    S_DIVIDE        reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_DIV          reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_MOD          reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_AND          reduce using rule 241 (converter_function_call -> integer_to_real .)
    S_PLUS          reduce using rule 241 (converter_function_call -> integer_to_real .)
    S_MINUS         reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_OR           reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_XOR          reduce using rule 241 (converter_function_call -> integer_to_real .)
    S_EQUAL         reduce using rule 241 (converter_function_call -> integer_to_real .)
    S_NOT_EQUAL     reduce using rule 241 (converter_function_call -> integer_to_real .)
    S_LESS_THAN_EQUAL reduce using rule 241 (converter_function_call -> integer_to_real .)
    S_GREATER_THAN_EQUAL reduce using rule 241 (converter_function_call -> integer_to_real .)
    S_LESS_THAN     reduce using rule 241 (converter_function_call -> integer_to_real .)
    S_GREATER_THAN  reduce using rule 241 (converter_function_call -> integer_to_real .)
    S_ELEMENT_OF    reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_EQ           reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_NEQ          reduce using rule 241 (converter_function_call -> integer_to_real .)
    DEDENT          reduce using rule 241 (converter_function_call -> integer_to_real .)
    S_SEMI_COLON    reduce using rule 241 (converter_function_call -> integer_to_real .)
    S_RETURN        reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_IF           reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_DEPEND       reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_WHILE        reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_ITERATE      reduce using rule 241 (converter_function_call -> integer_to_real .)
    IDENTIFIER      reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_REPEAT       reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_INPUT        reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_OUTPUT       reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_THEN         reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_DO           reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_TIMES        reduce using rule 241 (converter_function_call -> integer_to_real .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 241 (converter_function_call -> integer_to_real .)
    S_COMMA         reduce using rule 241 (converter_function_call -> integer_to_real .)
    S_RIGHT_BRACKET reduce using rule 241 (converter_function_call -> integer_to_real .)
    INDENT          reduce using rule 241 (converter_function_call -> integer_to_real .)
    S_COLON         reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_KAMUS        reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_PROCEDURE    reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_FUNCTION     reduce using rule 241 (converter_function_call -> integer_to_real .)
    RW_TYPE         reduce using rule 241 (converter_function_call -> integer_to_real .)


state 153

    (242) converter_function_call -> real_to_integer .

    S_UP_TO         reduce using rule 242 (converter_function_call -> real_to_integer .)
    S_POWER         reduce using rule 242 (converter_function_call -> real_to_integer .)
    S_TIMES         reduce using rule 242 (converter_function_call -> real_to_integer .)
    S_DIVIDE        reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_DIV          reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_MOD          reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_AND          reduce using rule 242 (converter_function_call -> real_to_integer .)
    S_PLUS          reduce using rule 242 (converter_function_call -> real_to_integer .)
    S_MINUS         reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_OR           reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_XOR          reduce using rule 242 (converter_function_call -> real_to_integer .)
    S_EQUAL         reduce using rule 242 (converter_function_call -> real_to_integer .)
    S_NOT_EQUAL     reduce using rule 242 (converter_function_call -> real_to_integer .)
    S_LESS_THAN_EQUAL reduce using rule 242 (converter_function_call -> real_to_integer .)
    S_GREATER_THAN_EQUAL reduce using rule 242 (converter_function_call -> real_to_integer .)
    S_LESS_THAN     reduce using rule 242 (converter_function_call -> real_to_integer .)
    S_GREATER_THAN  reduce using rule 242 (converter_function_call -> real_to_integer .)
    S_ELEMENT_OF    reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_EQ           reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_NEQ          reduce using rule 242 (converter_function_call -> real_to_integer .)
    DEDENT          reduce using rule 242 (converter_function_call -> real_to_integer .)
    S_SEMI_COLON    reduce using rule 242 (converter_function_call -> real_to_integer .)
    S_RETURN        reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_IF           reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_DEPEND       reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_WHILE        reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_ITERATE      reduce using rule 242 (converter_function_call -> real_to_integer .)
    IDENTIFIER      reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_REPEAT       reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_INPUT        reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_OUTPUT       reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_THEN         reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_DO           reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_TIMES        reduce using rule 242 (converter_function_call -> real_to_integer .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 242 (converter_function_call -> real_to_integer .)
    S_COMMA         reduce using rule 242 (converter_function_call -> real_to_integer .)
    S_RIGHT_BRACKET reduce using rule 242 (converter_function_call -> real_to_integer .)
    INDENT          reduce using rule 242 (converter_function_call -> real_to_integer .)
    S_COLON         reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_KAMUS        reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_PROCEDURE    reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_FUNCTION     reduce using rule 242 (converter_function_call -> real_to_integer .)
    RW_TYPE         reduce using rule 242 (converter_function_call -> real_to_integer .)


state 154

    (160) string_constant -> L_STRING .

    S_UP_TO         reduce using rule 160 (string_constant -> L_STRING .)
    S_POWER         reduce using rule 160 (string_constant -> L_STRING .)
    S_TIMES         reduce using rule 160 (string_constant -> L_STRING .)
    S_DIVIDE        reduce using rule 160 (string_constant -> L_STRING .)
    RW_DIV          reduce using rule 160 (string_constant -> L_STRING .)
    RW_MOD          reduce using rule 160 (string_constant -> L_STRING .)
    RW_AND          reduce using rule 160 (string_constant -> L_STRING .)
    S_PLUS          reduce using rule 160 (string_constant -> L_STRING .)
    S_MINUS         reduce using rule 160 (string_constant -> L_STRING .)
    RW_OR           reduce using rule 160 (string_constant -> L_STRING .)
    RW_XOR          reduce using rule 160 (string_constant -> L_STRING .)
    S_EQUAL         reduce using rule 160 (string_constant -> L_STRING .)
    S_NOT_EQUAL     reduce using rule 160 (string_constant -> L_STRING .)
    S_LESS_THAN_EQUAL reduce using rule 160 (string_constant -> L_STRING .)
    S_GREATER_THAN_EQUAL reduce using rule 160 (string_constant -> L_STRING .)
    S_LESS_THAN     reduce using rule 160 (string_constant -> L_STRING .)
    S_GREATER_THAN  reduce using rule 160 (string_constant -> L_STRING .)
    S_ELEMENT_OF    reduce using rule 160 (string_constant -> L_STRING .)
    RW_EQ           reduce using rule 160 (string_constant -> L_STRING .)
    RW_NEQ          reduce using rule 160 (string_constant -> L_STRING .)
    DEDENT          reduce using rule 160 (string_constant -> L_STRING .)
    S_SEMI_COLON    reduce using rule 160 (string_constant -> L_STRING .)
    S_RETURN        reduce using rule 160 (string_constant -> L_STRING .)
    RW_IF           reduce using rule 160 (string_constant -> L_STRING .)
    RW_DEPEND       reduce using rule 160 (string_constant -> L_STRING .)
    RW_WHILE        reduce using rule 160 (string_constant -> L_STRING .)
    RW_ITERATE      reduce using rule 160 (string_constant -> L_STRING .)
    IDENTIFIER      reduce using rule 160 (string_constant -> L_STRING .)
    RW_REPEAT       reduce using rule 160 (string_constant -> L_STRING .)
    RW_INPUT        reduce using rule 160 (string_constant -> L_STRING .)
    RW_OUTPUT       reduce using rule 160 (string_constant -> L_STRING .)
    RW_THEN         reduce using rule 160 (string_constant -> L_STRING .)
    RW_DO           reduce using rule 160 (string_constant -> L_STRING .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 160 (string_constant -> L_STRING .)
    S_COMMA         reduce using rule 160 (string_constant -> L_STRING .)
    S_RIGHT_BRACKET reduce using rule 160 (string_constant -> L_STRING .)
    INDENT          reduce using rule 160 (string_constant -> L_STRING .)
    S_COLON         reduce using rule 160 (string_constant -> L_STRING .)
    RW_KAMUS        reduce using rule 160 (string_constant -> L_STRING .)
    RW_PROCEDURE    reduce using rule 160 (string_constant -> L_STRING .)
    RW_FUNCTION     reduce using rule 160 (string_constant -> L_STRING .)
    RW_TYPE         reduce using rule 160 (string_constant -> L_STRING .)
    RW_CONSTANT     reduce using rule 160 (string_constant -> L_STRING .)


state 155

    (161) char_constant -> L_CHARACTER .

    S_UP_TO         reduce using rule 161 (char_constant -> L_CHARACTER .)
    S_POWER         reduce using rule 161 (char_constant -> L_CHARACTER .)
    S_TIMES         reduce using rule 161 (char_constant -> L_CHARACTER .)
    S_DIVIDE        reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_DIV          reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_MOD          reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_AND          reduce using rule 161 (char_constant -> L_CHARACTER .)
    S_PLUS          reduce using rule 161 (char_constant -> L_CHARACTER .)
    S_MINUS         reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_OR           reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_XOR          reduce using rule 161 (char_constant -> L_CHARACTER .)
    S_EQUAL         reduce using rule 161 (char_constant -> L_CHARACTER .)
    S_NOT_EQUAL     reduce using rule 161 (char_constant -> L_CHARACTER .)
    S_LESS_THAN_EQUAL reduce using rule 161 (char_constant -> L_CHARACTER .)
    S_GREATER_THAN_EQUAL reduce using rule 161 (char_constant -> L_CHARACTER .)
    S_LESS_THAN     reduce using rule 161 (char_constant -> L_CHARACTER .)
    S_GREATER_THAN  reduce using rule 161 (char_constant -> L_CHARACTER .)
    S_ELEMENT_OF    reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_EQ           reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_NEQ          reduce using rule 161 (char_constant -> L_CHARACTER .)
    DEDENT          reduce using rule 161 (char_constant -> L_CHARACTER .)
    S_SEMI_COLON    reduce using rule 161 (char_constant -> L_CHARACTER .)
    S_RETURN        reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_IF           reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_DEPEND       reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_WHILE        reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_ITERATE      reduce using rule 161 (char_constant -> L_CHARACTER .)
    IDENTIFIER      reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_REPEAT       reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_INPUT        reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_OUTPUT       reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_THEN         reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_DO           reduce using rule 161 (char_constant -> L_CHARACTER .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 161 (char_constant -> L_CHARACTER .)
    S_COMMA         reduce using rule 161 (char_constant -> L_CHARACTER .)
    S_RIGHT_BRACKET reduce using rule 161 (char_constant -> L_CHARACTER .)
    INDENT          reduce using rule 161 (char_constant -> L_CHARACTER .)
    S_COLON         reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_KAMUS        reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_PROCEDURE    reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_FUNCTION     reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_TYPE         reduce using rule 161 (char_constant -> L_CHARACTER .)
    RW_CONSTANT     reduce using rule 161 (char_constant -> L_CHARACTER .)


state 156

    (156) integer_constant -> L_INTEGER_NUMBER .

    S_UP_TO         reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    S_POWER         reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    S_TIMES         reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    S_DIVIDE        reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_DIV          reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_MOD          reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_AND          reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    S_PLUS          reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    S_MINUS         reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_OR           reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_XOR          reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    S_EQUAL         reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    S_NOT_EQUAL     reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    S_LESS_THAN_EQUAL reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    S_GREATER_THAN_EQUAL reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    S_LESS_THAN     reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    S_GREATER_THAN  reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    S_ELEMENT_OF    reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_EQ           reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_NEQ          reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    DEDENT          reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    S_SEMI_COLON    reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    S_RETURN        reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_IF           reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_DEPEND       reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_WHILE        reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_ITERATE      reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    IDENTIFIER      reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_REPEAT       reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_INPUT        reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_OUTPUT       reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_THEN         reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_DO           reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_TIMES        reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_KAMUS        reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_PROCEDURE    reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_FUNCTION     reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    S_RIGHT_BRACKET reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    S_COMMA         reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_TYPE         reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    RW_CONSTANT     reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    INDENT          reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)
    S_COLON         reduce using rule 156 (integer_constant -> L_INTEGER_NUMBER .)


state 157

    (157) real_constant -> L_REAL_NUMBER .

    S_UP_TO         reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    S_POWER         reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    S_TIMES         reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    S_DIVIDE        reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_DIV          reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_MOD          reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_AND          reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    S_PLUS          reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    S_MINUS         reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_OR           reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_XOR          reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    S_EQUAL         reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    S_NOT_EQUAL     reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    S_LESS_THAN_EQUAL reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    S_GREATER_THAN_EQUAL reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    S_LESS_THAN     reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    S_GREATER_THAN  reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    S_ELEMENT_OF    reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_EQ           reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_NEQ          reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    DEDENT          reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    S_SEMI_COLON    reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    S_RETURN        reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_IF           reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_DEPEND       reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_WHILE        reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_ITERATE      reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    IDENTIFIER      reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_REPEAT       reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_INPUT        reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_OUTPUT       reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_THEN         reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_DO           reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_KAMUS        reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_PROCEDURE    reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_FUNCTION     reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    S_RIGHT_BRACKET reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    S_COMMA         reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_TYPE         reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    RW_CONSTANT     reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    INDENT          reduce using rule 157 (real_constant -> L_REAL_NUMBER .)
    S_COLON         reduce using rule 157 (real_constant -> L_REAL_NUMBER .)


state 158

    (223) abs_function -> RW_ABS . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 240


state 159

    (224) sin_function -> RW_SIN . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 241


state 160

    (225) cos_function -> RW_COS . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 242


state 161

    (226) tan_function -> RW_TAN . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 243


state 162

    (227) succ_function -> RW_SUCC . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 244


state 163

    (228) pred_function -> RW_PRED . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 245


state 164

    (235) awal_function -> RW_AWAL . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 246


state 165

    (236) akhir_function -> RW_AKHIR . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 247


state 166

    (237) firstchar_function -> RW_FIRSTCHAR . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 248


state 167

    (238) lastchar_function -> RW_LASTCHAR . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 249


state 168

    (239) long_function -> RW_LONG . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 250


state 169

    (240) iskosong_function -> RW_ISKOSONG . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 251


state 170

    (243) integer_to_real -> RW_INTEGERTOREAL . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 252


state 171

    (244) real_to_integer -> RW_REALTOINTEGER . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 253


state 172

    (92) compound_statement -> INDENT statement_sequence DEDENT .

    RW_PROCEDURE    reduce using rule 92 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_FUNCTION     reduce using rule 92 (compound_statement -> INDENT statement_sequence DEDENT .)
    $end            reduce using rule 92 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_STOP         reduce using rule 92 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_UNTIL        reduce using rule 92 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_ELSE         reduce using rule 92 (compound_statement -> INDENT statement_sequence DEDENT .)
    DEDENT          reduce using rule 92 (compound_statement -> INDENT statement_sequence DEDENT .)
    S_SEMI_COLON    reduce using rule 92 (compound_statement -> INDENT statement_sequence DEDENT .)
    S_RETURN        reduce using rule 92 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_IF           reduce using rule 92 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_DEPEND       reduce using rule 92 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_WHILE        reduce using rule 92 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_ITERATE      reduce using rule 92 (compound_statement -> INDENT statement_sequence DEDENT .)
    IDENTIFIER      reduce using rule 92 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_REPEAT       reduce using rule 92 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_INPUT        reduce using rule 92 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_OUTPUT       reduce using rule 92 (compound_statement -> INDENT statement_sequence DEDENT .)


state 173

    (93) statement_sequence -> statement_sequence S_SEMI_COLON . statement
    (96) statement -> . assignment_statement
    (97) statement -> . procedure_statement
    (98) statement -> . function_returned_statement
    (99) statement -> . if_statement
    (100) statement -> . depend_on_statement
    (101) statement -> . while_statement
    (102) statement -> . traversal_statement
    (103) statement -> . repeat_statement
    (104) statement -> . iterate_stop_statement
    (105) assignment_statement -> . variable_access S_ASSIGNMENT expression
    (106) procedure_statement -> . input_output_procedure_statement
    (107) procedure_statement -> . identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
    (108) procedure_statement -> . identifier
    (122) function_returned_statement -> . S_RETURN expression
    (127) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement
    (128) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
    (123) depend_on_statement -> . RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (136) while_statement -> . RW_WHILE boolean_expression RW_DO compound_statement
    (138) traversal_statement -> . control_variable RW_TRAVERSAL traversal_range_value compound_statement
    (130) repeat_statement -> . repeat_until_statement
    (131) repeat_statement -> . repeat_times_statement
    (137) iterate_stop_statement -> . RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (112) input_output_procedure_statement -> . input_statement
    (113) input_output_procedure_statement -> . output_statement
    (246) identifier -> . IDENTIFIER
    (140) control_variable -> . identifier
    (132) repeat_until_statement -> . RW_REPEAT compound_statement RW_UNTIL boolean_expression
    (133) repeat_times_statement -> . RW_REPEAT variable_access RW_TIMES compound_statement
    (134) repeat_times_statement -> . RW_REPEAT integer_constant RW_TIMES compound_statement
    (135) repeat_times_statement -> . RW_REPEAT function_designator RW_TIMES compound_statement
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (114) input_statement -> . RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET
    (118) output_statement -> . RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET

    S_RETURN        shift and go to state 65
    RW_IF           shift and go to state 66
    RW_DEPEND       shift and go to state 67
    RW_WHILE        shift and go to state 68
    RW_ITERATE      shift and go to state 72
    IDENTIFIER      shift and go to state 5
    RW_REPEAT       shift and go to state 77
    RW_INPUT        shift and go to state 78
    RW_OUTPUT       shift and go to state 79

    statement                      shift and go to state 254
    assignment_statement           shift and go to state 53
    procedure_statement            shift and go to state 54
    function_returned_statement    shift and go to state 55
    if_statement                   shift and go to state 56
    depend_on_statement            shift and go to state 57
    while_statement                shift and go to state 58
    traversal_statement            shift and go to state 59
    repeat_statement               shift and go to state 60
    iterate_stop_statement         shift and go to state 61
    variable_access                shift and go to state 62
    input_output_procedure_statement shift and go to state 63
    identifier                     shift and go to state 64
    control_variable               shift and go to state 69
    repeat_until_statement         shift and go to state 70
    repeat_times_statement         shift and go to state 71
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    input_statement                shift and go to state 75
    output_statement               shift and go to state 76

state 174

    (94) statement_sequence -> statement_sequence statement .

    DEDENT          reduce using rule 94 (statement_sequence -> statement_sequence statement .)
    S_SEMI_COLON    reduce using rule 94 (statement_sequence -> statement_sequence statement .)
    S_RETURN        reduce using rule 94 (statement_sequence -> statement_sequence statement .)
    RW_IF           reduce using rule 94 (statement_sequence -> statement_sequence statement .)
    RW_DEPEND       reduce using rule 94 (statement_sequence -> statement_sequence statement .)
    RW_WHILE        reduce using rule 94 (statement_sequence -> statement_sequence statement .)
    RW_ITERATE      reduce using rule 94 (statement_sequence -> statement_sequence statement .)
    IDENTIFIER      reduce using rule 94 (statement_sequence -> statement_sequence statement .)
    RW_REPEAT       reduce using rule 94 (statement_sequence -> statement_sequence statement .)
    RW_INPUT        reduce using rule 94 (statement_sequence -> statement_sequence statement .)
    RW_OUTPUT       reduce using rule 94 (statement_sequence -> statement_sequence statement .)


state 175

    (105) assignment_statement -> variable_access S_ASSIGNMENT . expression
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    variable_access                shift and go to state 189
    expression                     shift and go to state 255
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 176

    (166) indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET . index_expression_list S_RIGHT_SQUARE_BRACKET
    (167) index_expression_list -> . index_expression_list S_COMMA expression
    (168) index_expression_list -> . expression
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    variable_access                shift and go to state 189
    index_expression_list          shift and go to state 256
    expression                     shift and go to state 257
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 177

    (169) field_designator -> variable_access S_DOT . identifier
    (246) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 5

    identifier                     shift and go to state 258

state 178

    (107) procedure_statement -> identifier S_LEFT_BRACKET . actual_parameter_list S_RIGHT_BRACKET
    (109) actual_parameter_list -> . actual_parameter_list S_COMMA actual_parameter
    (110) actual_parameter_list -> . actual_parameter
    (111) actual_parameter -> . expression
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    identifier                     shift and go to state 194
    actual_parameter_list          shift and go to state 259
    actual_parameter               shift and go to state 260
    expression                     shift and go to state 261
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 179

    (122) function_returned_statement -> S_RETURN expression .
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    DEDENT          reduce using rule 122 (function_returned_statement -> S_RETURN expression .)
    S_SEMI_COLON    reduce using rule 122 (function_returned_statement -> S_RETURN expression .)
    S_RETURN        reduce using rule 122 (function_returned_statement -> S_RETURN expression .)
    RW_IF           reduce using rule 122 (function_returned_statement -> S_RETURN expression .)
    RW_DEPEND       reduce using rule 122 (function_returned_statement -> S_RETURN expression .)
    RW_WHILE        reduce using rule 122 (function_returned_statement -> S_RETURN expression .)
    RW_ITERATE      reduce using rule 122 (function_returned_statement -> S_RETURN expression .)
    IDENTIFIER      reduce using rule 122 (function_returned_statement -> S_RETURN expression .)
    RW_REPEAT       reduce using rule 122 (function_returned_statement -> S_RETURN expression .)
    RW_INPUT        reduce using rule 122 (function_returned_statement -> S_RETURN expression .)
    RW_OUTPUT       reduce using rule 122 (function_returned_statement -> S_RETURN expression .)
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 180

    (171) expression -> additive_expression .
    (181) additive_expression -> additive_expression . additive_op multiplicative_expression
    (183) additive_op -> . S_PLUS
    (184) additive_op -> . S_MINUS
    (185) additive_op -> . RW_OR
    (186) additive_op -> . RW_XOR

    S_EQUAL         reduce using rule 171 (expression -> additive_expression .)
    S_NOT_EQUAL     reduce using rule 171 (expression -> additive_expression .)
    S_LESS_THAN_EQUAL reduce using rule 171 (expression -> additive_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 171 (expression -> additive_expression .)
    S_LESS_THAN     reduce using rule 171 (expression -> additive_expression .)
    S_GREATER_THAN  reduce using rule 171 (expression -> additive_expression .)
    S_ELEMENT_OF    reduce using rule 171 (expression -> additive_expression .)
    RW_EQ           reduce using rule 171 (expression -> additive_expression .)
    RW_NEQ          reduce using rule 171 (expression -> additive_expression .)
    DEDENT          reduce using rule 171 (expression -> additive_expression .)
    S_SEMI_COLON    reduce using rule 171 (expression -> additive_expression .)
    S_RETURN        reduce using rule 171 (expression -> additive_expression .)
    RW_IF           reduce using rule 171 (expression -> additive_expression .)
    RW_DEPEND       reduce using rule 171 (expression -> additive_expression .)
    RW_WHILE        reduce using rule 171 (expression -> additive_expression .)
    RW_ITERATE      reduce using rule 171 (expression -> additive_expression .)
    IDENTIFIER      reduce using rule 171 (expression -> additive_expression .)
    RW_REPEAT       reduce using rule 171 (expression -> additive_expression .)
    RW_INPUT        reduce using rule 171 (expression -> additive_expression .)
    RW_OUTPUT       reduce using rule 171 (expression -> additive_expression .)
    RW_THEN         reduce using rule 171 (expression -> additive_expression .)
    RW_DO           reduce using rule 171 (expression -> additive_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 171 (expression -> additive_expression .)
    S_COMMA         reduce using rule 171 (expression -> additive_expression .)
    S_RIGHT_BRACKET reduce using rule 171 (expression -> additive_expression .)
    S_UP_TO         reduce using rule 171 (expression -> additive_expression .)
    INDENT          reduce using rule 171 (expression -> additive_expression .)
    S_COLON         reduce using rule 171 (expression -> additive_expression .)
    S_PLUS          shift and go to state 273
    S_MINUS         shift and go to state 274
    RW_OR           shift and go to state 275
    RW_XOR          shift and go to state 276

    additive_op                    shift and go to state 272

state 181

    (182) additive_expression -> multiplicative_expression .
    (187) multiplicative_expression -> multiplicative_expression . multiplicative_op unary_expression
    (189) multiplicative_op -> . S_TIMES
    (190) multiplicative_op -> . S_DIVIDE
    (191) multiplicative_op -> . RW_DIV
    (192) multiplicative_op -> . RW_MOD
    (193) multiplicative_op -> . RW_AND

    S_PLUS          reduce using rule 182 (additive_expression -> multiplicative_expression .)
    S_MINUS         reduce using rule 182 (additive_expression -> multiplicative_expression .)
    RW_OR           reduce using rule 182 (additive_expression -> multiplicative_expression .)
    RW_XOR          reduce using rule 182 (additive_expression -> multiplicative_expression .)
    S_EQUAL         reduce using rule 182 (additive_expression -> multiplicative_expression .)
    S_NOT_EQUAL     reduce using rule 182 (additive_expression -> multiplicative_expression .)
    S_LESS_THAN_EQUAL reduce using rule 182 (additive_expression -> multiplicative_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 182 (additive_expression -> multiplicative_expression .)
    S_LESS_THAN     reduce using rule 182 (additive_expression -> multiplicative_expression .)
    S_GREATER_THAN  reduce using rule 182 (additive_expression -> multiplicative_expression .)
    S_ELEMENT_OF    reduce using rule 182 (additive_expression -> multiplicative_expression .)
    RW_EQ           reduce using rule 182 (additive_expression -> multiplicative_expression .)
    RW_NEQ          reduce using rule 182 (additive_expression -> multiplicative_expression .)
    DEDENT          reduce using rule 182 (additive_expression -> multiplicative_expression .)
    S_SEMI_COLON    reduce using rule 182 (additive_expression -> multiplicative_expression .)
    S_RETURN        reduce using rule 182 (additive_expression -> multiplicative_expression .)
    RW_IF           reduce using rule 182 (additive_expression -> multiplicative_expression .)
    RW_DEPEND       reduce using rule 182 (additive_expression -> multiplicative_expression .)
    RW_WHILE        reduce using rule 182 (additive_expression -> multiplicative_expression .)
    RW_ITERATE      reduce using rule 182 (additive_expression -> multiplicative_expression .)
    IDENTIFIER      reduce using rule 182 (additive_expression -> multiplicative_expression .)
    RW_REPEAT       reduce using rule 182 (additive_expression -> multiplicative_expression .)
    RW_INPUT        reduce using rule 182 (additive_expression -> multiplicative_expression .)
    RW_OUTPUT       reduce using rule 182 (additive_expression -> multiplicative_expression .)
    RW_THEN         reduce using rule 182 (additive_expression -> multiplicative_expression .)
    RW_DO           reduce using rule 182 (additive_expression -> multiplicative_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 182 (additive_expression -> multiplicative_expression .)
    S_COMMA         reduce using rule 182 (additive_expression -> multiplicative_expression .)
    S_RIGHT_BRACKET reduce using rule 182 (additive_expression -> multiplicative_expression .)
    S_UP_TO         reduce using rule 182 (additive_expression -> multiplicative_expression .)
    INDENT          reduce using rule 182 (additive_expression -> multiplicative_expression .)
    S_COLON         reduce using rule 182 (additive_expression -> multiplicative_expression .)
    S_TIMES         shift and go to state 278
    S_DIVIDE        shift and go to state 279
    RW_DIV          shift and go to state 280
    RW_MOD          shift and go to state 281
    RW_AND          shift and go to state 282

    multiplicative_op              shift and go to state 277

state 182

    (188) multiplicative_expression -> unary_expression .

    S_TIMES         reduce using rule 188 (multiplicative_expression -> unary_expression .)
    S_DIVIDE        reduce using rule 188 (multiplicative_expression -> unary_expression .)
    RW_DIV          reduce using rule 188 (multiplicative_expression -> unary_expression .)
    RW_MOD          reduce using rule 188 (multiplicative_expression -> unary_expression .)
    RW_AND          reduce using rule 188 (multiplicative_expression -> unary_expression .)
    S_PLUS          reduce using rule 188 (multiplicative_expression -> unary_expression .)
    S_MINUS         reduce using rule 188 (multiplicative_expression -> unary_expression .)
    RW_OR           reduce using rule 188 (multiplicative_expression -> unary_expression .)
    RW_XOR          reduce using rule 188 (multiplicative_expression -> unary_expression .)
    S_EQUAL         reduce using rule 188 (multiplicative_expression -> unary_expression .)
    S_NOT_EQUAL     reduce using rule 188 (multiplicative_expression -> unary_expression .)
    S_LESS_THAN_EQUAL reduce using rule 188 (multiplicative_expression -> unary_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 188 (multiplicative_expression -> unary_expression .)
    S_LESS_THAN     reduce using rule 188 (multiplicative_expression -> unary_expression .)
    S_GREATER_THAN  reduce using rule 188 (multiplicative_expression -> unary_expression .)
    S_ELEMENT_OF    reduce using rule 188 (multiplicative_expression -> unary_expression .)
    RW_EQ           reduce using rule 188 (multiplicative_expression -> unary_expression .)
    RW_NEQ          reduce using rule 188 (multiplicative_expression -> unary_expression .)
    DEDENT          reduce using rule 188 (multiplicative_expression -> unary_expression .)
    S_SEMI_COLON    reduce using rule 188 (multiplicative_expression -> unary_expression .)
    S_RETURN        reduce using rule 188 (multiplicative_expression -> unary_expression .)
    RW_IF           reduce using rule 188 (multiplicative_expression -> unary_expression .)
    RW_DEPEND       reduce using rule 188 (multiplicative_expression -> unary_expression .)
    RW_WHILE        reduce using rule 188 (multiplicative_expression -> unary_expression .)
    RW_ITERATE      reduce using rule 188 (multiplicative_expression -> unary_expression .)
    IDENTIFIER      reduce using rule 188 (multiplicative_expression -> unary_expression .)
    RW_REPEAT       reduce using rule 188 (multiplicative_expression -> unary_expression .)
    RW_INPUT        reduce using rule 188 (multiplicative_expression -> unary_expression .)
    RW_OUTPUT       reduce using rule 188 (multiplicative_expression -> unary_expression .)
    RW_THEN         reduce using rule 188 (multiplicative_expression -> unary_expression .)
    RW_DO           reduce using rule 188 (multiplicative_expression -> unary_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 188 (multiplicative_expression -> unary_expression .)
    S_COMMA         reduce using rule 188 (multiplicative_expression -> unary_expression .)
    S_RIGHT_BRACKET reduce using rule 188 (multiplicative_expression -> unary_expression .)
    S_UP_TO         reduce using rule 188 (multiplicative_expression -> unary_expression .)
    INDENT          reduce using rule 188 (multiplicative_expression -> unary_expression .)
    S_COLON         reduce using rule 188 (multiplicative_expression -> unary_expression .)


state 183

    (194) unary_expression -> unary_op . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    unary_op                       shift and go to state 183
    unary_expression               shift and go to state 283
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 184

    (195) unary_expression -> exponentiation_expression .

    S_TIMES         reduce using rule 195 (unary_expression -> exponentiation_expression .)
    S_DIVIDE        reduce using rule 195 (unary_expression -> exponentiation_expression .)
    RW_DIV          reduce using rule 195 (unary_expression -> exponentiation_expression .)
    RW_MOD          reduce using rule 195 (unary_expression -> exponentiation_expression .)
    RW_AND          reduce using rule 195 (unary_expression -> exponentiation_expression .)
    S_PLUS          reduce using rule 195 (unary_expression -> exponentiation_expression .)
    S_MINUS         reduce using rule 195 (unary_expression -> exponentiation_expression .)
    RW_OR           reduce using rule 195 (unary_expression -> exponentiation_expression .)
    RW_XOR          reduce using rule 195 (unary_expression -> exponentiation_expression .)
    S_EQUAL         reduce using rule 195 (unary_expression -> exponentiation_expression .)
    S_NOT_EQUAL     reduce using rule 195 (unary_expression -> exponentiation_expression .)
    S_LESS_THAN_EQUAL reduce using rule 195 (unary_expression -> exponentiation_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 195 (unary_expression -> exponentiation_expression .)
    S_LESS_THAN     reduce using rule 195 (unary_expression -> exponentiation_expression .)
    S_GREATER_THAN  reduce using rule 195 (unary_expression -> exponentiation_expression .)
    S_ELEMENT_OF    reduce using rule 195 (unary_expression -> exponentiation_expression .)
    RW_EQ           reduce using rule 195 (unary_expression -> exponentiation_expression .)
    RW_NEQ          reduce using rule 195 (unary_expression -> exponentiation_expression .)
    DEDENT          reduce using rule 195 (unary_expression -> exponentiation_expression .)
    S_SEMI_COLON    reduce using rule 195 (unary_expression -> exponentiation_expression .)
    S_RETURN        reduce using rule 195 (unary_expression -> exponentiation_expression .)
    RW_IF           reduce using rule 195 (unary_expression -> exponentiation_expression .)
    RW_DEPEND       reduce using rule 195 (unary_expression -> exponentiation_expression .)
    RW_WHILE        reduce using rule 195 (unary_expression -> exponentiation_expression .)
    RW_ITERATE      reduce using rule 195 (unary_expression -> exponentiation_expression .)
    IDENTIFIER      reduce using rule 195 (unary_expression -> exponentiation_expression .)
    RW_REPEAT       reduce using rule 195 (unary_expression -> exponentiation_expression .)
    RW_INPUT        reduce using rule 195 (unary_expression -> exponentiation_expression .)
    RW_OUTPUT       reduce using rule 195 (unary_expression -> exponentiation_expression .)
    RW_THEN         reduce using rule 195 (unary_expression -> exponentiation_expression .)
    RW_DO           reduce using rule 195 (unary_expression -> exponentiation_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 195 (unary_expression -> exponentiation_expression .)
    S_COMMA         reduce using rule 195 (unary_expression -> exponentiation_expression .)
    S_RIGHT_BRACKET reduce using rule 195 (unary_expression -> exponentiation_expression .)
    S_UP_TO         reduce using rule 195 (unary_expression -> exponentiation_expression .)
    INDENT          reduce using rule 195 (unary_expression -> exponentiation_expression .)
    S_COLON         reduce using rule 195 (unary_expression -> exponentiation_expression .)


state 185

    (198) unary_op -> S_PLUS .

    S_PLUS          reduce using rule 198 (unary_op -> S_PLUS .)
    S_MINUS         reduce using rule 198 (unary_op -> S_PLUS .)
    RW_NOT          reduce using rule 198 (unary_op -> S_PLUS .)
    S_LEFT_BRACKET  reduce using rule 198 (unary_op -> S_PLUS .)
    S_LEFT_SQUARE_BRACKET reduce using rule 198 (unary_op -> S_PLUS .)
    IDENTIFIER      reduce using rule 198 (unary_op -> S_PLUS .)
    L_BOOLEAN_TRUE  reduce using rule 198 (unary_op -> S_PLUS .)
    L_BOOLEAN_FALSE reduce using rule 198 (unary_op -> S_PLUS .)
    L_NIL           reduce using rule 198 (unary_op -> S_PLUS .)
    L_INTEGER_NUMBER reduce using rule 198 (unary_op -> S_PLUS .)
    L_REAL_NUMBER   reduce using rule 198 (unary_op -> S_PLUS .)
    L_STRING        reduce using rule 198 (unary_op -> S_PLUS .)
    L_CHARACTER     reduce using rule 198 (unary_op -> S_PLUS .)
    RW_ABS          reduce using rule 198 (unary_op -> S_PLUS .)
    RW_SIN          reduce using rule 198 (unary_op -> S_PLUS .)
    RW_COS          reduce using rule 198 (unary_op -> S_PLUS .)
    RW_TAN          reduce using rule 198 (unary_op -> S_PLUS .)
    RW_SUCC         reduce using rule 198 (unary_op -> S_PLUS .)
    RW_PRED         reduce using rule 198 (unary_op -> S_PLUS .)
    RW_AWAL         reduce using rule 198 (unary_op -> S_PLUS .)
    RW_AKHIR        reduce using rule 198 (unary_op -> S_PLUS .)
    RW_FIRSTCHAR    reduce using rule 198 (unary_op -> S_PLUS .)
    RW_LASTCHAR     reduce using rule 198 (unary_op -> S_PLUS .)
    RW_LONG         reduce using rule 198 (unary_op -> S_PLUS .)
    RW_ISKOSONG     reduce using rule 198 (unary_op -> S_PLUS .)
    RW_INTEGERTOREAL reduce using rule 198 (unary_op -> S_PLUS .)
    RW_REALTOINTEGER reduce using rule 198 (unary_op -> S_PLUS .)


state 186

    (199) unary_op -> S_MINUS .

    S_PLUS          reduce using rule 199 (unary_op -> S_MINUS .)
    S_MINUS         reduce using rule 199 (unary_op -> S_MINUS .)
    RW_NOT          reduce using rule 199 (unary_op -> S_MINUS .)
    S_LEFT_BRACKET  reduce using rule 199 (unary_op -> S_MINUS .)
    S_LEFT_SQUARE_BRACKET reduce using rule 199 (unary_op -> S_MINUS .)
    IDENTIFIER      reduce using rule 199 (unary_op -> S_MINUS .)
    L_BOOLEAN_TRUE  reduce using rule 199 (unary_op -> S_MINUS .)
    L_BOOLEAN_FALSE reduce using rule 199 (unary_op -> S_MINUS .)
    L_NIL           reduce using rule 199 (unary_op -> S_MINUS .)
    L_INTEGER_NUMBER reduce using rule 199 (unary_op -> S_MINUS .)
    L_REAL_NUMBER   reduce using rule 199 (unary_op -> S_MINUS .)
    L_STRING        reduce using rule 199 (unary_op -> S_MINUS .)
    L_CHARACTER     reduce using rule 199 (unary_op -> S_MINUS .)
    RW_ABS          reduce using rule 199 (unary_op -> S_MINUS .)
    RW_SIN          reduce using rule 199 (unary_op -> S_MINUS .)
    RW_COS          reduce using rule 199 (unary_op -> S_MINUS .)
    RW_TAN          reduce using rule 199 (unary_op -> S_MINUS .)
    RW_SUCC         reduce using rule 199 (unary_op -> S_MINUS .)
    RW_PRED         reduce using rule 199 (unary_op -> S_MINUS .)
    RW_AWAL         reduce using rule 199 (unary_op -> S_MINUS .)
    RW_AKHIR        reduce using rule 199 (unary_op -> S_MINUS .)
    RW_FIRSTCHAR    reduce using rule 199 (unary_op -> S_MINUS .)
    RW_LASTCHAR     reduce using rule 199 (unary_op -> S_MINUS .)
    RW_LONG         reduce using rule 199 (unary_op -> S_MINUS .)
    RW_ISKOSONG     reduce using rule 199 (unary_op -> S_MINUS .)
    RW_INTEGERTOREAL reduce using rule 199 (unary_op -> S_MINUS .)
    RW_REALTOINTEGER reduce using rule 199 (unary_op -> S_MINUS .)


state 187

    (200) unary_op -> RW_NOT .

    S_PLUS          reduce using rule 200 (unary_op -> RW_NOT .)
    S_MINUS         reduce using rule 200 (unary_op -> RW_NOT .)
    RW_NOT          reduce using rule 200 (unary_op -> RW_NOT .)
    S_LEFT_BRACKET  reduce using rule 200 (unary_op -> RW_NOT .)
    S_LEFT_SQUARE_BRACKET reduce using rule 200 (unary_op -> RW_NOT .)
    IDENTIFIER      reduce using rule 200 (unary_op -> RW_NOT .)
    L_BOOLEAN_TRUE  reduce using rule 200 (unary_op -> RW_NOT .)
    L_BOOLEAN_FALSE reduce using rule 200 (unary_op -> RW_NOT .)
    L_NIL           reduce using rule 200 (unary_op -> RW_NOT .)
    L_INTEGER_NUMBER reduce using rule 200 (unary_op -> RW_NOT .)
    L_REAL_NUMBER   reduce using rule 200 (unary_op -> RW_NOT .)
    L_STRING        reduce using rule 200 (unary_op -> RW_NOT .)
    L_CHARACTER     reduce using rule 200 (unary_op -> RW_NOT .)
    RW_ABS          reduce using rule 200 (unary_op -> RW_NOT .)
    RW_SIN          reduce using rule 200 (unary_op -> RW_NOT .)
    RW_COS          reduce using rule 200 (unary_op -> RW_NOT .)
    RW_TAN          reduce using rule 200 (unary_op -> RW_NOT .)
    RW_SUCC         reduce using rule 200 (unary_op -> RW_NOT .)
    RW_PRED         reduce using rule 200 (unary_op -> RW_NOT .)
    RW_AWAL         reduce using rule 200 (unary_op -> RW_NOT .)
    RW_AKHIR        reduce using rule 200 (unary_op -> RW_NOT .)
    RW_FIRSTCHAR    reduce using rule 200 (unary_op -> RW_NOT .)
    RW_LASTCHAR     reduce using rule 200 (unary_op -> RW_NOT .)
    RW_LONG         reduce using rule 200 (unary_op -> RW_NOT .)
    RW_ISKOSONG     reduce using rule 200 (unary_op -> RW_NOT .)
    RW_INTEGERTOREAL reduce using rule 200 (unary_op -> RW_NOT .)
    RW_REALTOINTEGER reduce using rule 200 (unary_op -> RW_NOT .)


state 188

    (196) exponentiation_expression -> primary_expression .
    (197) exponentiation_expression -> primary_expression . S_POWER exponentiation_expression

    S_TIMES         reduce using rule 196 (exponentiation_expression -> primary_expression .)
    S_DIVIDE        reduce using rule 196 (exponentiation_expression -> primary_expression .)
    RW_DIV          reduce using rule 196 (exponentiation_expression -> primary_expression .)
    RW_MOD          reduce using rule 196 (exponentiation_expression -> primary_expression .)
    RW_AND          reduce using rule 196 (exponentiation_expression -> primary_expression .)
    S_PLUS          reduce using rule 196 (exponentiation_expression -> primary_expression .)
    S_MINUS         reduce using rule 196 (exponentiation_expression -> primary_expression .)
    RW_OR           reduce using rule 196 (exponentiation_expression -> primary_expression .)
    RW_XOR          reduce using rule 196 (exponentiation_expression -> primary_expression .)
    S_EQUAL         reduce using rule 196 (exponentiation_expression -> primary_expression .)
    S_NOT_EQUAL     reduce using rule 196 (exponentiation_expression -> primary_expression .)
    S_LESS_THAN_EQUAL reduce using rule 196 (exponentiation_expression -> primary_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 196 (exponentiation_expression -> primary_expression .)
    S_LESS_THAN     reduce using rule 196 (exponentiation_expression -> primary_expression .)
    S_GREATER_THAN  reduce using rule 196 (exponentiation_expression -> primary_expression .)
    S_ELEMENT_OF    reduce using rule 196 (exponentiation_expression -> primary_expression .)
    RW_EQ           reduce using rule 196 (exponentiation_expression -> primary_expression .)
    RW_NEQ          reduce using rule 196 (exponentiation_expression -> primary_expression .)
    DEDENT          reduce using rule 196 (exponentiation_expression -> primary_expression .)
    S_SEMI_COLON    reduce using rule 196 (exponentiation_expression -> primary_expression .)
    S_RETURN        reduce using rule 196 (exponentiation_expression -> primary_expression .)
    RW_IF           reduce using rule 196 (exponentiation_expression -> primary_expression .)
    RW_DEPEND       reduce using rule 196 (exponentiation_expression -> primary_expression .)
    RW_WHILE        reduce using rule 196 (exponentiation_expression -> primary_expression .)
    RW_ITERATE      reduce using rule 196 (exponentiation_expression -> primary_expression .)
    IDENTIFIER      reduce using rule 196 (exponentiation_expression -> primary_expression .)
    RW_REPEAT       reduce using rule 196 (exponentiation_expression -> primary_expression .)
    RW_INPUT        reduce using rule 196 (exponentiation_expression -> primary_expression .)
    RW_OUTPUT       reduce using rule 196 (exponentiation_expression -> primary_expression .)
    RW_THEN         reduce using rule 196 (exponentiation_expression -> primary_expression .)
    RW_DO           reduce using rule 196 (exponentiation_expression -> primary_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 196 (exponentiation_expression -> primary_expression .)
    S_COMMA         reduce using rule 196 (exponentiation_expression -> primary_expression .)
    S_RIGHT_BRACKET reduce using rule 196 (exponentiation_expression -> primary_expression .)
    S_UP_TO         reduce using rule 196 (exponentiation_expression -> primary_expression .)
    INDENT          reduce using rule 196 (exponentiation_expression -> primary_expression .)
    S_COLON         reduce using rule 196 (exponentiation_expression -> primary_expression .)
    S_POWER         shift and go to state 284


state 189

    (201) primary_expression -> variable_access .
    (166) indexed_variable -> variable_access . S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> variable_access . S_DOT identifier

    S_POWER         reduce using rule 201 (primary_expression -> variable_access .)
    S_TIMES         reduce using rule 201 (primary_expression -> variable_access .)
    S_DIVIDE        reduce using rule 201 (primary_expression -> variable_access .)
    RW_DIV          reduce using rule 201 (primary_expression -> variable_access .)
    RW_MOD          reduce using rule 201 (primary_expression -> variable_access .)
    RW_AND          reduce using rule 201 (primary_expression -> variable_access .)
    S_PLUS          reduce using rule 201 (primary_expression -> variable_access .)
    S_MINUS         reduce using rule 201 (primary_expression -> variable_access .)
    RW_OR           reduce using rule 201 (primary_expression -> variable_access .)
    RW_XOR          reduce using rule 201 (primary_expression -> variable_access .)
    S_EQUAL         reduce using rule 201 (primary_expression -> variable_access .)
    S_NOT_EQUAL     reduce using rule 201 (primary_expression -> variable_access .)
    S_LESS_THAN_EQUAL reduce using rule 201 (primary_expression -> variable_access .)
    S_GREATER_THAN_EQUAL reduce using rule 201 (primary_expression -> variable_access .)
    S_LESS_THAN     reduce using rule 201 (primary_expression -> variable_access .)
    S_GREATER_THAN  reduce using rule 201 (primary_expression -> variable_access .)
    S_ELEMENT_OF    reduce using rule 201 (primary_expression -> variable_access .)
    RW_EQ           reduce using rule 201 (primary_expression -> variable_access .)
    RW_NEQ          reduce using rule 201 (primary_expression -> variable_access .)
    DEDENT          reduce using rule 201 (primary_expression -> variable_access .)
    S_SEMI_COLON    reduce using rule 201 (primary_expression -> variable_access .)
    S_RETURN        reduce using rule 201 (primary_expression -> variable_access .)
    RW_IF           reduce using rule 201 (primary_expression -> variable_access .)
    RW_DEPEND       reduce using rule 201 (primary_expression -> variable_access .)
    RW_WHILE        reduce using rule 201 (primary_expression -> variable_access .)
    RW_ITERATE      reduce using rule 201 (primary_expression -> variable_access .)
    IDENTIFIER      reduce using rule 201 (primary_expression -> variable_access .)
    RW_REPEAT       reduce using rule 201 (primary_expression -> variable_access .)
    RW_INPUT        reduce using rule 201 (primary_expression -> variable_access .)
    RW_OUTPUT       reduce using rule 201 (primary_expression -> variable_access .)
    RW_THEN         reduce using rule 201 (primary_expression -> variable_access .)
    RW_DO           reduce using rule 201 (primary_expression -> variable_access .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 201 (primary_expression -> variable_access .)
    S_COMMA         reduce using rule 201 (primary_expression -> variable_access .)
    S_RIGHT_BRACKET reduce using rule 201 (primary_expression -> variable_access .)
    S_UP_TO         reduce using rule 201 (primary_expression -> variable_access .)
    INDENT          reduce using rule 201 (primary_expression -> variable_access .)
    S_COLON         reduce using rule 201 (primary_expression -> variable_access .)
    S_LEFT_SQUARE_BRACKET shift and go to state 176
    S_DOT           shift and go to state 177


state 190

    (202) primary_expression -> unsigned_constant .

    S_POWER         reduce using rule 202 (primary_expression -> unsigned_constant .)
    S_TIMES         reduce using rule 202 (primary_expression -> unsigned_constant .)
    S_DIVIDE        reduce using rule 202 (primary_expression -> unsigned_constant .)
    RW_DIV          reduce using rule 202 (primary_expression -> unsigned_constant .)
    RW_MOD          reduce using rule 202 (primary_expression -> unsigned_constant .)
    RW_AND          reduce using rule 202 (primary_expression -> unsigned_constant .)
    S_PLUS          reduce using rule 202 (primary_expression -> unsigned_constant .)
    S_MINUS         reduce using rule 202 (primary_expression -> unsigned_constant .)
    RW_OR           reduce using rule 202 (primary_expression -> unsigned_constant .)
    RW_XOR          reduce using rule 202 (primary_expression -> unsigned_constant .)
    S_EQUAL         reduce using rule 202 (primary_expression -> unsigned_constant .)
    S_NOT_EQUAL     reduce using rule 202 (primary_expression -> unsigned_constant .)
    S_LESS_THAN_EQUAL reduce using rule 202 (primary_expression -> unsigned_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 202 (primary_expression -> unsigned_constant .)
    S_LESS_THAN     reduce using rule 202 (primary_expression -> unsigned_constant .)
    S_GREATER_THAN  reduce using rule 202 (primary_expression -> unsigned_constant .)
    S_ELEMENT_OF    reduce using rule 202 (primary_expression -> unsigned_constant .)
    RW_EQ           reduce using rule 202 (primary_expression -> unsigned_constant .)
    RW_NEQ          reduce using rule 202 (primary_expression -> unsigned_constant .)
    DEDENT          reduce using rule 202 (primary_expression -> unsigned_constant .)
    S_SEMI_COLON    reduce using rule 202 (primary_expression -> unsigned_constant .)
    S_RETURN        reduce using rule 202 (primary_expression -> unsigned_constant .)
    RW_IF           reduce using rule 202 (primary_expression -> unsigned_constant .)
    RW_DEPEND       reduce using rule 202 (primary_expression -> unsigned_constant .)
    RW_WHILE        reduce using rule 202 (primary_expression -> unsigned_constant .)
    RW_ITERATE      reduce using rule 202 (primary_expression -> unsigned_constant .)
    IDENTIFIER      reduce using rule 202 (primary_expression -> unsigned_constant .)
    RW_REPEAT       reduce using rule 202 (primary_expression -> unsigned_constant .)
    RW_INPUT        reduce using rule 202 (primary_expression -> unsigned_constant .)
    RW_OUTPUT       reduce using rule 202 (primary_expression -> unsigned_constant .)
    RW_THEN         reduce using rule 202 (primary_expression -> unsigned_constant .)
    RW_DO           reduce using rule 202 (primary_expression -> unsigned_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 202 (primary_expression -> unsigned_constant .)
    S_COMMA         reduce using rule 202 (primary_expression -> unsigned_constant .)
    S_RIGHT_BRACKET reduce using rule 202 (primary_expression -> unsigned_constant .)
    S_UP_TO         reduce using rule 202 (primary_expression -> unsigned_constant .)
    INDENT          reduce using rule 202 (primary_expression -> unsigned_constant .)
    S_COLON         reduce using rule 202 (primary_expression -> unsigned_constant .)


state 191

    (203) primary_expression -> S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    expression                     shift and go to state 285
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 192

    (204) primary_expression -> set_constructor .

    S_POWER         reduce using rule 204 (primary_expression -> set_constructor .)
    S_TIMES         reduce using rule 204 (primary_expression -> set_constructor .)
    S_DIVIDE        reduce using rule 204 (primary_expression -> set_constructor .)
    RW_DIV          reduce using rule 204 (primary_expression -> set_constructor .)
    RW_MOD          reduce using rule 204 (primary_expression -> set_constructor .)
    RW_AND          reduce using rule 204 (primary_expression -> set_constructor .)
    S_PLUS          reduce using rule 204 (primary_expression -> set_constructor .)
    S_MINUS         reduce using rule 204 (primary_expression -> set_constructor .)
    RW_OR           reduce using rule 204 (primary_expression -> set_constructor .)
    RW_XOR          reduce using rule 204 (primary_expression -> set_constructor .)
    S_EQUAL         reduce using rule 204 (primary_expression -> set_constructor .)
    S_NOT_EQUAL     reduce using rule 204 (primary_expression -> set_constructor .)
    S_LESS_THAN_EQUAL reduce using rule 204 (primary_expression -> set_constructor .)
    S_GREATER_THAN_EQUAL reduce using rule 204 (primary_expression -> set_constructor .)
    S_LESS_THAN     reduce using rule 204 (primary_expression -> set_constructor .)
    S_GREATER_THAN  reduce using rule 204 (primary_expression -> set_constructor .)
    S_ELEMENT_OF    reduce using rule 204 (primary_expression -> set_constructor .)
    RW_EQ           reduce using rule 204 (primary_expression -> set_constructor .)
    RW_NEQ          reduce using rule 204 (primary_expression -> set_constructor .)
    DEDENT          reduce using rule 204 (primary_expression -> set_constructor .)
    S_SEMI_COLON    reduce using rule 204 (primary_expression -> set_constructor .)
    S_RETURN        reduce using rule 204 (primary_expression -> set_constructor .)
    RW_IF           reduce using rule 204 (primary_expression -> set_constructor .)
    RW_DEPEND       reduce using rule 204 (primary_expression -> set_constructor .)
    RW_WHILE        reduce using rule 204 (primary_expression -> set_constructor .)
    RW_ITERATE      reduce using rule 204 (primary_expression -> set_constructor .)
    IDENTIFIER      reduce using rule 204 (primary_expression -> set_constructor .)
    RW_REPEAT       reduce using rule 204 (primary_expression -> set_constructor .)
    RW_INPUT        reduce using rule 204 (primary_expression -> set_constructor .)
    RW_OUTPUT       reduce using rule 204 (primary_expression -> set_constructor .)
    RW_THEN         reduce using rule 204 (primary_expression -> set_constructor .)
    RW_DO           reduce using rule 204 (primary_expression -> set_constructor .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 204 (primary_expression -> set_constructor .)
    S_COMMA         reduce using rule 204 (primary_expression -> set_constructor .)
    S_RIGHT_BRACKET reduce using rule 204 (primary_expression -> set_constructor .)
    S_UP_TO         reduce using rule 204 (primary_expression -> set_constructor .)
    INDENT          reduce using rule 204 (primary_expression -> set_constructor .)
    S_COLON         reduce using rule 204 (primary_expression -> set_constructor .)


state 193

    (205) primary_expression -> function_designator .

    S_POWER         reduce using rule 205 (primary_expression -> function_designator .)
    S_TIMES         reduce using rule 205 (primary_expression -> function_designator .)
    S_DIVIDE        reduce using rule 205 (primary_expression -> function_designator .)
    RW_DIV          reduce using rule 205 (primary_expression -> function_designator .)
    RW_MOD          reduce using rule 205 (primary_expression -> function_designator .)
    RW_AND          reduce using rule 205 (primary_expression -> function_designator .)
    S_PLUS          reduce using rule 205 (primary_expression -> function_designator .)
    S_MINUS         reduce using rule 205 (primary_expression -> function_designator .)
    RW_OR           reduce using rule 205 (primary_expression -> function_designator .)
    RW_XOR          reduce using rule 205 (primary_expression -> function_designator .)
    S_EQUAL         reduce using rule 205 (primary_expression -> function_designator .)
    S_NOT_EQUAL     reduce using rule 205 (primary_expression -> function_designator .)
    S_LESS_THAN_EQUAL reduce using rule 205 (primary_expression -> function_designator .)
    S_GREATER_THAN_EQUAL reduce using rule 205 (primary_expression -> function_designator .)
    S_LESS_THAN     reduce using rule 205 (primary_expression -> function_designator .)
    S_GREATER_THAN  reduce using rule 205 (primary_expression -> function_designator .)
    S_ELEMENT_OF    reduce using rule 205 (primary_expression -> function_designator .)
    RW_EQ           reduce using rule 205 (primary_expression -> function_designator .)
    RW_NEQ          reduce using rule 205 (primary_expression -> function_designator .)
    DEDENT          reduce using rule 205 (primary_expression -> function_designator .)
    S_SEMI_COLON    reduce using rule 205 (primary_expression -> function_designator .)
    S_RETURN        reduce using rule 205 (primary_expression -> function_designator .)
    RW_IF           reduce using rule 205 (primary_expression -> function_designator .)
    RW_DEPEND       reduce using rule 205 (primary_expression -> function_designator .)
    RW_WHILE        reduce using rule 205 (primary_expression -> function_designator .)
    RW_ITERATE      reduce using rule 205 (primary_expression -> function_designator .)
    IDENTIFIER      reduce using rule 205 (primary_expression -> function_designator .)
    RW_REPEAT       reduce using rule 205 (primary_expression -> function_designator .)
    RW_INPUT        reduce using rule 205 (primary_expression -> function_designator .)
    RW_OUTPUT       reduce using rule 205 (primary_expression -> function_designator .)
    RW_THEN         reduce using rule 205 (primary_expression -> function_designator .)
    RW_DO           reduce using rule 205 (primary_expression -> function_designator .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 205 (primary_expression -> function_designator .)
    S_COMMA         reduce using rule 205 (primary_expression -> function_designator .)
    S_RIGHT_BRACKET reduce using rule 205 (primary_expression -> function_designator .)
    S_UP_TO         reduce using rule 205 (primary_expression -> function_designator .)
    INDENT          reduce using rule 205 (primary_expression -> function_designator .)
    S_COLON         reduce using rule 205 (primary_expression -> function_designator .)


state 194

    (163) variable_access -> identifier .
    (216) user_defined_function_call -> identifier . function_actual_parameter_list
    (85) function_actual_parameter_list -> . S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET

    S_LEFT_SQUARE_BRACKET reduce using rule 163 (variable_access -> identifier .)
    S_DOT           reduce using rule 163 (variable_access -> identifier .)
    S_POWER         reduce using rule 163 (variable_access -> identifier .)
    S_TIMES         reduce using rule 163 (variable_access -> identifier .)
    S_DIVIDE        reduce using rule 163 (variable_access -> identifier .)
    RW_DIV          reduce using rule 163 (variable_access -> identifier .)
    RW_MOD          reduce using rule 163 (variable_access -> identifier .)
    RW_AND          reduce using rule 163 (variable_access -> identifier .)
    S_PLUS          reduce using rule 163 (variable_access -> identifier .)
    S_MINUS         reduce using rule 163 (variable_access -> identifier .)
    RW_OR           reduce using rule 163 (variable_access -> identifier .)
    RW_XOR          reduce using rule 163 (variable_access -> identifier .)
    S_EQUAL         reduce using rule 163 (variable_access -> identifier .)
    S_NOT_EQUAL     reduce using rule 163 (variable_access -> identifier .)
    S_LESS_THAN_EQUAL reduce using rule 163 (variable_access -> identifier .)
    S_GREATER_THAN_EQUAL reduce using rule 163 (variable_access -> identifier .)
    S_LESS_THAN     reduce using rule 163 (variable_access -> identifier .)
    S_GREATER_THAN  reduce using rule 163 (variable_access -> identifier .)
    S_ELEMENT_OF    reduce using rule 163 (variable_access -> identifier .)
    RW_EQ           reduce using rule 163 (variable_access -> identifier .)
    RW_NEQ          reduce using rule 163 (variable_access -> identifier .)
    DEDENT          reduce using rule 163 (variable_access -> identifier .)
    S_SEMI_COLON    reduce using rule 163 (variable_access -> identifier .)
    S_RETURN        reduce using rule 163 (variable_access -> identifier .)
    RW_IF           reduce using rule 163 (variable_access -> identifier .)
    RW_DEPEND       reduce using rule 163 (variable_access -> identifier .)
    RW_WHILE        reduce using rule 163 (variable_access -> identifier .)
    RW_ITERATE      reduce using rule 163 (variable_access -> identifier .)
    IDENTIFIER      reduce using rule 163 (variable_access -> identifier .)
    RW_REPEAT       reduce using rule 163 (variable_access -> identifier .)
    RW_INPUT        reduce using rule 163 (variable_access -> identifier .)
    RW_OUTPUT       reduce using rule 163 (variable_access -> identifier .)
    RW_THEN         reduce using rule 163 (variable_access -> identifier .)
    RW_DO           reduce using rule 163 (variable_access -> identifier .)
    RW_TIMES        reduce using rule 163 (variable_access -> identifier .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 163 (variable_access -> identifier .)
    S_COMMA         reduce using rule 163 (variable_access -> identifier .)
    S_RIGHT_BRACKET reduce using rule 163 (variable_access -> identifier .)
    S_UP_TO         reduce using rule 163 (variable_access -> identifier .)
    INDENT          reduce using rule 163 (variable_access -> identifier .)
    S_COLON         reduce using rule 163 (variable_access -> identifier .)
    S_LEFT_BRACKET  shift and go to state 234

    function_actual_parameter_list shift and go to state 233

state 195

    (141) unsigned_constant -> non_string_constant .

    S_POWER         reduce using rule 141 (unsigned_constant -> non_string_constant .)
    S_TIMES         reduce using rule 141 (unsigned_constant -> non_string_constant .)
    S_DIVIDE        reduce using rule 141 (unsigned_constant -> non_string_constant .)
    RW_DIV          reduce using rule 141 (unsigned_constant -> non_string_constant .)
    RW_MOD          reduce using rule 141 (unsigned_constant -> non_string_constant .)
    RW_AND          reduce using rule 141 (unsigned_constant -> non_string_constant .)
    S_PLUS          reduce using rule 141 (unsigned_constant -> non_string_constant .)
    S_MINUS         reduce using rule 141 (unsigned_constant -> non_string_constant .)
    RW_OR           reduce using rule 141 (unsigned_constant -> non_string_constant .)
    RW_XOR          reduce using rule 141 (unsigned_constant -> non_string_constant .)
    S_EQUAL         reduce using rule 141 (unsigned_constant -> non_string_constant .)
    S_NOT_EQUAL     reduce using rule 141 (unsigned_constant -> non_string_constant .)
    S_LESS_THAN_EQUAL reduce using rule 141 (unsigned_constant -> non_string_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 141 (unsigned_constant -> non_string_constant .)
    S_LESS_THAN     reduce using rule 141 (unsigned_constant -> non_string_constant .)
    S_GREATER_THAN  reduce using rule 141 (unsigned_constant -> non_string_constant .)
    S_ELEMENT_OF    reduce using rule 141 (unsigned_constant -> non_string_constant .)
    RW_EQ           reduce using rule 141 (unsigned_constant -> non_string_constant .)
    RW_NEQ          reduce using rule 141 (unsigned_constant -> non_string_constant .)
    DEDENT          reduce using rule 141 (unsigned_constant -> non_string_constant .)
    S_SEMI_COLON    reduce using rule 141 (unsigned_constant -> non_string_constant .)
    S_RETURN        reduce using rule 141 (unsigned_constant -> non_string_constant .)
    RW_IF           reduce using rule 141 (unsigned_constant -> non_string_constant .)
    RW_DEPEND       reduce using rule 141 (unsigned_constant -> non_string_constant .)
    RW_WHILE        reduce using rule 141 (unsigned_constant -> non_string_constant .)
    RW_ITERATE      reduce using rule 141 (unsigned_constant -> non_string_constant .)
    IDENTIFIER      reduce using rule 141 (unsigned_constant -> non_string_constant .)
    RW_REPEAT       reduce using rule 141 (unsigned_constant -> non_string_constant .)
    RW_INPUT        reduce using rule 141 (unsigned_constant -> non_string_constant .)
    RW_OUTPUT       reduce using rule 141 (unsigned_constant -> non_string_constant .)
    RW_THEN         reduce using rule 141 (unsigned_constant -> non_string_constant .)
    RW_DO           reduce using rule 141 (unsigned_constant -> non_string_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 141 (unsigned_constant -> non_string_constant .)
    S_COMMA         reduce using rule 141 (unsigned_constant -> non_string_constant .)
    S_RIGHT_BRACKET reduce using rule 141 (unsigned_constant -> non_string_constant .)
    S_UP_TO         reduce using rule 141 (unsigned_constant -> non_string_constant .)
    INDENT          reduce using rule 141 (unsigned_constant -> non_string_constant .)
    S_COLON         reduce using rule 141 (unsigned_constant -> non_string_constant .)


state 196

    (142) unsigned_constant -> string_char_constant .

    S_POWER         reduce using rule 142 (unsigned_constant -> string_char_constant .)
    S_TIMES         reduce using rule 142 (unsigned_constant -> string_char_constant .)
    S_DIVIDE        reduce using rule 142 (unsigned_constant -> string_char_constant .)
    RW_DIV          reduce using rule 142 (unsigned_constant -> string_char_constant .)
    RW_MOD          reduce using rule 142 (unsigned_constant -> string_char_constant .)
    RW_AND          reduce using rule 142 (unsigned_constant -> string_char_constant .)
    S_PLUS          reduce using rule 142 (unsigned_constant -> string_char_constant .)
    S_MINUS         reduce using rule 142 (unsigned_constant -> string_char_constant .)
    RW_OR           reduce using rule 142 (unsigned_constant -> string_char_constant .)
    RW_XOR          reduce using rule 142 (unsigned_constant -> string_char_constant .)
    S_EQUAL         reduce using rule 142 (unsigned_constant -> string_char_constant .)
    S_NOT_EQUAL     reduce using rule 142 (unsigned_constant -> string_char_constant .)
    S_LESS_THAN_EQUAL reduce using rule 142 (unsigned_constant -> string_char_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 142 (unsigned_constant -> string_char_constant .)
    S_LESS_THAN     reduce using rule 142 (unsigned_constant -> string_char_constant .)
    S_GREATER_THAN  reduce using rule 142 (unsigned_constant -> string_char_constant .)
    S_ELEMENT_OF    reduce using rule 142 (unsigned_constant -> string_char_constant .)
    RW_EQ           reduce using rule 142 (unsigned_constant -> string_char_constant .)
    RW_NEQ          reduce using rule 142 (unsigned_constant -> string_char_constant .)
    DEDENT          reduce using rule 142 (unsigned_constant -> string_char_constant .)
    S_SEMI_COLON    reduce using rule 142 (unsigned_constant -> string_char_constant .)
    S_RETURN        reduce using rule 142 (unsigned_constant -> string_char_constant .)
    RW_IF           reduce using rule 142 (unsigned_constant -> string_char_constant .)
    RW_DEPEND       reduce using rule 142 (unsigned_constant -> string_char_constant .)
    RW_WHILE        reduce using rule 142 (unsigned_constant -> string_char_constant .)
    RW_ITERATE      reduce using rule 142 (unsigned_constant -> string_char_constant .)
    IDENTIFIER      reduce using rule 142 (unsigned_constant -> string_char_constant .)
    RW_REPEAT       reduce using rule 142 (unsigned_constant -> string_char_constant .)
    RW_INPUT        reduce using rule 142 (unsigned_constant -> string_char_constant .)
    RW_OUTPUT       reduce using rule 142 (unsigned_constant -> string_char_constant .)
    RW_THEN         reduce using rule 142 (unsigned_constant -> string_char_constant .)
    RW_DO           reduce using rule 142 (unsigned_constant -> string_char_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 142 (unsigned_constant -> string_char_constant .)
    S_COMMA         reduce using rule 142 (unsigned_constant -> string_char_constant .)
    S_RIGHT_BRACKET reduce using rule 142 (unsigned_constant -> string_char_constant .)
    S_UP_TO         reduce using rule 142 (unsigned_constant -> string_char_constant .)
    INDENT          reduce using rule 142 (unsigned_constant -> string_char_constant .)
    S_COLON         reduce using rule 142 (unsigned_constant -> string_char_constant .)


state 197

    (143) unsigned_constant -> boolean_constant .

    S_POWER         reduce using rule 143 (unsigned_constant -> boolean_constant .)
    S_TIMES         reduce using rule 143 (unsigned_constant -> boolean_constant .)
    S_DIVIDE        reduce using rule 143 (unsigned_constant -> boolean_constant .)
    RW_DIV          reduce using rule 143 (unsigned_constant -> boolean_constant .)
    RW_MOD          reduce using rule 143 (unsigned_constant -> boolean_constant .)
    RW_AND          reduce using rule 143 (unsigned_constant -> boolean_constant .)
    S_PLUS          reduce using rule 143 (unsigned_constant -> boolean_constant .)
    S_MINUS         reduce using rule 143 (unsigned_constant -> boolean_constant .)
    RW_OR           reduce using rule 143 (unsigned_constant -> boolean_constant .)
    RW_XOR          reduce using rule 143 (unsigned_constant -> boolean_constant .)
    S_EQUAL         reduce using rule 143 (unsigned_constant -> boolean_constant .)
    S_NOT_EQUAL     reduce using rule 143 (unsigned_constant -> boolean_constant .)
    S_LESS_THAN_EQUAL reduce using rule 143 (unsigned_constant -> boolean_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 143 (unsigned_constant -> boolean_constant .)
    S_LESS_THAN     reduce using rule 143 (unsigned_constant -> boolean_constant .)
    S_GREATER_THAN  reduce using rule 143 (unsigned_constant -> boolean_constant .)
    S_ELEMENT_OF    reduce using rule 143 (unsigned_constant -> boolean_constant .)
    RW_EQ           reduce using rule 143 (unsigned_constant -> boolean_constant .)
    RW_NEQ          reduce using rule 143 (unsigned_constant -> boolean_constant .)
    DEDENT          reduce using rule 143 (unsigned_constant -> boolean_constant .)
    S_SEMI_COLON    reduce using rule 143 (unsigned_constant -> boolean_constant .)
    S_RETURN        reduce using rule 143 (unsigned_constant -> boolean_constant .)
    RW_IF           reduce using rule 143 (unsigned_constant -> boolean_constant .)
    RW_DEPEND       reduce using rule 143 (unsigned_constant -> boolean_constant .)
    RW_WHILE        reduce using rule 143 (unsigned_constant -> boolean_constant .)
    RW_ITERATE      reduce using rule 143 (unsigned_constant -> boolean_constant .)
    IDENTIFIER      reduce using rule 143 (unsigned_constant -> boolean_constant .)
    RW_REPEAT       reduce using rule 143 (unsigned_constant -> boolean_constant .)
    RW_INPUT        reduce using rule 143 (unsigned_constant -> boolean_constant .)
    RW_OUTPUT       reduce using rule 143 (unsigned_constant -> boolean_constant .)
    RW_THEN         reduce using rule 143 (unsigned_constant -> boolean_constant .)
    RW_DO           reduce using rule 143 (unsigned_constant -> boolean_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 143 (unsigned_constant -> boolean_constant .)
    S_COMMA         reduce using rule 143 (unsigned_constant -> boolean_constant .)
    S_RIGHT_BRACKET reduce using rule 143 (unsigned_constant -> boolean_constant .)
    S_UP_TO         reduce using rule 143 (unsigned_constant -> boolean_constant .)
    INDENT          reduce using rule 143 (unsigned_constant -> boolean_constant .)
    S_COLON         reduce using rule 143 (unsigned_constant -> boolean_constant .)


state 198

    (144) unsigned_constant -> nil_constant .

    S_POWER         reduce using rule 144 (unsigned_constant -> nil_constant .)
    S_TIMES         reduce using rule 144 (unsigned_constant -> nil_constant .)
    S_DIVIDE        reduce using rule 144 (unsigned_constant -> nil_constant .)
    RW_DIV          reduce using rule 144 (unsigned_constant -> nil_constant .)
    RW_MOD          reduce using rule 144 (unsigned_constant -> nil_constant .)
    RW_AND          reduce using rule 144 (unsigned_constant -> nil_constant .)
    S_PLUS          reduce using rule 144 (unsigned_constant -> nil_constant .)
    S_MINUS         reduce using rule 144 (unsigned_constant -> nil_constant .)
    RW_OR           reduce using rule 144 (unsigned_constant -> nil_constant .)
    RW_XOR          reduce using rule 144 (unsigned_constant -> nil_constant .)
    S_EQUAL         reduce using rule 144 (unsigned_constant -> nil_constant .)
    S_NOT_EQUAL     reduce using rule 144 (unsigned_constant -> nil_constant .)
    S_LESS_THAN_EQUAL reduce using rule 144 (unsigned_constant -> nil_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 144 (unsigned_constant -> nil_constant .)
    S_LESS_THAN     reduce using rule 144 (unsigned_constant -> nil_constant .)
    S_GREATER_THAN  reduce using rule 144 (unsigned_constant -> nil_constant .)
    S_ELEMENT_OF    reduce using rule 144 (unsigned_constant -> nil_constant .)
    RW_EQ           reduce using rule 144 (unsigned_constant -> nil_constant .)
    RW_NEQ          reduce using rule 144 (unsigned_constant -> nil_constant .)
    DEDENT          reduce using rule 144 (unsigned_constant -> nil_constant .)
    S_SEMI_COLON    reduce using rule 144 (unsigned_constant -> nil_constant .)
    S_RETURN        reduce using rule 144 (unsigned_constant -> nil_constant .)
    RW_IF           reduce using rule 144 (unsigned_constant -> nil_constant .)
    RW_DEPEND       reduce using rule 144 (unsigned_constant -> nil_constant .)
    RW_WHILE        reduce using rule 144 (unsigned_constant -> nil_constant .)
    RW_ITERATE      reduce using rule 144 (unsigned_constant -> nil_constant .)
    IDENTIFIER      reduce using rule 144 (unsigned_constant -> nil_constant .)
    RW_REPEAT       reduce using rule 144 (unsigned_constant -> nil_constant .)
    RW_INPUT        reduce using rule 144 (unsigned_constant -> nil_constant .)
    RW_OUTPUT       reduce using rule 144 (unsigned_constant -> nil_constant .)
    RW_THEN         reduce using rule 144 (unsigned_constant -> nil_constant .)
    RW_DO           reduce using rule 144 (unsigned_constant -> nil_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 144 (unsigned_constant -> nil_constant .)
    S_COMMA         reduce using rule 144 (unsigned_constant -> nil_constant .)
    S_RIGHT_BRACKET reduce using rule 144 (unsigned_constant -> nil_constant .)
    S_UP_TO         reduce using rule 144 (unsigned_constant -> nil_constant .)
    INDENT          reduce using rule 144 (unsigned_constant -> nil_constant .)
    S_COLON         reduce using rule 144 (unsigned_constant -> nil_constant .)


state 199

    (206) set_constructor -> S_LEFT_SQUARE_BRACKET . member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> S_LEFT_SQUARE_BRACKET . S_RIGHT_SQUARE_BRACKET
    (208) member_designator_list -> . member_designator_list S_COMMA member_designator
    (209) member_designator_list -> . member_designator
    (210) member_designator -> . member_designator S_UP_TO expression
    (211) member_designator -> . expression
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_RIGHT_SQUARE_BRACKET shift and go to state 287
    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    member_designator_list         shift and go to state 286
    member_designator              shift and go to state 288
    expression                     shift and go to state 289
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 200

    (127) if_statement -> RW_IF boolean_expression . RW_THEN compound_statement
    (128) if_statement -> RW_IF boolean_expression . RW_THEN compound_statement RW_ELSE compound_statement

    RW_THEN         shift and go to state 290


state 201

    (129) boolean_expression -> expression .
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    RW_THEN         reduce using rule 129 (boolean_expression -> expression .)
    RW_DO           reduce using rule 129 (boolean_expression -> expression .)
    INDENT          reduce using rule 129 (boolean_expression -> expression .)
    DEDENT          reduce using rule 129 (boolean_expression -> expression .)
    S_SEMI_COLON    reduce using rule 129 (boolean_expression -> expression .)
    S_RETURN        reduce using rule 129 (boolean_expression -> expression .)
    RW_IF           reduce using rule 129 (boolean_expression -> expression .)
    RW_DEPEND       reduce using rule 129 (boolean_expression -> expression .)
    RW_WHILE        reduce using rule 129 (boolean_expression -> expression .)
    RW_ITERATE      reduce using rule 129 (boolean_expression -> expression .)
    IDENTIFIER      reduce using rule 129 (boolean_expression -> expression .)
    RW_REPEAT       reduce using rule 129 (boolean_expression -> expression .)
    RW_INPUT        reduce using rule 129 (boolean_expression -> expression .)
    RW_OUTPUT       reduce using rule 129 (boolean_expression -> expression .)
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 202

    (123) depend_on_statement -> RW_DEPEND RW_ON . S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT

    S_LEFT_BRACKET  shift and go to state 291


state 203

    (136) while_statement -> RW_WHILE boolean_expression . RW_DO compound_statement

    RW_DO           shift and go to state 292


state 204

    (138) traversal_statement -> control_variable RW_TRAVERSAL . traversal_range_value compound_statement
    (139) traversal_range_value -> . S_LEFT_SQUARE_BRACKET subrange_type S_RIGHT_SQUARE_BRACKET

    S_LEFT_SQUARE_BRACKET shift and go to state 294

    traversal_range_value          shift and go to state 293

state 205

    (137) iterate_stop_statement -> RW_ITERATE compound_statement . RW_STOP boolean_expression compound_statement

    RW_STOP         shift and go to state 295


state 206

    (132) repeat_until_statement -> RW_REPEAT compound_statement . RW_UNTIL boolean_expression

    RW_UNTIL        shift and go to state 296


state 207

    (133) repeat_times_statement -> RW_REPEAT variable_access . RW_TIMES compound_statement
    (166) indexed_variable -> variable_access . S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> variable_access . S_DOT identifier

    RW_TIMES        shift and go to state 297
    S_LEFT_SQUARE_BRACKET shift and go to state 176
    S_DOT           shift and go to state 177


state 208

    (134) repeat_times_statement -> RW_REPEAT integer_constant . RW_TIMES compound_statement

    RW_TIMES        shift and go to state 298


state 209

    (135) repeat_times_statement -> RW_REPEAT function_designator . RW_TIMES compound_statement

    RW_TIMES        shift and go to state 299


state 210

    (114) input_statement -> RW_INPUT S_LEFT_BRACKET . input_statement_parameter_list S_RIGHT_BRACKET
    (115) input_statement_parameter_list -> . input_statement_parameter_list S_COMMA input_statement_parameter
    (116) input_statement_parameter_list -> . input_statement_parameter
    (117) input_statement_parameter -> . variable_access
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier

    IDENTIFIER      shift and go to state 5

    input_statement_parameter_list shift and go to state 300
    input_statement_parameter      shift and go to state 301
    variable_access                shift and go to state 302
    identifier                     shift and go to state 303
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74

state 211

    (118) output_statement -> RW_OUTPUT S_LEFT_BRACKET . output_statement_parameter_list S_RIGHT_BRACKET
    (119) output_statement_parameter_list -> . output_statement_parameter_list S_COMMA output_statement_parameter
    (120) output_statement_parameter_list -> . output_statement_parameter
    (121) output_statement_parameter -> . expression
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    output_statement_parameter_list shift and go to state 304
    output_statement_parameter     shift and go to state 305
    expression                     shift and go to state 306
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 212

    (5) block -> RW_KAMUS INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block . algorithm_block procedure_and_function_implementation_block
    (15) algorithm_block -> . RW_ALGORITMA statement_part

    RW_ALGORITMA    shift and go to state 10

    algorithm_block                shift and go to state 307

state 213

    (13) procedure_and_function_declaration_block -> DEDENT .

    RW_ALGORITMA    reduce using rule 13 (procedure_and_function_declaration_block -> DEDENT .)


state 214

    (14) procedure_and_function_declaration_block -> procedure_and_function_declaration . DEDENT
    (65) procedure_and_function_declaration -> procedure_and_function_declaration . procedure_and_function_sub_declaration
    (67) procedure_and_function_sub_declaration -> . procedure_declaration
    (68) procedure_and_function_sub_declaration -> . function_declaration
    (69) procedure_declaration -> . procedure_identifier formal_parameter_list
    (80) function_declaration -> . function_identification function_formal_parameter_list function_return_type
    (81) function_declaration -> . function_identification function_return_type
    (70) procedure_identifier -> . RW_PROCEDURE identifier
    (82) function_identification -> . RW_FUNCTION identifier

    DEDENT          shift and go to state 308
    RW_PROCEDURE    shift and go to state 26
    RW_FUNCTION     shift and go to state 27

    procedure_and_function_sub_declaration shift and go to state 309
    procedure_declaration          shift and go to state 216
    function_declaration           shift and go to state 217
    procedure_identifier           shift and go to state 24
    function_identification        shift and go to state 25

state 215

    (66) procedure_and_function_declaration -> procedure_and_function_sub_declaration .

    DEDENT          reduce using rule 66 (procedure_and_function_declaration -> procedure_and_function_sub_declaration .)
    RW_PROCEDURE    reduce using rule 66 (procedure_and_function_declaration -> procedure_and_function_sub_declaration .)
    RW_FUNCTION     reduce using rule 66 (procedure_and_function_declaration -> procedure_and_function_sub_declaration .)


state 216

    (67) procedure_and_function_sub_declaration -> procedure_declaration .

    DEDENT          reduce using rule 67 (procedure_and_function_sub_declaration -> procedure_declaration .)
    RW_PROCEDURE    reduce using rule 67 (procedure_and_function_sub_declaration -> procedure_declaration .)
    RW_FUNCTION     reduce using rule 67 (procedure_and_function_sub_declaration -> procedure_declaration .)


state 217

    (68) procedure_and_function_sub_declaration -> function_declaration .

    DEDENT          reduce using rule 68 (procedure_and_function_sub_declaration -> function_declaration .)
    RW_PROCEDURE    reduce using rule 68 (procedure_and_function_sub_declaration -> function_declaration .)
    RW_FUNCTION     reduce using rule 68 (procedure_and_function_sub_declaration -> function_declaration .)


state 218

    (51) variable_declaration -> variable_declaration variable_sub_declaration .

    IDENTIFIER      reduce using rule 51 (variable_declaration -> variable_declaration variable_sub_declaration .)
    DEDENT          reduce using rule 51 (variable_declaration -> variable_declaration variable_sub_declaration .)
    RW_PROCEDURE    reduce using rule 51 (variable_declaration -> variable_declaration variable_sub_declaration .)
    RW_FUNCTION     reduce using rule 51 (variable_declaration -> variable_declaration variable_sub_declaration .)


state 219

    (53) variable_sub_declaration -> identifier_list S_COLON . type_denoter
    (28) type_denoter -> . ordinal_type
    (29) type_denoter -> . structured_type
    (30) type_denoter -> . RW_INTEGER
    (31) type_denoter -> . RW_REAL
    (32) type_denoter -> . RW_STRING
    (33) type_denoter -> . RW_CHARACTER
    (34) type_denoter -> . RW_BOOLEAN
    (35) ordinal_type -> . enumerated_type
    (36) ordinal_type -> . subrange_type
    (37) ordinal_type -> . identifier
    (44) structured_type -> . array_type
    (38) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (39) subrange_type -> . subrange_type_option
    (246) identifier -> . IDENTIFIER
    (45) array_type -> . RW_ARRAY array_index RW_OF component_type
    (40) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (41) subrange_option -> . identifier
    (42) subrange_option -> . constant
    (43) subrange_option -> . function_designator
    (145) constant -> . string_char_constant
    (146) constant -> . non_string_constant
    (147) constant -> . sign non_string_constant
    (148) constant -> . boolean_constant
    (149) constant -> . nil_constant
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (150) sign -> . S_PLUS
    (151) sign -> . S_MINUS
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    RW_INTEGER      shift and go to state 107
    RW_REAL         shift and go to state 108
    RW_STRING       shift and go to state 109
    RW_CHARACTER    shift and go to state 110
    RW_BOOLEAN      shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 116
    IDENTIFIER      shift and go to state 5
    RW_ARRAY        shift and go to state 118
    S_PLUS          shift and go to state 135
    S_MINUS         shift and go to state 136
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    type_denoter                   shift and go to state 310
    ordinal_type                   shift and go to state 105
    structured_type                shift and go to state 106
    enumerated_type                shift and go to state 112
    subrange_type                  shift and go to state 113
    identifier                     shift and go to state 114
    array_type                     shift and go to state 115
    subrange_type_option           shift and go to state 117
    subrange_option                shift and go to state 119
    constant                       shift and go to state 120
    function_designator            shift and go to state 121
    string_char_constant           shift and go to state 122
    non_string_constant            shift and go to state 123
    sign                           shift and go to state 124
    boolean_constant               shift and go to state 125
    nil_constant                   shift and go to state 126
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 220

    (3) identifier_list -> identifier_list S_COMMA . identifier
    (246) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 5

    identifier                     shift and go to state 311

state 221

    (61) type_sub_declaration -> RW_TYPE identifier S_COLON . type_variety
    (62) type_variety -> . type_denoter
    (63) type_variety -> . type_user_defined
    (28) type_denoter -> . ordinal_type
    (29) type_denoter -> . structured_type
    (30) type_denoter -> . RW_INTEGER
    (31) type_denoter -> . RW_REAL
    (32) type_denoter -> . RW_STRING
    (33) type_denoter -> . RW_CHARACTER
    (34) type_denoter -> . RW_BOOLEAN
    (64) type_user_defined -> . S_LESS_THAN variable_declaration_comma S_GREATER_THAN
    (35) ordinal_type -> . enumerated_type
    (36) ordinal_type -> . subrange_type
    (37) ordinal_type -> . identifier
    (44) structured_type -> . array_type
    (38) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (39) subrange_type -> . subrange_type_option
    (246) identifier -> . IDENTIFIER
    (45) array_type -> . RW_ARRAY array_index RW_OF component_type
    (40) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (41) subrange_option -> . identifier
    (42) subrange_option -> . constant
    (43) subrange_option -> . function_designator
    (145) constant -> . string_char_constant
    (146) constant -> . non_string_constant
    (147) constant -> . sign non_string_constant
    (148) constant -> . boolean_constant
    (149) constant -> . nil_constant
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (150) sign -> . S_PLUS
    (151) sign -> . S_MINUS
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    RW_INTEGER      shift and go to state 107
    RW_REAL         shift and go to state 108
    RW_STRING       shift and go to state 109
    RW_CHARACTER    shift and go to state 110
    RW_BOOLEAN      shift and go to state 111
    S_LESS_THAN     shift and go to state 315
    S_LEFT_BRACKET  shift and go to state 116
    IDENTIFIER      shift and go to state 5
    RW_ARRAY        shift and go to state 118
    S_PLUS          shift and go to state 135
    S_MINUS         shift and go to state 136
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    identifier                     shift and go to state 114
    type_variety                   shift and go to state 312
    type_denoter                   shift and go to state 313
    type_user_defined              shift and go to state 314
    ordinal_type                   shift and go to state 105
    structured_type                shift and go to state 106
    enumerated_type                shift and go to state 112
    subrange_type                  shift and go to state 113
    array_type                     shift and go to state 115
    subrange_type_option           shift and go to state 117
    subrange_option                shift and go to state 119
    constant                       shift and go to state 120
    function_designator            shift and go to state 121
    string_char_constant           shift and go to state 122
    non_string_constant            shift and go to state 123
    sign                           shift and go to state 124
    boolean_constant               shift and go to state 125
    nil_constant                   shift and go to state 126
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 222

    (58) constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter . S_EQUAL constant

    S_EQUAL         shift and go to state 316


state 223

    (23) procedure_implementation_block -> RW_KAMUS RW_LOKAL INDENT . constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
    (7) constant_declaration_block -> . empty
    (8) constant_declaration_block -> . constant_declaration
    (245) empty -> .
    (56) constant_declaration -> . constant_declaration constant_sub_declaration
    (57) constant_declaration -> . constant_sub_declaration
    (58) constant_sub_declaration -> . RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant

    RW_TYPE         reduce using rule 245 (empty -> .)
    IDENTIFIER      reduce using rule 245 (empty -> .)
    DEDENT          reduce using rule 245 (empty -> .)
    RW_CONSTANT     shift and go to state 15

    constant_declaration_block     shift and go to state 317
    empty                          shift and go to state 12
    constant_declaration           shift and go to state 13
    constant_sub_declaration       shift and go to state 14

state 224

    (24) procedure_implementation_block -> RW_KAMUS RW_LOKAL algorithm_block .

    RW_PROCEDURE    reduce using rule 24 (procedure_implementation_block -> RW_KAMUS RW_LOKAL algorithm_block .)
    RW_FUNCTION     reduce using rule 24 (procedure_implementation_block -> RW_KAMUS RW_LOKAL algorithm_block .)
    $end            reduce using rule 24 (procedure_implementation_block -> RW_KAMUS RW_LOKAL algorithm_block .)


state 225

    (26) function_implementation_block -> RW_KAMUS RW_LOKAL INDENT . constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
    (7) constant_declaration_block -> . empty
    (8) constant_declaration_block -> . constant_declaration
    (245) empty -> .
    (56) constant_declaration -> . constant_declaration constant_sub_declaration
    (57) constant_declaration -> . constant_sub_declaration
    (58) constant_sub_declaration -> . RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant

    RW_TYPE         reduce using rule 245 (empty -> .)
    IDENTIFIER      reduce using rule 245 (empty -> .)
    DEDENT          reduce using rule 245 (empty -> .)
    RW_CONSTANT     shift and go to state 15

    constant_declaration_block     shift and go to state 318
    empty                          shift and go to state 12
    constant_declaration           shift and go to state 13
    constant_sub_declaration       shift and go to state 14

state 226

    (27) function_implementation_block -> RW_KAMUS RW_LOKAL algorithm_block .

    RW_PROCEDURE    reduce using rule 27 (function_implementation_block -> RW_KAMUS RW_LOKAL algorithm_block .)
    RW_FUNCTION     reduce using rule 27 (function_implementation_block -> RW_KAMUS RW_LOKAL algorithm_block .)
    $end            reduce using rule 27 (function_implementation_block -> RW_KAMUS RW_LOKAL algorithm_block .)


state 227

    (71) formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET .

    RW_KAMUS        reduce using rule 71 (formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 71 (formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 71 (formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 71 (formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET .)


state 228

    (74) formal_parameter_section -> formal_parameter_section S_SEMI_COLON . parameter_specification
    (76) parameter_specification -> . procedure_parameter_type variable_sub_declaration
    (77) procedure_parameter_type -> . RW_INPUT
    (78) procedure_parameter_type -> . RW_OUTPUT
    (79) procedure_parameter_type -> . RW_INPUT S_DIVIDE RW_OUTPUT

    RW_INPUT        shift and go to state 96
    RW_OUTPUT       shift and go to state 97

    parameter_specification        shift and go to state 319
    procedure_parameter_type       shift and go to state 95

state 229

    (76) parameter_specification -> procedure_parameter_type variable_sub_declaration .

    S_SEMI_COLON    reduce using rule 76 (parameter_specification -> procedure_parameter_type variable_sub_declaration .)
    S_RIGHT_BRACKET reduce using rule 76 (parameter_specification -> procedure_parameter_type variable_sub_declaration .)


state 230

    (79) procedure_parameter_type -> RW_INPUT S_DIVIDE . RW_OUTPUT

    RW_OUTPUT       shift and go to state 320


state 231

    (84) function_formal_parameter_list -> S_LEFT_BRACKET function_parameter_list_option S_RIGHT_BRACKET .

    S_RETURN        reduce using rule 84 (function_formal_parameter_list -> S_LEFT_BRACKET function_parameter_list_option S_RIGHT_BRACKET .)


state 232

    (88) function_parameter_list -> function_parameter_list S_SEMI_COLON . function_parameter_declaration
    (90) function_parameter_declaration -> . variable_sub_declaration
    (53) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (3) identifier_list -> . identifier_list S_COMMA identifier
    (4) identifier_list -> . identifier
    (246) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 5

    function_parameter_declaration shift and go to state 321
    variable_sub_declaration       shift and go to state 103
    identifier_list                shift and go to state 84
    identifier                     shift and go to state 85

state 233

    (216) user_defined_function_call -> identifier function_actual_parameter_list .

    S_UP_TO         reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_POWER         reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_TIMES         reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_DIVIDE        reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_DIV          reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_MOD          reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_AND          reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_PLUS          reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_MINUS         reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_OR           reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_XOR          reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_EQUAL         reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_NOT_EQUAL     reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_LESS_THAN_EQUAL reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_GREATER_THAN_EQUAL reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_LESS_THAN     reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_GREATER_THAN  reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_ELEMENT_OF    reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_EQ           reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_NEQ          reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    DEDENT          reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_SEMI_COLON    reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_RETURN        reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_IF           reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_DEPEND       reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_WHILE        reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_ITERATE      reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    IDENTIFIER      reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_REPEAT       reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_INPUT        reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_OUTPUT       reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_THEN         reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_DO           reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_TIMES        reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_COMMA         reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_RIGHT_BRACKET reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    INDENT          reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_COLON         reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_KAMUS        reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_PROCEDURE    reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_FUNCTION     reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_TYPE         reduce using rule 216 (user_defined_function_call -> identifier function_actual_parameter_list .)


state 234

    (85) function_actual_parameter_list -> S_LEFT_BRACKET . actual_parameter_list S_RIGHT_BRACKET
    (109) actual_parameter_list -> . actual_parameter_list S_COMMA actual_parameter
    (110) actual_parameter_list -> . actual_parameter
    (111) actual_parameter -> . expression
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    actual_parameter_list          shift and go to state 322
    actual_parameter               shift and go to state 260
    expression                     shift and go to state 261
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 235

    (38) enumerated_type -> S_LEFT_BRACKET identifier_list . S_RIGHT_BRACKET
    (3) identifier_list -> identifier_list . S_COMMA identifier

    S_RIGHT_BRACKET shift and go to state 323
    S_COMMA         shift and go to state 220


state 236

    (45) array_type -> RW_ARRAY array_index . RW_OF component_type

    RW_OF           shift and go to state 324


state 237

    (46) array_index -> S_LEFT_SQUARE_BRACKET . index_list S_RIGHT_SQUARE_BRACKET
    (47) index_list -> . index_list S_COMMA index_type
    (48) index_list -> . index_type
    (49) index_type -> . ordinal_type
    (35) ordinal_type -> . enumerated_type
    (36) ordinal_type -> . subrange_type
    (37) ordinal_type -> . identifier
    (38) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (39) subrange_type -> . subrange_type_option
    (246) identifier -> . IDENTIFIER
    (40) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (41) subrange_option -> . identifier
    (42) subrange_option -> . constant
    (43) subrange_option -> . function_designator
    (145) constant -> . string_char_constant
    (146) constant -> . non_string_constant
    (147) constant -> . sign non_string_constant
    (148) constant -> . boolean_constant
    (149) constant -> . nil_constant
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (150) sign -> . S_PLUS
    (151) sign -> . S_MINUS
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 116
    IDENTIFIER      shift and go to state 5
    S_PLUS          shift and go to state 135
    S_MINUS         shift and go to state 136
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    index_list                     shift and go to state 325
    index_type                     shift and go to state 326
    ordinal_type                   shift and go to state 327
    enumerated_type                shift and go to state 112
    subrange_type                  shift and go to state 113
    identifier                     shift and go to state 114
    subrange_type_option           shift and go to state 117
    subrange_option                shift and go to state 119
    constant                       shift and go to state 120
    function_designator            shift and go to state 121
    string_char_constant           shift and go to state 122
    non_string_constant            shift and go to state 123
    sign                           shift and go to state 124
    boolean_constant               shift and go to state 125
    nil_constant                   shift and go to state 126
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 238

    (40) subrange_type_option -> subrange_option S_UP_TO . subrange_option
    (41) subrange_option -> . identifier
    (42) subrange_option -> . constant
    (43) subrange_option -> . function_designator
    (246) identifier -> . IDENTIFIER
    (145) constant -> . string_char_constant
    (146) constant -> . non_string_constant
    (147) constant -> . sign non_string_constant
    (148) constant -> . boolean_constant
    (149) constant -> . nil_constant
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (150) sign -> . S_PLUS
    (151) sign -> . S_MINUS
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    IDENTIFIER      shift and go to state 5
    S_PLUS          shift and go to state 135
    S_MINUS         shift and go to state 136
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    subrange_option                shift and go to state 328
    identifier                     shift and go to state 329
    constant                       shift and go to state 120
    function_designator            shift and go to state 121
    string_char_constant           shift and go to state 122
    non_string_constant            shift and go to state 123
    sign                           shift and go to state 124
    boolean_constant               shift and go to state 125
    nil_constant                   shift and go to state 126
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 239

    (147) constant -> sign non_string_constant .

    S_UP_TO         reduce using rule 147 (constant -> sign non_string_constant .)
    RW_KAMUS        reduce using rule 147 (constant -> sign non_string_constant .)
    DEDENT          reduce using rule 147 (constant -> sign non_string_constant .)
    RW_PROCEDURE    reduce using rule 147 (constant -> sign non_string_constant .)
    RW_FUNCTION     reduce using rule 147 (constant -> sign non_string_constant .)
    S_EQUAL         reduce using rule 147 (constant -> sign non_string_constant .)
    IDENTIFIER      reduce using rule 147 (constant -> sign non_string_constant .)
    S_SEMI_COLON    reduce using rule 147 (constant -> sign non_string_constant .)
    S_RIGHT_BRACKET reduce using rule 147 (constant -> sign non_string_constant .)
    S_COMMA         reduce using rule 147 (constant -> sign non_string_constant .)
    S_GREATER_THAN  reduce using rule 147 (constant -> sign non_string_constant .)
    RW_TYPE         reduce using rule 147 (constant -> sign non_string_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 147 (constant -> sign non_string_constant .)
    RW_CONSTANT     reduce using rule 147 (constant -> sign non_string_constant .)


state 240

    (223) abs_function -> RW_ABS S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    expression                     shift and go to state 330
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 241

    (224) sin_function -> RW_SIN S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    expression                     shift and go to state 331
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 242

    (225) cos_function -> RW_COS S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    expression                     shift and go to state 332
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 243

    (226) tan_function -> RW_TAN S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    expression                     shift and go to state 333
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 244

    (227) succ_function -> RW_SUCC S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    expression                     shift and go to state 334
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 245

    (228) pred_function -> RW_PRED S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    expression                     shift and go to state 335
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 246

    (235) awal_function -> RW_AWAL S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    expression                     shift and go to state 336
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 247

    (236) akhir_function -> RW_AKHIR S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    expression                     shift and go to state 337
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 248

    (237) firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    expression                     shift and go to state 338
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 249

    (238) lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    expression                     shift and go to state 339
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 250

    (239) long_function -> RW_LONG S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    expression                     shift and go to state 340
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 251

    (240) iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    expression                     shift and go to state 341
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 252

    (243) integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    expression                     shift and go to state 342
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 253

    (244) real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    expression                     shift and go to state 343
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 254

    (93) statement_sequence -> statement_sequence S_SEMI_COLON statement .

    DEDENT          reduce using rule 93 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    S_SEMI_COLON    reduce using rule 93 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    S_RETURN        reduce using rule 93 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_IF           reduce using rule 93 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_DEPEND       reduce using rule 93 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_WHILE        reduce using rule 93 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_ITERATE      reduce using rule 93 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    IDENTIFIER      reduce using rule 93 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_REPEAT       reduce using rule 93 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_INPUT        reduce using rule 93 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_OUTPUT       reduce using rule 93 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)


state 255

    (105) assignment_statement -> variable_access S_ASSIGNMENT expression .
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    DEDENT          reduce using rule 105 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    S_SEMI_COLON    reduce using rule 105 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    S_RETURN        reduce using rule 105 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_IF           reduce using rule 105 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_DEPEND       reduce using rule 105 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_WHILE        reduce using rule 105 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_ITERATE      reduce using rule 105 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    IDENTIFIER      reduce using rule 105 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_REPEAT       reduce using rule 105 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_INPUT        reduce using rule 105 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_OUTPUT       reduce using rule 105 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 256

    (166) indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list . S_RIGHT_SQUARE_BRACKET
    (167) index_expression_list -> index_expression_list . S_COMMA expression

    S_RIGHT_SQUARE_BRACKET shift and go to state 344
    S_COMMA         shift and go to state 345


state 257

    (168) index_expression_list -> expression .
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_RIGHT_SQUARE_BRACKET reduce using rule 168 (index_expression_list -> expression .)
    S_COMMA         reduce using rule 168 (index_expression_list -> expression .)
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 258

    (169) field_designator -> variable_access S_DOT identifier .

    S_ASSIGNMENT    reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_LEFT_SQUARE_BRACKET reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_DOT           reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_POWER         reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_TIMES         reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_DIVIDE        reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    RW_DIV          reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    RW_MOD          reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    RW_AND          reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_PLUS          reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_MINUS         reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    RW_OR           reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    RW_XOR          reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_EQUAL         reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_NOT_EQUAL     reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_LESS_THAN_EQUAL reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_GREATER_THAN_EQUAL reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_LESS_THAN     reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_GREATER_THAN  reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_ELEMENT_OF    reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    RW_EQ           reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    RW_NEQ          reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    DEDENT          reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_SEMI_COLON    reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_RETURN        reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    RW_IF           reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    RW_DEPEND       reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    RW_WHILE        reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    RW_ITERATE      reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    IDENTIFIER      reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    RW_REPEAT       reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    RW_INPUT        reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    RW_OUTPUT       reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    RW_THEN         reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    RW_DO           reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    RW_TIMES        reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_COMMA         reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_RIGHT_BRACKET reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_UP_TO         reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    INDENT          reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)
    S_COLON         reduce using rule 169 (field_designator -> variable_access S_DOT identifier .)


state 259

    (107) procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list . S_RIGHT_BRACKET
    (109) actual_parameter_list -> actual_parameter_list . S_COMMA actual_parameter

    S_RIGHT_BRACKET shift and go to state 346
    S_COMMA         shift and go to state 347


state 260

    (110) actual_parameter_list -> actual_parameter .

    S_RIGHT_BRACKET reduce using rule 110 (actual_parameter_list -> actual_parameter .)
    S_COMMA         reduce using rule 110 (actual_parameter_list -> actual_parameter .)


state 261

    (111) actual_parameter -> expression .
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET reduce using rule 111 (actual_parameter -> expression .)
    S_COMMA         reduce using rule 111 (actual_parameter -> expression .)
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 262

    (170) expression -> expression relational_op . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    additive_expression            shift and go to state 348
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 263

    (172) relational_op -> S_EQUAL .

    S_PLUS          reduce using rule 172 (relational_op -> S_EQUAL .)
    S_MINUS         reduce using rule 172 (relational_op -> S_EQUAL .)
    RW_NOT          reduce using rule 172 (relational_op -> S_EQUAL .)
    S_LEFT_BRACKET  reduce using rule 172 (relational_op -> S_EQUAL .)
    S_LEFT_SQUARE_BRACKET reduce using rule 172 (relational_op -> S_EQUAL .)
    IDENTIFIER      reduce using rule 172 (relational_op -> S_EQUAL .)
    L_BOOLEAN_TRUE  reduce using rule 172 (relational_op -> S_EQUAL .)
    L_BOOLEAN_FALSE reduce using rule 172 (relational_op -> S_EQUAL .)
    L_NIL           reduce using rule 172 (relational_op -> S_EQUAL .)
    L_INTEGER_NUMBER reduce using rule 172 (relational_op -> S_EQUAL .)
    L_REAL_NUMBER   reduce using rule 172 (relational_op -> S_EQUAL .)
    L_STRING        reduce using rule 172 (relational_op -> S_EQUAL .)
    L_CHARACTER     reduce using rule 172 (relational_op -> S_EQUAL .)
    RW_ABS          reduce using rule 172 (relational_op -> S_EQUAL .)
    RW_SIN          reduce using rule 172 (relational_op -> S_EQUAL .)
    RW_COS          reduce using rule 172 (relational_op -> S_EQUAL .)
    RW_TAN          reduce using rule 172 (relational_op -> S_EQUAL .)
    RW_SUCC         reduce using rule 172 (relational_op -> S_EQUAL .)
    RW_PRED         reduce using rule 172 (relational_op -> S_EQUAL .)
    RW_AWAL         reduce using rule 172 (relational_op -> S_EQUAL .)
    RW_AKHIR        reduce using rule 172 (relational_op -> S_EQUAL .)
    RW_FIRSTCHAR    reduce using rule 172 (relational_op -> S_EQUAL .)
    RW_LASTCHAR     reduce using rule 172 (relational_op -> S_EQUAL .)
    RW_LONG         reduce using rule 172 (relational_op -> S_EQUAL .)
    RW_ISKOSONG     reduce using rule 172 (relational_op -> S_EQUAL .)
    RW_INTEGERTOREAL reduce using rule 172 (relational_op -> S_EQUAL .)
    RW_REALTOINTEGER reduce using rule 172 (relational_op -> S_EQUAL .)


state 264

    (173) relational_op -> S_NOT_EQUAL .

    S_PLUS          reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    S_MINUS         reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    RW_NOT          reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    S_LEFT_BRACKET  reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    S_LEFT_SQUARE_BRACKET reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    IDENTIFIER      reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    L_BOOLEAN_TRUE  reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    L_BOOLEAN_FALSE reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    L_NIL           reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    L_INTEGER_NUMBER reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    L_REAL_NUMBER   reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    L_STRING        reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    L_CHARACTER     reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    RW_ABS          reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    RW_SIN          reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    RW_COS          reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    RW_TAN          reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    RW_SUCC         reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    RW_PRED         reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    RW_AWAL         reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    RW_AKHIR        reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    RW_FIRSTCHAR    reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    RW_LASTCHAR     reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    RW_LONG         reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    RW_ISKOSONG     reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    RW_INTEGERTOREAL reduce using rule 173 (relational_op -> S_NOT_EQUAL .)
    RW_REALTOINTEGER reduce using rule 173 (relational_op -> S_NOT_EQUAL .)


state 265

    (174) relational_op -> S_LESS_THAN_EQUAL .

    S_PLUS          reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    S_MINUS         reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_NOT          reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    S_LEFT_BRACKET  reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    S_LEFT_SQUARE_BRACKET reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    IDENTIFIER      reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    L_BOOLEAN_TRUE  reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    L_BOOLEAN_FALSE reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    L_NIL           reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    L_INTEGER_NUMBER reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    L_REAL_NUMBER   reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    L_STRING        reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    L_CHARACTER     reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_ABS          reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_SIN          reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_COS          reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_TAN          reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_SUCC         reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_PRED         reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_AWAL         reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_AKHIR        reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_FIRSTCHAR    reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_LASTCHAR     reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_LONG         reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_ISKOSONG     reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_INTEGERTOREAL reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_REALTOINTEGER reduce using rule 174 (relational_op -> S_LESS_THAN_EQUAL .)


state 266

    (175) relational_op -> S_GREATER_THAN_EQUAL .

    S_PLUS          reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    S_MINUS         reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_NOT          reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    S_LEFT_BRACKET  reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    S_LEFT_SQUARE_BRACKET reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    IDENTIFIER      reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_BOOLEAN_TRUE  reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_BOOLEAN_FALSE reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_NIL           reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_INTEGER_NUMBER reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_REAL_NUMBER   reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_STRING        reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_CHARACTER     reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_ABS          reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_SIN          reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_COS          reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_TAN          reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_SUCC         reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_PRED         reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_AWAL         reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_AKHIR        reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_FIRSTCHAR    reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_LASTCHAR     reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_LONG         reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_ISKOSONG     reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_INTEGERTOREAL reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_REALTOINTEGER reduce using rule 175 (relational_op -> S_GREATER_THAN_EQUAL .)


state 267

    (176) relational_op -> S_LESS_THAN .

    S_PLUS          reduce using rule 176 (relational_op -> S_LESS_THAN .)
    S_MINUS         reduce using rule 176 (relational_op -> S_LESS_THAN .)
    RW_NOT          reduce using rule 176 (relational_op -> S_LESS_THAN .)
    S_LEFT_BRACKET  reduce using rule 176 (relational_op -> S_LESS_THAN .)
    S_LEFT_SQUARE_BRACKET reduce using rule 176 (relational_op -> S_LESS_THAN .)
    IDENTIFIER      reduce using rule 176 (relational_op -> S_LESS_THAN .)
    L_BOOLEAN_TRUE  reduce using rule 176 (relational_op -> S_LESS_THAN .)
    L_BOOLEAN_FALSE reduce using rule 176 (relational_op -> S_LESS_THAN .)
    L_NIL           reduce using rule 176 (relational_op -> S_LESS_THAN .)
    L_INTEGER_NUMBER reduce using rule 176 (relational_op -> S_LESS_THAN .)
    L_REAL_NUMBER   reduce using rule 176 (relational_op -> S_LESS_THAN .)
    L_STRING        reduce using rule 176 (relational_op -> S_LESS_THAN .)
    L_CHARACTER     reduce using rule 176 (relational_op -> S_LESS_THAN .)
    RW_ABS          reduce using rule 176 (relational_op -> S_LESS_THAN .)
    RW_SIN          reduce using rule 176 (relational_op -> S_LESS_THAN .)
    RW_COS          reduce using rule 176 (relational_op -> S_LESS_THAN .)
    RW_TAN          reduce using rule 176 (relational_op -> S_LESS_THAN .)
    RW_SUCC         reduce using rule 176 (relational_op -> S_LESS_THAN .)
    RW_PRED         reduce using rule 176 (relational_op -> S_LESS_THAN .)
    RW_AWAL         reduce using rule 176 (relational_op -> S_LESS_THAN .)
    RW_AKHIR        reduce using rule 176 (relational_op -> S_LESS_THAN .)
    RW_FIRSTCHAR    reduce using rule 176 (relational_op -> S_LESS_THAN .)
    RW_LASTCHAR     reduce using rule 176 (relational_op -> S_LESS_THAN .)
    RW_LONG         reduce using rule 176 (relational_op -> S_LESS_THAN .)
    RW_ISKOSONG     reduce using rule 176 (relational_op -> S_LESS_THAN .)
    RW_INTEGERTOREAL reduce using rule 176 (relational_op -> S_LESS_THAN .)
    RW_REALTOINTEGER reduce using rule 176 (relational_op -> S_LESS_THAN .)


state 268

    (177) relational_op -> S_GREATER_THAN .

    S_PLUS          reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    S_MINUS         reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    RW_NOT          reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    S_LEFT_BRACKET  reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    S_LEFT_SQUARE_BRACKET reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    IDENTIFIER      reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    L_BOOLEAN_TRUE  reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    L_BOOLEAN_FALSE reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    L_NIL           reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    L_INTEGER_NUMBER reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    L_REAL_NUMBER   reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    L_STRING        reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    L_CHARACTER     reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    RW_ABS          reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    RW_SIN          reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    RW_COS          reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    RW_TAN          reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    RW_SUCC         reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    RW_PRED         reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    RW_AWAL         reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    RW_AKHIR        reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    RW_FIRSTCHAR    reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    RW_LASTCHAR     reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    RW_LONG         reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    RW_ISKOSONG     reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    RW_INTEGERTOREAL reduce using rule 177 (relational_op -> S_GREATER_THAN .)
    RW_REALTOINTEGER reduce using rule 177 (relational_op -> S_GREATER_THAN .)


state 269

    (178) relational_op -> S_ELEMENT_OF .

    S_PLUS          reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    S_MINUS         reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    RW_NOT          reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    S_LEFT_BRACKET  reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    S_LEFT_SQUARE_BRACKET reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    IDENTIFIER      reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    L_BOOLEAN_TRUE  reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    L_BOOLEAN_FALSE reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    L_NIL           reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    L_INTEGER_NUMBER reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    L_REAL_NUMBER   reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    L_STRING        reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    L_CHARACTER     reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    RW_ABS          reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    RW_SIN          reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    RW_COS          reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    RW_TAN          reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    RW_SUCC         reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    RW_PRED         reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    RW_AWAL         reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    RW_AKHIR        reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    RW_FIRSTCHAR    reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    RW_LASTCHAR     reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    RW_LONG         reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    RW_ISKOSONG     reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    RW_INTEGERTOREAL reduce using rule 178 (relational_op -> S_ELEMENT_OF .)
    RW_REALTOINTEGER reduce using rule 178 (relational_op -> S_ELEMENT_OF .)


state 270

    (179) relational_op -> RW_EQ .

    S_PLUS          reduce using rule 179 (relational_op -> RW_EQ .)
    S_MINUS         reduce using rule 179 (relational_op -> RW_EQ .)
    RW_NOT          reduce using rule 179 (relational_op -> RW_EQ .)
    S_LEFT_BRACKET  reduce using rule 179 (relational_op -> RW_EQ .)
    S_LEFT_SQUARE_BRACKET reduce using rule 179 (relational_op -> RW_EQ .)
    IDENTIFIER      reduce using rule 179 (relational_op -> RW_EQ .)
    L_BOOLEAN_TRUE  reduce using rule 179 (relational_op -> RW_EQ .)
    L_BOOLEAN_FALSE reduce using rule 179 (relational_op -> RW_EQ .)
    L_NIL           reduce using rule 179 (relational_op -> RW_EQ .)
    L_INTEGER_NUMBER reduce using rule 179 (relational_op -> RW_EQ .)
    L_REAL_NUMBER   reduce using rule 179 (relational_op -> RW_EQ .)
    L_STRING        reduce using rule 179 (relational_op -> RW_EQ .)
    L_CHARACTER     reduce using rule 179 (relational_op -> RW_EQ .)
    RW_ABS          reduce using rule 179 (relational_op -> RW_EQ .)
    RW_SIN          reduce using rule 179 (relational_op -> RW_EQ .)
    RW_COS          reduce using rule 179 (relational_op -> RW_EQ .)
    RW_TAN          reduce using rule 179 (relational_op -> RW_EQ .)
    RW_SUCC         reduce using rule 179 (relational_op -> RW_EQ .)
    RW_PRED         reduce using rule 179 (relational_op -> RW_EQ .)
    RW_AWAL         reduce using rule 179 (relational_op -> RW_EQ .)
    RW_AKHIR        reduce using rule 179 (relational_op -> RW_EQ .)
    RW_FIRSTCHAR    reduce using rule 179 (relational_op -> RW_EQ .)
    RW_LASTCHAR     reduce using rule 179 (relational_op -> RW_EQ .)
    RW_LONG         reduce using rule 179 (relational_op -> RW_EQ .)
    RW_ISKOSONG     reduce using rule 179 (relational_op -> RW_EQ .)
    RW_INTEGERTOREAL reduce using rule 179 (relational_op -> RW_EQ .)
    RW_REALTOINTEGER reduce using rule 179 (relational_op -> RW_EQ .)


state 271

    (180) relational_op -> RW_NEQ .

    S_PLUS          reduce using rule 180 (relational_op -> RW_NEQ .)
    S_MINUS         reduce using rule 180 (relational_op -> RW_NEQ .)
    RW_NOT          reduce using rule 180 (relational_op -> RW_NEQ .)
    S_LEFT_BRACKET  reduce using rule 180 (relational_op -> RW_NEQ .)
    S_LEFT_SQUARE_BRACKET reduce using rule 180 (relational_op -> RW_NEQ .)
    IDENTIFIER      reduce using rule 180 (relational_op -> RW_NEQ .)
    L_BOOLEAN_TRUE  reduce using rule 180 (relational_op -> RW_NEQ .)
    L_BOOLEAN_FALSE reduce using rule 180 (relational_op -> RW_NEQ .)
    L_NIL           reduce using rule 180 (relational_op -> RW_NEQ .)
    L_INTEGER_NUMBER reduce using rule 180 (relational_op -> RW_NEQ .)
    L_REAL_NUMBER   reduce using rule 180 (relational_op -> RW_NEQ .)
    L_STRING        reduce using rule 180 (relational_op -> RW_NEQ .)
    L_CHARACTER     reduce using rule 180 (relational_op -> RW_NEQ .)
    RW_ABS          reduce using rule 180 (relational_op -> RW_NEQ .)
    RW_SIN          reduce using rule 180 (relational_op -> RW_NEQ .)
    RW_COS          reduce using rule 180 (relational_op -> RW_NEQ .)
    RW_TAN          reduce using rule 180 (relational_op -> RW_NEQ .)
    RW_SUCC         reduce using rule 180 (relational_op -> RW_NEQ .)
    RW_PRED         reduce using rule 180 (relational_op -> RW_NEQ .)
    RW_AWAL         reduce using rule 180 (relational_op -> RW_NEQ .)
    RW_AKHIR        reduce using rule 180 (relational_op -> RW_NEQ .)
    RW_FIRSTCHAR    reduce using rule 180 (relational_op -> RW_NEQ .)
    RW_LASTCHAR     reduce using rule 180 (relational_op -> RW_NEQ .)
    RW_LONG         reduce using rule 180 (relational_op -> RW_NEQ .)
    RW_ISKOSONG     reduce using rule 180 (relational_op -> RW_NEQ .)
    RW_INTEGERTOREAL reduce using rule 180 (relational_op -> RW_NEQ .)
    RW_REALTOINTEGER reduce using rule 180 (relational_op -> RW_NEQ .)


state 272

    (181) additive_expression -> additive_expression additive_op . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    multiplicative_expression      shift and go to state 349
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 273

    (183) additive_op -> S_PLUS .

    S_PLUS          reduce using rule 183 (additive_op -> S_PLUS .)
    S_MINUS         reduce using rule 183 (additive_op -> S_PLUS .)
    RW_NOT          reduce using rule 183 (additive_op -> S_PLUS .)
    S_LEFT_BRACKET  reduce using rule 183 (additive_op -> S_PLUS .)
    S_LEFT_SQUARE_BRACKET reduce using rule 183 (additive_op -> S_PLUS .)
    IDENTIFIER      reduce using rule 183 (additive_op -> S_PLUS .)
    L_BOOLEAN_TRUE  reduce using rule 183 (additive_op -> S_PLUS .)
    L_BOOLEAN_FALSE reduce using rule 183 (additive_op -> S_PLUS .)
    L_NIL           reduce using rule 183 (additive_op -> S_PLUS .)
    L_INTEGER_NUMBER reduce using rule 183 (additive_op -> S_PLUS .)
    L_REAL_NUMBER   reduce using rule 183 (additive_op -> S_PLUS .)
    L_STRING        reduce using rule 183 (additive_op -> S_PLUS .)
    L_CHARACTER     reduce using rule 183 (additive_op -> S_PLUS .)
    RW_ABS          reduce using rule 183 (additive_op -> S_PLUS .)
    RW_SIN          reduce using rule 183 (additive_op -> S_PLUS .)
    RW_COS          reduce using rule 183 (additive_op -> S_PLUS .)
    RW_TAN          reduce using rule 183 (additive_op -> S_PLUS .)
    RW_SUCC         reduce using rule 183 (additive_op -> S_PLUS .)
    RW_PRED         reduce using rule 183 (additive_op -> S_PLUS .)
    RW_AWAL         reduce using rule 183 (additive_op -> S_PLUS .)
    RW_AKHIR        reduce using rule 183 (additive_op -> S_PLUS .)
    RW_FIRSTCHAR    reduce using rule 183 (additive_op -> S_PLUS .)
    RW_LASTCHAR     reduce using rule 183 (additive_op -> S_PLUS .)
    RW_LONG         reduce using rule 183 (additive_op -> S_PLUS .)
    RW_ISKOSONG     reduce using rule 183 (additive_op -> S_PLUS .)
    RW_INTEGERTOREAL reduce using rule 183 (additive_op -> S_PLUS .)
    RW_REALTOINTEGER reduce using rule 183 (additive_op -> S_PLUS .)


state 274

    (184) additive_op -> S_MINUS .

    S_PLUS          reduce using rule 184 (additive_op -> S_MINUS .)
    S_MINUS         reduce using rule 184 (additive_op -> S_MINUS .)
    RW_NOT          reduce using rule 184 (additive_op -> S_MINUS .)
    S_LEFT_BRACKET  reduce using rule 184 (additive_op -> S_MINUS .)
    S_LEFT_SQUARE_BRACKET reduce using rule 184 (additive_op -> S_MINUS .)
    IDENTIFIER      reduce using rule 184 (additive_op -> S_MINUS .)
    L_BOOLEAN_TRUE  reduce using rule 184 (additive_op -> S_MINUS .)
    L_BOOLEAN_FALSE reduce using rule 184 (additive_op -> S_MINUS .)
    L_NIL           reduce using rule 184 (additive_op -> S_MINUS .)
    L_INTEGER_NUMBER reduce using rule 184 (additive_op -> S_MINUS .)
    L_REAL_NUMBER   reduce using rule 184 (additive_op -> S_MINUS .)
    L_STRING        reduce using rule 184 (additive_op -> S_MINUS .)
    L_CHARACTER     reduce using rule 184 (additive_op -> S_MINUS .)
    RW_ABS          reduce using rule 184 (additive_op -> S_MINUS .)
    RW_SIN          reduce using rule 184 (additive_op -> S_MINUS .)
    RW_COS          reduce using rule 184 (additive_op -> S_MINUS .)
    RW_TAN          reduce using rule 184 (additive_op -> S_MINUS .)
    RW_SUCC         reduce using rule 184 (additive_op -> S_MINUS .)
    RW_PRED         reduce using rule 184 (additive_op -> S_MINUS .)
    RW_AWAL         reduce using rule 184 (additive_op -> S_MINUS .)
    RW_AKHIR        reduce using rule 184 (additive_op -> S_MINUS .)
    RW_FIRSTCHAR    reduce using rule 184 (additive_op -> S_MINUS .)
    RW_LASTCHAR     reduce using rule 184 (additive_op -> S_MINUS .)
    RW_LONG         reduce using rule 184 (additive_op -> S_MINUS .)
    RW_ISKOSONG     reduce using rule 184 (additive_op -> S_MINUS .)
    RW_INTEGERTOREAL reduce using rule 184 (additive_op -> S_MINUS .)
    RW_REALTOINTEGER reduce using rule 184 (additive_op -> S_MINUS .)


state 275

    (185) additive_op -> RW_OR .

    S_PLUS          reduce using rule 185 (additive_op -> RW_OR .)
    S_MINUS         reduce using rule 185 (additive_op -> RW_OR .)
    RW_NOT          reduce using rule 185 (additive_op -> RW_OR .)
    S_LEFT_BRACKET  reduce using rule 185 (additive_op -> RW_OR .)
    S_LEFT_SQUARE_BRACKET reduce using rule 185 (additive_op -> RW_OR .)
    IDENTIFIER      reduce using rule 185 (additive_op -> RW_OR .)
    L_BOOLEAN_TRUE  reduce using rule 185 (additive_op -> RW_OR .)
    L_BOOLEAN_FALSE reduce using rule 185 (additive_op -> RW_OR .)
    L_NIL           reduce using rule 185 (additive_op -> RW_OR .)
    L_INTEGER_NUMBER reduce using rule 185 (additive_op -> RW_OR .)
    L_REAL_NUMBER   reduce using rule 185 (additive_op -> RW_OR .)
    L_STRING        reduce using rule 185 (additive_op -> RW_OR .)
    L_CHARACTER     reduce using rule 185 (additive_op -> RW_OR .)
    RW_ABS          reduce using rule 185 (additive_op -> RW_OR .)
    RW_SIN          reduce using rule 185 (additive_op -> RW_OR .)
    RW_COS          reduce using rule 185 (additive_op -> RW_OR .)
    RW_TAN          reduce using rule 185 (additive_op -> RW_OR .)
    RW_SUCC         reduce using rule 185 (additive_op -> RW_OR .)
    RW_PRED         reduce using rule 185 (additive_op -> RW_OR .)
    RW_AWAL         reduce using rule 185 (additive_op -> RW_OR .)
    RW_AKHIR        reduce using rule 185 (additive_op -> RW_OR .)
    RW_FIRSTCHAR    reduce using rule 185 (additive_op -> RW_OR .)
    RW_LASTCHAR     reduce using rule 185 (additive_op -> RW_OR .)
    RW_LONG         reduce using rule 185 (additive_op -> RW_OR .)
    RW_ISKOSONG     reduce using rule 185 (additive_op -> RW_OR .)
    RW_INTEGERTOREAL reduce using rule 185 (additive_op -> RW_OR .)
    RW_REALTOINTEGER reduce using rule 185 (additive_op -> RW_OR .)


state 276

    (186) additive_op -> RW_XOR .

    S_PLUS          reduce using rule 186 (additive_op -> RW_XOR .)
    S_MINUS         reduce using rule 186 (additive_op -> RW_XOR .)
    RW_NOT          reduce using rule 186 (additive_op -> RW_XOR .)
    S_LEFT_BRACKET  reduce using rule 186 (additive_op -> RW_XOR .)
    S_LEFT_SQUARE_BRACKET reduce using rule 186 (additive_op -> RW_XOR .)
    IDENTIFIER      reduce using rule 186 (additive_op -> RW_XOR .)
    L_BOOLEAN_TRUE  reduce using rule 186 (additive_op -> RW_XOR .)
    L_BOOLEAN_FALSE reduce using rule 186 (additive_op -> RW_XOR .)
    L_NIL           reduce using rule 186 (additive_op -> RW_XOR .)
    L_INTEGER_NUMBER reduce using rule 186 (additive_op -> RW_XOR .)
    L_REAL_NUMBER   reduce using rule 186 (additive_op -> RW_XOR .)
    L_STRING        reduce using rule 186 (additive_op -> RW_XOR .)
    L_CHARACTER     reduce using rule 186 (additive_op -> RW_XOR .)
    RW_ABS          reduce using rule 186 (additive_op -> RW_XOR .)
    RW_SIN          reduce using rule 186 (additive_op -> RW_XOR .)
    RW_COS          reduce using rule 186 (additive_op -> RW_XOR .)
    RW_TAN          reduce using rule 186 (additive_op -> RW_XOR .)
    RW_SUCC         reduce using rule 186 (additive_op -> RW_XOR .)
    RW_PRED         reduce using rule 186 (additive_op -> RW_XOR .)
    RW_AWAL         reduce using rule 186 (additive_op -> RW_XOR .)
    RW_AKHIR        reduce using rule 186 (additive_op -> RW_XOR .)
    RW_FIRSTCHAR    reduce using rule 186 (additive_op -> RW_XOR .)
    RW_LASTCHAR     reduce using rule 186 (additive_op -> RW_XOR .)
    RW_LONG         reduce using rule 186 (additive_op -> RW_XOR .)
    RW_ISKOSONG     reduce using rule 186 (additive_op -> RW_XOR .)
    RW_INTEGERTOREAL reduce using rule 186 (additive_op -> RW_XOR .)
    RW_REALTOINTEGER reduce using rule 186 (additive_op -> RW_XOR .)


state 277

    (187) multiplicative_expression -> multiplicative_expression multiplicative_op . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    unary_expression               shift and go to state 350
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 278

    (189) multiplicative_op -> S_TIMES .

    S_PLUS          reduce using rule 189 (multiplicative_op -> S_TIMES .)
    S_MINUS         reduce using rule 189 (multiplicative_op -> S_TIMES .)
    RW_NOT          reduce using rule 189 (multiplicative_op -> S_TIMES .)
    S_LEFT_BRACKET  reduce using rule 189 (multiplicative_op -> S_TIMES .)
    S_LEFT_SQUARE_BRACKET reduce using rule 189 (multiplicative_op -> S_TIMES .)
    IDENTIFIER      reduce using rule 189 (multiplicative_op -> S_TIMES .)
    L_BOOLEAN_TRUE  reduce using rule 189 (multiplicative_op -> S_TIMES .)
    L_BOOLEAN_FALSE reduce using rule 189 (multiplicative_op -> S_TIMES .)
    L_NIL           reduce using rule 189 (multiplicative_op -> S_TIMES .)
    L_INTEGER_NUMBER reduce using rule 189 (multiplicative_op -> S_TIMES .)
    L_REAL_NUMBER   reduce using rule 189 (multiplicative_op -> S_TIMES .)
    L_STRING        reduce using rule 189 (multiplicative_op -> S_TIMES .)
    L_CHARACTER     reduce using rule 189 (multiplicative_op -> S_TIMES .)
    RW_ABS          reduce using rule 189 (multiplicative_op -> S_TIMES .)
    RW_SIN          reduce using rule 189 (multiplicative_op -> S_TIMES .)
    RW_COS          reduce using rule 189 (multiplicative_op -> S_TIMES .)
    RW_TAN          reduce using rule 189 (multiplicative_op -> S_TIMES .)
    RW_SUCC         reduce using rule 189 (multiplicative_op -> S_TIMES .)
    RW_PRED         reduce using rule 189 (multiplicative_op -> S_TIMES .)
    RW_AWAL         reduce using rule 189 (multiplicative_op -> S_TIMES .)
    RW_AKHIR        reduce using rule 189 (multiplicative_op -> S_TIMES .)
    RW_FIRSTCHAR    reduce using rule 189 (multiplicative_op -> S_TIMES .)
    RW_LASTCHAR     reduce using rule 189 (multiplicative_op -> S_TIMES .)
    RW_LONG         reduce using rule 189 (multiplicative_op -> S_TIMES .)
    RW_ISKOSONG     reduce using rule 189 (multiplicative_op -> S_TIMES .)
    RW_INTEGERTOREAL reduce using rule 189 (multiplicative_op -> S_TIMES .)
    RW_REALTOINTEGER reduce using rule 189 (multiplicative_op -> S_TIMES .)


state 279

    (190) multiplicative_op -> S_DIVIDE .

    S_PLUS          reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    S_MINUS         reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    RW_NOT          reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    S_LEFT_BRACKET  reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    S_LEFT_SQUARE_BRACKET reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    IDENTIFIER      reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    L_BOOLEAN_TRUE  reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    L_BOOLEAN_FALSE reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    L_NIL           reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    L_INTEGER_NUMBER reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    L_REAL_NUMBER   reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    L_STRING        reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    L_CHARACTER     reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    RW_ABS          reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    RW_SIN          reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    RW_COS          reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    RW_TAN          reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    RW_SUCC         reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    RW_PRED         reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    RW_AWAL         reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    RW_AKHIR        reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    RW_FIRSTCHAR    reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    RW_LASTCHAR     reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    RW_LONG         reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    RW_ISKOSONG     reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    RW_INTEGERTOREAL reduce using rule 190 (multiplicative_op -> S_DIVIDE .)
    RW_REALTOINTEGER reduce using rule 190 (multiplicative_op -> S_DIVIDE .)


state 280

    (191) multiplicative_op -> RW_DIV .

    S_PLUS          reduce using rule 191 (multiplicative_op -> RW_DIV .)
    S_MINUS         reduce using rule 191 (multiplicative_op -> RW_DIV .)
    RW_NOT          reduce using rule 191 (multiplicative_op -> RW_DIV .)
    S_LEFT_BRACKET  reduce using rule 191 (multiplicative_op -> RW_DIV .)
    S_LEFT_SQUARE_BRACKET reduce using rule 191 (multiplicative_op -> RW_DIV .)
    IDENTIFIER      reduce using rule 191 (multiplicative_op -> RW_DIV .)
    L_BOOLEAN_TRUE  reduce using rule 191 (multiplicative_op -> RW_DIV .)
    L_BOOLEAN_FALSE reduce using rule 191 (multiplicative_op -> RW_DIV .)
    L_NIL           reduce using rule 191 (multiplicative_op -> RW_DIV .)
    L_INTEGER_NUMBER reduce using rule 191 (multiplicative_op -> RW_DIV .)
    L_REAL_NUMBER   reduce using rule 191 (multiplicative_op -> RW_DIV .)
    L_STRING        reduce using rule 191 (multiplicative_op -> RW_DIV .)
    L_CHARACTER     reduce using rule 191 (multiplicative_op -> RW_DIV .)
    RW_ABS          reduce using rule 191 (multiplicative_op -> RW_DIV .)
    RW_SIN          reduce using rule 191 (multiplicative_op -> RW_DIV .)
    RW_COS          reduce using rule 191 (multiplicative_op -> RW_DIV .)
    RW_TAN          reduce using rule 191 (multiplicative_op -> RW_DIV .)
    RW_SUCC         reduce using rule 191 (multiplicative_op -> RW_DIV .)
    RW_PRED         reduce using rule 191 (multiplicative_op -> RW_DIV .)
    RW_AWAL         reduce using rule 191 (multiplicative_op -> RW_DIV .)
    RW_AKHIR        reduce using rule 191 (multiplicative_op -> RW_DIV .)
    RW_FIRSTCHAR    reduce using rule 191 (multiplicative_op -> RW_DIV .)
    RW_LASTCHAR     reduce using rule 191 (multiplicative_op -> RW_DIV .)
    RW_LONG         reduce using rule 191 (multiplicative_op -> RW_DIV .)
    RW_ISKOSONG     reduce using rule 191 (multiplicative_op -> RW_DIV .)
    RW_INTEGERTOREAL reduce using rule 191 (multiplicative_op -> RW_DIV .)
    RW_REALTOINTEGER reduce using rule 191 (multiplicative_op -> RW_DIV .)


state 281

    (192) multiplicative_op -> RW_MOD .

    S_PLUS          reduce using rule 192 (multiplicative_op -> RW_MOD .)
    S_MINUS         reduce using rule 192 (multiplicative_op -> RW_MOD .)
    RW_NOT          reduce using rule 192 (multiplicative_op -> RW_MOD .)
    S_LEFT_BRACKET  reduce using rule 192 (multiplicative_op -> RW_MOD .)
    S_LEFT_SQUARE_BRACKET reduce using rule 192 (multiplicative_op -> RW_MOD .)
    IDENTIFIER      reduce using rule 192 (multiplicative_op -> RW_MOD .)
    L_BOOLEAN_TRUE  reduce using rule 192 (multiplicative_op -> RW_MOD .)
    L_BOOLEAN_FALSE reduce using rule 192 (multiplicative_op -> RW_MOD .)
    L_NIL           reduce using rule 192 (multiplicative_op -> RW_MOD .)
    L_INTEGER_NUMBER reduce using rule 192 (multiplicative_op -> RW_MOD .)
    L_REAL_NUMBER   reduce using rule 192 (multiplicative_op -> RW_MOD .)
    L_STRING        reduce using rule 192 (multiplicative_op -> RW_MOD .)
    L_CHARACTER     reduce using rule 192 (multiplicative_op -> RW_MOD .)
    RW_ABS          reduce using rule 192 (multiplicative_op -> RW_MOD .)
    RW_SIN          reduce using rule 192 (multiplicative_op -> RW_MOD .)
    RW_COS          reduce using rule 192 (multiplicative_op -> RW_MOD .)
    RW_TAN          reduce using rule 192 (multiplicative_op -> RW_MOD .)
    RW_SUCC         reduce using rule 192 (multiplicative_op -> RW_MOD .)
    RW_PRED         reduce using rule 192 (multiplicative_op -> RW_MOD .)
    RW_AWAL         reduce using rule 192 (multiplicative_op -> RW_MOD .)
    RW_AKHIR        reduce using rule 192 (multiplicative_op -> RW_MOD .)
    RW_FIRSTCHAR    reduce using rule 192 (multiplicative_op -> RW_MOD .)
    RW_LASTCHAR     reduce using rule 192 (multiplicative_op -> RW_MOD .)
    RW_LONG         reduce using rule 192 (multiplicative_op -> RW_MOD .)
    RW_ISKOSONG     reduce using rule 192 (multiplicative_op -> RW_MOD .)
    RW_INTEGERTOREAL reduce using rule 192 (multiplicative_op -> RW_MOD .)
    RW_REALTOINTEGER reduce using rule 192 (multiplicative_op -> RW_MOD .)


state 282

    (193) multiplicative_op -> RW_AND .

    S_PLUS          reduce using rule 193 (multiplicative_op -> RW_AND .)
    S_MINUS         reduce using rule 193 (multiplicative_op -> RW_AND .)
    RW_NOT          reduce using rule 193 (multiplicative_op -> RW_AND .)
    S_LEFT_BRACKET  reduce using rule 193 (multiplicative_op -> RW_AND .)
    S_LEFT_SQUARE_BRACKET reduce using rule 193 (multiplicative_op -> RW_AND .)
    IDENTIFIER      reduce using rule 193 (multiplicative_op -> RW_AND .)
    L_BOOLEAN_TRUE  reduce using rule 193 (multiplicative_op -> RW_AND .)
    L_BOOLEAN_FALSE reduce using rule 193 (multiplicative_op -> RW_AND .)
    L_NIL           reduce using rule 193 (multiplicative_op -> RW_AND .)
    L_INTEGER_NUMBER reduce using rule 193 (multiplicative_op -> RW_AND .)
    L_REAL_NUMBER   reduce using rule 193 (multiplicative_op -> RW_AND .)
    L_STRING        reduce using rule 193 (multiplicative_op -> RW_AND .)
    L_CHARACTER     reduce using rule 193 (multiplicative_op -> RW_AND .)
    RW_ABS          reduce using rule 193 (multiplicative_op -> RW_AND .)
    RW_SIN          reduce using rule 193 (multiplicative_op -> RW_AND .)
    RW_COS          reduce using rule 193 (multiplicative_op -> RW_AND .)
    RW_TAN          reduce using rule 193 (multiplicative_op -> RW_AND .)
    RW_SUCC         reduce using rule 193 (multiplicative_op -> RW_AND .)
    RW_PRED         reduce using rule 193 (multiplicative_op -> RW_AND .)
    RW_AWAL         reduce using rule 193 (multiplicative_op -> RW_AND .)
    RW_AKHIR        reduce using rule 193 (multiplicative_op -> RW_AND .)
    RW_FIRSTCHAR    reduce using rule 193 (multiplicative_op -> RW_AND .)
    RW_LASTCHAR     reduce using rule 193 (multiplicative_op -> RW_AND .)
    RW_LONG         reduce using rule 193 (multiplicative_op -> RW_AND .)
    RW_ISKOSONG     reduce using rule 193 (multiplicative_op -> RW_AND .)
    RW_INTEGERTOREAL reduce using rule 193 (multiplicative_op -> RW_AND .)
    RW_REALTOINTEGER reduce using rule 193 (multiplicative_op -> RW_AND .)


state 283

    (194) unary_expression -> unary_op unary_expression .

    S_TIMES         reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    S_DIVIDE        reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    RW_DIV          reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    RW_MOD          reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    RW_AND          reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    S_PLUS          reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    S_MINUS         reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    RW_OR           reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    RW_XOR          reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    S_EQUAL         reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    S_NOT_EQUAL     reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    S_LESS_THAN_EQUAL reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    S_LESS_THAN     reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    S_GREATER_THAN  reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    S_ELEMENT_OF    reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    RW_EQ           reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    RW_NEQ          reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    DEDENT          reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    S_SEMI_COLON    reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    S_RETURN        reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    RW_IF           reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    RW_DEPEND       reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    RW_WHILE        reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    RW_ITERATE      reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    IDENTIFIER      reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    RW_REPEAT       reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    RW_INPUT        reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    RW_OUTPUT       reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    RW_THEN         reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    RW_DO           reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    S_COMMA         reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    S_RIGHT_BRACKET reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    S_UP_TO         reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    INDENT          reduce using rule 194 (unary_expression -> unary_op unary_expression .)
    S_COLON         reduce using rule 194 (unary_expression -> unary_op unary_expression .)


state 284

    (197) exponentiation_expression -> primary_expression S_POWER . exponentiation_expression
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    primary_expression             shift and go to state 188
    exponentiation_expression      shift and go to state 351
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 285

    (203) primary_expression -> S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 352
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 286

    (206) set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list . S_RIGHT_SQUARE_BRACKET
    (208) member_designator_list -> member_designator_list . S_COMMA member_designator

    S_RIGHT_SQUARE_BRACKET shift and go to state 353
    S_COMMA         shift and go to state 354


state 287

    (207) set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .

    S_POWER         reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_TIMES         reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_DIVIDE        reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_DIV          reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_MOD          reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_AND          reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_PLUS          reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_MINUS         reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_OR           reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_XOR          reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_EQUAL         reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_NOT_EQUAL     reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_LESS_THAN     reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_GREATER_THAN  reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_ELEMENT_OF    reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_EQ           reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_NEQ          reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    DEDENT          reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_SEMI_COLON    reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_RETURN        reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_IF           reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_DEPEND       reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_WHILE        reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_ITERATE      reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    IDENTIFIER      reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_REPEAT       reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_INPUT        reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_OUTPUT       reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_THEN         reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_DO           reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_COMMA         reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_UP_TO         reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    INDENT          reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_COLON         reduce using rule 207 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)


state 288

    (209) member_designator_list -> member_designator .
    (210) member_designator -> member_designator . S_UP_TO expression

    S_RIGHT_SQUARE_BRACKET reduce using rule 209 (member_designator_list -> member_designator .)
    S_COMMA         reduce using rule 209 (member_designator_list -> member_designator .)
    S_UP_TO         shift and go to state 355


state 289

    (211) member_designator -> expression .
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_UP_TO         reduce using rule 211 (member_designator -> expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 211 (member_designator -> expression .)
    S_COMMA         reduce using rule 211 (member_designator -> expression .)
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 290

    (127) if_statement -> RW_IF boolean_expression RW_THEN . compound_statement
    (128) if_statement -> RW_IF boolean_expression RW_THEN . compound_statement RW_ELSE compound_statement
    (92) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 30

    compound_statement             shift and go to state 356

state 291

    (123) depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET . input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (115) input_statement_parameter_list -> . input_statement_parameter_list S_COMMA input_statement_parameter
    (116) input_statement_parameter_list -> . input_statement_parameter
    (117) input_statement_parameter -> . variable_access
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier

    IDENTIFIER      shift and go to state 5

    input_statement_parameter_list shift and go to state 357
    input_statement_parameter      shift and go to state 301
    variable_access                shift and go to state 302
    identifier                     shift and go to state 303
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74

state 292

    (136) while_statement -> RW_WHILE boolean_expression RW_DO . compound_statement
    (92) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 30

    compound_statement             shift and go to state 358

state 293

    (138) traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value . compound_statement
    (92) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 30

    compound_statement             shift and go to state 359

state 294

    (139) traversal_range_value -> S_LEFT_SQUARE_BRACKET . subrange_type S_RIGHT_SQUARE_BRACKET
    (39) subrange_type -> . subrange_type_option
    (40) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (41) subrange_option -> . identifier
    (42) subrange_option -> . constant
    (43) subrange_option -> . function_designator
    (246) identifier -> . IDENTIFIER
    (145) constant -> . string_char_constant
    (146) constant -> . non_string_constant
    (147) constant -> . sign non_string_constant
    (148) constant -> . boolean_constant
    (149) constant -> . nil_constant
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (150) sign -> . S_PLUS
    (151) sign -> . S_MINUS
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    IDENTIFIER      shift and go to state 5
    S_PLUS          shift and go to state 135
    S_MINUS         shift and go to state 136
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    subrange_type                  shift and go to state 360
    subrange_type_option           shift and go to state 117
    subrange_option                shift and go to state 119
    identifier                     shift and go to state 329
    constant                       shift and go to state 120
    function_designator            shift and go to state 121
    string_char_constant           shift and go to state 122
    non_string_constant            shift and go to state 123
    sign                           shift and go to state 124
    boolean_constant               shift and go to state 125
    nil_constant                   shift and go to state 126
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 295

    (137) iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP . boolean_expression compound_statement
    (129) boolean_expression -> . expression
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    boolean_expression             shift and go to state 361
    expression                     shift and go to state 201
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 296

    (132) repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL . boolean_expression
    (129) boolean_expression -> . expression
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    boolean_expression             shift and go to state 362
    expression                     shift and go to state 201
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 297

    (133) repeat_times_statement -> RW_REPEAT variable_access RW_TIMES . compound_statement
    (92) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 30

    compound_statement             shift and go to state 363

state 298

    (134) repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES . compound_statement
    (92) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 30

    compound_statement             shift and go to state 364

state 299

    (135) repeat_times_statement -> RW_REPEAT function_designator RW_TIMES . compound_statement
    (92) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 30

    compound_statement             shift and go to state 365

state 300

    (114) input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list . S_RIGHT_BRACKET
    (115) input_statement_parameter_list -> input_statement_parameter_list . S_COMMA input_statement_parameter

    S_RIGHT_BRACKET shift and go to state 366
    S_COMMA         shift and go to state 367


state 301

    (116) input_statement_parameter_list -> input_statement_parameter .

    S_RIGHT_BRACKET reduce using rule 116 (input_statement_parameter_list -> input_statement_parameter .)
    S_COMMA         reduce using rule 116 (input_statement_parameter_list -> input_statement_parameter .)


state 302

    (117) input_statement_parameter -> variable_access .
    (166) indexed_variable -> variable_access . S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> variable_access . S_DOT identifier

    S_RIGHT_BRACKET reduce using rule 117 (input_statement_parameter -> variable_access .)
    S_COMMA         reduce using rule 117 (input_statement_parameter -> variable_access .)
    S_LEFT_SQUARE_BRACKET shift and go to state 176
    S_DOT           shift and go to state 177


state 303

    (163) variable_access -> identifier .

    S_LEFT_SQUARE_BRACKET reduce using rule 163 (variable_access -> identifier .)
    S_DOT           reduce using rule 163 (variable_access -> identifier .)
    S_RIGHT_BRACKET reduce using rule 163 (variable_access -> identifier .)
    S_COMMA         reduce using rule 163 (variable_access -> identifier .)


state 304

    (118) output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list . S_RIGHT_BRACKET
    (119) output_statement_parameter_list -> output_statement_parameter_list . S_COMMA output_statement_parameter

    S_RIGHT_BRACKET shift and go to state 368
    S_COMMA         shift and go to state 369


state 305

    (120) output_statement_parameter_list -> output_statement_parameter .

    S_RIGHT_BRACKET reduce using rule 120 (output_statement_parameter_list -> output_statement_parameter .)
    S_COMMA         reduce using rule 120 (output_statement_parameter_list -> output_statement_parameter .)


state 306

    (121) output_statement_parameter -> expression .
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET reduce using rule 121 (output_statement_parameter -> expression .)
    S_COMMA         reduce using rule 121 (output_statement_parameter -> expression .)
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 307

    (5) block -> RW_KAMUS INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block . procedure_and_function_implementation_block
    (16) procedure_and_function_implementation_block -> . empty
    (17) procedure_and_function_implementation_block -> . subprogram_implementation_list
    (245) empty -> .
    (18) subprogram_implementation_list -> . subprogram_implementation_list subprogram_implementation
    (19) subprogram_implementation_list -> . subprogram_implementation
    (20) subprogram_implementation -> . procedure_implementation
    (21) subprogram_implementation -> . function_implementation
    (22) procedure_implementation -> . procedure_declaration procedure_implementation_block
    (25) function_implementation -> . function_declaration function_implementation_block
    (69) procedure_declaration -> . procedure_identifier formal_parameter_list
    (80) function_declaration -> . function_identification function_formal_parameter_list function_return_type
    (81) function_declaration -> . function_identification function_return_type
    (70) procedure_identifier -> . RW_PROCEDURE identifier
    (82) function_identification -> . RW_FUNCTION identifier

    $end            reduce using rule 245 (empty -> .)
    RW_PROCEDURE    shift and go to state 26
    RW_FUNCTION     shift and go to state 27

    procedure_and_function_implementation_block shift and go to state 370
    empty                          shift and go to state 17
    subprogram_implementation_list shift and go to state 18
    subprogram_implementation      shift and go to state 19
    procedure_implementation       shift and go to state 20
    function_implementation        shift and go to state 21
    procedure_declaration          shift and go to state 22
    function_declaration           shift and go to state 23
    procedure_identifier           shift and go to state 24
    function_identification        shift and go to state 25

state 308

    (14) procedure_and_function_declaration_block -> procedure_and_function_declaration DEDENT .

    RW_ALGORITMA    reduce using rule 14 (procedure_and_function_declaration_block -> procedure_and_function_declaration DEDENT .)


state 309

    (65) procedure_and_function_declaration -> procedure_and_function_declaration procedure_and_function_sub_declaration .

    DEDENT          reduce using rule 65 (procedure_and_function_declaration -> procedure_and_function_declaration procedure_and_function_sub_declaration .)
    RW_PROCEDURE    reduce using rule 65 (procedure_and_function_declaration -> procedure_and_function_declaration procedure_and_function_sub_declaration .)
    RW_FUNCTION     reduce using rule 65 (procedure_and_function_declaration -> procedure_and_function_declaration procedure_and_function_sub_declaration .)


state 310

    (53) variable_sub_declaration -> identifier_list S_COLON type_denoter .

    IDENTIFIER      reduce using rule 53 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    DEDENT          reduce using rule 53 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    RW_PROCEDURE    reduce using rule 53 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    RW_FUNCTION     reduce using rule 53 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    S_SEMI_COLON    reduce using rule 53 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    S_RIGHT_BRACKET reduce using rule 53 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    S_COMMA         reduce using rule 53 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    S_GREATER_THAN  reduce using rule 53 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)


state 311

    (3) identifier_list -> identifier_list S_COMMA identifier .

    S_COLON         reduce using rule 3 (identifier_list -> identifier_list S_COMMA identifier .)
    S_COMMA         reduce using rule 3 (identifier_list -> identifier_list S_COMMA identifier .)
    S_RIGHT_BRACKET reduce using rule 3 (identifier_list -> identifier_list S_COMMA identifier .)


state 312

    (61) type_sub_declaration -> RW_TYPE identifier S_COLON type_variety .

    RW_TYPE         reduce using rule 61 (type_sub_declaration -> RW_TYPE identifier S_COLON type_variety .)
    IDENTIFIER      reduce using rule 61 (type_sub_declaration -> RW_TYPE identifier S_COLON type_variety .)
    DEDENT          reduce using rule 61 (type_sub_declaration -> RW_TYPE identifier S_COLON type_variety .)
    RW_PROCEDURE    reduce using rule 61 (type_sub_declaration -> RW_TYPE identifier S_COLON type_variety .)
    RW_FUNCTION     reduce using rule 61 (type_sub_declaration -> RW_TYPE identifier S_COLON type_variety .)


state 313

    (62) type_variety -> type_denoter .

    RW_TYPE         reduce using rule 62 (type_variety -> type_denoter .)
    IDENTIFIER      reduce using rule 62 (type_variety -> type_denoter .)
    DEDENT          reduce using rule 62 (type_variety -> type_denoter .)
    RW_PROCEDURE    reduce using rule 62 (type_variety -> type_denoter .)
    RW_FUNCTION     reduce using rule 62 (type_variety -> type_denoter .)


state 314

    (63) type_variety -> type_user_defined .

    RW_TYPE         reduce using rule 63 (type_variety -> type_user_defined .)
    IDENTIFIER      reduce using rule 63 (type_variety -> type_user_defined .)
    DEDENT          reduce using rule 63 (type_variety -> type_user_defined .)
    RW_PROCEDURE    reduce using rule 63 (type_variety -> type_user_defined .)
    RW_FUNCTION     reduce using rule 63 (type_variety -> type_user_defined .)


state 315

    (64) type_user_defined -> S_LESS_THAN . variable_declaration_comma S_GREATER_THAN
    (54) variable_declaration_comma -> . variable_sub_declaration
    (55) variable_declaration_comma -> . variable_sub_declaration S_COMMA variable_declaration_comma
    (53) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (3) identifier_list -> . identifier_list S_COMMA identifier
    (4) identifier_list -> . identifier
    (246) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 5

    variable_declaration_comma     shift and go to state 371
    variable_sub_declaration       shift and go to state 372
    identifier_list                shift and go to state 84
    identifier                     shift and go to state 85

state 316

    (58) constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL . constant
    (145) constant -> . string_char_constant
    (146) constant -> . non_string_constant
    (147) constant -> . sign non_string_constant
    (148) constant -> . boolean_constant
    (149) constant -> . nil_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (150) sign -> . S_PLUS
    (151) sign -> . S_MINUS
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER

    S_PLUS          shift and go to state 135
    S_MINUS         shift and go to state 136
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157

    constant                       shift and go to state 373
    string_char_constant           shift and go to state 122
    non_string_constant            shift and go to state 123
    sign                           shift and go to state 124
    boolean_constant               shift and go to state 125
    nil_constant                   shift and go to state 126
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134

state 317

    (23) procedure_implementation_block -> RW_KAMUS RW_LOKAL INDENT constant_declaration_block . type_declaration_block variable_declaration_block DEDENT algorithm_block
    (9) type_declaration_block -> . empty
    (10) type_declaration_block -> . type_declaration
    (245) empty -> .
    (59) type_declaration -> . type_declaration type_sub_declaration
    (60) type_declaration -> . type_sub_declaration
    (61) type_sub_declaration -> . RW_TYPE identifier S_COLON type_variety

    IDENTIFIER      reduce using rule 245 (empty -> .)
    DEDENT          reduce using rule 245 (empty -> .)
    RW_TYPE         shift and go to state 35

    type_declaration_block         shift and go to state 374
    empty                          shift and go to state 32
    type_declaration               shift and go to state 33
    type_sub_declaration           shift and go to state 34

state 318

    (26) function_implementation_block -> RW_KAMUS RW_LOKAL INDENT constant_declaration_block . type_declaration_block variable_declaration_block DEDENT algorithm_block
    (9) type_declaration_block -> . empty
    (10) type_declaration_block -> . type_declaration
    (245) empty -> .
    (59) type_declaration -> . type_declaration type_sub_declaration
    (60) type_declaration -> . type_sub_declaration
    (61) type_sub_declaration -> . RW_TYPE identifier S_COLON type_variety

    IDENTIFIER      reduce using rule 245 (empty -> .)
    DEDENT          reduce using rule 245 (empty -> .)
    RW_TYPE         shift and go to state 35

    type_declaration_block         shift and go to state 375
    empty                          shift and go to state 32
    type_declaration               shift and go to state 33
    type_sub_declaration           shift and go to state 34

state 319

    (74) formal_parameter_section -> formal_parameter_section S_SEMI_COLON parameter_specification .

    S_SEMI_COLON    reduce using rule 74 (formal_parameter_section -> formal_parameter_section S_SEMI_COLON parameter_specification .)
    S_RIGHT_BRACKET reduce using rule 74 (formal_parameter_section -> formal_parameter_section S_SEMI_COLON parameter_specification .)


state 320

    (79) procedure_parameter_type -> RW_INPUT S_DIVIDE RW_OUTPUT .

    IDENTIFIER      reduce using rule 79 (procedure_parameter_type -> RW_INPUT S_DIVIDE RW_OUTPUT .)


state 321

    (88) function_parameter_list -> function_parameter_list S_SEMI_COLON function_parameter_declaration .

    S_SEMI_COLON    reduce using rule 88 (function_parameter_list -> function_parameter_list S_SEMI_COLON function_parameter_declaration .)
    S_RIGHT_BRACKET reduce using rule 88 (function_parameter_list -> function_parameter_list S_SEMI_COLON function_parameter_declaration .)


state 322

    (85) function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list . S_RIGHT_BRACKET
    (109) actual_parameter_list -> actual_parameter_list . S_COMMA actual_parameter

    S_RIGHT_BRACKET shift and go to state 376
    S_COMMA         shift and go to state 347


state 323

    (38) enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .

    RW_KAMUS        reduce using rule 38 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 38 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 38 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 38 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 38 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 38 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 38 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 38 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 38 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 38 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 38 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 38 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)


state 324

    (45) array_type -> RW_ARRAY array_index RW_OF . component_type
    (50) component_type -> . type_denoter
    (28) type_denoter -> . ordinal_type
    (29) type_denoter -> . structured_type
    (30) type_denoter -> . RW_INTEGER
    (31) type_denoter -> . RW_REAL
    (32) type_denoter -> . RW_STRING
    (33) type_denoter -> . RW_CHARACTER
    (34) type_denoter -> . RW_BOOLEAN
    (35) ordinal_type -> . enumerated_type
    (36) ordinal_type -> . subrange_type
    (37) ordinal_type -> . identifier
    (44) structured_type -> . array_type
    (38) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (39) subrange_type -> . subrange_type_option
    (246) identifier -> . IDENTIFIER
    (45) array_type -> . RW_ARRAY array_index RW_OF component_type
    (40) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (41) subrange_option -> . identifier
    (42) subrange_option -> . constant
    (43) subrange_option -> . function_designator
    (145) constant -> . string_char_constant
    (146) constant -> . non_string_constant
    (147) constant -> . sign non_string_constant
    (148) constant -> . boolean_constant
    (149) constant -> . nil_constant
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (150) sign -> . S_PLUS
    (151) sign -> . S_MINUS
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    RW_INTEGER      shift and go to state 107
    RW_REAL         shift and go to state 108
    RW_STRING       shift and go to state 109
    RW_CHARACTER    shift and go to state 110
    RW_BOOLEAN      shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 116
    IDENTIFIER      shift and go to state 5
    RW_ARRAY        shift and go to state 118
    S_PLUS          shift and go to state 135
    S_MINUS         shift and go to state 136
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    component_type                 shift and go to state 377
    type_denoter                   shift and go to state 378
    ordinal_type                   shift and go to state 105
    structured_type                shift and go to state 106
    enumerated_type                shift and go to state 112
    subrange_type                  shift and go to state 113
    identifier                     shift and go to state 114
    array_type                     shift and go to state 115
    subrange_type_option           shift and go to state 117
    subrange_option                shift and go to state 119
    constant                       shift and go to state 120
    function_designator            shift and go to state 121
    string_char_constant           shift and go to state 122
    non_string_constant            shift and go to state 123
    sign                           shift and go to state 124
    boolean_constant               shift and go to state 125
    nil_constant                   shift and go to state 126
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 325

    (46) array_index -> S_LEFT_SQUARE_BRACKET index_list . S_RIGHT_SQUARE_BRACKET
    (47) index_list -> index_list . S_COMMA index_type

    S_RIGHT_SQUARE_BRACKET shift and go to state 379
    S_COMMA         shift and go to state 380


state 326

    (48) index_list -> index_type .

    S_RIGHT_SQUARE_BRACKET reduce using rule 48 (index_list -> index_type .)
    S_COMMA         reduce using rule 48 (index_list -> index_type .)


state 327

    (49) index_type -> ordinal_type .

    S_RIGHT_SQUARE_BRACKET reduce using rule 49 (index_type -> ordinal_type .)
    S_COMMA         reduce using rule 49 (index_type -> ordinal_type .)


state 328

    (40) subrange_type_option -> subrange_option S_UP_TO subrange_option .

    RW_KAMUS        reduce using rule 40 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    DEDENT          reduce using rule 40 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    RW_PROCEDURE    reduce using rule 40 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    RW_FUNCTION     reduce using rule 40 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    S_EQUAL         reduce using rule 40 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    IDENTIFIER      reduce using rule 40 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    S_SEMI_COLON    reduce using rule 40 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    S_RIGHT_BRACKET reduce using rule 40 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    S_COMMA         reduce using rule 40 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    S_GREATER_THAN  reduce using rule 40 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    RW_TYPE         reduce using rule 40 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 40 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)


state 329

    (41) subrange_option -> identifier .
    (216) user_defined_function_call -> identifier . function_actual_parameter_list
    (85) function_actual_parameter_list -> . S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET

    RW_KAMUS        reduce using rule 41 (subrange_option -> identifier .)
    DEDENT          reduce using rule 41 (subrange_option -> identifier .)
    RW_PROCEDURE    reduce using rule 41 (subrange_option -> identifier .)
    RW_FUNCTION     reduce using rule 41 (subrange_option -> identifier .)
    S_EQUAL         reduce using rule 41 (subrange_option -> identifier .)
    IDENTIFIER      reduce using rule 41 (subrange_option -> identifier .)
    S_SEMI_COLON    reduce using rule 41 (subrange_option -> identifier .)
    S_RIGHT_BRACKET reduce using rule 41 (subrange_option -> identifier .)
    S_COMMA         reduce using rule 41 (subrange_option -> identifier .)
    S_GREATER_THAN  reduce using rule 41 (subrange_option -> identifier .)
    RW_TYPE         reduce using rule 41 (subrange_option -> identifier .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 41 (subrange_option -> identifier .)
    S_UP_TO         reduce using rule 41 (subrange_option -> identifier .)
    S_LEFT_BRACKET  shift and go to state 234

    function_actual_parameter_list shift and go to state 233

state 330

    (223) abs_function -> RW_ABS S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 381
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 331

    (224) sin_function -> RW_SIN S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 382
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 332

    (225) cos_function -> RW_COS S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 383
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 333

    (226) tan_function -> RW_TAN S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 384
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 334

    (227) succ_function -> RW_SUCC S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 385
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 335

    (228) pred_function -> RW_PRED S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 386
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 336

    (235) awal_function -> RW_AWAL S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 387
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 337

    (236) akhir_function -> RW_AKHIR S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 388
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 338

    (237) firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 389
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 339

    (238) lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 390
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 340

    (239) long_function -> RW_LONG S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 391
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 341

    (240) iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 392
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 342

    (243) integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 393
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 343

    (244) real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 394
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 344

    (166) indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .

    S_ASSIGNMENT    reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_LEFT_SQUARE_BRACKET reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_DOT           reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_POWER         reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_TIMES         reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_DIVIDE        reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_DIV          reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_MOD          reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_AND          reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_PLUS          reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_MINUS         reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_OR           reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_XOR          reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_EQUAL         reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_NOT_EQUAL     reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_LESS_THAN     reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_GREATER_THAN  reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_ELEMENT_OF    reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_EQ           reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_NEQ          reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    DEDENT          reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_SEMI_COLON    reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_RETURN        reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_IF           reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_DEPEND       reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_WHILE        reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_ITERATE      reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    IDENTIFIER      reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_REPEAT       reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_INPUT        reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_OUTPUT       reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_THEN         reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_DO           reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_TIMES        reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_COMMA         reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_UP_TO         reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    INDENT          reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_COLON         reduce using rule 166 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)


state 345

    (167) index_expression_list -> index_expression_list S_COMMA . expression
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    expression                     shift and go to state 395
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 346

    (107) procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .

    DEDENT          reduce using rule 107 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 107 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 107 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 107 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 107 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 107 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 107 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 107 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 107 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 107 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 107 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)


state 347

    (109) actual_parameter_list -> actual_parameter_list S_COMMA . actual_parameter
    (111) actual_parameter -> . expression
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    actual_parameter               shift and go to state 396
    expression                     shift and go to state 261
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 348

    (170) expression -> expression relational_op additive_expression .
    (181) additive_expression -> additive_expression . additive_op multiplicative_expression
    (183) additive_op -> . S_PLUS
    (184) additive_op -> . S_MINUS
    (185) additive_op -> . RW_OR
    (186) additive_op -> . RW_XOR

    S_EQUAL         reduce using rule 170 (expression -> expression relational_op additive_expression .)
    S_NOT_EQUAL     reduce using rule 170 (expression -> expression relational_op additive_expression .)
    S_LESS_THAN_EQUAL reduce using rule 170 (expression -> expression relational_op additive_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 170 (expression -> expression relational_op additive_expression .)
    S_LESS_THAN     reduce using rule 170 (expression -> expression relational_op additive_expression .)
    S_GREATER_THAN  reduce using rule 170 (expression -> expression relational_op additive_expression .)
    S_ELEMENT_OF    reduce using rule 170 (expression -> expression relational_op additive_expression .)
    RW_EQ           reduce using rule 170 (expression -> expression relational_op additive_expression .)
    RW_NEQ          reduce using rule 170 (expression -> expression relational_op additive_expression .)
    DEDENT          reduce using rule 170 (expression -> expression relational_op additive_expression .)
    S_SEMI_COLON    reduce using rule 170 (expression -> expression relational_op additive_expression .)
    S_RETURN        reduce using rule 170 (expression -> expression relational_op additive_expression .)
    RW_IF           reduce using rule 170 (expression -> expression relational_op additive_expression .)
    RW_DEPEND       reduce using rule 170 (expression -> expression relational_op additive_expression .)
    RW_WHILE        reduce using rule 170 (expression -> expression relational_op additive_expression .)
    RW_ITERATE      reduce using rule 170 (expression -> expression relational_op additive_expression .)
    IDENTIFIER      reduce using rule 170 (expression -> expression relational_op additive_expression .)
    RW_REPEAT       reduce using rule 170 (expression -> expression relational_op additive_expression .)
    RW_INPUT        reduce using rule 170 (expression -> expression relational_op additive_expression .)
    RW_OUTPUT       reduce using rule 170 (expression -> expression relational_op additive_expression .)
    RW_THEN         reduce using rule 170 (expression -> expression relational_op additive_expression .)
    RW_DO           reduce using rule 170 (expression -> expression relational_op additive_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 170 (expression -> expression relational_op additive_expression .)
    S_COMMA         reduce using rule 170 (expression -> expression relational_op additive_expression .)
    S_RIGHT_BRACKET reduce using rule 170 (expression -> expression relational_op additive_expression .)
    S_UP_TO         reduce using rule 170 (expression -> expression relational_op additive_expression .)
    INDENT          reduce using rule 170 (expression -> expression relational_op additive_expression .)
    S_COLON         reduce using rule 170 (expression -> expression relational_op additive_expression .)
    S_PLUS          shift and go to state 273
    S_MINUS         shift and go to state 274
    RW_OR           shift and go to state 275
    RW_XOR          shift and go to state 276

    additive_op                    shift and go to state 272

state 349

    (181) additive_expression -> additive_expression additive_op multiplicative_expression .
    (187) multiplicative_expression -> multiplicative_expression . multiplicative_op unary_expression
    (189) multiplicative_op -> . S_TIMES
    (190) multiplicative_op -> . S_DIVIDE
    (191) multiplicative_op -> . RW_DIV
    (192) multiplicative_op -> . RW_MOD
    (193) multiplicative_op -> . RW_AND

    S_PLUS          reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_MINUS         reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_OR           reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_XOR          reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_EQUAL         reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_NOT_EQUAL     reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_LESS_THAN_EQUAL reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_LESS_THAN     reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_GREATER_THAN  reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_ELEMENT_OF    reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_EQ           reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_NEQ          reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    DEDENT          reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_SEMI_COLON    reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_RETURN        reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_IF           reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_DEPEND       reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_WHILE        reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_ITERATE      reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    IDENTIFIER      reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_REPEAT       reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_INPUT        reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_OUTPUT       reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_THEN         reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_DO           reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_COMMA         reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_RIGHT_BRACKET reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_UP_TO         reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    INDENT          reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_COLON         reduce using rule 181 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_TIMES         shift and go to state 278
    S_DIVIDE        shift and go to state 279
    RW_DIV          shift and go to state 280
    RW_MOD          shift and go to state 281
    RW_AND          shift and go to state 282

    multiplicative_op              shift and go to state 277

state 350

    (187) multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .

    S_TIMES         reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_DIVIDE        reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_DIV          reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_MOD          reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_AND          reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_PLUS          reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_MINUS         reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_OR           reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_XOR          reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_EQUAL         reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_NOT_EQUAL     reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_LESS_THAN_EQUAL reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_LESS_THAN     reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_GREATER_THAN  reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_ELEMENT_OF    reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_EQ           reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_NEQ          reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    DEDENT          reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_SEMI_COLON    reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_RETURN        reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_IF           reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_DEPEND       reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_WHILE        reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_ITERATE      reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    IDENTIFIER      reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_REPEAT       reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_INPUT        reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_OUTPUT       reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_THEN         reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_DO           reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_COMMA         reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_RIGHT_BRACKET reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_UP_TO         reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    INDENT          reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_COLON         reduce using rule 187 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)


state 351

    (197) exponentiation_expression -> primary_expression S_POWER exponentiation_expression .

    S_TIMES         reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_DIVIDE        reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_DIV          reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_MOD          reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_AND          reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_PLUS          reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_MINUS         reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_OR           reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_XOR          reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_EQUAL         reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_NOT_EQUAL     reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_LESS_THAN_EQUAL reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_LESS_THAN     reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_GREATER_THAN  reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_ELEMENT_OF    reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_EQ           reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_NEQ          reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    DEDENT          reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_SEMI_COLON    reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_RETURN        reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_IF           reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_DEPEND       reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_WHILE        reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_ITERATE      reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    IDENTIFIER      reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_REPEAT       reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_INPUT        reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_OUTPUT       reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_THEN         reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_DO           reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_COMMA         reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_RIGHT_BRACKET reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_UP_TO         reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    INDENT          reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_COLON         reduce using rule 197 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)


state 352

    (203) primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_POWER         reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_UP_TO         reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 203 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 353

    (206) set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .

    S_POWER         reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_TIMES         reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_DIVIDE        reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_DIV          reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_MOD          reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_AND          reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_PLUS          reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_MINUS         reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_OR           reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_XOR          reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_EQUAL         reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_NOT_EQUAL     reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_LESS_THAN     reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_GREATER_THAN  reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_ELEMENT_OF    reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_EQ           reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_NEQ          reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    DEDENT          reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_SEMI_COLON    reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_RETURN        reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_IF           reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_DEPEND       reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_WHILE        reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_ITERATE      reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    IDENTIFIER      reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_REPEAT       reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_INPUT        reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_OUTPUT       reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_THEN         reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_DO           reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_COMMA         reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_UP_TO         reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    INDENT          reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_COLON         reduce using rule 206 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)


state 354

    (208) member_designator_list -> member_designator_list S_COMMA . member_designator
    (210) member_designator -> . member_designator S_UP_TO expression
    (211) member_designator -> . expression
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    member_designator              shift and go to state 397
    expression                     shift and go to state 289
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 355

    (210) member_designator -> member_designator S_UP_TO . expression
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    expression                     shift and go to state 398
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 356

    (127) if_statement -> RW_IF boolean_expression RW_THEN compound_statement .
    (128) if_statement -> RW_IF boolean_expression RW_THEN compound_statement . RW_ELSE compound_statement

    DEDENT          reduce using rule 127 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    S_SEMI_COLON    reduce using rule 127 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    S_RETURN        reduce using rule 127 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_IF           reduce using rule 127 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_DEPEND       reduce using rule 127 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_WHILE        reduce using rule 127 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_ITERATE      reduce using rule 127 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    IDENTIFIER      reduce using rule 127 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_REPEAT       reduce using rule 127 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_INPUT        reduce using rule 127 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_OUTPUT       reduce using rule 127 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_ELSE         shift and go to state 399


state 357

    (123) depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list . S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (115) input_statement_parameter_list -> input_statement_parameter_list . S_COMMA input_statement_parameter

    S_RIGHT_BRACKET shift and go to state 400
    S_COMMA         shift and go to state 367


state 358

    (136) while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .

    DEDENT          reduce using rule 136 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    S_SEMI_COLON    reduce using rule 136 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    S_RETURN        reduce using rule 136 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_IF           reduce using rule 136 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_DEPEND       reduce using rule 136 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_WHILE        reduce using rule 136 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_ITERATE      reduce using rule 136 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    IDENTIFIER      reduce using rule 136 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_REPEAT       reduce using rule 136 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_INPUT        reduce using rule 136 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_OUTPUT       reduce using rule 136 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)


state 359

    (138) traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .

    DEDENT          reduce using rule 138 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    S_SEMI_COLON    reduce using rule 138 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    S_RETURN        reduce using rule 138 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_IF           reduce using rule 138 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_DEPEND       reduce using rule 138 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_WHILE        reduce using rule 138 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_ITERATE      reduce using rule 138 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    IDENTIFIER      reduce using rule 138 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_REPEAT       reduce using rule 138 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_INPUT        reduce using rule 138 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_OUTPUT       reduce using rule 138 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)


state 360

    (139) traversal_range_value -> S_LEFT_SQUARE_BRACKET subrange_type . S_RIGHT_SQUARE_BRACKET

    S_RIGHT_SQUARE_BRACKET shift and go to state 401


state 361

    (137) iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression . compound_statement
    (92) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 30

    compound_statement             shift and go to state 402

state 362

    (132) repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .

    DEDENT          reduce using rule 132 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    S_SEMI_COLON    reduce using rule 132 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    S_RETURN        reduce using rule 132 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_IF           reduce using rule 132 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_DEPEND       reduce using rule 132 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_WHILE        reduce using rule 132 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_ITERATE      reduce using rule 132 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    IDENTIFIER      reduce using rule 132 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_REPEAT       reduce using rule 132 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_INPUT        reduce using rule 132 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_OUTPUT       reduce using rule 132 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)


state 363

    (133) repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .

    DEDENT          reduce using rule 133 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    S_SEMI_COLON    reduce using rule 133 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    S_RETURN        reduce using rule 133 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_IF           reduce using rule 133 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_DEPEND       reduce using rule 133 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_WHILE        reduce using rule 133 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_ITERATE      reduce using rule 133 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    IDENTIFIER      reduce using rule 133 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_REPEAT       reduce using rule 133 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_INPUT        reduce using rule 133 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_OUTPUT       reduce using rule 133 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)


state 364

    (134) repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .

    DEDENT          reduce using rule 134 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    S_SEMI_COLON    reduce using rule 134 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    S_RETURN        reduce using rule 134 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_IF           reduce using rule 134 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_DEPEND       reduce using rule 134 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_WHILE        reduce using rule 134 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_ITERATE      reduce using rule 134 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    IDENTIFIER      reduce using rule 134 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_REPEAT       reduce using rule 134 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_INPUT        reduce using rule 134 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_OUTPUT       reduce using rule 134 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)


state 365

    (135) repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .

    DEDENT          reduce using rule 135 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    S_SEMI_COLON    reduce using rule 135 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    S_RETURN        reduce using rule 135 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_IF           reduce using rule 135 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_DEPEND       reduce using rule 135 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_WHILE        reduce using rule 135 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_ITERATE      reduce using rule 135 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    IDENTIFIER      reduce using rule 135 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_REPEAT       reduce using rule 135 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_INPUT        reduce using rule 135 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_OUTPUT       reduce using rule 135 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)


state 366

    (114) input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .

    DEDENT          reduce using rule 114 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 114 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 114 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 114 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 114 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 114 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 114 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 114 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 114 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 114 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 114 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)


state 367

    (115) input_statement_parameter_list -> input_statement_parameter_list S_COMMA . input_statement_parameter
    (117) input_statement_parameter -> . variable_access
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier

    IDENTIFIER      shift and go to state 5

    input_statement_parameter      shift and go to state 403
    variable_access                shift and go to state 302
    identifier                     shift and go to state 303
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74

state 368

    (118) output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .

    DEDENT          reduce using rule 118 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 118 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 118 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 118 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 118 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 118 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 118 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 118 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 118 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 118 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 118 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)


state 369

    (119) output_statement_parameter_list -> output_statement_parameter_list S_COMMA . output_statement_parameter
    (121) output_statement_parameter -> . expression
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    output_statement_parameter     shift and go to state 404
    expression                     shift and go to state 306
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 370

    (5) block -> RW_KAMUS INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block .

    $end            reduce using rule 5 (block -> RW_KAMUS INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block .)


state 371

    (64) type_user_defined -> S_LESS_THAN variable_declaration_comma . S_GREATER_THAN

    S_GREATER_THAN  shift and go to state 405


state 372

    (54) variable_declaration_comma -> variable_sub_declaration .
    (55) variable_declaration_comma -> variable_sub_declaration . S_COMMA variable_declaration_comma

    S_GREATER_THAN  reduce using rule 54 (variable_declaration_comma -> variable_sub_declaration .)
    S_COMMA         shift and go to state 406


state 373

    (58) constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .

    RW_CONSTANT     reduce using rule 58 (constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .)
    RW_TYPE         reduce using rule 58 (constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .)
    IDENTIFIER      reduce using rule 58 (constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .)
    DEDENT          reduce using rule 58 (constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .)
    RW_PROCEDURE    reduce using rule 58 (constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .)
    RW_FUNCTION     reduce using rule 58 (constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .)


state 374

    (23) procedure_implementation_block -> RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block . variable_declaration_block DEDENT algorithm_block
    (11) variable_declaration_block -> . empty
    (12) variable_declaration_block -> . variable_declaration
    (245) empty -> .
    (51) variable_declaration -> . variable_declaration variable_sub_declaration
    (52) variable_declaration -> . variable_sub_declaration
    (53) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (3) identifier_list -> . identifier_list S_COMMA identifier
    (4) identifier_list -> . identifier
    (246) identifier -> . IDENTIFIER

    DEDENT          reduce using rule 245 (empty -> .)
    IDENTIFIER      shift and go to state 5

    variable_declaration_block     shift and go to state 407
    empty                          shift and go to state 81
    variable_declaration           shift and go to state 82
    variable_sub_declaration       shift and go to state 83
    identifier_list                shift and go to state 84
    identifier                     shift and go to state 85

state 375

    (26) function_implementation_block -> RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block . variable_declaration_block DEDENT algorithm_block
    (11) variable_declaration_block -> . empty
    (12) variable_declaration_block -> . variable_declaration
    (245) empty -> .
    (51) variable_declaration -> . variable_declaration variable_sub_declaration
    (52) variable_declaration -> . variable_sub_declaration
    (53) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (3) identifier_list -> . identifier_list S_COMMA identifier
    (4) identifier_list -> . identifier
    (246) identifier -> . IDENTIFIER

    DEDENT          reduce using rule 245 (empty -> .)
    IDENTIFIER      shift and go to state 5

    variable_declaration_block     shift and go to state 408
    empty                          shift and go to state 81
    variable_declaration           shift and go to state 82
    variable_sub_declaration       shift and go to state 83
    identifier_list                shift and go to state 84
    identifier                     shift and go to state 85

state 376

    (85) function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    INDENT          reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 85 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)


state 377

    (45) array_type -> RW_ARRAY array_index RW_OF component_type .

    RW_KAMUS        reduce using rule 45 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    DEDENT          reduce using rule 45 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    RW_PROCEDURE    reduce using rule 45 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    RW_FUNCTION     reduce using rule 45 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    S_EQUAL         reduce using rule 45 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    IDENTIFIER      reduce using rule 45 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    S_SEMI_COLON    reduce using rule 45 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    S_RIGHT_BRACKET reduce using rule 45 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    S_COMMA         reduce using rule 45 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    S_GREATER_THAN  reduce using rule 45 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    RW_TYPE         reduce using rule 45 (array_type -> RW_ARRAY array_index RW_OF component_type .)


state 378

    (50) component_type -> type_denoter .

    RW_KAMUS        reduce using rule 50 (component_type -> type_denoter .)
    DEDENT          reduce using rule 50 (component_type -> type_denoter .)
    RW_PROCEDURE    reduce using rule 50 (component_type -> type_denoter .)
    RW_FUNCTION     reduce using rule 50 (component_type -> type_denoter .)
    S_EQUAL         reduce using rule 50 (component_type -> type_denoter .)
    IDENTIFIER      reduce using rule 50 (component_type -> type_denoter .)
    S_SEMI_COLON    reduce using rule 50 (component_type -> type_denoter .)
    S_RIGHT_BRACKET reduce using rule 50 (component_type -> type_denoter .)
    S_COMMA         reduce using rule 50 (component_type -> type_denoter .)
    S_GREATER_THAN  reduce using rule 50 (component_type -> type_denoter .)
    RW_TYPE         reduce using rule 50 (component_type -> type_denoter .)


state 379

    (46) array_index -> S_LEFT_SQUARE_BRACKET index_list S_RIGHT_SQUARE_BRACKET .

    RW_OF           reduce using rule 46 (array_index -> S_LEFT_SQUARE_BRACKET index_list S_RIGHT_SQUARE_BRACKET .)


state 380

    (47) index_list -> index_list S_COMMA . index_type
    (49) index_type -> . ordinal_type
    (35) ordinal_type -> . enumerated_type
    (36) ordinal_type -> . subrange_type
    (37) ordinal_type -> . identifier
    (38) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (39) subrange_type -> . subrange_type_option
    (246) identifier -> . IDENTIFIER
    (40) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (41) subrange_option -> . identifier
    (42) subrange_option -> . constant
    (43) subrange_option -> . function_designator
    (145) constant -> . string_char_constant
    (146) constant -> . non_string_constant
    (147) constant -> . sign non_string_constant
    (148) constant -> . boolean_constant
    (149) constant -> . nil_constant
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (150) sign -> . S_PLUS
    (151) sign -> . S_MINUS
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 116
    IDENTIFIER      shift and go to state 5
    S_PLUS          shift and go to state 135
    S_MINUS         shift and go to state 136
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    index_type                     shift and go to state 409
    ordinal_type                   shift and go to state 327
    enumerated_type                shift and go to state 112
    subrange_type                  shift and go to state 113
    identifier                     shift and go to state 114
    subrange_type_option           shift and go to state 117
    subrange_option                shift and go to state 119
    constant                       shift and go to state 120
    function_designator            shift and go to state 121
    string_char_constant           shift and go to state 122
    non_string_constant            shift and go to state 123
    sign                           shift and go to state 124
    boolean_constant               shift and go to state 125
    nil_constant                   shift and go to state 126
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 381

    (223) abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 223 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 382

    (224) sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 224 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 383

    (225) cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 225 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 384

    (226) tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 226 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 385

    (227) succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 227 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 386

    (228) pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 228 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 387

    (235) awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 235 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 388

    (236) akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 236 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 389

    (237) firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 237 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 390

    (238) lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 238 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 391

    (239) long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 239 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 392

    (240) iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 240 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 393

    (243) integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 243 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 394

    (244) real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 244 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 395

    (167) index_expression_list -> index_expression_list S_COMMA expression .
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_RIGHT_SQUARE_BRACKET reduce using rule 167 (index_expression_list -> index_expression_list S_COMMA expression .)
    S_COMMA         reduce using rule 167 (index_expression_list -> index_expression_list S_COMMA expression .)
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 396

    (109) actual_parameter_list -> actual_parameter_list S_COMMA actual_parameter .

    S_RIGHT_BRACKET reduce using rule 109 (actual_parameter_list -> actual_parameter_list S_COMMA actual_parameter .)
    S_COMMA         reduce using rule 109 (actual_parameter_list -> actual_parameter_list S_COMMA actual_parameter .)


state 397

    (208) member_designator_list -> member_designator_list S_COMMA member_designator .
    (210) member_designator -> member_designator . S_UP_TO expression

    S_RIGHT_SQUARE_BRACKET reduce using rule 208 (member_designator_list -> member_designator_list S_COMMA member_designator .)
    S_COMMA         reduce using rule 208 (member_designator_list -> member_designator_list S_COMMA member_designator .)
    S_UP_TO         shift and go to state 355


state 398

    (210) member_designator -> member_designator S_UP_TO expression .
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_UP_TO         reduce using rule 210 (member_designator -> member_designator S_UP_TO expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 210 (member_designator -> member_designator S_UP_TO expression .)
    S_COMMA         reduce using rule 210 (member_designator -> member_designator S_UP_TO expression .)
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 399

    (128) if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE . compound_statement
    (92) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 30

    compound_statement             shift and go to state 410

state 400

    (123) depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET . INDENT depend_on_action_list DEDENT

    INDENT          shift and go to state 411


state 401

    (139) traversal_range_value -> S_LEFT_SQUARE_BRACKET subrange_type S_RIGHT_SQUARE_BRACKET .

    INDENT          reduce using rule 139 (traversal_range_value -> S_LEFT_SQUARE_BRACKET subrange_type S_RIGHT_SQUARE_BRACKET .)


state 402

    (137) iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .

    DEDENT          reduce using rule 137 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    S_SEMI_COLON    reduce using rule 137 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    S_RETURN        reduce using rule 137 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_IF           reduce using rule 137 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_DEPEND       reduce using rule 137 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_WHILE        reduce using rule 137 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_ITERATE      reduce using rule 137 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    IDENTIFIER      reduce using rule 137 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_REPEAT       reduce using rule 137 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_INPUT        reduce using rule 137 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_OUTPUT       reduce using rule 137 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)


state 403

    (115) input_statement_parameter_list -> input_statement_parameter_list S_COMMA input_statement_parameter .

    S_RIGHT_BRACKET reduce using rule 115 (input_statement_parameter_list -> input_statement_parameter_list S_COMMA input_statement_parameter .)
    S_COMMA         reduce using rule 115 (input_statement_parameter_list -> input_statement_parameter_list S_COMMA input_statement_parameter .)


state 404

    (119) output_statement_parameter_list -> output_statement_parameter_list S_COMMA output_statement_parameter .

    S_RIGHT_BRACKET reduce using rule 119 (output_statement_parameter_list -> output_statement_parameter_list S_COMMA output_statement_parameter .)
    S_COMMA         reduce using rule 119 (output_statement_parameter_list -> output_statement_parameter_list S_COMMA output_statement_parameter .)


state 405

    (64) type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN .

    RW_TYPE         reduce using rule 64 (type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN .)
    IDENTIFIER      reduce using rule 64 (type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN .)
    DEDENT          reduce using rule 64 (type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN .)
    RW_PROCEDURE    reduce using rule 64 (type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN .)
    RW_FUNCTION     reduce using rule 64 (type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN .)


state 406

    (55) variable_declaration_comma -> variable_sub_declaration S_COMMA . variable_declaration_comma
    (54) variable_declaration_comma -> . variable_sub_declaration
    (55) variable_declaration_comma -> . variable_sub_declaration S_COMMA variable_declaration_comma
    (53) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (3) identifier_list -> . identifier_list S_COMMA identifier
    (4) identifier_list -> . identifier
    (246) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 5

    variable_sub_declaration       shift and go to state 372
    variable_declaration_comma     shift and go to state 412
    identifier_list                shift and go to state 84
    identifier                     shift and go to state 85

state 407

    (23) procedure_implementation_block -> RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block . DEDENT algorithm_block

    DEDENT          shift and go to state 413


state 408

    (26) function_implementation_block -> RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block . DEDENT algorithm_block

    DEDENT          shift and go to state 414


state 409

    (47) index_list -> index_list S_COMMA index_type .

    S_RIGHT_SQUARE_BRACKET reduce using rule 47 (index_list -> index_list S_COMMA index_type .)
    S_COMMA         reduce using rule 47 (index_list -> index_list S_COMMA index_type .)


state 410

    (128) if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .

    DEDENT          reduce using rule 128 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    S_SEMI_COLON    reduce using rule 128 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    S_RETURN        reduce using rule 128 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_IF           reduce using rule 128 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_DEPEND       reduce using rule 128 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_WHILE        reduce using rule 128 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_ITERATE      reduce using rule 128 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    IDENTIFIER      reduce using rule 128 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_REPEAT       reduce using rule 128 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_INPUT        reduce using rule 128 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_OUTPUT       reduce using rule 128 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)


state 411

    (123) depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT . depend_on_action_list DEDENT
    (124) depend_on_action_list -> . depend_on_action_list depend_on_action
    (125) depend_on_action_list -> . depend_on_action
    (126) depend_on_action -> . expression S_COLON INDENT statement_sequence DEDENT
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    depend_on_action_list          shift and go to state 415
    depend_on_action               shift and go to state 416
    expression                     shift and go to state 417
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 412

    (55) variable_declaration_comma -> variable_sub_declaration S_COMMA variable_declaration_comma .

    S_GREATER_THAN  reduce using rule 55 (variable_declaration_comma -> variable_sub_declaration S_COMMA variable_declaration_comma .)


state 413

    (23) procedure_implementation_block -> RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT . algorithm_block
    (15) algorithm_block -> . RW_ALGORITMA statement_part

    RW_ALGORITMA    shift and go to state 10

    algorithm_block                shift and go to state 418

state 414

    (26) function_implementation_block -> RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT . algorithm_block
    (15) algorithm_block -> . RW_ALGORITMA statement_part

    RW_ALGORITMA    shift and go to state 10

    algorithm_block                shift and go to state 419

state 415

    (123) depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list . DEDENT
    (124) depend_on_action_list -> depend_on_action_list . depend_on_action
    (126) depend_on_action -> . expression S_COLON INDENT statement_sequence DEDENT
    (170) expression -> . expression relational_op additive_expression
    (171) expression -> . additive_expression
    (181) additive_expression -> . additive_expression additive_op multiplicative_expression
    (182) additive_expression -> . multiplicative_expression
    (187) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (188) multiplicative_expression -> . unary_expression
    (194) unary_expression -> . unary_op unary_expression
    (195) unary_expression -> . exponentiation_expression
    (198) unary_op -> . S_PLUS
    (199) unary_op -> . S_MINUS
    (200) unary_op -> . RW_NOT
    (196) exponentiation_expression -> . primary_expression
    (197) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (201) primary_expression -> . variable_access
    (202) primary_expression -> . unsigned_constant
    (203) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (204) primary_expression -> . set_constructor
    (205) primary_expression -> . function_designator
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (141) unsigned_constant -> . non_string_constant
    (142) unsigned_constant -> . string_char_constant
    (143) unsigned_constant -> . boolean_constant
    (144) unsigned_constant -> . nil_constant
    (206) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (207) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (212) function_designator -> . user_defined_function_call
    (213) function_designator -> . math_function_call
    (214) function_designator -> . string_function_call
    (215) function_designator -> . converter_function_call
    (246) identifier -> . IDENTIFIER
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (154) non_string_constant -> . integer_constant
    (155) non_string_constant -> . real_constant
    (158) string_char_constant -> . string_constant
    (159) string_char_constant -> . char_constant
    (152) boolean_constant -> . L_BOOLEAN_TRUE
    (153) boolean_constant -> . L_BOOLEAN_FALSE
    (162) nil_constant -> . L_NIL
    (216) user_defined_function_call -> . identifier function_actual_parameter_list
    (217) math_function_call -> . abs_function
    (218) math_function_call -> . sin_function
    (219) math_function_call -> . cos_function
    (220) math_function_call -> . tan_function
    (221) math_function_call -> . succ_function
    (222) math_function_call -> . pred_function
    (229) string_function_call -> . awal_function
    (230) string_function_call -> . akhir_function
    (231) string_function_call -> . firstchar_function
    (232) string_function_call -> . lastchar_function
    (233) string_function_call -> . long_function
    (234) string_function_call -> . iskosong_function
    (241) converter_function_call -> . integer_to_real
    (242) converter_function_call -> . real_to_integer
    (156) integer_constant -> . L_INTEGER_NUMBER
    (157) real_constant -> . L_REAL_NUMBER
    (160) string_constant -> . L_STRING
    (161) char_constant -> . L_CHARACTER
    (223) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (224) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (225) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (226) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (227) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (228) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (239) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (240) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (243) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (244) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    DEDENT          shift and go to state 420
    S_PLUS          shift and go to state 185
    S_MINUS         shift and go to state 186
    RW_NOT          shift and go to state 187
    S_LEFT_BRACKET  shift and go to state 191
    S_LEFT_SQUARE_BRACKET shift and go to state 199
    IDENTIFIER      shift and go to state 5
    L_BOOLEAN_TRUE  shift and go to state 137
    L_BOOLEAN_FALSE shift and go to state 138
    L_NIL           shift and go to state 139
    L_INTEGER_NUMBER shift and go to state 156
    L_REAL_NUMBER   shift and go to state 157
    L_STRING        shift and go to state 154
    L_CHARACTER     shift and go to state 155
    RW_ABS          shift and go to state 158
    RW_SIN          shift and go to state 159
    RW_COS          shift and go to state 160
    RW_TAN          shift and go to state 161
    RW_SUCC         shift and go to state 162
    RW_PRED         shift and go to state 163
    RW_AWAL         shift and go to state 164
    RW_AKHIR        shift and go to state 165
    RW_FIRSTCHAR    shift and go to state 166
    RW_LASTCHAR     shift and go to state 167
    RW_LONG         shift and go to state 168
    RW_ISKOSONG     shift and go to state 169
    RW_INTEGERTOREAL shift and go to state 170
    RW_REALTOINTEGER shift and go to state 171

    depend_on_action               shift and go to state 421
    expression                     shift and go to state 417
    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 181
    unary_expression               shift and go to state 182
    unary_op                       shift and go to state 183
    exponentiation_expression      shift and go to state 184
    primary_expression             shift and go to state 188
    variable_access                shift and go to state 189
    unsigned_constant              shift and go to state 190
    set_constructor                shift and go to state 192
    function_designator            shift and go to state 193
    identifier                     shift and go to state 194
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    non_string_constant            shift and go to state 195
    string_char_constant           shift and go to state 196
    boolean_constant               shift and go to state 197
    nil_constant                   shift and go to state 198
    user_defined_function_call     shift and go to state 127
    math_function_call             shift and go to state 128
    string_function_call           shift and go to state 129
    converter_function_call        shift and go to state 130
    integer_constant               shift and go to state 133
    real_constant                  shift and go to state 134
    string_constant                shift and go to state 131
    char_constant                  shift and go to state 132
    abs_function                   shift and go to state 140
    sin_function                   shift and go to state 141
    cos_function                   shift and go to state 142
    tan_function                   shift and go to state 143
    succ_function                  shift and go to state 144
    pred_function                  shift and go to state 145
    awal_function                  shift and go to state 146
    akhir_function                 shift and go to state 147
    firstchar_function             shift and go to state 148
    lastchar_function              shift and go to state 149
    long_function                  shift and go to state 150
    iskosong_function              shift and go to state 151
    integer_to_real                shift and go to state 152
    real_to_integer                shift and go to state 153

state 416

    (125) depend_on_action_list -> depend_on_action .

    DEDENT          reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    S_PLUS          reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    S_MINUS         reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    RW_NOT          reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    S_LEFT_BRACKET  reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    S_LEFT_SQUARE_BRACKET reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    IDENTIFIER      reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    L_BOOLEAN_TRUE  reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    L_BOOLEAN_FALSE reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    L_NIL           reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    L_INTEGER_NUMBER reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    L_REAL_NUMBER   reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    L_STRING        reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    L_CHARACTER     reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    RW_ABS          reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    RW_SIN          reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    RW_COS          reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    RW_TAN          reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    RW_SUCC         reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    RW_PRED         reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    RW_AWAL         reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    RW_AKHIR        reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    RW_FIRSTCHAR    reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    RW_LASTCHAR     reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    RW_LONG         reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    RW_ISKOSONG     reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    RW_INTEGERTOREAL reduce using rule 125 (depend_on_action_list -> depend_on_action .)
    RW_REALTOINTEGER reduce using rule 125 (depend_on_action_list -> depend_on_action .)


state 417

    (126) depend_on_action -> expression . S_COLON INDENT statement_sequence DEDENT
    (170) expression -> expression . relational_op additive_expression
    (172) relational_op -> . S_EQUAL
    (173) relational_op -> . S_NOT_EQUAL
    (174) relational_op -> . S_LESS_THAN_EQUAL
    (175) relational_op -> . S_GREATER_THAN_EQUAL
    (176) relational_op -> . S_LESS_THAN
    (177) relational_op -> . S_GREATER_THAN
    (178) relational_op -> . S_ELEMENT_OF
    (179) relational_op -> . RW_EQ
    (180) relational_op -> . RW_NEQ

    S_COLON         shift and go to state 422
    S_EQUAL         shift and go to state 263
    S_NOT_EQUAL     shift and go to state 264
    S_LESS_THAN_EQUAL shift and go to state 265
    S_GREATER_THAN_EQUAL shift and go to state 266
    S_LESS_THAN     shift and go to state 267
    S_GREATER_THAN  shift and go to state 268
    S_ELEMENT_OF    shift and go to state 269
    RW_EQ           shift and go to state 270
    RW_NEQ          shift and go to state 271

    relational_op                  shift and go to state 262

state 418

    (23) procedure_implementation_block -> RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .

    RW_PROCEDURE    reduce using rule 23 (procedure_implementation_block -> RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .)
    RW_FUNCTION     reduce using rule 23 (procedure_implementation_block -> RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .)
    $end            reduce using rule 23 (procedure_implementation_block -> RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .)


state 419

    (26) function_implementation_block -> RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .

    RW_PROCEDURE    reduce using rule 26 (function_implementation_block -> RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .)
    RW_FUNCTION     reduce using rule 26 (function_implementation_block -> RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .)
    $end            reduce using rule 26 (function_implementation_block -> RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .)


state 420

    (123) depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .

    DEDENT          reduce using rule 123 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    S_SEMI_COLON    reduce using rule 123 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    S_RETURN        reduce using rule 123 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_IF           reduce using rule 123 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_DEPEND       reduce using rule 123 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_WHILE        reduce using rule 123 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_ITERATE      reduce using rule 123 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    IDENTIFIER      reduce using rule 123 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_REPEAT       reduce using rule 123 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_INPUT        reduce using rule 123 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_OUTPUT       reduce using rule 123 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)


state 421

    (124) depend_on_action_list -> depend_on_action_list depend_on_action .

    DEDENT          reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    S_PLUS          reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    S_MINUS         reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_NOT          reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    S_LEFT_BRACKET  reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    S_LEFT_SQUARE_BRACKET reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    IDENTIFIER      reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_BOOLEAN_TRUE  reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_BOOLEAN_FALSE reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_NIL           reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_INTEGER_NUMBER reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_REAL_NUMBER   reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_STRING        reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_CHARACTER     reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_ABS          reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_SIN          reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_COS          reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_TAN          reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_SUCC         reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_PRED         reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_AWAL         reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_AKHIR        reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_FIRSTCHAR    reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_LASTCHAR     reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_LONG         reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_ISKOSONG     reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_INTEGERTOREAL reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_REALTOINTEGER reduce using rule 124 (depend_on_action_list -> depend_on_action_list depend_on_action .)


state 422

    (126) depend_on_action -> expression S_COLON . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 423


state 423

    (126) depend_on_action -> expression S_COLON INDENT . statement_sequence DEDENT
    (93) statement_sequence -> . statement_sequence S_SEMI_COLON statement
    (94) statement_sequence -> . statement_sequence statement
    (95) statement_sequence -> . statement
    (96) statement -> . assignment_statement
    (97) statement -> . procedure_statement
    (98) statement -> . function_returned_statement
    (99) statement -> . if_statement
    (100) statement -> . depend_on_statement
    (101) statement -> . while_statement
    (102) statement -> . traversal_statement
    (103) statement -> . repeat_statement
    (104) statement -> . iterate_stop_statement
    (105) assignment_statement -> . variable_access S_ASSIGNMENT expression
    (106) procedure_statement -> . input_output_procedure_statement
    (107) procedure_statement -> . identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
    (108) procedure_statement -> . identifier
    (122) function_returned_statement -> . S_RETURN expression
    (127) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement
    (128) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
    (123) depend_on_statement -> . RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (136) while_statement -> . RW_WHILE boolean_expression RW_DO compound_statement
    (138) traversal_statement -> . control_variable RW_TRAVERSAL traversal_range_value compound_statement
    (130) repeat_statement -> . repeat_until_statement
    (131) repeat_statement -> . repeat_times_statement
    (137) iterate_stop_statement -> . RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (112) input_output_procedure_statement -> . input_statement
    (113) input_output_procedure_statement -> . output_statement
    (246) identifier -> . IDENTIFIER
    (140) control_variable -> . identifier
    (132) repeat_until_statement -> . RW_REPEAT compound_statement RW_UNTIL boolean_expression
    (133) repeat_times_statement -> . RW_REPEAT variable_access RW_TIMES compound_statement
    (134) repeat_times_statement -> . RW_REPEAT integer_constant RW_TIMES compound_statement
    (135) repeat_times_statement -> . RW_REPEAT function_designator RW_TIMES compound_statement
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (114) input_statement -> . RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET
    (118) output_statement -> . RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET

    S_RETURN        shift and go to state 65
    RW_IF           shift and go to state 66
    RW_DEPEND       shift and go to state 67
    RW_WHILE        shift and go to state 68
    RW_ITERATE      shift and go to state 72
    IDENTIFIER      shift and go to state 5
    RW_REPEAT       shift and go to state 77
    RW_INPUT        shift and go to state 78
    RW_OUTPUT       shift and go to state 79

    statement_sequence             shift and go to state 424
    statement                      shift and go to state 52
    assignment_statement           shift and go to state 53
    procedure_statement            shift and go to state 54
    function_returned_statement    shift and go to state 55
    if_statement                   shift and go to state 56
    depend_on_statement            shift and go to state 57
    while_statement                shift and go to state 58
    traversal_statement            shift and go to state 59
    repeat_statement               shift and go to state 60
    iterate_stop_statement         shift and go to state 61
    variable_access                shift and go to state 62
    input_output_procedure_statement shift and go to state 63
    identifier                     shift and go to state 64
    control_variable               shift and go to state 69
    repeat_until_statement         shift and go to state 70
    repeat_times_statement         shift and go to state 71
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    input_statement                shift and go to state 75
    output_statement               shift and go to state 76

state 424

    (126) depend_on_action -> expression S_COLON INDENT statement_sequence . DEDENT
    (93) statement_sequence -> statement_sequence . S_SEMI_COLON statement
    (94) statement_sequence -> statement_sequence . statement
    (96) statement -> . assignment_statement
    (97) statement -> . procedure_statement
    (98) statement -> . function_returned_statement
    (99) statement -> . if_statement
    (100) statement -> . depend_on_statement
    (101) statement -> . while_statement
    (102) statement -> . traversal_statement
    (103) statement -> . repeat_statement
    (104) statement -> . iterate_stop_statement
    (105) assignment_statement -> . variable_access S_ASSIGNMENT expression
    (106) procedure_statement -> . input_output_procedure_statement
    (107) procedure_statement -> . identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
    (108) procedure_statement -> . identifier
    (122) function_returned_statement -> . S_RETURN expression
    (127) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement
    (128) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
    (123) depend_on_statement -> . RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (136) while_statement -> . RW_WHILE boolean_expression RW_DO compound_statement
    (138) traversal_statement -> . control_variable RW_TRAVERSAL traversal_range_value compound_statement
    (130) repeat_statement -> . repeat_until_statement
    (131) repeat_statement -> . repeat_times_statement
    (137) iterate_stop_statement -> . RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement
    (163) variable_access -> . identifier
    (164) variable_access -> . indexed_variable
    (165) variable_access -> . field_designator
    (112) input_output_procedure_statement -> . input_statement
    (113) input_output_procedure_statement -> . output_statement
    (246) identifier -> . IDENTIFIER
    (140) control_variable -> . identifier
    (132) repeat_until_statement -> . RW_REPEAT compound_statement RW_UNTIL boolean_expression
    (133) repeat_times_statement -> . RW_REPEAT variable_access RW_TIMES compound_statement
    (134) repeat_times_statement -> . RW_REPEAT integer_constant RW_TIMES compound_statement
    (135) repeat_times_statement -> . RW_REPEAT function_designator RW_TIMES compound_statement
    (166) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (169) field_designator -> . variable_access S_DOT identifier
    (114) input_statement -> . RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET
    (118) output_statement -> . RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET

    DEDENT          shift and go to state 425
    S_SEMI_COLON    shift and go to state 173
    S_RETURN        shift and go to state 65
    RW_IF           shift and go to state 66
    RW_DEPEND       shift and go to state 67
    RW_WHILE        shift and go to state 68
    RW_ITERATE      shift and go to state 72
    IDENTIFIER      shift and go to state 5
    RW_REPEAT       shift and go to state 77
    RW_INPUT        shift and go to state 78
    RW_OUTPUT       shift and go to state 79

    statement                      shift and go to state 174
    assignment_statement           shift and go to state 53
    procedure_statement            shift and go to state 54
    function_returned_statement    shift and go to state 55
    if_statement                   shift and go to state 56
    depend_on_statement            shift and go to state 57
    while_statement                shift and go to state 58
    traversal_statement            shift and go to state 59
    repeat_statement               shift and go to state 60
    iterate_stop_statement         shift and go to state 61
    variable_access                shift and go to state 62
    input_output_procedure_statement shift and go to state 63
    identifier                     shift and go to state 64
    control_variable               shift and go to state 69
    repeat_until_statement         shift and go to state 70
    repeat_times_statement         shift and go to state 71
    indexed_variable               shift and go to state 73
    field_designator               shift and go to state 74
    input_statement                shift and go to state 75
    output_statement               shift and go to state 76

state 425

    (126) depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .

    DEDENT          reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    S_PLUS          reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    S_MINUS         reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_NOT          reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    S_LEFT_BRACKET  reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    S_LEFT_SQUARE_BRACKET reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    IDENTIFIER      reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_BOOLEAN_TRUE  reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_BOOLEAN_FALSE reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_NIL           reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_INTEGER_NUMBER reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_REAL_NUMBER   reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_STRING        reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_CHARACTER     reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_ABS          reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_SIN          reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_COS          reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_TAN          reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_SUCC         reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_PRED         reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_AWAL         reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_AKHIR        reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_FIRSTCHAR    reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_LASTCHAR     reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_LONG         reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_ISKOSONG     reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_INTEGERTOREAL reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_REALTOINTEGER reduce using rule 126 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)

