Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    RW_CLOSE
    RW_JUDUL
    RW_MODUL
    RW_OPEN
    RW_READ
    RW_REWRITE
    RW_SEQFILE
    S_CONCATENATION
    S_DOUBLE_QUOTE
    S_LEFT_CURLY_BRACKET
    S_RIGHT_CURLY_BRACKET
    S_SINGLE_QUOTE
    WHITESPACE

Grammar

Rule 0     S' -> file
Rule 1     file -> program
Rule 2     program -> RW_PROGRAM identifier block
Rule 3     program -> function_declaration block
Rule 4     program -> procedure_declaration block
Rule 5     identifier_list -> identifier_list S_COMMA identifier
Rule 6     identifier_list -> identifier
Rule 7     kamus_declaration -> RW_KAMUS
Rule 8     kamus_declaration -> RW_KAMUS RW_LOKAL
Rule 9     block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
Rule 10    block -> kamus_declaration algorithm_block procedure_and_function_implementation_block
Rule 11    constant_declaration_block -> empty
Rule 12    constant_declaration_block -> constant_declaration
Rule 13    type_declaration_block -> empty
Rule 14    type_declaration_block -> type_declaration
Rule 15    variable_declaration_block -> empty
Rule 16    variable_declaration_block -> variable_declaration
Rule 17    procedure_and_function_declaration_block -> DEDENT
Rule 18    procedure_and_function_declaration_block -> procedure_and_function_declaration DEDENT
Rule 19    algorithm_block -> RW_ALGORITMA statement_part
Rule 20    procedure_and_function_implementation_block -> empty
Rule 21    procedure_and_function_implementation_block -> subprogram_implementation_list
Rule 22    subprogram_implementation_list -> subprogram_implementation_list subprogram_implementation
Rule 23    subprogram_implementation_list -> subprogram_implementation
Rule 24    subprogram_implementation -> procedure_implementation
Rule 25    subprogram_implementation -> function_implementation
Rule 26    procedure_implementation -> procedure_declaration procedure_implementation_block
Rule 27    procedure_implementation -> procedure_declaration
Rule 28    procedure_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
Rule 29    procedure_implementation_block -> kamus_declaration algorithm_block
Rule 30    function_implementation -> function_declaration function_implementation_block
Rule 31    function_implementation -> function_declaration
Rule 32    function_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
Rule 33    function_implementation_block -> kamus_declaration algorithm_block
Rule 34    type_denoter -> ordinal_type
Rule 35    type_denoter -> structured_type
Rule 36    type_denoter -> RW_INTEGER
Rule 37    type_denoter -> RW_REAL
Rule 38    type_denoter -> RW_STRING
Rule 39    type_denoter -> RW_CHARACTER
Rule 40    type_denoter -> RW_BOOLEAN
Rule 41    ordinal_type -> enumerated_type
Rule 42    ordinal_type -> subrange_type
Rule 43    ordinal_type -> identifier
Rule 44    enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
Rule 45    subrange_type -> subrange_type_option
Rule 46    subrange_type_option -> subrange_option S_UP_TO subrange_option
Rule 47    subrange_option -> identifier
Rule 48    subrange_option -> constant
Rule 49    subrange_option -> function_designator
Rule 50    subrange_option -> expression
Rule 51    structured_type -> array_type
Rule 52    array_type -> RW_ARRAY array_index RW_OF component_type
Rule 53    array_index -> S_LEFT_SQUARE_BRACKET index_list S_RIGHT_SQUARE_BRACKET
Rule 54    index_list -> index_list S_COMMA index_type
Rule 55    index_list -> index_type
Rule 56    index_type -> ordinal_type
Rule 57    component_type -> type_denoter
Rule 58    variable_declaration -> variable_declaration variable_sub_declaration
Rule 59    variable_declaration -> variable_sub_declaration
Rule 60    variable_sub_declaration -> identifier_list S_COLON type_denoter
Rule 61    variable_declaration_comma -> variable_sub_declaration
Rule 62    variable_declaration_comma -> variable_sub_declaration S_COMMA variable_declaration_comma
Rule 63    constant_declaration -> constant_declaration constant_sub_declaration
Rule 64    constant_declaration -> constant_sub_declaration
Rule 65    constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant
Rule 66    type_declaration -> type_declaration type_sub_declaration
Rule 67    type_declaration -> type_sub_declaration
Rule 68    type_sub_declaration -> RW_TYPE identifier S_COLON type_variety
Rule 69    type_variety -> type_denoter
Rule 70    type_variety -> type_user_defined
Rule 71    type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN
Rule 72    procedure_and_function_declaration -> procedure_and_function_declaration procedure_and_function_sub_declaration
Rule 73    procedure_and_function_declaration -> procedure_and_function_sub_declaration
Rule 74    procedure_and_function_sub_declaration -> procedure_declaration
Rule 75    procedure_and_function_sub_declaration -> function_declaration
Rule 76    procedure_declaration -> procedure_identifier formal_parameter_list
Rule 77    procedure_identifier -> RW_PROCEDURE identifier
Rule 78    formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET
Rule 79    formal_parameter_section_list -> empty
Rule 80    formal_parameter_section_list -> formal_parameter_section
Rule 81    formal_parameter_section -> formal_parameter_section S_SEMI_COLON parameter_specification
Rule 82    formal_parameter_section -> formal_parameter_section S_COMMA parameter_specification
Rule 83    formal_parameter_section -> parameter_specification
Rule 84    parameter_specification -> procedure_parameter_type variable_sub_declaration
Rule 85    procedure_parameter_type -> RW_INPUT
Rule 86    procedure_parameter_type -> RW_OUTPUT
Rule 87    procedure_parameter_type -> RW_INPUT S_DIVIDE RW_OUTPUT
Rule 88    function_declaration -> function_identification function_formal_parameter_list function_return_type
Rule 89    function_declaration -> function_identification function_return_type
Rule 90    function_identification -> RW_FUNCTION identifier
Rule 91    function_return_type -> S_RETURN type_denoter
Rule 92    function_formal_parameter_list -> S_LEFT_BRACKET function_parameter_list_option S_RIGHT_BRACKET
Rule 93    function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
Rule 94    function_parameter_list_option -> function_parameter_list
Rule 95    function_parameter_list_option -> empty
Rule 96    function_parameter_list -> function_parameter_list S_SEMI_COLON function_parameter_declaration
Rule 97    function_parameter_list -> function_parameter_list S_COMMA function_parameter_declaration
Rule 98    function_parameter_list -> function_parameter_declaration
Rule 99    function_parameter_declaration -> variable_sub_declaration
Rule 100   statement_part -> compound_statement
Rule 101   compound_statement -> INDENT statement_sequence DEDENT
Rule 102   statement_sequence -> statement_sequence S_SEMI_COLON statement
Rule 103   statement_sequence -> statement_sequence statement
Rule 104   statement_sequence -> statement
Rule 105   statement -> assignment_statement
Rule 106   statement -> procedure_statement
Rule 107   statement -> function_returned_statement
Rule 108   statement -> if_statement
Rule 109   statement -> depend_on_statement
Rule 110   statement -> while_statement
Rule 111   statement -> traversal_statement
Rule 112   statement -> repeat_statement
Rule 113   statement -> iterate_stop_statement
Rule 114   assignment_statement -> variable_access S_ASSIGNMENT expression
Rule 115   procedure_statement -> builtin_procedure_statements
Rule 116   procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
Rule 117   procedure_statement -> identifier
Rule 118   actual_parameter_list -> actual_parameter_list S_COMMA actual_parameter
Rule 119   actual_parameter_list -> actual_parameter
Rule 120   actual_parameter -> expression
Rule 121   builtin_procedure_statements -> input_statement
Rule 122   builtin_procedure_statements -> output_statement
Rule 123   input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET
Rule 124   input_statement_parameter_list -> input_statement_parameter_list S_COMMA input_statement_parameter
Rule 125   input_statement_parameter_list -> input_statement_parameter
Rule 126   input_statement_parameter -> variable_access
Rule 127   output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET
Rule 128   output_statement_parameter_list -> output_statement_parameter_list S_COMMA output_statement_parameter
Rule 129   output_statement_parameter_list -> output_statement_parameter
Rule 130   output_statement_parameter -> expression
Rule 131   function_returned_statement -> S_RETURN expression
Rule 132   depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
Rule 133   depend_on_action_list -> depend_on_action_list depend_on_action
Rule 134   depend_on_action_list -> depend_on_action
Rule 135   depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT
Rule 136   if_statement -> RW_IF boolean_expression RW_THEN compound_statement
Rule 137   if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
Rule 138   boolean_expression -> expression
Rule 139   repeat_statement -> repeat_until_statement
Rule 140   repeat_statement -> repeat_times_statement
Rule 141   repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression
Rule 142   repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement
Rule 143   repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement
Rule 144   repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement
Rule 145   while_statement -> RW_WHILE boolean_expression RW_DO compound_statement
Rule 146   iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement
Rule 147   traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement
Rule 148   traversal_range_value -> S_LEFT_SQUARE_BRACKET subrange_type S_RIGHT_SQUARE_BRACKET
Rule 149   control_variable -> identifier
Rule 150   unsigned_constant -> non_string_constant
Rule 151   unsigned_constant -> string_char_constant
Rule 152   unsigned_constant -> boolean_constant
Rule 153   unsigned_constant -> nil_constant
Rule 154   constant -> string_char_constant
Rule 155   constant -> non_string_constant
Rule 156   constant -> sign non_string_constant
Rule 157   constant -> boolean_constant
Rule 158   constant -> nil_constant
Rule 159   sign -> S_PLUS
Rule 160   sign -> S_MINUS
Rule 161   boolean_constant -> L_BOOLEAN_TRUE
Rule 162   boolean_constant -> L_BOOLEAN_FALSE
Rule 163   non_string_constant -> integer_constant
Rule 164   non_string_constant -> real_constant
Rule 165   integer_constant -> L_INTEGER_NUMBER
Rule 166   real_constant -> L_REAL_NUMBER
Rule 167   string_char_constant -> string_constant
Rule 168   string_char_constant -> char_constant
Rule 169   string_constant -> L_STRING
Rule 170   char_constant -> L_CHARACTER
Rule 171   nil_constant -> L_NIL
Rule 172   variable_access -> identifier
Rule 173   variable_access -> indexed_variable
Rule 174   variable_access -> field_designator
Rule 175   variable_access -> function_designator
Rule 176   indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
Rule 177   index_expression_list -> index_expression_list S_COMMA expression
Rule 178   index_expression_list -> expression
Rule 179   field_designator -> variable_access S_DOT identifier
Rule 180   expression -> expression relational_op additive_expression
Rule 181   expression -> additive_expression
Rule 182   relational_op -> S_EQUAL
Rule 183   relational_op -> S_NOT_EQUAL
Rule 184   relational_op -> S_LESS_THAN_EQUAL
Rule 185   relational_op -> S_GREATER_THAN_EQUAL
Rule 186   relational_op -> S_LESS_THAN
Rule 187   relational_op -> S_GREATER_THAN
Rule 188   relational_op -> S_ELEMENT_OF
Rule 189   relational_op -> RW_EQ
Rule 190   relational_op -> RW_NEQ
Rule 191   additive_expression -> additive_expression additive_op multiplicative_expression
Rule 192   additive_expression -> multiplicative_expression
Rule 193   additive_op -> S_PLUS
Rule 194   additive_op -> S_MINUS
Rule 195   additive_op -> RW_OR
Rule 196   additive_op -> RW_XOR
Rule 197   multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression
Rule 198   multiplicative_expression -> unary_expression
Rule 199   multiplicative_op -> S_TIMES
Rule 200   multiplicative_op -> S_DIVIDE
Rule 201   multiplicative_op -> RW_DIV
Rule 202   multiplicative_op -> RW_MOD
Rule 203   multiplicative_op -> RW_AND
Rule 204   unary_expression -> unary_op unary_expression
Rule 205   unary_expression -> exponentiation_expression
Rule 206   exponentiation_expression -> primary_expression
Rule 207   exponentiation_expression -> primary_expression S_POWER exponentiation_expression
Rule 208   unary_op -> S_PLUS
Rule 209   unary_op -> S_MINUS
Rule 210   unary_op -> RW_NOT
Rule 211   primary_expression -> variable_access
Rule 212   primary_expression -> unsigned_constant
Rule 213   primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 214   primary_expression -> set_constructor
Rule 215   primary_expression -> function_designator
Rule 216   set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
Rule 217   set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
Rule 218   member_designator_list -> member_designator_list S_COMMA member_designator
Rule 219   member_designator_list -> member_designator
Rule 220   member_designator -> member_designator S_UP_TO expression
Rule 221   member_designator -> expression
Rule 222   function_designator -> user_defined_function_call
Rule 223   function_designator -> math_function_call
Rule 224   function_designator -> string_function_call
Rule 225   function_designator -> converter_function_call
Rule 226   user_defined_function_call -> identifier function_actual_parameter_list
Rule 227   math_function_call -> abs_function
Rule 228   math_function_call -> sin_function
Rule 229   math_function_call -> cos_function
Rule 230   math_function_call -> tan_function
Rule 231   math_function_call -> succ_function
Rule 232   math_function_call -> pred_function
Rule 233   abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 234   sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 235   cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 236   tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 237   succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 238   pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 239   string_function_call -> awal_function
Rule 240   string_function_call -> akhir_function
Rule 241   string_function_call -> firstchar_function
Rule 242   string_function_call -> lastchar_function
Rule 243   string_function_call -> long_function
Rule 244   string_function_call -> iskosong_function
Rule 245   awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 246   akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 247   firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 248   lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 249   long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 250   iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 251   converter_function_call -> integer_to_real
Rule 252   converter_function_call -> real_to_integer
Rule 253   integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 254   real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET
Rule 255   empty -> <empty>
Rule 256   identifier -> IDENTIFIER

Terminals, with rules where they appear

COMMENT              : 
DEDENT               : 17 18 28 32 101 132 135
IDENTIFIER           : 256
INDENT               : 9 28 32 101 132 135
L_BOOLEAN_FALSE      : 162
L_BOOLEAN_TRUE       : 161
L_CHARACTER          : 170
L_INTEGER_NUMBER     : 165
L_NIL                : 171
L_REAL_NUMBER        : 166
L_STRING             : 169
RW_ABS               : 233
RW_AKHIR             : 246
RW_ALGORITMA         : 19
RW_AND               : 203
RW_ARRAY             : 52
RW_AWAL              : 245
RW_BOOLEAN           : 40
RW_CHARACTER         : 39
RW_CLOSE             : 
RW_CONSTANT          : 65
RW_COS               : 235
RW_DEPEND            : 132
RW_DIV               : 201
RW_DO                : 145
RW_ELSE              : 137
RW_EQ                : 189
RW_FIRSTCHAR         : 247
RW_FUNCTION          : 90
RW_IF                : 136 137
RW_INPUT             : 85 87 123
RW_INTEGER           : 36
RW_INTEGERTOREAL     : 253
RW_ISKOSONG          : 250
RW_ITERATE           : 146
RW_JUDUL             : 
RW_KAMUS             : 7 8
RW_LASTCHAR          : 248
RW_LOKAL             : 8
RW_LONG              : 249
RW_MOD               : 202
RW_MODUL             : 
RW_NEQ               : 190
RW_NOT               : 210
RW_OF                : 52
RW_ON                : 132
RW_OPEN              : 
RW_OR                : 195
RW_OUTPUT            : 86 87 127
RW_PRED              : 238
RW_PROCEDURE         : 77
RW_PROGRAM           : 2
RW_READ              : 
RW_REAL              : 37
RW_REALTOINTEGER     : 254
RW_REPEAT            : 141 142 143 144
RW_REWRITE           : 
RW_SEQFILE           : 
RW_SIN               : 234
RW_STOP              : 146
RW_STRING            : 38
RW_SUCC              : 237
RW_TAN               : 236
RW_THEN              : 136 137
RW_TIMES             : 142 143 144
RW_TRAVERSAL         : 147
RW_TYPE              : 68
RW_UNTIL             : 141
RW_WHILE             : 145
RW_XOR               : 196
S_ASSIGNMENT         : 114
S_COLON              : 60 65 68 135
S_COMMA              : 5 54 62 82 97 118 124 128 177 218
S_CONCATENATION      : 
S_DIVIDE             : 87 200
S_DOT                : 179
S_DOUBLE_QUOTE       : 
S_ELEMENT_OF         : 188
S_EQUAL              : 65 182
S_GREATER_THAN       : 71 187
S_GREATER_THAN_EQUAL : 185
S_LEFT_BRACKET       : 44 78 92 93 116 123 127 132 213 233 234 235 236 237 238 245 246 247 248 249 250 253 254
S_LEFT_CURLY_BRACKET : 
S_LEFT_SQUARE_BRACKET : 53 148 176 216 217
S_LESS_THAN          : 71 186
S_LESS_THAN_EQUAL    : 184
S_MINUS              : 160 194 209
S_NOT_EQUAL          : 183
S_PLUS               : 159 193 208
S_POWER              : 207
S_RETURN             : 91 131
S_RIGHT_BRACKET      : 44 78 92 93 116 123 127 132 213 233 234 235 236 237 238 245 246 247 248 249 250 253 254
S_RIGHT_CURLY_BRACKET : 
S_RIGHT_SQUARE_BRACKET : 53 148 176 216 217
S_SEMI_COLON         : 81 96 102
S_SINGLE_QUOTE       : 
S_TIMES              : 199
S_UP_TO              : 46 220
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

abs_function         : 227
actual_parameter     : 118 119
actual_parameter_list : 93 116 118
additive_expression  : 180 181 191
additive_op          : 191
akhir_function       : 240
algorithm_block      : 9 10 28 29 32 33
array_index          : 52
array_type           : 51
assignment_statement : 105
awal_function        : 239
block                : 2 3 4
boolean_constant     : 152 157
boolean_expression   : 136 137 141 145 146
builtin_procedure_statements : 115
char_constant        : 168
component_type       : 52
compound_statement   : 100 136 137 137 141 142 143 144 145 146 146 147
constant             : 48 65
constant_declaration : 12 63
constant_declaration_block : 9 28 32
constant_sub_declaration : 63 64
control_variable     : 147
converter_function_call : 225
cos_function         : 229
depend_on_action     : 133 134
depend_on_action_list : 132 133
depend_on_statement  : 109
empty                : 11 13 15 20 79 95
enumerated_type      : 41
exponentiation_expression : 205 207
expression           : 50 114 120 130 131 135 138 177 178 180 213 220 221 233 234 235 236 237 238 245 246 247 248 249 250 253 254
field_designator     : 174
file                 : 0
firstchar_function   : 241
formal_parameter_list : 76
formal_parameter_section : 80 81 82
formal_parameter_section_list : 78
function_actual_parameter_list : 226
function_declaration : 3 30 31 75
function_designator  : 49 144 175 215
function_formal_parameter_list : 88
function_identification : 88 89
function_implementation : 25
function_implementation_block : 30
function_parameter_declaration : 96 97 98
function_parameter_list : 94 96 97
function_parameter_list_option : 92
function_return_type : 88 89
function_returned_statement : 107
identifier           : 2 5 6 43 47 65 68 77 90 116 117 149 172 179 226
identifier_list      : 5 44 60
if_statement         : 108
index_expression_list : 176 177
index_list           : 53 54
index_type           : 54 55
indexed_variable     : 173
input_statement      : 121
input_statement_parameter : 124 125
input_statement_parameter_list : 123 124 132
integer_constant     : 143 163
integer_to_real      : 251
iskosong_function    : 244
iterate_stop_statement : 113
kamus_declaration    : 9 10 28 29 32 33
lastchar_function    : 242
long_function        : 243
math_function_call   : 223
member_designator    : 218 219 220
member_designator_list : 216 218
multiplicative_expression : 191 192 197
multiplicative_op    : 197
nil_constant         : 153 158
non_string_constant  : 150 155 156
ordinal_type         : 34 56
output_statement     : 122
output_statement_parameter : 128 129
output_statement_parameter_list : 127 128
parameter_specification : 81 82 83
pred_function        : 232
primary_expression   : 206 207
procedure_and_function_declaration : 18 72
procedure_and_function_declaration_block : 9
procedure_and_function_implementation_block : 9 10
procedure_and_function_sub_declaration : 72 73
procedure_declaration : 4 26 27 74
procedure_identifier : 76
procedure_implementation : 24
procedure_implementation_block : 26
procedure_parameter_type : 84
procedure_statement  : 106
program              : 1
real_constant        : 164
real_to_integer      : 252
relational_op        : 180
repeat_statement     : 112
repeat_times_statement : 140
repeat_until_statement : 139
set_constructor      : 214
sign                 : 156
sin_function         : 228
statement            : 102 103 104
statement_part       : 19
statement_sequence   : 101 102 103 135
string_char_constant : 151 154
string_constant      : 167
string_function_call : 224
structured_type      : 35
subprogram_implementation : 22 23
subprogram_implementation_list : 21 22
subrange_option      : 46 46
subrange_type        : 42 148
subrange_type_option : 45
succ_function        : 231
tan_function         : 230
traversal_range_value : 147
traversal_statement  : 111
type_declaration     : 14 66
type_declaration_block : 9 28 32
type_denoter         : 57 60 65 69 91
type_sub_declaration : 66 67
type_user_defined    : 70
type_variety         : 68
unary_expression     : 197 198 204
unary_op             : 204
unsigned_constant    : 212
user_defined_function_call : 222
variable_access      : 114 126 142 176 179 211
variable_declaration : 16 58
variable_declaration_block : 9 28 32
variable_declaration_comma : 62 71
variable_sub_declaration : 58 59 61 62 84 99
while_statement      : 110

Parsing method: LALR

state 0

    (0) S' -> . file
    (1) file -> . program
    (2) program -> . RW_PROGRAM identifier block
    (3) program -> . function_declaration block
    (4) program -> . procedure_declaration block
    (88) function_declaration -> . function_identification function_formal_parameter_list function_return_type
    (89) function_declaration -> . function_identification function_return_type
    (76) procedure_declaration -> . procedure_identifier formal_parameter_list
    (90) function_identification -> . RW_FUNCTION identifier
    (77) procedure_identifier -> . RW_PROCEDURE identifier

    RW_PROGRAM      shift and go to state 3
    RW_FUNCTION     shift and go to state 8
    RW_PROCEDURE    shift and go to state 9

    file                           shift and go to state 1
    program                        shift and go to state 2
    function_declaration           shift and go to state 4
    procedure_declaration          shift and go to state 5
    function_identification        shift and go to state 6
    procedure_identifier           shift and go to state 7

state 1

    (0) S' -> file .



state 2

    (1) file -> program .

    $end            reduce using rule 1 (file -> program .)


state 3

    (2) program -> RW_PROGRAM . identifier block
    (256) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    identifier                     shift and go to state 10

state 4

    (3) program -> function_declaration . block
    (9) block -> . kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (10) block -> . kamus_declaration algorithm_block procedure_and_function_implementation_block
    (7) kamus_declaration -> . RW_KAMUS
    (8) kamus_declaration -> . RW_KAMUS RW_LOKAL

    RW_KAMUS        shift and go to state 14

    block                          shift and go to state 12
    kamus_declaration              shift and go to state 13

state 5

    (4) program -> procedure_declaration . block
    (9) block -> . kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (10) block -> . kamus_declaration algorithm_block procedure_and_function_implementation_block
    (7) kamus_declaration -> . RW_KAMUS
    (8) kamus_declaration -> . RW_KAMUS RW_LOKAL

    RW_KAMUS        shift and go to state 14

    block                          shift and go to state 15
    kamus_declaration              shift and go to state 13

state 6

    (88) function_declaration -> function_identification . function_formal_parameter_list function_return_type
    (89) function_declaration -> function_identification . function_return_type
    (92) function_formal_parameter_list -> . S_LEFT_BRACKET function_parameter_list_option S_RIGHT_BRACKET
    (91) function_return_type -> . S_RETURN type_denoter

    S_LEFT_BRACKET  shift and go to state 18
    S_RETURN        shift and go to state 19

    function_formal_parameter_list shift and go to state 16
    function_return_type           shift and go to state 17

state 7

    (76) procedure_declaration -> procedure_identifier . formal_parameter_list
    (78) formal_parameter_list -> . S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 21

    formal_parameter_list          shift and go to state 20

state 8

    (90) function_identification -> RW_FUNCTION . identifier
    (256) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    identifier                     shift and go to state 22

state 9

    (77) procedure_identifier -> RW_PROCEDURE . identifier
    (256) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    identifier                     shift and go to state 23

state 10

    (2) program -> RW_PROGRAM identifier . block
    (9) block -> . kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (10) block -> . kamus_declaration algorithm_block procedure_and_function_implementation_block
    (7) kamus_declaration -> . RW_KAMUS
    (8) kamus_declaration -> . RW_KAMUS RW_LOKAL

    RW_KAMUS        shift and go to state 14

    block                          shift and go to state 24
    kamus_declaration              shift and go to state 13

state 11

    (256) identifier -> IDENTIFIER .

    RW_KAMUS        reduce using rule 256 (identifier -> IDENTIFIER .)
    S_LEFT_BRACKET  reduce using rule 256 (identifier -> IDENTIFIER .)
    S_RETURN        reduce using rule 256 (identifier -> IDENTIFIER .)
    S_COLON         reduce using rule 256 (identifier -> IDENTIFIER .)
    S_COMMA         reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_PROCEDURE    reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_FUNCTION     reduce using rule 256 (identifier -> IDENTIFIER .)
    $end            reduce using rule 256 (identifier -> IDENTIFIER .)
    DEDENT          reduce using rule 256 (identifier -> IDENTIFIER .)
    S_UP_TO         reduce using rule 256 (identifier -> IDENTIFIER .)
    S_LEFT_SQUARE_BRACKET reduce using rule 256 (identifier -> IDENTIFIER .)
    S_DOT           reduce using rule 256 (identifier -> IDENTIFIER .)
    S_POWER         reduce using rule 256 (identifier -> IDENTIFIER .)
    S_TIMES         reduce using rule 256 (identifier -> IDENTIFIER .)
    S_DIVIDE        reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_DIV          reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_MOD          reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_AND          reduce using rule 256 (identifier -> IDENTIFIER .)
    S_PLUS          reduce using rule 256 (identifier -> IDENTIFIER .)
    S_MINUS         reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_OR           reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_XOR          reduce using rule 256 (identifier -> IDENTIFIER .)
    S_EQUAL         reduce using rule 256 (identifier -> IDENTIFIER .)
    S_NOT_EQUAL     reduce using rule 256 (identifier -> IDENTIFIER .)
    S_LESS_THAN_EQUAL reduce using rule 256 (identifier -> IDENTIFIER .)
    S_GREATER_THAN_EQUAL reduce using rule 256 (identifier -> IDENTIFIER .)
    S_LESS_THAN     reduce using rule 256 (identifier -> IDENTIFIER .)
    S_GREATER_THAN  reduce using rule 256 (identifier -> IDENTIFIER .)
    S_ELEMENT_OF    reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_EQ           reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_NEQ          reduce using rule 256 (identifier -> IDENTIFIER .)
    S_RIGHT_BRACKET reduce using rule 256 (identifier -> IDENTIFIER .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 256 (identifier -> IDENTIFIER .)
    S_SEMI_COLON    reduce using rule 256 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_TYPE         reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_IF           reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_DEPEND       reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_WHILE        reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_ITERATE      reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_REPEAT       reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_INPUT        reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_OUTPUT       reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_ABS          reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_SIN          reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_COS          reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_TAN          reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_SUCC         reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_PRED         reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_AWAL         reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_AKHIR        reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_FIRSTCHAR    reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_LASTCHAR     reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_LONG         reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_ISKOSONG     reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_INTEGERTOREAL reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_REALTOINTEGER reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_THEN         reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_DO           reduce using rule 256 (identifier -> IDENTIFIER .)
    INDENT          reduce using rule 256 (identifier -> IDENTIFIER .)
    S_ASSIGNMENT    reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_TRAVERSAL    reduce using rule 256 (identifier -> IDENTIFIER .)
    RW_TIMES        reduce using rule 256 (identifier -> IDENTIFIER .)


state 12

    (3) program -> function_declaration block .

    $end            reduce using rule 3 (program -> function_declaration block .)


state 13

    (9) block -> kamus_declaration . INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (10) block -> kamus_declaration . algorithm_block procedure_and_function_implementation_block
    (19) algorithm_block -> . RW_ALGORITMA statement_part

    INDENT          shift and go to state 25
    RW_ALGORITMA    shift and go to state 27

    algorithm_block                shift and go to state 26

state 14

    (7) kamus_declaration -> RW_KAMUS .
    (8) kamus_declaration -> RW_KAMUS . RW_LOKAL

    INDENT          reduce using rule 7 (kamus_declaration -> RW_KAMUS .)
    RW_ALGORITMA    reduce using rule 7 (kamus_declaration -> RW_KAMUS .)
    RW_LOKAL        shift and go to state 28


state 15

    (4) program -> procedure_declaration block .

    $end            reduce using rule 4 (program -> procedure_declaration block .)


state 16

    (88) function_declaration -> function_identification function_formal_parameter_list . function_return_type
    (91) function_return_type -> . S_RETURN type_denoter

    S_RETURN        shift and go to state 19

    function_return_type           shift and go to state 29

state 17

    (89) function_declaration -> function_identification function_return_type .

    RW_KAMUS        reduce using rule 89 (function_declaration -> function_identification function_return_type .)
    RW_PROCEDURE    reduce using rule 89 (function_declaration -> function_identification function_return_type .)
    RW_FUNCTION     reduce using rule 89 (function_declaration -> function_identification function_return_type .)
    $end            reduce using rule 89 (function_declaration -> function_identification function_return_type .)
    DEDENT          reduce using rule 89 (function_declaration -> function_identification function_return_type .)


state 18

    (92) function_formal_parameter_list -> S_LEFT_BRACKET . function_parameter_list_option S_RIGHT_BRACKET
    (94) function_parameter_list_option -> . function_parameter_list
    (95) function_parameter_list_option -> . empty
    (96) function_parameter_list -> . function_parameter_list S_SEMI_COLON function_parameter_declaration
    (97) function_parameter_list -> . function_parameter_list S_COMMA function_parameter_declaration
    (98) function_parameter_list -> . function_parameter_declaration
    (255) empty -> .
    (99) function_parameter_declaration -> . variable_sub_declaration
    (60) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (256) identifier -> . IDENTIFIER

    S_RIGHT_BRACKET reduce using rule 255 (empty -> .)
    IDENTIFIER      shift and go to state 11

    function_parameter_list_option shift and go to state 30
    function_parameter_list        shift and go to state 31
    empty                          shift and go to state 32
    function_parameter_declaration shift and go to state 33
    variable_sub_declaration       shift and go to state 34
    identifier_list                shift and go to state 35
    identifier                     shift and go to state 36

state 19

    (91) function_return_type -> S_RETURN . type_denoter
    (34) type_denoter -> . ordinal_type
    (35) type_denoter -> . structured_type
    (36) type_denoter -> . RW_INTEGER
    (37) type_denoter -> . RW_REAL
    (38) type_denoter -> . RW_STRING
    (39) type_denoter -> . RW_CHARACTER
    (40) type_denoter -> . RW_BOOLEAN
    (41) ordinal_type -> . enumerated_type
    (42) ordinal_type -> . subrange_type
    (43) ordinal_type -> . identifier
    (51) structured_type -> . array_type
    (44) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (45) subrange_type -> . subrange_type_option
    (256) identifier -> . IDENTIFIER
    (52) array_type -> . RW_ARRAY array_index RW_OF component_type
    (46) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (47) subrange_option -> . identifier
    (48) subrange_option -> . constant
    (49) subrange_option -> . function_designator
    (50) subrange_option -> . expression
    (154) constant -> . string_char_constant
    (155) constant -> . non_string_constant
    (156) constant -> . sign non_string_constant
    (157) constant -> . boolean_constant
    (158) constant -> . nil_constant
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (159) sign -> . S_PLUS
    (160) sign -> . S_MINUS
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier

    RW_INTEGER      shift and go to state 40
    RW_REAL         shift and go to state 41
    RW_STRING       shift and go to state 42
    RW_CHARACTER    shift and go to state 43
    RW_BOOLEAN      shift and go to state 44
    S_LEFT_BRACKET  shift and go to state 49
    IDENTIFIER      shift and go to state 11
    RW_ARRAY        shift and go to state 51
    S_PLUS          shift and go to state 70
    S_MINUS         shift and go to state 71
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107
    RW_NOT          shift and go to state 111
    S_LEFT_SQUARE_BRACKET shift and go to state 118

    type_denoter                   shift and go to state 37
    ordinal_type                   shift and go to state 38
    structured_type                shift and go to state 39
    enumerated_type                shift and go to state 45
    subrange_type                  shift and go to state 46
    identifier                     shift and go to state 47
    array_type                     shift and go to state 48
    subrange_type_option           shift and go to state 50
    subrange_option                shift and go to state 52
    constant                       shift and go to state 53
    function_designator            shift and go to state 54
    expression                     shift and go to state 55
    string_char_constant           shift and go to state 56
    non_string_constant            shift and go to state 57
    sign                           shift and go to state 58
    boolean_constant               shift and go to state 59
    nil_constant                   shift and go to state 60
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    additive_expression            shift and go to state 65
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117

state 20

    (76) procedure_declaration -> procedure_identifier formal_parameter_list .

    RW_KAMUS        reduce using rule 76 (procedure_declaration -> procedure_identifier formal_parameter_list .)
    RW_PROCEDURE    reduce using rule 76 (procedure_declaration -> procedure_identifier formal_parameter_list .)
    RW_FUNCTION     reduce using rule 76 (procedure_declaration -> procedure_identifier formal_parameter_list .)
    $end            reduce using rule 76 (procedure_declaration -> procedure_identifier formal_parameter_list .)
    DEDENT          reduce using rule 76 (procedure_declaration -> procedure_identifier formal_parameter_list .)


state 21

    (78) formal_parameter_list -> S_LEFT_BRACKET . formal_parameter_section_list S_RIGHT_BRACKET
    (79) formal_parameter_section_list -> . empty
    (80) formal_parameter_section_list -> . formal_parameter_section
    (255) empty -> .
    (81) formal_parameter_section -> . formal_parameter_section S_SEMI_COLON parameter_specification
    (82) formal_parameter_section -> . formal_parameter_section S_COMMA parameter_specification
    (83) formal_parameter_section -> . parameter_specification
    (84) parameter_specification -> . procedure_parameter_type variable_sub_declaration
    (85) procedure_parameter_type -> . RW_INPUT
    (86) procedure_parameter_type -> . RW_OUTPUT
    (87) procedure_parameter_type -> . RW_INPUT S_DIVIDE RW_OUTPUT

    S_RIGHT_BRACKET reduce using rule 255 (empty -> .)
    RW_INPUT        shift and go to state 124
    RW_OUTPUT       shift and go to state 125

    formal_parameter_section_list  shift and go to state 119
    empty                          shift and go to state 120
    formal_parameter_section       shift and go to state 121
    parameter_specification        shift and go to state 122
    procedure_parameter_type       shift and go to state 123

state 22

    (90) function_identification -> RW_FUNCTION identifier .

    S_LEFT_BRACKET  reduce using rule 90 (function_identification -> RW_FUNCTION identifier .)
    S_RETURN        reduce using rule 90 (function_identification -> RW_FUNCTION identifier .)


state 23

    (77) procedure_identifier -> RW_PROCEDURE identifier .

    S_LEFT_BRACKET  reduce using rule 77 (procedure_identifier -> RW_PROCEDURE identifier .)


state 24

    (2) program -> RW_PROGRAM identifier block .

    $end            reduce using rule 2 (program -> RW_PROGRAM identifier block .)


state 25

    (9) block -> kamus_declaration INDENT . constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (11) constant_declaration_block -> . empty
    (12) constant_declaration_block -> . constant_declaration
    (255) empty -> .
    (63) constant_declaration -> . constant_declaration constant_sub_declaration
    (64) constant_declaration -> . constant_sub_declaration
    (65) constant_sub_declaration -> . RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant

    RW_TYPE         reduce using rule 255 (empty -> .)
    IDENTIFIER      reduce using rule 255 (empty -> .)
    DEDENT          reduce using rule 255 (empty -> .)
    RW_PROCEDURE    reduce using rule 255 (empty -> .)
    RW_FUNCTION     reduce using rule 255 (empty -> .)
    RW_CONSTANT     shift and go to state 130

    constant_declaration_block     shift and go to state 126
    empty                          shift and go to state 127
    constant_declaration           shift and go to state 128
    constant_sub_declaration       shift and go to state 129

state 26

    (10) block -> kamus_declaration algorithm_block . procedure_and_function_implementation_block
    (20) procedure_and_function_implementation_block -> . empty
    (21) procedure_and_function_implementation_block -> . subprogram_implementation_list
    (255) empty -> .
    (22) subprogram_implementation_list -> . subprogram_implementation_list subprogram_implementation
    (23) subprogram_implementation_list -> . subprogram_implementation
    (24) subprogram_implementation -> . procedure_implementation
    (25) subprogram_implementation -> . function_implementation
    (26) procedure_implementation -> . procedure_declaration procedure_implementation_block
    (27) procedure_implementation -> . procedure_declaration
    (30) function_implementation -> . function_declaration function_implementation_block
    (31) function_implementation -> . function_declaration
    (76) procedure_declaration -> . procedure_identifier formal_parameter_list
    (88) function_declaration -> . function_identification function_formal_parameter_list function_return_type
    (89) function_declaration -> . function_identification function_return_type
    (77) procedure_identifier -> . RW_PROCEDURE identifier
    (90) function_identification -> . RW_FUNCTION identifier

    $end            reduce using rule 255 (empty -> .)
    RW_PROCEDURE    shift and go to state 9
    RW_FUNCTION     shift and go to state 8

    procedure_and_function_implementation_block shift and go to state 131
    empty                          shift and go to state 132
    subprogram_implementation_list shift and go to state 133
    subprogram_implementation      shift and go to state 134
    procedure_implementation       shift and go to state 135
    function_implementation        shift and go to state 136
    procedure_declaration          shift and go to state 137
    function_declaration           shift and go to state 138
    procedure_identifier           shift and go to state 7
    function_identification        shift and go to state 6

state 27

    (19) algorithm_block -> RW_ALGORITMA . statement_part
    (100) statement_part -> . compound_statement
    (101) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 141

    statement_part                 shift and go to state 139
    compound_statement             shift and go to state 140

state 28

    (8) kamus_declaration -> RW_KAMUS RW_LOKAL .

    INDENT          reduce using rule 8 (kamus_declaration -> RW_KAMUS RW_LOKAL .)
    RW_ALGORITMA    reduce using rule 8 (kamus_declaration -> RW_KAMUS RW_LOKAL .)


state 29

    (88) function_declaration -> function_identification function_formal_parameter_list function_return_type .

    RW_KAMUS        reduce using rule 88 (function_declaration -> function_identification function_formal_parameter_list function_return_type .)
    RW_PROCEDURE    reduce using rule 88 (function_declaration -> function_identification function_formal_parameter_list function_return_type .)
    RW_FUNCTION     reduce using rule 88 (function_declaration -> function_identification function_formal_parameter_list function_return_type .)
    $end            reduce using rule 88 (function_declaration -> function_identification function_formal_parameter_list function_return_type .)
    DEDENT          reduce using rule 88 (function_declaration -> function_identification function_formal_parameter_list function_return_type .)


state 30

    (92) function_formal_parameter_list -> S_LEFT_BRACKET function_parameter_list_option . S_RIGHT_BRACKET

    S_RIGHT_BRACKET shift and go to state 142


state 31

    (94) function_parameter_list_option -> function_parameter_list .
    (96) function_parameter_list -> function_parameter_list . S_SEMI_COLON function_parameter_declaration
    (97) function_parameter_list -> function_parameter_list . S_COMMA function_parameter_declaration

    S_RIGHT_BRACKET reduce using rule 94 (function_parameter_list_option -> function_parameter_list .)
    S_SEMI_COLON    shift and go to state 143
    S_COMMA         shift and go to state 144


state 32

    (95) function_parameter_list_option -> empty .

    S_RIGHT_BRACKET reduce using rule 95 (function_parameter_list_option -> empty .)


state 33

    (98) function_parameter_list -> function_parameter_declaration .

    S_SEMI_COLON    reduce using rule 98 (function_parameter_list -> function_parameter_declaration .)
    S_COMMA         reduce using rule 98 (function_parameter_list -> function_parameter_declaration .)
    S_RIGHT_BRACKET reduce using rule 98 (function_parameter_list -> function_parameter_declaration .)


state 34

    (99) function_parameter_declaration -> variable_sub_declaration .

    S_SEMI_COLON    reduce using rule 99 (function_parameter_declaration -> variable_sub_declaration .)
    S_COMMA         reduce using rule 99 (function_parameter_declaration -> variable_sub_declaration .)
    S_RIGHT_BRACKET reduce using rule 99 (function_parameter_declaration -> variable_sub_declaration .)


state 35

    (60) variable_sub_declaration -> identifier_list . S_COLON type_denoter
    (5) identifier_list -> identifier_list . S_COMMA identifier

    S_COLON         shift and go to state 145
    S_COMMA         shift and go to state 146


state 36

    (6) identifier_list -> identifier .

    S_COLON         reduce using rule 6 (identifier_list -> identifier .)
    S_COMMA         reduce using rule 6 (identifier_list -> identifier .)


state 37

    (91) function_return_type -> S_RETURN type_denoter .

    RW_KAMUS        reduce using rule 91 (function_return_type -> S_RETURN type_denoter .)
    RW_PROCEDURE    reduce using rule 91 (function_return_type -> S_RETURN type_denoter .)
    RW_FUNCTION     reduce using rule 91 (function_return_type -> S_RETURN type_denoter .)
    $end            reduce using rule 91 (function_return_type -> S_RETURN type_denoter .)
    DEDENT          reduce using rule 91 (function_return_type -> S_RETURN type_denoter .)


state 38

    (34) type_denoter -> ordinal_type .

    RW_KAMUS        reduce using rule 34 (type_denoter -> ordinal_type .)
    RW_PROCEDURE    reduce using rule 34 (type_denoter -> ordinal_type .)
    RW_FUNCTION     reduce using rule 34 (type_denoter -> ordinal_type .)
    $end            reduce using rule 34 (type_denoter -> ordinal_type .)
    DEDENT          reduce using rule 34 (type_denoter -> ordinal_type .)
    S_SEMI_COLON    reduce using rule 34 (type_denoter -> ordinal_type .)
    S_COMMA         reduce using rule 34 (type_denoter -> ordinal_type .)
    S_RIGHT_BRACKET reduce using rule 34 (type_denoter -> ordinal_type .)
    IDENTIFIER      reduce using rule 34 (type_denoter -> ordinal_type .)
    S_GREATER_THAN  reduce using rule 34 (type_denoter -> ordinal_type .)
    S_EQUAL         reduce using rule 34 (type_denoter -> ordinal_type .)
    RW_TYPE         reduce using rule 34 (type_denoter -> ordinal_type .)


state 39

    (35) type_denoter -> structured_type .

    RW_KAMUS        reduce using rule 35 (type_denoter -> structured_type .)
    RW_PROCEDURE    reduce using rule 35 (type_denoter -> structured_type .)
    RW_FUNCTION     reduce using rule 35 (type_denoter -> structured_type .)
    $end            reduce using rule 35 (type_denoter -> structured_type .)
    DEDENT          reduce using rule 35 (type_denoter -> structured_type .)
    S_SEMI_COLON    reduce using rule 35 (type_denoter -> structured_type .)
    S_COMMA         reduce using rule 35 (type_denoter -> structured_type .)
    S_RIGHT_BRACKET reduce using rule 35 (type_denoter -> structured_type .)
    IDENTIFIER      reduce using rule 35 (type_denoter -> structured_type .)
    S_GREATER_THAN  reduce using rule 35 (type_denoter -> structured_type .)
    S_EQUAL         reduce using rule 35 (type_denoter -> structured_type .)
    RW_TYPE         reduce using rule 35 (type_denoter -> structured_type .)


state 40

    (36) type_denoter -> RW_INTEGER .

    RW_KAMUS        reduce using rule 36 (type_denoter -> RW_INTEGER .)
    RW_PROCEDURE    reduce using rule 36 (type_denoter -> RW_INTEGER .)
    RW_FUNCTION     reduce using rule 36 (type_denoter -> RW_INTEGER .)
    $end            reduce using rule 36 (type_denoter -> RW_INTEGER .)
    DEDENT          reduce using rule 36 (type_denoter -> RW_INTEGER .)
    S_SEMI_COLON    reduce using rule 36 (type_denoter -> RW_INTEGER .)
    S_COMMA         reduce using rule 36 (type_denoter -> RW_INTEGER .)
    S_RIGHT_BRACKET reduce using rule 36 (type_denoter -> RW_INTEGER .)
    IDENTIFIER      reduce using rule 36 (type_denoter -> RW_INTEGER .)
    S_GREATER_THAN  reduce using rule 36 (type_denoter -> RW_INTEGER .)
    S_EQUAL         reduce using rule 36 (type_denoter -> RW_INTEGER .)
    RW_TYPE         reduce using rule 36 (type_denoter -> RW_INTEGER .)


state 41

    (37) type_denoter -> RW_REAL .

    RW_KAMUS        reduce using rule 37 (type_denoter -> RW_REAL .)
    RW_PROCEDURE    reduce using rule 37 (type_denoter -> RW_REAL .)
    RW_FUNCTION     reduce using rule 37 (type_denoter -> RW_REAL .)
    $end            reduce using rule 37 (type_denoter -> RW_REAL .)
    DEDENT          reduce using rule 37 (type_denoter -> RW_REAL .)
    S_SEMI_COLON    reduce using rule 37 (type_denoter -> RW_REAL .)
    S_COMMA         reduce using rule 37 (type_denoter -> RW_REAL .)
    S_RIGHT_BRACKET reduce using rule 37 (type_denoter -> RW_REAL .)
    IDENTIFIER      reduce using rule 37 (type_denoter -> RW_REAL .)
    S_GREATER_THAN  reduce using rule 37 (type_denoter -> RW_REAL .)
    S_EQUAL         reduce using rule 37 (type_denoter -> RW_REAL .)
    RW_TYPE         reduce using rule 37 (type_denoter -> RW_REAL .)


state 42

    (38) type_denoter -> RW_STRING .

    RW_KAMUS        reduce using rule 38 (type_denoter -> RW_STRING .)
    RW_PROCEDURE    reduce using rule 38 (type_denoter -> RW_STRING .)
    RW_FUNCTION     reduce using rule 38 (type_denoter -> RW_STRING .)
    $end            reduce using rule 38 (type_denoter -> RW_STRING .)
    DEDENT          reduce using rule 38 (type_denoter -> RW_STRING .)
    S_SEMI_COLON    reduce using rule 38 (type_denoter -> RW_STRING .)
    S_COMMA         reduce using rule 38 (type_denoter -> RW_STRING .)
    S_RIGHT_BRACKET reduce using rule 38 (type_denoter -> RW_STRING .)
    IDENTIFIER      reduce using rule 38 (type_denoter -> RW_STRING .)
    S_GREATER_THAN  reduce using rule 38 (type_denoter -> RW_STRING .)
    S_EQUAL         reduce using rule 38 (type_denoter -> RW_STRING .)
    RW_TYPE         reduce using rule 38 (type_denoter -> RW_STRING .)


state 43

    (39) type_denoter -> RW_CHARACTER .

    RW_KAMUS        reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    RW_PROCEDURE    reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    RW_FUNCTION     reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    $end            reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    DEDENT          reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    S_SEMI_COLON    reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    S_COMMA         reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    S_RIGHT_BRACKET reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    IDENTIFIER      reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    S_GREATER_THAN  reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    S_EQUAL         reduce using rule 39 (type_denoter -> RW_CHARACTER .)
    RW_TYPE         reduce using rule 39 (type_denoter -> RW_CHARACTER .)


state 44

    (40) type_denoter -> RW_BOOLEAN .

    RW_KAMUS        reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    RW_PROCEDURE    reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    RW_FUNCTION     reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    $end            reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    DEDENT          reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    S_SEMI_COLON    reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    S_COMMA         reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    S_RIGHT_BRACKET reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    IDENTIFIER      reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    S_GREATER_THAN  reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    S_EQUAL         reduce using rule 40 (type_denoter -> RW_BOOLEAN .)
    RW_TYPE         reduce using rule 40 (type_denoter -> RW_BOOLEAN .)


state 45

    (41) ordinal_type -> enumerated_type .

    RW_KAMUS        reduce using rule 41 (ordinal_type -> enumerated_type .)
    RW_PROCEDURE    reduce using rule 41 (ordinal_type -> enumerated_type .)
    RW_FUNCTION     reduce using rule 41 (ordinal_type -> enumerated_type .)
    $end            reduce using rule 41 (ordinal_type -> enumerated_type .)
    DEDENT          reduce using rule 41 (ordinal_type -> enumerated_type .)
    S_SEMI_COLON    reduce using rule 41 (ordinal_type -> enumerated_type .)
    S_COMMA         reduce using rule 41 (ordinal_type -> enumerated_type .)
    S_RIGHT_BRACKET reduce using rule 41 (ordinal_type -> enumerated_type .)
    IDENTIFIER      reduce using rule 41 (ordinal_type -> enumerated_type .)
    S_GREATER_THAN  reduce using rule 41 (ordinal_type -> enumerated_type .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 41 (ordinal_type -> enumerated_type .)
    S_EQUAL         reduce using rule 41 (ordinal_type -> enumerated_type .)
    RW_TYPE         reduce using rule 41 (ordinal_type -> enumerated_type .)


state 46

    (42) ordinal_type -> subrange_type .

    RW_KAMUS        reduce using rule 42 (ordinal_type -> subrange_type .)
    RW_PROCEDURE    reduce using rule 42 (ordinal_type -> subrange_type .)
    RW_FUNCTION     reduce using rule 42 (ordinal_type -> subrange_type .)
    $end            reduce using rule 42 (ordinal_type -> subrange_type .)
    DEDENT          reduce using rule 42 (ordinal_type -> subrange_type .)
    S_SEMI_COLON    reduce using rule 42 (ordinal_type -> subrange_type .)
    S_COMMA         reduce using rule 42 (ordinal_type -> subrange_type .)
    S_RIGHT_BRACKET reduce using rule 42 (ordinal_type -> subrange_type .)
    IDENTIFIER      reduce using rule 42 (ordinal_type -> subrange_type .)
    S_GREATER_THAN  reduce using rule 42 (ordinal_type -> subrange_type .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 42 (ordinal_type -> subrange_type .)
    S_EQUAL         reduce using rule 42 (ordinal_type -> subrange_type .)
    RW_TYPE         reduce using rule 42 (ordinal_type -> subrange_type .)


state 47

    (43) ordinal_type -> identifier .
    (47) subrange_option -> identifier .
    (226) user_defined_function_call -> identifier . function_actual_parameter_list
    (172) variable_access -> identifier .
    (93) function_actual_parameter_list -> . S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET

  ! reduce/reduce conflict for S_EQUAL resolved using rule 43 (ordinal_type -> identifier .)
  ! reduce/reduce conflict for S_GREATER_THAN resolved using rule 43 (ordinal_type -> identifier .)
  ! reduce/reduce conflict for S_UP_TO resolved using rule 47 (subrange_option -> identifier .)
    RW_KAMUS        reduce using rule 43 (ordinal_type -> identifier .)
    RW_PROCEDURE    reduce using rule 43 (ordinal_type -> identifier .)
    RW_FUNCTION     reduce using rule 43 (ordinal_type -> identifier .)
    $end            reduce using rule 43 (ordinal_type -> identifier .)
    DEDENT          reduce using rule 43 (ordinal_type -> identifier .)
    S_SEMI_COLON    reduce using rule 43 (ordinal_type -> identifier .)
    S_COMMA         reduce using rule 43 (ordinal_type -> identifier .)
    S_RIGHT_BRACKET reduce using rule 43 (ordinal_type -> identifier .)
    IDENTIFIER      reduce using rule 43 (ordinal_type -> identifier .)
    S_GREATER_THAN  reduce using rule 43 (ordinal_type -> identifier .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 43 (ordinal_type -> identifier .)
    S_EQUAL         reduce using rule 43 (ordinal_type -> identifier .)
    RW_TYPE         reduce using rule 43 (ordinal_type -> identifier .)
    S_UP_TO         reduce using rule 47 (subrange_option -> identifier .)
    S_LEFT_SQUARE_BRACKET reduce using rule 172 (variable_access -> identifier .)
    S_DOT           reduce using rule 172 (variable_access -> identifier .)
    S_POWER         reduce using rule 172 (variable_access -> identifier .)
    S_TIMES         reduce using rule 172 (variable_access -> identifier .)
    S_DIVIDE        reduce using rule 172 (variable_access -> identifier .)
    RW_DIV          reduce using rule 172 (variable_access -> identifier .)
    RW_MOD          reduce using rule 172 (variable_access -> identifier .)
    RW_AND          reduce using rule 172 (variable_access -> identifier .)
    S_PLUS          reduce using rule 172 (variable_access -> identifier .)
    S_MINUS         reduce using rule 172 (variable_access -> identifier .)
    RW_OR           reduce using rule 172 (variable_access -> identifier .)
    RW_XOR          reduce using rule 172 (variable_access -> identifier .)
    S_NOT_EQUAL     reduce using rule 172 (variable_access -> identifier .)
    S_LESS_THAN_EQUAL reduce using rule 172 (variable_access -> identifier .)
    S_GREATER_THAN_EQUAL reduce using rule 172 (variable_access -> identifier .)
    S_LESS_THAN     reduce using rule 172 (variable_access -> identifier .)
    S_ELEMENT_OF    reduce using rule 172 (variable_access -> identifier .)
    RW_EQ           reduce using rule 172 (variable_access -> identifier .)
    RW_NEQ          reduce using rule 172 (variable_access -> identifier .)
    S_LEFT_BRACKET  shift and go to state 148

  ! S_EQUAL         [ reduce using rule 172 (variable_access -> identifier .) ]
  ! S_GREATER_THAN  [ reduce using rule 172 (variable_access -> identifier .) ]
  ! S_UP_TO         [ reduce using rule 172 (variable_access -> identifier .) ]

    function_actual_parameter_list shift and go to state 147

state 48

    (51) structured_type -> array_type .

    RW_KAMUS        reduce using rule 51 (structured_type -> array_type .)
    RW_PROCEDURE    reduce using rule 51 (structured_type -> array_type .)
    RW_FUNCTION     reduce using rule 51 (structured_type -> array_type .)
    $end            reduce using rule 51 (structured_type -> array_type .)
    DEDENT          reduce using rule 51 (structured_type -> array_type .)
    S_SEMI_COLON    reduce using rule 51 (structured_type -> array_type .)
    S_COMMA         reduce using rule 51 (structured_type -> array_type .)
    S_RIGHT_BRACKET reduce using rule 51 (structured_type -> array_type .)
    IDENTIFIER      reduce using rule 51 (structured_type -> array_type .)
    S_GREATER_THAN  reduce using rule 51 (structured_type -> array_type .)
    S_EQUAL         reduce using rule 51 (structured_type -> array_type .)
    RW_TYPE         reduce using rule 51 (structured_type -> array_type .)


state 49

    (44) enumerated_type -> S_LEFT_BRACKET . identifier_list S_RIGHT_BRACKET
    (213) primary_expression -> S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (256) identifier -> . IDENTIFIER
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    IDENTIFIER      shift and go to state 11
    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    identifier_list                shift and go to state 150
    expression                     shift and go to state 151
    identifier                     shift and go to state 152
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 50

    (45) subrange_type -> subrange_type_option .

    RW_KAMUS        reduce using rule 45 (subrange_type -> subrange_type_option .)
    RW_PROCEDURE    reduce using rule 45 (subrange_type -> subrange_type_option .)
    RW_FUNCTION     reduce using rule 45 (subrange_type -> subrange_type_option .)
    $end            reduce using rule 45 (subrange_type -> subrange_type_option .)
    DEDENT          reduce using rule 45 (subrange_type -> subrange_type_option .)
    S_SEMI_COLON    reduce using rule 45 (subrange_type -> subrange_type_option .)
    S_COMMA         reduce using rule 45 (subrange_type -> subrange_type_option .)
    S_RIGHT_BRACKET reduce using rule 45 (subrange_type -> subrange_type_option .)
    IDENTIFIER      reduce using rule 45 (subrange_type -> subrange_type_option .)
    S_GREATER_THAN  reduce using rule 45 (subrange_type -> subrange_type_option .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 45 (subrange_type -> subrange_type_option .)
    S_EQUAL         reduce using rule 45 (subrange_type -> subrange_type_option .)
    RW_TYPE         reduce using rule 45 (subrange_type -> subrange_type_option .)


state 51

    (52) array_type -> RW_ARRAY . array_index RW_OF component_type
    (53) array_index -> . S_LEFT_SQUARE_BRACKET index_list S_RIGHT_SQUARE_BRACKET

    S_LEFT_SQUARE_BRACKET shift and go to state 161

    array_index                    shift and go to state 160

state 52

    (46) subrange_type_option -> subrange_option . S_UP_TO subrange_option

    S_UP_TO         shift and go to state 162


state 53

    (48) subrange_option -> constant .

    S_UP_TO         reduce using rule 48 (subrange_option -> constant .)
    RW_KAMUS        reduce using rule 48 (subrange_option -> constant .)
    RW_PROCEDURE    reduce using rule 48 (subrange_option -> constant .)
    RW_FUNCTION     reduce using rule 48 (subrange_option -> constant .)
    $end            reduce using rule 48 (subrange_option -> constant .)
    DEDENT          reduce using rule 48 (subrange_option -> constant .)
    S_SEMI_COLON    reduce using rule 48 (subrange_option -> constant .)
    S_COMMA         reduce using rule 48 (subrange_option -> constant .)
    S_RIGHT_BRACKET reduce using rule 48 (subrange_option -> constant .)
    IDENTIFIER      reduce using rule 48 (subrange_option -> constant .)
    S_GREATER_THAN  reduce using rule 48 (subrange_option -> constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 48 (subrange_option -> constant .)
    S_EQUAL         reduce using rule 48 (subrange_option -> constant .)
    RW_TYPE         reduce using rule 48 (subrange_option -> constant .)


state 54

    (49) subrange_option -> function_designator .
    (215) primary_expression -> function_designator .
    (175) variable_access -> function_designator .

  ! reduce/reduce conflict for S_EQUAL resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for S_GREATER_THAN resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for S_UP_TO resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for RW_KAMUS resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for RW_PROCEDURE resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for RW_FUNCTION resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for $end resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for DEDENT resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for S_SEMI_COLON resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for S_COMMA resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for S_RIGHT_BRACKET resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for S_RIGHT_SQUARE_BRACKET resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for RW_TYPE resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for S_POWER resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_TIMES resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_DIVIDE resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_DIV resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_MOD resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_AND resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_PLUS resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_MINUS resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_OR resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_XOR resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_EQUAL resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for S_NOT_EQUAL resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_LESS_THAN_EQUAL resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_GREATER_THAN_EQUAL resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_LESS_THAN resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_GREATER_THAN resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for S_ELEMENT_OF resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_EQ resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_NEQ resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_UP_TO resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for RW_KAMUS resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for RW_PROCEDURE resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for RW_FUNCTION resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for $end resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for DEDENT resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for S_SEMI_COLON resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for S_COMMA resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for S_RIGHT_BRACKET resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for S_RIGHT_SQUARE_BRACKET resolved using rule 49 (subrange_option -> function_designator .)
  ! reduce/reduce conflict for RW_TYPE resolved using rule 49 (subrange_option -> function_designator .)
    S_UP_TO         reduce using rule 49 (subrange_option -> function_designator .)
    RW_KAMUS        reduce using rule 49 (subrange_option -> function_designator .)
    RW_PROCEDURE    reduce using rule 49 (subrange_option -> function_designator .)
    RW_FUNCTION     reduce using rule 49 (subrange_option -> function_designator .)
    $end            reduce using rule 49 (subrange_option -> function_designator .)
    DEDENT          reduce using rule 49 (subrange_option -> function_designator .)
    S_SEMI_COLON    reduce using rule 49 (subrange_option -> function_designator .)
    S_COMMA         reduce using rule 49 (subrange_option -> function_designator .)
    S_RIGHT_BRACKET reduce using rule 49 (subrange_option -> function_designator .)
    IDENTIFIER      reduce using rule 49 (subrange_option -> function_designator .)
    S_GREATER_THAN  reduce using rule 49 (subrange_option -> function_designator .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 49 (subrange_option -> function_designator .)
    S_EQUAL         reduce using rule 49 (subrange_option -> function_designator .)
    RW_TYPE         reduce using rule 49 (subrange_option -> function_designator .)
    S_LEFT_SQUARE_BRACKET reduce using rule 175 (variable_access -> function_designator .)
    S_DOT           reduce using rule 175 (variable_access -> function_designator .)
    S_POWER         reduce using rule 175 (variable_access -> function_designator .)
    S_TIMES         reduce using rule 175 (variable_access -> function_designator .)
    S_DIVIDE        reduce using rule 175 (variable_access -> function_designator .)
    RW_DIV          reduce using rule 175 (variable_access -> function_designator .)
    RW_MOD          reduce using rule 175 (variable_access -> function_designator .)
    RW_AND          reduce using rule 175 (variable_access -> function_designator .)
    S_PLUS          reduce using rule 175 (variable_access -> function_designator .)
    S_MINUS         reduce using rule 175 (variable_access -> function_designator .)
    RW_OR           reduce using rule 175 (variable_access -> function_designator .)
    RW_XOR          reduce using rule 175 (variable_access -> function_designator .)
    S_NOT_EQUAL     reduce using rule 175 (variable_access -> function_designator .)
    S_LESS_THAN_EQUAL reduce using rule 175 (variable_access -> function_designator .)
    S_GREATER_THAN_EQUAL reduce using rule 175 (variable_access -> function_designator .)
    S_LESS_THAN     reduce using rule 175 (variable_access -> function_designator .)
    S_ELEMENT_OF    reduce using rule 175 (variable_access -> function_designator .)
    RW_EQ           reduce using rule 175 (variable_access -> function_designator .)
    RW_NEQ          reduce using rule 175 (variable_access -> function_designator .)

  ! S_POWER         [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_TIMES         [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_DIVIDE        [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_DIV          [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_MOD          [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_AND          [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_PLUS          [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_MINUS         [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_OR           [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_XOR          [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_EQUAL         [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_NOT_EQUAL     [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_LESS_THAN_EQUAL [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_GREATER_THAN_EQUAL [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_LESS_THAN     [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_GREATER_THAN  [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_ELEMENT_OF    [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_EQ           [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_NEQ          [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_UP_TO         [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_KAMUS        [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_PROCEDURE    [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_FUNCTION     [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! $end            [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! DEDENT          [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_SEMI_COLON    [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_COMMA         [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_RIGHT_BRACKET [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! IDENTIFIER      [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_RIGHT_SQUARE_BRACKET [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_TYPE         [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_EQUAL         [ reduce using rule 175 (variable_access -> function_designator .) ]
  ! S_GREATER_THAN  [ reduce using rule 175 (variable_access -> function_designator .) ]
  ! S_UP_TO         [ reduce using rule 175 (variable_access -> function_designator .) ]
  ! RW_KAMUS        [ reduce using rule 175 (variable_access -> function_designator .) ]
  ! RW_PROCEDURE    [ reduce using rule 175 (variable_access -> function_designator .) ]
  ! RW_FUNCTION     [ reduce using rule 175 (variable_access -> function_designator .) ]
  ! $end            [ reduce using rule 175 (variable_access -> function_designator .) ]
  ! DEDENT          [ reduce using rule 175 (variable_access -> function_designator .) ]
  ! S_SEMI_COLON    [ reduce using rule 175 (variable_access -> function_designator .) ]
  ! S_COMMA         [ reduce using rule 175 (variable_access -> function_designator .) ]
  ! S_RIGHT_BRACKET [ reduce using rule 175 (variable_access -> function_designator .) ]
  ! IDENTIFIER      [ reduce using rule 175 (variable_access -> function_designator .) ]
  ! S_RIGHT_SQUARE_BRACKET [ reduce using rule 175 (variable_access -> function_designator .) ]
  ! RW_TYPE         [ reduce using rule 175 (variable_access -> function_designator .) ]


state 55

    (50) subrange_option -> expression .
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

  ! shift/reduce conflict for S_EQUAL resolved as shift
  ! shift/reduce conflict for S_GREATER_THAN resolved as shift
    S_UP_TO         reduce using rule 50 (subrange_option -> expression .)
    RW_KAMUS        reduce using rule 50 (subrange_option -> expression .)
    RW_PROCEDURE    reduce using rule 50 (subrange_option -> expression .)
    RW_FUNCTION     reduce using rule 50 (subrange_option -> expression .)
    $end            reduce using rule 50 (subrange_option -> expression .)
    DEDENT          reduce using rule 50 (subrange_option -> expression .)
    S_SEMI_COLON    reduce using rule 50 (subrange_option -> expression .)
    S_COMMA         reduce using rule 50 (subrange_option -> expression .)
    S_RIGHT_BRACKET reduce using rule 50 (subrange_option -> expression .)
    IDENTIFIER      reduce using rule 50 (subrange_option -> expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 50 (subrange_option -> expression .)
    RW_TYPE         reduce using rule 50 (subrange_option -> expression .)
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

  ! S_GREATER_THAN  [ reduce using rule 50 (subrange_option -> expression .) ]
  ! S_EQUAL         [ reduce using rule 50 (subrange_option -> expression .) ]

    relational_op                  shift and go to state 163

state 56

    (154) constant -> string_char_constant .
    (151) unsigned_constant -> string_char_constant .

  ! reduce/reduce conflict for S_EQUAL resolved using rule 151 (unsigned_constant -> string_char_constant .)
  ! reduce/reduce conflict for S_GREATER_THAN resolved using rule 151 (unsigned_constant -> string_char_constant .)
  ! reduce/reduce conflict for S_UP_TO resolved using rule 151 (unsigned_constant -> string_char_constant .)
  ! reduce/reduce conflict for RW_KAMUS resolved using rule 151 (unsigned_constant -> string_char_constant .)
  ! reduce/reduce conflict for RW_PROCEDURE resolved using rule 151 (unsigned_constant -> string_char_constant .)
  ! reduce/reduce conflict for RW_FUNCTION resolved using rule 151 (unsigned_constant -> string_char_constant .)
  ! reduce/reduce conflict for $end resolved using rule 151 (unsigned_constant -> string_char_constant .)
  ! reduce/reduce conflict for DEDENT resolved using rule 151 (unsigned_constant -> string_char_constant .)
  ! reduce/reduce conflict for S_SEMI_COLON resolved using rule 151 (unsigned_constant -> string_char_constant .)
  ! reduce/reduce conflict for S_COMMA resolved using rule 151 (unsigned_constant -> string_char_constant .)
  ! reduce/reduce conflict for S_RIGHT_BRACKET resolved using rule 151 (unsigned_constant -> string_char_constant .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 151 (unsigned_constant -> string_char_constant .)
  ! reduce/reduce conflict for S_RIGHT_SQUARE_BRACKET resolved using rule 151 (unsigned_constant -> string_char_constant .)
  ! reduce/reduce conflict for RW_TYPE resolved using rule 151 (unsigned_constant -> string_char_constant .)
    S_POWER         reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_TIMES         reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_DIVIDE        reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_DIV          reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_MOD          reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_AND          reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_PLUS          reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_MINUS         reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_OR           reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_XOR          reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_EQUAL         reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_NOT_EQUAL     reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_LESS_THAN_EQUAL reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_LESS_THAN     reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_GREATER_THAN  reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_ELEMENT_OF    reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_EQ           reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_NEQ          reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_UP_TO         reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_KAMUS        reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_PROCEDURE    reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_FUNCTION     reduce using rule 151 (unsigned_constant -> string_char_constant .)
    $end            reduce using rule 151 (unsigned_constant -> string_char_constant .)
    DEDENT          reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_SEMI_COLON    reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_COMMA         reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_RIGHT_BRACKET reduce using rule 151 (unsigned_constant -> string_char_constant .)
    IDENTIFIER      reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_TYPE         reduce using rule 151 (unsigned_constant -> string_char_constant .)

  ! S_UP_TO         [ reduce using rule 154 (constant -> string_char_constant .) ]
  ! RW_KAMUS        [ reduce using rule 154 (constant -> string_char_constant .) ]
  ! RW_PROCEDURE    [ reduce using rule 154 (constant -> string_char_constant .) ]
  ! RW_FUNCTION     [ reduce using rule 154 (constant -> string_char_constant .) ]
  ! $end            [ reduce using rule 154 (constant -> string_char_constant .) ]
  ! DEDENT          [ reduce using rule 154 (constant -> string_char_constant .) ]
  ! S_SEMI_COLON    [ reduce using rule 154 (constant -> string_char_constant .) ]
  ! S_COMMA         [ reduce using rule 154 (constant -> string_char_constant .) ]
  ! S_RIGHT_BRACKET [ reduce using rule 154 (constant -> string_char_constant .) ]
  ! IDENTIFIER      [ reduce using rule 154 (constant -> string_char_constant .) ]
  ! S_GREATER_THAN  [ reduce using rule 154 (constant -> string_char_constant .) ]
  ! S_RIGHT_SQUARE_BRACKET [ reduce using rule 154 (constant -> string_char_constant .) ]
  ! S_EQUAL         [ reduce using rule 154 (constant -> string_char_constant .) ]
  ! RW_TYPE         [ reduce using rule 154 (constant -> string_char_constant .) ]


state 57

    (155) constant -> non_string_constant .
    (150) unsigned_constant -> non_string_constant .

  ! reduce/reduce conflict for S_EQUAL resolved using rule 150 (unsigned_constant -> non_string_constant .)
  ! reduce/reduce conflict for S_GREATER_THAN resolved using rule 150 (unsigned_constant -> non_string_constant .)
  ! reduce/reduce conflict for S_UP_TO resolved using rule 150 (unsigned_constant -> non_string_constant .)
  ! reduce/reduce conflict for RW_KAMUS resolved using rule 150 (unsigned_constant -> non_string_constant .)
  ! reduce/reduce conflict for RW_PROCEDURE resolved using rule 150 (unsigned_constant -> non_string_constant .)
  ! reduce/reduce conflict for RW_FUNCTION resolved using rule 150 (unsigned_constant -> non_string_constant .)
  ! reduce/reduce conflict for $end resolved using rule 150 (unsigned_constant -> non_string_constant .)
  ! reduce/reduce conflict for DEDENT resolved using rule 150 (unsigned_constant -> non_string_constant .)
  ! reduce/reduce conflict for S_SEMI_COLON resolved using rule 150 (unsigned_constant -> non_string_constant .)
  ! reduce/reduce conflict for S_COMMA resolved using rule 150 (unsigned_constant -> non_string_constant .)
  ! reduce/reduce conflict for S_RIGHT_BRACKET resolved using rule 150 (unsigned_constant -> non_string_constant .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 150 (unsigned_constant -> non_string_constant .)
  ! reduce/reduce conflict for S_RIGHT_SQUARE_BRACKET resolved using rule 150 (unsigned_constant -> non_string_constant .)
  ! reduce/reduce conflict for RW_TYPE resolved using rule 150 (unsigned_constant -> non_string_constant .)
    S_POWER         reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_TIMES         reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_DIVIDE        reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_DIV          reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_MOD          reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_AND          reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_PLUS          reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_MINUS         reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_OR           reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_XOR          reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_EQUAL         reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_NOT_EQUAL     reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_LESS_THAN_EQUAL reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_LESS_THAN     reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_GREATER_THAN  reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_ELEMENT_OF    reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_EQ           reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_NEQ          reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_UP_TO         reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_KAMUS        reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_PROCEDURE    reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_FUNCTION     reduce using rule 150 (unsigned_constant -> non_string_constant .)
    $end            reduce using rule 150 (unsigned_constant -> non_string_constant .)
    DEDENT          reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_SEMI_COLON    reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_COMMA         reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_RIGHT_BRACKET reduce using rule 150 (unsigned_constant -> non_string_constant .)
    IDENTIFIER      reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_TYPE         reduce using rule 150 (unsigned_constant -> non_string_constant .)

  ! S_UP_TO         [ reduce using rule 155 (constant -> non_string_constant .) ]
  ! RW_KAMUS        [ reduce using rule 155 (constant -> non_string_constant .) ]
  ! RW_PROCEDURE    [ reduce using rule 155 (constant -> non_string_constant .) ]
  ! RW_FUNCTION     [ reduce using rule 155 (constant -> non_string_constant .) ]
  ! $end            [ reduce using rule 155 (constant -> non_string_constant .) ]
  ! DEDENT          [ reduce using rule 155 (constant -> non_string_constant .) ]
  ! S_SEMI_COLON    [ reduce using rule 155 (constant -> non_string_constant .) ]
  ! S_COMMA         [ reduce using rule 155 (constant -> non_string_constant .) ]
  ! S_RIGHT_BRACKET [ reduce using rule 155 (constant -> non_string_constant .) ]
  ! IDENTIFIER      [ reduce using rule 155 (constant -> non_string_constant .) ]
  ! S_GREATER_THAN  [ reduce using rule 155 (constant -> non_string_constant .) ]
  ! S_RIGHT_SQUARE_BRACKET [ reduce using rule 155 (constant -> non_string_constant .) ]
  ! S_EQUAL         [ reduce using rule 155 (constant -> non_string_constant .) ]
  ! RW_TYPE         [ reduce using rule 155 (constant -> non_string_constant .) ]


state 58

    (156) constant -> sign . non_string_constant
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER

    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93

    non_string_constant            shift and go to state 173
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69

state 59

    (157) constant -> boolean_constant .
    (152) unsigned_constant -> boolean_constant .

  ! reduce/reduce conflict for S_EQUAL resolved using rule 152 (unsigned_constant -> boolean_constant .)
  ! reduce/reduce conflict for S_GREATER_THAN resolved using rule 152 (unsigned_constant -> boolean_constant .)
  ! reduce/reduce conflict for S_UP_TO resolved using rule 152 (unsigned_constant -> boolean_constant .)
  ! reduce/reduce conflict for RW_KAMUS resolved using rule 152 (unsigned_constant -> boolean_constant .)
  ! reduce/reduce conflict for RW_PROCEDURE resolved using rule 152 (unsigned_constant -> boolean_constant .)
  ! reduce/reduce conflict for RW_FUNCTION resolved using rule 152 (unsigned_constant -> boolean_constant .)
  ! reduce/reduce conflict for $end resolved using rule 152 (unsigned_constant -> boolean_constant .)
  ! reduce/reduce conflict for DEDENT resolved using rule 152 (unsigned_constant -> boolean_constant .)
  ! reduce/reduce conflict for S_SEMI_COLON resolved using rule 152 (unsigned_constant -> boolean_constant .)
  ! reduce/reduce conflict for S_COMMA resolved using rule 152 (unsigned_constant -> boolean_constant .)
  ! reduce/reduce conflict for S_RIGHT_BRACKET resolved using rule 152 (unsigned_constant -> boolean_constant .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 152 (unsigned_constant -> boolean_constant .)
  ! reduce/reduce conflict for S_RIGHT_SQUARE_BRACKET resolved using rule 152 (unsigned_constant -> boolean_constant .)
  ! reduce/reduce conflict for RW_TYPE resolved using rule 152 (unsigned_constant -> boolean_constant .)
    S_POWER         reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_TIMES         reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_DIVIDE        reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_DIV          reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_MOD          reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_AND          reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_PLUS          reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_MINUS         reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_OR           reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_XOR          reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_EQUAL         reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_NOT_EQUAL     reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_LESS_THAN_EQUAL reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_LESS_THAN     reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_GREATER_THAN  reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_ELEMENT_OF    reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_EQ           reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_NEQ          reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_UP_TO         reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_KAMUS        reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_PROCEDURE    reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_FUNCTION     reduce using rule 152 (unsigned_constant -> boolean_constant .)
    $end            reduce using rule 152 (unsigned_constant -> boolean_constant .)
    DEDENT          reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_SEMI_COLON    reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_COMMA         reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_RIGHT_BRACKET reduce using rule 152 (unsigned_constant -> boolean_constant .)
    IDENTIFIER      reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_TYPE         reduce using rule 152 (unsigned_constant -> boolean_constant .)

  ! S_UP_TO         [ reduce using rule 157 (constant -> boolean_constant .) ]
  ! RW_KAMUS        [ reduce using rule 157 (constant -> boolean_constant .) ]
  ! RW_PROCEDURE    [ reduce using rule 157 (constant -> boolean_constant .) ]
  ! RW_FUNCTION     [ reduce using rule 157 (constant -> boolean_constant .) ]
  ! $end            [ reduce using rule 157 (constant -> boolean_constant .) ]
  ! DEDENT          [ reduce using rule 157 (constant -> boolean_constant .) ]
  ! S_SEMI_COLON    [ reduce using rule 157 (constant -> boolean_constant .) ]
  ! S_COMMA         [ reduce using rule 157 (constant -> boolean_constant .) ]
  ! S_RIGHT_BRACKET [ reduce using rule 157 (constant -> boolean_constant .) ]
  ! IDENTIFIER      [ reduce using rule 157 (constant -> boolean_constant .) ]
  ! S_GREATER_THAN  [ reduce using rule 157 (constant -> boolean_constant .) ]
  ! S_RIGHT_SQUARE_BRACKET [ reduce using rule 157 (constant -> boolean_constant .) ]
  ! S_EQUAL         [ reduce using rule 157 (constant -> boolean_constant .) ]
  ! RW_TYPE         [ reduce using rule 157 (constant -> boolean_constant .) ]


state 60

    (158) constant -> nil_constant .
    (153) unsigned_constant -> nil_constant .

  ! reduce/reduce conflict for S_EQUAL resolved using rule 153 (unsigned_constant -> nil_constant .)
  ! reduce/reduce conflict for S_GREATER_THAN resolved using rule 153 (unsigned_constant -> nil_constant .)
  ! reduce/reduce conflict for S_UP_TO resolved using rule 153 (unsigned_constant -> nil_constant .)
  ! reduce/reduce conflict for RW_KAMUS resolved using rule 153 (unsigned_constant -> nil_constant .)
  ! reduce/reduce conflict for RW_PROCEDURE resolved using rule 153 (unsigned_constant -> nil_constant .)
  ! reduce/reduce conflict for RW_FUNCTION resolved using rule 153 (unsigned_constant -> nil_constant .)
  ! reduce/reduce conflict for $end resolved using rule 153 (unsigned_constant -> nil_constant .)
  ! reduce/reduce conflict for DEDENT resolved using rule 153 (unsigned_constant -> nil_constant .)
  ! reduce/reduce conflict for S_SEMI_COLON resolved using rule 153 (unsigned_constant -> nil_constant .)
  ! reduce/reduce conflict for S_COMMA resolved using rule 153 (unsigned_constant -> nil_constant .)
  ! reduce/reduce conflict for S_RIGHT_BRACKET resolved using rule 153 (unsigned_constant -> nil_constant .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 153 (unsigned_constant -> nil_constant .)
  ! reduce/reduce conflict for S_RIGHT_SQUARE_BRACKET resolved using rule 153 (unsigned_constant -> nil_constant .)
  ! reduce/reduce conflict for RW_TYPE resolved using rule 153 (unsigned_constant -> nil_constant .)
    S_POWER         reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_TIMES         reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_DIVIDE        reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_DIV          reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_MOD          reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_AND          reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_PLUS          reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_MINUS         reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_OR           reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_XOR          reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_EQUAL         reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_NOT_EQUAL     reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_LESS_THAN_EQUAL reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_LESS_THAN     reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_GREATER_THAN  reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_ELEMENT_OF    reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_EQ           reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_NEQ          reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_UP_TO         reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_KAMUS        reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_PROCEDURE    reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_FUNCTION     reduce using rule 153 (unsigned_constant -> nil_constant .)
    $end            reduce using rule 153 (unsigned_constant -> nil_constant .)
    DEDENT          reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_SEMI_COLON    reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_COMMA         reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_RIGHT_BRACKET reduce using rule 153 (unsigned_constant -> nil_constant .)
    IDENTIFIER      reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_TYPE         reduce using rule 153 (unsigned_constant -> nil_constant .)

  ! S_UP_TO         [ reduce using rule 158 (constant -> nil_constant .) ]
  ! RW_KAMUS        [ reduce using rule 158 (constant -> nil_constant .) ]
  ! RW_PROCEDURE    [ reduce using rule 158 (constant -> nil_constant .) ]
  ! RW_FUNCTION     [ reduce using rule 158 (constant -> nil_constant .) ]
  ! $end            [ reduce using rule 158 (constant -> nil_constant .) ]
  ! DEDENT          [ reduce using rule 158 (constant -> nil_constant .) ]
  ! S_SEMI_COLON    [ reduce using rule 158 (constant -> nil_constant .) ]
  ! S_COMMA         [ reduce using rule 158 (constant -> nil_constant .) ]
  ! S_RIGHT_BRACKET [ reduce using rule 158 (constant -> nil_constant .) ]
  ! IDENTIFIER      [ reduce using rule 158 (constant -> nil_constant .) ]
  ! S_GREATER_THAN  [ reduce using rule 158 (constant -> nil_constant .) ]
  ! S_RIGHT_SQUARE_BRACKET [ reduce using rule 158 (constant -> nil_constant .) ]
  ! S_EQUAL         [ reduce using rule 158 (constant -> nil_constant .) ]
  ! RW_TYPE         [ reduce using rule 158 (constant -> nil_constant .) ]


state 61

    (222) function_designator -> user_defined_function_call .

    S_UP_TO         reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_POWER         reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_TIMES         reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_DIVIDE        reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_DIV          reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_MOD          reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_AND          reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_PLUS          reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_MINUS         reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_OR           reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_XOR          reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_EQUAL         reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_NOT_EQUAL     reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_LESS_THAN_EQUAL reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_GREATER_THAN_EQUAL reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_LESS_THAN     reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_GREATER_THAN  reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_ELEMENT_OF    reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_EQ           reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_NEQ          reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_LEFT_SQUARE_BRACKET reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_DOT           reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_RIGHT_BRACKET reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_COMMA         reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_KAMUS        reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_PROCEDURE    reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_FUNCTION     reduce using rule 222 (function_designator -> user_defined_function_call .)
    $end            reduce using rule 222 (function_designator -> user_defined_function_call .)
    DEDENT          reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_SEMI_COLON    reduce using rule 222 (function_designator -> user_defined_function_call .)
    IDENTIFIER      reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_TYPE         reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_RETURN        reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_IF           reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_DEPEND       reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_WHILE        reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_ITERATE      reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_REPEAT       reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_INPUT        reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_OUTPUT       reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_ABS          reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_SIN          reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_COS          reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_TAN          reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_SUCC         reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_PRED         reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_AWAL         reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_AKHIR        reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_FIRSTCHAR    reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_LASTCHAR     reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_LONG         reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_ISKOSONG     reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_INTEGERTOREAL reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_REALTOINTEGER reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_THEN         reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_DO           reduce using rule 222 (function_designator -> user_defined_function_call .)
    INDENT          reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_COLON         reduce using rule 222 (function_designator -> user_defined_function_call .)
    S_ASSIGNMENT    reduce using rule 222 (function_designator -> user_defined_function_call .)
    RW_TIMES        reduce using rule 222 (function_designator -> user_defined_function_call .)


state 62

    (223) function_designator -> math_function_call .

    S_UP_TO         reduce using rule 223 (function_designator -> math_function_call .)
    S_POWER         reduce using rule 223 (function_designator -> math_function_call .)
    S_TIMES         reduce using rule 223 (function_designator -> math_function_call .)
    S_DIVIDE        reduce using rule 223 (function_designator -> math_function_call .)
    RW_DIV          reduce using rule 223 (function_designator -> math_function_call .)
    RW_MOD          reduce using rule 223 (function_designator -> math_function_call .)
    RW_AND          reduce using rule 223 (function_designator -> math_function_call .)
    S_PLUS          reduce using rule 223 (function_designator -> math_function_call .)
    S_MINUS         reduce using rule 223 (function_designator -> math_function_call .)
    RW_OR           reduce using rule 223 (function_designator -> math_function_call .)
    RW_XOR          reduce using rule 223 (function_designator -> math_function_call .)
    S_EQUAL         reduce using rule 223 (function_designator -> math_function_call .)
    S_NOT_EQUAL     reduce using rule 223 (function_designator -> math_function_call .)
    S_LESS_THAN_EQUAL reduce using rule 223 (function_designator -> math_function_call .)
    S_GREATER_THAN_EQUAL reduce using rule 223 (function_designator -> math_function_call .)
    S_LESS_THAN     reduce using rule 223 (function_designator -> math_function_call .)
    S_GREATER_THAN  reduce using rule 223 (function_designator -> math_function_call .)
    S_ELEMENT_OF    reduce using rule 223 (function_designator -> math_function_call .)
    RW_EQ           reduce using rule 223 (function_designator -> math_function_call .)
    RW_NEQ          reduce using rule 223 (function_designator -> math_function_call .)
    S_LEFT_SQUARE_BRACKET reduce using rule 223 (function_designator -> math_function_call .)
    S_DOT           reduce using rule 223 (function_designator -> math_function_call .)
    S_RIGHT_BRACKET reduce using rule 223 (function_designator -> math_function_call .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 223 (function_designator -> math_function_call .)
    S_COMMA         reduce using rule 223 (function_designator -> math_function_call .)
    RW_KAMUS        reduce using rule 223 (function_designator -> math_function_call .)
    RW_PROCEDURE    reduce using rule 223 (function_designator -> math_function_call .)
    RW_FUNCTION     reduce using rule 223 (function_designator -> math_function_call .)
    $end            reduce using rule 223 (function_designator -> math_function_call .)
    DEDENT          reduce using rule 223 (function_designator -> math_function_call .)
    S_SEMI_COLON    reduce using rule 223 (function_designator -> math_function_call .)
    IDENTIFIER      reduce using rule 223 (function_designator -> math_function_call .)
    RW_TYPE         reduce using rule 223 (function_designator -> math_function_call .)
    S_RETURN        reduce using rule 223 (function_designator -> math_function_call .)
    RW_IF           reduce using rule 223 (function_designator -> math_function_call .)
    RW_DEPEND       reduce using rule 223 (function_designator -> math_function_call .)
    RW_WHILE        reduce using rule 223 (function_designator -> math_function_call .)
    RW_ITERATE      reduce using rule 223 (function_designator -> math_function_call .)
    RW_REPEAT       reduce using rule 223 (function_designator -> math_function_call .)
    RW_INPUT        reduce using rule 223 (function_designator -> math_function_call .)
    RW_OUTPUT       reduce using rule 223 (function_designator -> math_function_call .)
    RW_ABS          reduce using rule 223 (function_designator -> math_function_call .)
    RW_SIN          reduce using rule 223 (function_designator -> math_function_call .)
    RW_COS          reduce using rule 223 (function_designator -> math_function_call .)
    RW_TAN          reduce using rule 223 (function_designator -> math_function_call .)
    RW_SUCC         reduce using rule 223 (function_designator -> math_function_call .)
    RW_PRED         reduce using rule 223 (function_designator -> math_function_call .)
    RW_AWAL         reduce using rule 223 (function_designator -> math_function_call .)
    RW_AKHIR        reduce using rule 223 (function_designator -> math_function_call .)
    RW_FIRSTCHAR    reduce using rule 223 (function_designator -> math_function_call .)
    RW_LASTCHAR     reduce using rule 223 (function_designator -> math_function_call .)
    RW_LONG         reduce using rule 223 (function_designator -> math_function_call .)
    RW_ISKOSONG     reduce using rule 223 (function_designator -> math_function_call .)
    RW_INTEGERTOREAL reduce using rule 223 (function_designator -> math_function_call .)
    RW_REALTOINTEGER reduce using rule 223 (function_designator -> math_function_call .)
    RW_THEN         reduce using rule 223 (function_designator -> math_function_call .)
    RW_DO           reduce using rule 223 (function_designator -> math_function_call .)
    INDENT          reduce using rule 223 (function_designator -> math_function_call .)
    S_COLON         reduce using rule 223 (function_designator -> math_function_call .)
    S_ASSIGNMENT    reduce using rule 223 (function_designator -> math_function_call .)
    RW_TIMES        reduce using rule 223 (function_designator -> math_function_call .)


state 63

    (224) function_designator -> string_function_call .

    S_UP_TO         reduce using rule 224 (function_designator -> string_function_call .)
    S_POWER         reduce using rule 224 (function_designator -> string_function_call .)
    S_TIMES         reduce using rule 224 (function_designator -> string_function_call .)
    S_DIVIDE        reduce using rule 224 (function_designator -> string_function_call .)
    RW_DIV          reduce using rule 224 (function_designator -> string_function_call .)
    RW_MOD          reduce using rule 224 (function_designator -> string_function_call .)
    RW_AND          reduce using rule 224 (function_designator -> string_function_call .)
    S_PLUS          reduce using rule 224 (function_designator -> string_function_call .)
    S_MINUS         reduce using rule 224 (function_designator -> string_function_call .)
    RW_OR           reduce using rule 224 (function_designator -> string_function_call .)
    RW_XOR          reduce using rule 224 (function_designator -> string_function_call .)
    S_EQUAL         reduce using rule 224 (function_designator -> string_function_call .)
    S_NOT_EQUAL     reduce using rule 224 (function_designator -> string_function_call .)
    S_LESS_THAN_EQUAL reduce using rule 224 (function_designator -> string_function_call .)
    S_GREATER_THAN_EQUAL reduce using rule 224 (function_designator -> string_function_call .)
    S_LESS_THAN     reduce using rule 224 (function_designator -> string_function_call .)
    S_GREATER_THAN  reduce using rule 224 (function_designator -> string_function_call .)
    S_ELEMENT_OF    reduce using rule 224 (function_designator -> string_function_call .)
    RW_EQ           reduce using rule 224 (function_designator -> string_function_call .)
    RW_NEQ          reduce using rule 224 (function_designator -> string_function_call .)
    S_LEFT_SQUARE_BRACKET reduce using rule 224 (function_designator -> string_function_call .)
    S_DOT           reduce using rule 224 (function_designator -> string_function_call .)
    S_RIGHT_BRACKET reduce using rule 224 (function_designator -> string_function_call .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 224 (function_designator -> string_function_call .)
    S_COMMA         reduce using rule 224 (function_designator -> string_function_call .)
    RW_KAMUS        reduce using rule 224 (function_designator -> string_function_call .)
    RW_PROCEDURE    reduce using rule 224 (function_designator -> string_function_call .)
    RW_FUNCTION     reduce using rule 224 (function_designator -> string_function_call .)
    $end            reduce using rule 224 (function_designator -> string_function_call .)
    DEDENT          reduce using rule 224 (function_designator -> string_function_call .)
    S_SEMI_COLON    reduce using rule 224 (function_designator -> string_function_call .)
    IDENTIFIER      reduce using rule 224 (function_designator -> string_function_call .)
    RW_TYPE         reduce using rule 224 (function_designator -> string_function_call .)
    S_RETURN        reduce using rule 224 (function_designator -> string_function_call .)
    RW_IF           reduce using rule 224 (function_designator -> string_function_call .)
    RW_DEPEND       reduce using rule 224 (function_designator -> string_function_call .)
    RW_WHILE        reduce using rule 224 (function_designator -> string_function_call .)
    RW_ITERATE      reduce using rule 224 (function_designator -> string_function_call .)
    RW_REPEAT       reduce using rule 224 (function_designator -> string_function_call .)
    RW_INPUT        reduce using rule 224 (function_designator -> string_function_call .)
    RW_OUTPUT       reduce using rule 224 (function_designator -> string_function_call .)
    RW_ABS          reduce using rule 224 (function_designator -> string_function_call .)
    RW_SIN          reduce using rule 224 (function_designator -> string_function_call .)
    RW_COS          reduce using rule 224 (function_designator -> string_function_call .)
    RW_TAN          reduce using rule 224 (function_designator -> string_function_call .)
    RW_SUCC         reduce using rule 224 (function_designator -> string_function_call .)
    RW_PRED         reduce using rule 224 (function_designator -> string_function_call .)
    RW_AWAL         reduce using rule 224 (function_designator -> string_function_call .)
    RW_AKHIR        reduce using rule 224 (function_designator -> string_function_call .)
    RW_FIRSTCHAR    reduce using rule 224 (function_designator -> string_function_call .)
    RW_LASTCHAR     reduce using rule 224 (function_designator -> string_function_call .)
    RW_LONG         reduce using rule 224 (function_designator -> string_function_call .)
    RW_ISKOSONG     reduce using rule 224 (function_designator -> string_function_call .)
    RW_INTEGERTOREAL reduce using rule 224 (function_designator -> string_function_call .)
    RW_REALTOINTEGER reduce using rule 224 (function_designator -> string_function_call .)
    RW_THEN         reduce using rule 224 (function_designator -> string_function_call .)
    RW_DO           reduce using rule 224 (function_designator -> string_function_call .)
    INDENT          reduce using rule 224 (function_designator -> string_function_call .)
    S_COLON         reduce using rule 224 (function_designator -> string_function_call .)
    S_ASSIGNMENT    reduce using rule 224 (function_designator -> string_function_call .)
    RW_TIMES        reduce using rule 224 (function_designator -> string_function_call .)


state 64

    (225) function_designator -> converter_function_call .

    S_UP_TO         reduce using rule 225 (function_designator -> converter_function_call .)
    S_POWER         reduce using rule 225 (function_designator -> converter_function_call .)
    S_TIMES         reduce using rule 225 (function_designator -> converter_function_call .)
    S_DIVIDE        reduce using rule 225 (function_designator -> converter_function_call .)
    RW_DIV          reduce using rule 225 (function_designator -> converter_function_call .)
    RW_MOD          reduce using rule 225 (function_designator -> converter_function_call .)
    RW_AND          reduce using rule 225 (function_designator -> converter_function_call .)
    S_PLUS          reduce using rule 225 (function_designator -> converter_function_call .)
    S_MINUS         reduce using rule 225 (function_designator -> converter_function_call .)
    RW_OR           reduce using rule 225 (function_designator -> converter_function_call .)
    RW_XOR          reduce using rule 225 (function_designator -> converter_function_call .)
    S_EQUAL         reduce using rule 225 (function_designator -> converter_function_call .)
    S_NOT_EQUAL     reduce using rule 225 (function_designator -> converter_function_call .)
    S_LESS_THAN_EQUAL reduce using rule 225 (function_designator -> converter_function_call .)
    S_GREATER_THAN_EQUAL reduce using rule 225 (function_designator -> converter_function_call .)
    S_LESS_THAN     reduce using rule 225 (function_designator -> converter_function_call .)
    S_GREATER_THAN  reduce using rule 225 (function_designator -> converter_function_call .)
    S_ELEMENT_OF    reduce using rule 225 (function_designator -> converter_function_call .)
    RW_EQ           reduce using rule 225 (function_designator -> converter_function_call .)
    RW_NEQ          reduce using rule 225 (function_designator -> converter_function_call .)
    S_LEFT_SQUARE_BRACKET reduce using rule 225 (function_designator -> converter_function_call .)
    S_DOT           reduce using rule 225 (function_designator -> converter_function_call .)
    S_RIGHT_BRACKET reduce using rule 225 (function_designator -> converter_function_call .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 225 (function_designator -> converter_function_call .)
    S_COMMA         reduce using rule 225 (function_designator -> converter_function_call .)
    RW_KAMUS        reduce using rule 225 (function_designator -> converter_function_call .)
    RW_PROCEDURE    reduce using rule 225 (function_designator -> converter_function_call .)
    RW_FUNCTION     reduce using rule 225 (function_designator -> converter_function_call .)
    $end            reduce using rule 225 (function_designator -> converter_function_call .)
    DEDENT          reduce using rule 225 (function_designator -> converter_function_call .)
    S_SEMI_COLON    reduce using rule 225 (function_designator -> converter_function_call .)
    IDENTIFIER      reduce using rule 225 (function_designator -> converter_function_call .)
    RW_TYPE         reduce using rule 225 (function_designator -> converter_function_call .)
    S_RETURN        reduce using rule 225 (function_designator -> converter_function_call .)
    RW_IF           reduce using rule 225 (function_designator -> converter_function_call .)
    RW_DEPEND       reduce using rule 225 (function_designator -> converter_function_call .)
    RW_WHILE        reduce using rule 225 (function_designator -> converter_function_call .)
    RW_ITERATE      reduce using rule 225 (function_designator -> converter_function_call .)
    RW_REPEAT       reduce using rule 225 (function_designator -> converter_function_call .)
    RW_INPUT        reduce using rule 225 (function_designator -> converter_function_call .)
    RW_OUTPUT       reduce using rule 225 (function_designator -> converter_function_call .)
    RW_ABS          reduce using rule 225 (function_designator -> converter_function_call .)
    RW_SIN          reduce using rule 225 (function_designator -> converter_function_call .)
    RW_COS          reduce using rule 225 (function_designator -> converter_function_call .)
    RW_TAN          reduce using rule 225 (function_designator -> converter_function_call .)
    RW_SUCC         reduce using rule 225 (function_designator -> converter_function_call .)
    RW_PRED         reduce using rule 225 (function_designator -> converter_function_call .)
    RW_AWAL         reduce using rule 225 (function_designator -> converter_function_call .)
    RW_AKHIR        reduce using rule 225 (function_designator -> converter_function_call .)
    RW_FIRSTCHAR    reduce using rule 225 (function_designator -> converter_function_call .)
    RW_LASTCHAR     reduce using rule 225 (function_designator -> converter_function_call .)
    RW_LONG         reduce using rule 225 (function_designator -> converter_function_call .)
    RW_ISKOSONG     reduce using rule 225 (function_designator -> converter_function_call .)
    RW_INTEGERTOREAL reduce using rule 225 (function_designator -> converter_function_call .)
    RW_REALTOINTEGER reduce using rule 225 (function_designator -> converter_function_call .)
    RW_THEN         reduce using rule 225 (function_designator -> converter_function_call .)
    RW_DO           reduce using rule 225 (function_designator -> converter_function_call .)
    INDENT          reduce using rule 225 (function_designator -> converter_function_call .)
    S_COLON         reduce using rule 225 (function_designator -> converter_function_call .)
    S_ASSIGNMENT    reduce using rule 225 (function_designator -> converter_function_call .)
    RW_TIMES        reduce using rule 225 (function_designator -> converter_function_call .)


state 65

    (181) expression -> additive_expression .
    (191) additive_expression -> additive_expression . additive_op multiplicative_expression
    (193) additive_op -> . S_PLUS
    (194) additive_op -> . S_MINUS
    (195) additive_op -> . RW_OR
    (196) additive_op -> . RW_XOR

    S_EQUAL         reduce using rule 181 (expression -> additive_expression .)
    S_NOT_EQUAL     reduce using rule 181 (expression -> additive_expression .)
    S_LESS_THAN_EQUAL reduce using rule 181 (expression -> additive_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 181 (expression -> additive_expression .)
    S_LESS_THAN     reduce using rule 181 (expression -> additive_expression .)
    S_GREATER_THAN  reduce using rule 181 (expression -> additive_expression .)
    S_ELEMENT_OF    reduce using rule 181 (expression -> additive_expression .)
    RW_EQ           reduce using rule 181 (expression -> additive_expression .)
    RW_NEQ          reduce using rule 181 (expression -> additive_expression .)
    S_UP_TO         reduce using rule 181 (expression -> additive_expression .)
    S_RIGHT_BRACKET reduce using rule 181 (expression -> additive_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 181 (expression -> additive_expression .)
    S_COMMA         reduce using rule 181 (expression -> additive_expression .)
    RW_KAMUS        reduce using rule 181 (expression -> additive_expression .)
    RW_PROCEDURE    reduce using rule 181 (expression -> additive_expression .)
    RW_FUNCTION     reduce using rule 181 (expression -> additive_expression .)
    $end            reduce using rule 181 (expression -> additive_expression .)
    DEDENT          reduce using rule 181 (expression -> additive_expression .)
    S_SEMI_COLON    reduce using rule 181 (expression -> additive_expression .)
    IDENTIFIER      reduce using rule 181 (expression -> additive_expression .)
    RW_TYPE         reduce using rule 181 (expression -> additive_expression .)
    S_RETURN        reduce using rule 181 (expression -> additive_expression .)
    RW_IF           reduce using rule 181 (expression -> additive_expression .)
    RW_DEPEND       reduce using rule 181 (expression -> additive_expression .)
    RW_WHILE        reduce using rule 181 (expression -> additive_expression .)
    RW_ITERATE      reduce using rule 181 (expression -> additive_expression .)
    RW_REPEAT       reduce using rule 181 (expression -> additive_expression .)
    RW_INPUT        reduce using rule 181 (expression -> additive_expression .)
    RW_OUTPUT       reduce using rule 181 (expression -> additive_expression .)
    RW_ABS          reduce using rule 181 (expression -> additive_expression .)
    RW_SIN          reduce using rule 181 (expression -> additive_expression .)
    RW_COS          reduce using rule 181 (expression -> additive_expression .)
    RW_TAN          reduce using rule 181 (expression -> additive_expression .)
    RW_SUCC         reduce using rule 181 (expression -> additive_expression .)
    RW_PRED         reduce using rule 181 (expression -> additive_expression .)
    RW_AWAL         reduce using rule 181 (expression -> additive_expression .)
    RW_AKHIR        reduce using rule 181 (expression -> additive_expression .)
    RW_FIRSTCHAR    reduce using rule 181 (expression -> additive_expression .)
    RW_LASTCHAR     reduce using rule 181 (expression -> additive_expression .)
    RW_LONG         reduce using rule 181 (expression -> additive_expression .)
    RW_ISKOSONG     reduce using rule 181 (expression -> additive_expression .)
    RW_INTEGERTOREAL reduce using rule 181 (expression -> additive_expression .)
    RW_REALTOINTEGER reduce using rule 181 (expression -> additive_expression .)
    RW_THEN         reduce using rule 181 (expression -> additive_expression .)
    RW_DO           reduce using rule 181 (expression -> additive_expression .)
    INDENT          reduce using rule 181 (expression -> additive_expression .)
    S_COLON         reduce using rule 181 (expression -> additive_expression .)
    S_PLUS          shift and go to state 175
    S_MINUS         shift and go to state 176
    RW_OR           shift and go to state 177
    RW_XOR          shift and go to state 178

    additive_op                    shift and go to state 174

state 66

    (167) string_char_constant -> string_constant .

    S_UP_TO         reduce using rule 167 (string_char_constant -> string_constant .)
    S_POWER         reduce using rule 167 (string_char_constant -> string_constant .)
    S_TIMES         reduce using rule 167 (string_char_constant -> string_constant .)
    S_DIVIDE        reduce using rule 167 (string_char_constant -> string_constant .)
    RW_DIV          reduce using rule 167 (string_char_constant -> string_constant .)
    RW_MOD          reduce using rule 167 (string_char_constant -> string_constant .)
    RW_AND          reduce using rule 167 (string_char_constant -> string_constant .)
    S_PLUS          reduce using rule 167 (string_char_constant -> string_constant .)
    S_MINUS         reduce using rule 167 (string_char_constant -> string_constant .)
    RW_OR           reduce using rule 167 (string_char_constant -> string_constant .)
    RW_XOR          reduce using rule 167 (string_char_constant -> string_constant .)
    S_EQUAL         reduce using rule 167 (string_char_constant -> string_constant .)
    S_NOT_EQUAL     reduce using rule 167 (string_char_constant -> string_constant .)
    S_LESS_THAN_EQUAL reduce using rule 167 (string_char_constant -> string_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 167 (string_char_constant -> string_constant .)
    S_LESS_THAN     reduce using rule 167 (string_char_constant -> string_constant .)
    S_GREATER_THAN  reduce using rule 167 (string_char_constant -> string_constant .)
    S_ELEMENT_OF    reduce using rule 167 (string_char_constant -> string_constant .)
    RW_EQ           reduce using rule 167 (string_char_constant -> string_constant .)
    RW_NEQ          reduce using rule 167 (string_char_constant -> string_constant .)
    S_RIGHT_BRACKET reduce using rule 167 (string_char_constant -> string_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 167 (string_char_constant -> string_constant .)
    S_COMMA         reduce using rule 167 (string_char_constant -> string_constant .)
    RW_KAMUS        reduce using rule 167 (string_char_constant -> string_constant .)
    RW_PROCEDURE    reduce using rule 167 (string_char_constant -> string_constant .)
    RW_FUNCTION     reduce using rule 167 (string_char_constant -> string_constant .)
    $end            reduce using rule 167 (string_char_constant -> string_constant .)
    DEDENT          reduce using rule 167 (string_char_constant -> string_constant .)
    S_SEMI_COLON    reduce using rule 167 (string_char_constant -> string_constant .)
    IDENTIFIER      reduce using rule 167 (string_char_constant -> string_constant .)
    RW_TYPE         reduce using rule 167 (string_char_constant -> string_constant .)
    S_RETURN        reduce using rule 167 (string_char_constant -> string_constant .)
    RW_IF           reduce using rule 167 (string_char_constant -> string_constant .)
    RW_DEPEND       reduce using rule 167 (string_char_constant -> string_constant .)
    RW_WHILE        reduce using rule 167 (string_char_constant -> string_constant .)
    RW_ITERATE      reduce using rule 167 (string_char_constant -> string_constant .)
    RW_REPEAT       reduce using rule 167 (string_char_constant -> string_constant .)
    RW_INPUT        reduce using rule 167 (string_char_constant -> string_constant .)
    RW_OUTPUT       reduce using rule 167 (string_char_constant -> string_constant .)
    RW_ABS          reduce using rule 167 (string_char_constant -> string_constant .)
    RW_SIN          reduce using rule 167 (string_char_constant -> string_constant .)
    RW_COS          reduce using rule 167 (string_char_constant -> string_constant .)
    RW_TAN          reduce using rule 167 (string_char_constant -> string_constant .)
    RW_SUCC         reduce using rule 167 (string_char_constant -> string_constant .)
    RW_PRED         reduce using rule 167 (string_char_constant -> string_constant .)
    RW_AWAL         reduce using rule 167 (string_char_constant -> string_constant .)
    RW_AKHIR        reduce using rule 167 (string_char_constant -> string_constant .)
    RW_FIRSTCHAR    reduce using rule 167 (string_char_constant -> string_constant .)
    RW_LASTCHAR     reduce using rule 167 (string_char_constant -> string_constant .)
    RW_LONG         reduce using rule 167 (string_char_constant -> string_constant .)
    RW_ISKOSONG     reduce using rule 167 (string_char_constant -> string_constant .)
    RW_INTEGERTOREAL reduce using rule 167 (string_char_constant -> string_constant .)
    RW_REALTOINTEGER reduce using rule 167 (string_char_constant -> string_constant .)
    RW_THEN         reduce using rule 167 (string_char_constant -> string_constant .)
    RW_DO           reduce using rule 167 (string_char_constant -> string_constant .)
    INDENT          reduce using rule 167 (string_char_constant -> string_constant .)
    S_COLON         reduce using rule 167 (string_char_constant -> string_constant .)
    RW_CONSTANT     reduce using rule 167 (string_char_constant -> string_constant .)


state 67

    (168) string_char_constant -> char_constant .

    S_UP_TO         reduce using rule 168 (string_char_constant -> char_constant .)
    S_POWER         reduce using rule 168 (string_char_constant -> char_constant .)
    S_TIMES         reduce using rule 168 (string_char_constant -> char_constant .)
    S_DIVIDE        reduce using rule 168 (string_char_constant -> char_constant .)
    RW_DIV          reduce using rule 168 (string_char_constant -> char_constant .)
    RW_MOD          reduce using rule 168 (string_char_constant -> char_constant .)
    RW_AND          reduce using rule 168 (string_char_constant -> char_constant .)
    S_PLUS          reduce using rule 168 (string_char_constant -> char_constant .)
    S_MINUS         reduce using rule 168 (string_char_constant -> char_constant .)
    RW_OR           reduce using rule 168 (string_char_constant -> char_constant .)
    RW_XOR          reduce using rule 168 (string_char_constant -> char_constant .)
    S_EQUAL         reduce using rule 168 (string_char_constant -> char_constant .)
    S_NOT_EQUAL     reduce using rule 168 (string_char_constant -> char_constant .)
    S_LESS_THAN_EQUAL reduce using rule 168 (string_char_constant -> char_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 168 (string_char_constant -> char_constant .)
    S_LESS_THAN     reduce using rule 168 (string_char_constant -> char_constant .)
    S_GREATER_THAN  reduce using rule 168 (string_char_constant -> char_constant .)
    S_ELEMENT_OF    reduce using rule 168 (string_char_constant -> char_constant .)
    RW_EQ           reduce using rule 168 (string_char_constant -> char_constant .)
    RW_NEQ          reduce using rule 168 (string_char_constant -> char_constant .)
    S_RIGHT_BRACKET reduce using rule 168 (string_char_constant -> char_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 168 (string_char_constant -> char_constant .)
    S_COMMA         reduce using rule 168 (string_char_constant -> char_constant .)
    RW_KAMUS        reduce using rule 168 (string_char_constant -> char_constant .)
    RW_PROCEDURE    reduce using rule 168 (string_char_constant -> char_constant .)
    RW_FUNCTION     reduce using rule 168 (string_char_constant -> char_constant .)
    $end            reduce using rule 168 (string_char_constant -> char_constant .)
    DEDENT          reduce using rule 168 (string_char_constant -> char_constant .)
    S_SEMI_COLON    reduce using rule 168 (string_char_constant -> char_constant .)
    IDENTIFIER      reduce using rule 168 (string_char_constant -> char_constant .)
    RW_TYPE         reduce using rule 168 (string_char_constant -> char_constant .)
    S_RETURN        reduce using rule 168 (string_char_constant -> char_constant .)
    RW_IF           reduce using rule 168 (string_char_constant -> char_constant .)
    RW_DEPEND       reduce using rule 168 (string_char_constant -> char_constant .)
    RW_WHILE        reduce using rule 168 (string_char_constant -> char_constant .)
    RW_ITERATE      reduce using rule 168 (string_char_constant -> char_constant .)
    RW_REPEAT       reduce using rule 168 (string_char_constant -> char_constant .)
    RW_INPUT        reduce using rule 168 (string_char_constant -> char_constant .)
    RW_OUTPUT       reduce using rule 168 (string_char_constant -> char_constant .)
    RW_ABS          reduce using rule 168 (string_char_constant -> char_constant .)
    RW_SIN          reduce using rule 168 (string_char_constant -> char_constant .)
    RW_COS          reduce using rule 168 (string_char_constant -> char_constant .)
    RW_TAN          reduce using rule 168 (string_char_constant -> char_constant .)
    RW_SUCC         reduce using rule 168 (string_char_constant -> char_constant .)
    RW_PRED         reduce using rule 168 (string_char_constant -> char_constant .)
    RW_AWAL         reduce using rule 168 (string_char_constant -> char_constant .)
    RW_AKHIR        reduce using rule 168 (string_char_constant -> char_constant .)
    RW_FIRSTCHAR    reduce using rule 168 (string_char_constant -> char_constant .)
    RW_LASTCHAR     reduce using rule 168 (string_char_constant -> char_constant .)
    RW_LONG         reduce using rule 168 (string_char_constant -> char_constant .)
    RW_ISKOSONG     reduce using rule 168 (string_char_constant -> char_constant .)
    RW_INTEGERTOREAL reduce using rule 168 (string_char_constant -> char_constant .)
    RW_REALTOINTEGER reduce using rule 168 (string_char_constant -> char_constant .)
    RW_THEN         reduce using rule 168 (string_char_constant -> char_constant .)
    RW_DO           reduce using rule 168 (string_char_constant -> char_constant .)
    INDENT          reduce using rule 168 (string_char_constant -> char_constant .)
    S_COLON         reduce using rule 168 (string_char_constant -> char_constant .)
    RW_CONSTANT     reduce using rule 168 (string_char_constant -> char_constant .)


state 68

    (163) non_string_constant -> integer_constant .

    S_UP_TO         reduce using rule 163 (non_string_constant -> integer_constant .)
    S_POWER         reduce using rule 163 (non_string_constant -> integer_constant .)
    S_TIMES         reduce using rule 163 (non_string_constant -> integer_constant .)
    S_DIVIDE        reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_DIV          reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_MOD          reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_AND          reduce using rule 163 (non_string_constant -> integer_constant .)
    S_PLUS          reduce using rule 163 (non_string_constant -> integer_constant .)
    S_MINUS         reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_OR           reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_XOR          reduce using rule 163 (non_string_constant -> integer_constant .)
    S_EQUAL         reduce using rule 163 (non_string_constant -> integer_constant .)
    S_NOT_EQUAL     reduce using rule 163 (non_string_constant -> integer_constant .)
    S_LESS_THAN_EQUAL reduce using rule 163 (non_string_constant -> integer_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 163 (non_string_constant -> integer_constant .)
    S_LESS_THAN     reduce using rule 163 (non_string_constant -> integer_constant .)
    S_GREATER_THAN  reduce using rule 163 (non_string_constant -> integer_constant .)
    S_ELEMENT_OF    reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_EQ           reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_NEQ          reduce using rule 163 (non_string_constant -> integer_constant .)
    S_RIGHT_BRACKET reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_KAMUS        reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_PROCEDURE    reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_FUNCTION     reduce using rule 163 (non_string_constant -> integer_constant .)
    $end            reduce using rule 163 (non_string_constant -> integer_constant .)
    DEDENT          reduce using rule 163 (non_string_constant -> integer_constant .)
    S_SEMI_COLON    reduce using rule 163 (non_string_constant -> integer_constant .)
    S_COMMA         reduce using rule 163 (non_string_constant -> integer_constant .)
    IDENTIFIER      reduce using rule 163 (non_string_constant -> integer_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_TYPE         reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_CONSTANT     reduce using rule 163 (non_string_constant -> integer_constant .)
    S_RETURN        reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_IF           reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_DEPEND       reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_WHILE        reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_ITERATE      reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_REPEAT       reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_INPUT        reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_OUTPUT       reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_ABS          reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_SIN          reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_COS          reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_TAN          reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_SUCC         reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_PRED         reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_AWAL         reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_AKHIR        reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_FIRSTCHAR    reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_LASTCHAR     reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_LONG         reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_ISKOSONG     reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_INTEGERTOREAL reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_REALTOINTEGER reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_THEN         reduce using rule 163 (non_string_constant -> integer_constant .)
    RW_DO           reduce using rule 163 (non_string_constant -> integer_constant .)
    INDENT          reduce using rule 163 (non_string_constant -> integer_constant .)
    S_COLON         reduce using rule 163 (non_string_constant -> integer_constant .)


state 69

    (164) non_string_constant -> real_constant .

    S_UP_TO         reduce using rule 164 (non_string_constant -> real_constant .)
    S_POWER         reduce using rule 164 (non_string_constant -> real_constant .)
    S_TIMES         reduce using rule 164 (non_string_constant -> real_constant .)
    S_DIVIDE        reduce using rule 164 (non_string_constant -> real_constant .)
    RW_DIV          reduce using rule 164 (non_string_constant -> real_constant .)
    RW_MOD          reduce using rule 164 (non_string_constant -> real_constant .)
    RW_AND          reduce using rule 164 (non_string_constant -> real_constant .)
    S_PLUS          reduce using rule 164 (non_string_constant -> real_constant .)
    S_MINUS         reduce using rule 164 (non_string_constant -> real_constant .)
    RW_OR           reduce using rule 164 (non_string_constant -> real_constant .)
    RW_XOR          reduce using rule 164 (non_string_constant -> real_constant .)
    S_EQUAL         reduce using rule 164 (non_string_constant -> real_constant .)
    S_NOT_EQUAL     reduce using rule 164 (non_string_constant -> real_constant .)
    S_LESS_THAN_EQUAL reduce using rule 164 (non_string_constant -> real_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 164 (non_string_constant -> real_constant .)
    S_LESS_THAN     reduce using rule 164 (non_string_constant -> real_constant .)
    S_GREATER_THAN  reduce using rule 164 (non_string_constant -> real_constant .)
    S_ELEMENT_OF    reduce using rule 164 (non_string_constant -> real_constant .)
    RW_EQ           reduce using rule 164 (non_string_constant -> real_constant .)
    RW_NEQ          reduce using rule 164 (non_string_constant -> real_constant .)
    S_RIGHT_BRACKET reduce using rule 164 (non_string_constant -> real_constant .)
    RW_KAMUS        reduce using rule 164 (non_string_constant -> real_constant .)
    RW_PROCEDURE    reduce using rule 164 (non_string_constant -> real_constant .)
    RW_FUNCTION     reduce using rule 164 (non_string_constant -> real_constant .)
    $end            reduce using rule 164 (non_string_constant -> real_constant .)
    DEDENT          reduce using rule 164 (non_string_constant -> real_constant .)
    S_SEMI_COLON    reduce using rule 164 (non_string_constant -> real_constant .)
    S_COMMA         reduce using rule 164 (non_string_constant -> real_constant .)
    IDENTIFIER      reduce using rule 164 (non_string_constant -> real_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 164 (non_string_constant -> real_constant .)
    RW_TYPE         reduce using rule 164 (non_string_constant -> real_constant .)
    RW_CONSTANT     reduce using rule 164 (non_string_constant -> real_constant .)
    S_RETURN        reduce using rule 164 (non_string_constant -> real_constant .)
    RW_IF           reduce using rule 164 (non_string_constant -> real_constant .)
    RW_DEPEND       reduce using rule 164 (non_string_constant -> real_constant .)
    RW_WHILE        reduce using rule 164 (non_string_constant -> real_constant .)
    RW_ITERATE      reduce using rule 164 (non_string_constant -> real_constant .)
    RW_REPEAT       reduce using rule 164 (non_string_constant -> real_constant .)
    RW_INPUT        reduce using rule 164 (non_string_constant -> real_constant .)
    RW_OUTPUT       reduce using rule 164 (non_string_constant -> real_constant .)
    RW_ABS          reduce using rule 164 (non_string_constant -> real_constant .)
    RW_SIN          reduce using rule 164 (non_string_constant -> real_constant .)
    RW_COS          reduce using rule 164 (non_string_constant -> real_constant .)
    RW_TAN          reduce using rule 164 (non_string_constant -> real_constant .)
    RW_SUCC         reduce using rule 164 (non_string_constant -> real_constant .)
    RW_PRED         reduce using rule 164 (non_string_constant -> real_constant .)
    RW_AWAL         reduce using rule 164 (non_string_constant -> real_constant .)
    RW_AKHIR        reduce using rule 164 (non_string_constant -> real_constant .)
    RW_FIRSTCHAR    reduce using rule 164 (non_string_constant -> real_constant .)
    RW_LASTCHAR     reduce using rule 164 (non_string_constant -> real_constant .)
    RW_LONG         reduce using rule 164 (non_string_constant -> real_constant .)
    RW_ISKOSONG     reduce using rule 164 (non_string_constant -> real_constant .)
    RW_INTEGERTOREAL reduce using rule 164 (non_string_constant -> real_constant .)
    RW_REALTOINTEGER reduce using rule 164 (non_string_constant -> real_constant .)
    RW_THEN         reduce using rule 164 (non_string_constant -> real_constant .)
    RW_DO           reduce using rule 164 (non_string_constant -> real_constant .)
    INDENT          reduce using rule 164 (non_string_constant -> real_constant .)
    S_COLON         reduce using rule 164 (non_string_constant -> real_constant .)


state 70

    (159) sign -> S_PLUS .
    (208) unary_op -> S_PLUS .

  ! reduce/reduce conflict for L_INTEGER_NUMBER resolved using rule 159 (sign -> S_PLUS .)
  ! reduce/reduce conflict for L_REAL_NUMBER resolved using rule 159 (sign -> S_PLUS .)
    L_INTEGER_NUMBER reduce using rule 159 (sign -> S_PLUS .)
    L_REAL_NUMBER   reduce using rule 159 (sign -> S_PLUS .)
    S_PLUS          reduce using rule 208 (unary_op -> S_PLUS .)
    S_MINUS         reduce using rule 208 (unary_op -> S_PLUS .)
    RW_NOT          reduce using rule 208 (unary_op -> S_PLUS .)
    S_LEFT_BRACKET  reduce using rule 208 (unary_op -> S_PLUS .)
    S_LEFT_SQUARE_BRACKET reduce using rule 208 (unary_op -> S_PLUS .)
    IDENTIFIER      reduce using rule 208 (unary_op -> S_PLUS .)
    L_BOOLEAN_TRUE  reduce using rule 208 (unary_op -> S_PLUS .)
    L_BOOLEAN_FALSE reduce using rule 208 (unary_op -> S_PLUS .)
    L_NIL           reduce using rule 208 (unary_op -> S_PLUS .)
    L_STRING        reduce using rule 208 (unary_op -> S_PLUS .)
    L_CHARACTER     reduce using rule 208 (unary_op -> S_PLUS .)
    RW_ABS          reduce using rule 208 (unary_op -> S_PLUS .)
    RW_SIN          reduce using rule 208 (unary_op -> S_PLUS .)
    RW_COS          reduce using rule 208 (unary_op -> S_PLUS .)
    RW_TAN          reduce using rule 208 (unary_op -> S_PLUS .)
    RW_SUCC         reduce using rule 208 (unary_op -> S_PLUS .)
    RW_PRED         reduce using rule 208 (unary_op -> S_PLUS .)
    RW_AWAL         reduce using rule 208 (unary_op -> S_PLUS .)
    RW_AKHIR        reduce using rule 208 (unary_op -> S_PLUS .)
    RW_FIRSTCHAR    reduce using rule 208 (unary_op -> S_PLUS .)
    RW_LASTCHAR     reduce using rule 208 (unary_op -> S_PLUS .)
    RW_LONG         reduce using rule 208 (unary_op -> S_PLUS .)
    RW_ISKOSONG     reduce using rule 208 (unary_op -> S_PLUS .)
    RW_INTEGERTOREAL reduce using rule 208 (unary_op -> S_PLUS .)
    RW_REALTOINTEGER reduce using rule 208 (unary_op -> S_PLUS .)

  ! L_INTEGER_NUMBER [ reduce using rule 208 (unary_op -> S_PLUS .) ]
  ! L_REAL_NUMBER   [ reduce using rule 208 (unary_op -> S_PLUS .) ]


state 71

    (160) sign -> S_MINUS .
    (209) unary_op -> S_MINUS .

  ! reduce/reduce conflict for L_INTEGER_NUMBER resolved using rule 160 (sign -> S_MINUS .)
  ! reduce/reduce conflict for L_REAL_NUMBER resolved using rule 160 (sign -> S_MINUS .)
    L_INTEGER_NUMBER reduce using rule 160 (sign -> S_MINUS .)
    L_REAL_NUMBER   reduce using rule 160 (sign -> S_MINUS .)
    S_PLUS          reduce using rule 209 (unary_op -> S_MINUS .)
    S_MINUS         reduce using rule 209 (unary_op -> S_MINUS .)
    RW_NOT          reduce using rule 209 (unary_op -> S_MINUS .)
    S_LEFT_BRACKET  reduce using rule 209 (unary_op -> S_MINUS .)
    S_LEFT_SQUARE_BRACKET reduce using rule 209 (unary_op -> S_MINUS .)
    IDENTIFIER      reduce using rule 209 (unary_op -> S_MINUS .)
    L_BOOLEAN_TRUE  reduce using rule 209 (unary_op -> S_MINUS .)
    L_BOOLEAN_FALSE reduce using rule 209 (unary_op -> S_MINUS .)
    L_NIL           reduce using rule 209 (unary_op -> S_MINUS .)
    L_STRING        reduce using rule 209 (unary_op -> S_MINUS .)
    L_CHARACTER     reduce using rule 209 (unary_op -> S_MINUS .)
    RW_ABS          reduce using rule 209 (unary_op -> S_MINUS .)
    RW_SIN          reduce using rule 209 (unary_op -> S_MINUS .)
    RW_COS          reduce using rule 209 (unary_op -> S_MINUS .)
    RW_TAN          reduce using rule 209 (unary_op -> S_MINUS .)
    RW_SUCC         reduce using rule 209 (unary_op -> S_MINUS .)
    RW_PRED         reduce using rule 209 (unary_op -> S_MINUS .)
    RW_AWAL         reduce using rule 209 (unary_op -> S_MINUS .)
    RW_AKHIR        reduce using rule 209 (unary_op -> S_MINUS .)
    RW_FIRSTCHAR    reduce using rule 209 (unary_op -> S_MINUS .)
    RW_LASTCHAR     reduce using rule 209 (unary_op -> S_MINUS .)
    RW_LONG         reduce using rule 209 (unary_op -> S_MINUS .)
    RW_ISKOSONG     reduce using rule 209 (unary_op -> S_MINUS .)
    RW_INTEGERTOREAL reduce using rule 209 (unary_op -> S_MINUS .)
    RW_REALTOINTEGER reduce using rule 209 (unary_op -> S_MINUS .)

  ! L_INTEGER_NUMBER [ reduce using rule 209 (unary_op -> S_MINUS .) ]
  ! L_REAL_NUMBER   [ reduce using rule 209 (unary_op -> S_MINUS .) ]


state 72

    (161) boolean_constant -> L_BOOLEAN_TRUE .

    S_UP_TO         reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_POWER         reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_TIMES         reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_DIVIDE        reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_DIV          reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_MOD          reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_AND          reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_PLUS          reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_MINUS         reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_OR           reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_XOR          reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_EQUAL         reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_NOT_EQUAL     reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_LESS_THAN_EQUAL reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_GREATER_THAN_EQUAL reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_LESS_THAN     reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_GREATER_THAN  reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_ELEMENT_OF    reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_EQ           reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_NEQ          reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_RIGHT_BRACKET reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_COMMA         reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_KAMUS        reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_PROCEDURE    reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_FUNCTION     reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    $end            reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    DEDENT          reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_SEMI_COLON    reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    IDENTIFIER      reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_TYPE         reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_RETURN        reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_IF           reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_DEPEND       reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_WHILE        reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_ITERATE      reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_REPEAT       reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_INPUT        reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_OUTPUT       reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_ABS          reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_SIN          reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_COS          reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_TAN          reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_SUCC         reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_PRED         reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_AWAL         reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_AKHIR        reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_FIRSTCHAR    reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_LASTCHAR     reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_LONG         reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_ISKOSONG     reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_INTEGERTOREAL reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_REALTOINTEGER reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_THEN         reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_DO           reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    INDENT          reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    S_COLON         reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)
    RW_CONSTANT     reduce using rule 161 (boolean_constant -> L_BOOLEAN_TRUE .)


state 73

    (162) boolean_constant -> L_BOOLEAN_FALSE .

    S_UP_TO         reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_POWER         reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_TIMES         reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_DIVIDE        reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_DIV          reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_MOD          reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_AND          reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_PLUS          reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_MINUS         reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_OR           reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_XOR          reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_EQUAL         reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_NOT_EQUAL     reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_LESS_THAN_EQUAL reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_GREATER_THAN_EQUAL reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_LESS_THAN     reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_GREATER_THAN  reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_ELEMENT_OF    reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_EQ           reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_NEQ          reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_RIGHT_BRACKET reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_COMMA         reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_KAMUS        reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_PROCEDURE    reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_FUNCTION     reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    $end            reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    DEDENT          reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_SEMI_COLON    reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    IDENTIFIER      reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_TYPE         reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_RETURN        reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_IF           reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_DEPEND       reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_WHILE        reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_ITERATE      reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_REPEAT       reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_INPUT        reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_OUTPUT       reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_ABS          reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_SIN          reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_COS          reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_TAN          reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_SUCC         reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_PRED         reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_AWAL         reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_AKHIR        reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_FIRSTCHAR    reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_LASTCHAR     reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_LONG         reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_ISKOSONG     reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_INTEGERTOREAL reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_REALTOINTEGER reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_THEN         reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_DO           reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    INDENT          reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    S_COLON         reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)
    RW_CONSTANT     reduce using rule 162 (boolean_constant -> L_BOOLEAN_FALSE .)


state 74

    (171) nil_constant -> L_NIL .

    S_UP_TO         reduce using rule 171 (nil_constant -> L_NIL .)
    S_POWER         reduce using rule 171 (nil_constant -> L_NIL .)
    S_TIMES         reduce using rule 171 (nil_constant -> L_NIL .)
    S_DIVIDE        reduce using rule 171 (nil_constant -> L_NIL .)
    RW_DIV          reduce using rule 171 (nil_constant -> L_NIL .)
    RW_MOD          reduce using rule 171 (nil_constant -> L_NIL .)
    RW_AND          reduce using rule 171 (nil_constant -> L_NIL .)
    S_PLUS          reduce using rule 171 (nil_constant -> L_NIL .)
    S_MINUS         reduce using rule 171 (nil_constant -> L_NIL .)
    RW_OR           reduce using rule 171 (nil_constant -> L_NIL .)
    RW_XOR          reduce using rule 171 (nil_constant -> L_NIL .)
    S_EQUAL         reduce using rule 171 (nil_constant -> L_NIL .)
    S_NOT_EQUAL     reduce using rule 171 (nil_constant -> L_NIL .)
    S_LESS_THAN_EQUAL reduce using rule 171 (nil_constant -> L_NIL .)
    S_GREATER_THAN_EQUAL reduce using rule 171 (nil_constant -> L_NIL .)
    S_LESS_THAN     reduce using rule 171 (nil_constant -> L_NIL .)
    S_GREATER_THAN  reduce using rule 171 (nil_constant -> L_NIL .)
    S_ELEMENT_OF    reduce using rule 171 (nil_constant -> L_NIL .)
    RW_EQ           reduce using rule 171 (nil_constant -> L_NIL .)
    RW_NEQ          reduce using rule 171 (nil_constant -> L_NIL .)
    S_RIGHT_BRACKET reduce using rule 171 (nil_constant -> L_NIL .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 171 (nil_constant -> L_NIL .)
    S_COMMA         reduce using rule 171 (nil_constant -> L_NIL .)
    RW_KAMUS        reduce using rule 171 (nil_constant -> L_NIL .)
    RW_PROCEDURE    reduce using rule 171 (nil_constant -> L_NIL .)
    RW_FUNCTION     reduce using rule 171 (nil_constant -> L_NIL .)
    $end            reduce using rule 171 (nil_constant -> L_NIL .)
    DEDENT          reduce using rule 171 (nil_constant -> L_NIL .)
    S_SEMI_COLON    reduce using rule 171 (nil_constant -> L_NIL .)
    IDENTIFIER      reduce using rule 171 (nil_constant -> L_NIL .)
    RW_TYPE         reduce using rule 171 (nil_constant -> L_NIL .)
    S_RETURN        reduce using rule 171 (nil_constant -> L_NIL .)
    RW_IF           reduce using rule 171 (nil_constant -> L_NIL .)
    RW_DEPEND       reduce using rule 171 (nil_constant -> L_NIL .)
    RW_WHILE        reduce using rule 171 (nil_constant -> L_NIL .)
    RW_ITERATE      reduce using rule 171 (nil_constant -> L_NIL .)
    RW_REPEAT       reduce using rule 171 (nil_constant -> L_NIL .)
    RW_INPUT        reduce using rule 171 (nil_constant -> L_NIL .)
    RW_OUTPUT       reduce using rule 171 (nil_constant -> L_NIL .)
    RW_ABS          reduce using rule 171 (nil_constant -> L_NIL .)
    RW_SIN          reduce using rule 171 (nil_constant -> L_NIL .)
    RW_COS          reduce using rule 171 (nil_constant -> L_NIL .)
    RW_TAN          reduce using rule 171 (nil_constant -> L_NIL .)
    RW_SUCC         reduce using rule 171 (nil_constant -> L_NIL .)
    RW_PRED         reduce using rule 171 (nil_constant -> L_NIL .)
    RW_AWAL         reduce using rule 171 (nil_constant -> L_NIL .)
    RW_AKHIR        reduce using rule 171 (nil_constant -> L_NIL .)
    RW_FIRSTCHAR    reduce using rule 171 (nil_constant -> L_NIL .)
    RW_LASTCHAR     reduce using rule 171 (nil_constant -> L_NIL .)
    RW_LONG         reduce using rule 171 (nil_constant -> L_NIL .)
    RW_ISKOSONG     reduce using rule 171 (nil_constant -> L_NIL .)
    RW_INTEGERTOREAL reduce using rule 171 (nil_constant -> L_NIL .)
    RW_REALTOINTEGER reduce using rule 171 (nil_constant -> L_NIL .)
    RW_THEN         reduce using rule 171 (nil_constant -> L_NIL .)
    RW_DO           reduce using rule 171 (nil_constant -> L_NIL .)
    INDENT          reduce using rule 171 (nil_constant -> L_NIL .)
    S_COLON         reduce using rule 171 (nil_constant -> L_NIL .)
    RW_CONSTANT     reduce using rule 171 (nil_constant -> L_NIL .)


state 75

    (227) math_function_call -> abs_function .

    S_UP_TO         reduce using rule 227 (math_function_call -> abs_function .)
    S_POWER         reduce using rule 227 (math_function_call -> abs_function .)
    S_TIMES         reduce using rule 227 (math_function_call -> abs_function .)
    S_DIVIDE        reduce using rule 227 (math_function_call -> abs_function .)
    RW_DIV          reduce using rule 227 (math_function_call -> abs_function .)
    RW_MOD          reduce using rule 227 (math_function_call -> abs_function .)
    RW_AND          reduce using rule 227 (math_function_call -> abs_function .)
    S_PLUS          reduce using rule 227 (math_function_call -> abs_function .)
    S_MINUS         reduce using rule 227 (math_function_call -> abs_function .)
    RW_OR           reduce using rule 227 (math_function_call -> abs_function .)
    RW_XOR          reduce using rule 227 (math_function_call -> abs_function .)
    S_EQUAL         reduce using rule 227 (math_function_call -> abs_function .)
    S_NOT_EQUAL     reduce using rule 227 (math_function_call -> abs_function .)
    S_LESS_THAN_EQUAL reduce using rule 227 (math_function_call -> abs_function .)
    S_GREATER_THAN_EQUAL reduce using rule 227 (math_function_call -> abs_function .)
    S_LESS_THAN     reduce using rule 227 (math_function_call -> abs_function .)
    S_GREATER_THAN  reduce using rule 227 (math_function_call -> abs_function .)
    S_ELEMENT_OF    reduce using rule 227 (math_function_call -> abs_function .)
    RW_EQ           reduce using rule 227 (math_function_call -> abs_function .)
    RW_NEQ          reduce using rule 227 (math_function_call -> abs_function .)
    S_LEFT_SQUARE_BRACKET reduce using rule 227 (math_function_call -> abs_function .)
    S_DOT           reduce using rule 227 (math_function_call -> abs_function .)
    S_RIGHT_BRACKET reduce using rule 227 (math_function_call -> abs_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 227 (math_function_call -> abs_function .)
    S_COMMA         reduce using rule 227 (math_function_call -> abs_function .)
    RW_KAMUS        reduce using rule 227 (math_function_call -> abs_function .)
    RW_PROCEDURE    reduce using rule 227 (math_function_call -> abs_function .)
    RW_FUNCTION     reduce using rule 227 (math_function_call -> abs_function .)
    $end            reduce using rule 227 (math_function_call -> abs_function .)
    DEDENT          reduce using rule 227 (math_function_call -> abs_function .)
    S_SEMI_COLON    reduce using rule 227 (math_function_call -> abs_function .)
    IDENTIFIER      reduce using rule 227 (math_function_call -> abs_function .)
    RW_TYPE         reduce using rule 227 (math_function_call -> abs_function .)
    S_RETURN        reduce using rule 227 (math_function_call -> abs_function .)
    RW_IF           reduce using rule 227 (math_function_call -> abs_function .)
    RW_DEPEND       reduce using rule 227 (math_function_call -> abs_function .)
    RW_WHILE        reduce using rule 227 (math_function_call -> abs_function .)
    RW_ITERATE      reduce using rule 227 (math_function_call -> abs_function .)
    RW_REPEAT       reduce using rule 227 (math_function_call -> abs_function .)
    RW_INPUT        reduce using rule 227 (math_function_call -> abs_function .)
    RW_OUTPUT       reduce using rule 227 (math_function_call -> abs_function .)
    RW_ABS          reduce using rule 227 (math_function_call -> abs_function .)
    RW_SIN          reduce using rule 227 (math_function_call -> abs_function .)
    RW_COS          reduce using rule 227 (math_function_call -> abs_function .)
    RW_TAN          reduce using rule 227 (math_function_call -> abs_function .)
    RW_SUCC         reduce using rule 227 (math_function_call -> abs_function .)
    RW_PRED         reduce using rule 227 (math_function_call -> abs_function .)
    RW_AWAL         reduce using rule 227 (math_function_call -> abs_function .)
    RW_AKHIR        reduce using rule 227 (math_function_call -> abs_function .)
    RW_FIRSTCHAR    reduce using rule 227 (math_function_call -> abs_function .)
    RW_LASTCHAR     reduce using rule 227 (math_function_call -> abs_function .)
    RW_LONG         reduce using rule 227 (math_function_call -> abs_function .)
    RW_ISKOSONG     reduce using rule 227 (math_function_call -> abs_function .)
    RW_INTEGERTOREAL reduce using rule 227 (math_function_call -> abs_function .)
    RW_REALTOINTEGER reduce using rule 227 (math_function_call -> abs_function .)
    RW_THEN         reduce using rule 227 (math_function_call -> abs_function .)
    RW_DO           reduce using rule 227 (math_function_call -> abs_function .)
    INDENT          reduce using rule 227 (math_function_call -> abs_function .)
    S_COLON         reduce using rule 227 (math_function_call -> abs_function .)
    S_ASSIGNMENT    reduce using rule 227 (math_function_call -> abs_function .)
    RW_TIMES        reduce using rule 227 (math_function_call -> abs_function .)


state 76

    (228) math_function_call -> sin_function .

    S_UP_TO         reduce using rule 228 (math_function_call -> sin_function .)
    S_POWER         reduce using rule 228 (math_function_call -> sin_function .)
    S_TIMES         reduce using rule 228 (math_function_call -> sin_function .)
    S_DIVIDE        reduce using rule 228 (math_function_call -> sin_function .)
    RW_DIV          reduce using rule 228 (math_function_call -> sin_function .)
    RW_MOD          reduce using rule 228 (math_function_call -> sin_function .)
    RW_AND          reduce using rule 228 (math_function_call -> sin_function .)
    S_PLUS          reduce using rule 228 (math_function_call -> sin_function .)
    S_MINUS         reduce using rule 228 (math_function_call -> sin_function .)
    RW_OR           reduce using rule 228 (math_function_call -> sin_function .)
    RW_XOR          reduce using rule 228 (math_function_call -> sin_function .)
    S_EQUAL         reduce using rule 228 (math_function_call -> sin_function .)
    S_NOT_EQUAL     reduce using rule 228 (math_function_call -> sin_function .)
    S_LESS_THAN_EQUAL reduce using rule 228 (math_function_call -> sin_function .)
    S_GREATER_THAN_EQUAL reduce using rule 228 (math_function_call -> sin_function .)
    S_LESS_THAN     reduce using rule 228 (math_function_call -> sin_function .)
    S_GREATER_THAN  reduce using rule 228 (math_function_call -> sin_function .)
    S_ELEMENT_OF    reduce using rule 228 (math_function_call -> sin_function .)
    RW_EQ           reduce using rule 228 (math_function_call -> sin_function .)
    RW_NEQ          reduce using rule 228 (math_function_call -> sin_function .)
    S_LEFT_SQUARE_BRACKET reduce using rule 228 (math_function_call -> sin_function .)
    S_DOT           reduce using rule 228 (math_function_call -> sin_function .)
    S_RIGHT_BRACKET reduce using rule 228 (math_function_call -> sin_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 228 (math_function_call -> sin_function .)
    S_COMMA         reduce using rule 228 (math_function_call -> sin_function .)
    RW_KAMUS        reduce using rule 228 (math_function_call -> sin_function .)
    RW_PROCEDURE    reduce using rule 228 (math_function_call -> sin_function .)
    RW_FUNCTION     reduce using rule 228 (math_function_call -> sin_function .)
    $end            reduce using rule 228 (math_function_call -> sin_function .)
    DEDENT          reduce using rule 228 (math_function_call -> sin_function .)
    S_SEMI_COLON    reduce using rule 228 (math_function_call -> sin_function .)
    IDENTIFIER      reduce using rule 228 (math_function_call -> sin_function .)
    RW_TYPE         reduce using rule 228 (math_function_call -> sin_function .)
    S_RETURN        reduce using rule 228 (math_function_call -> sin_function .)
    RW_IF           reduce using rule 228 (math_function_call -> sin_function .)
    RW_DEPEND       reduce using rule 228 (math_function_call -> sin_function .)
    RW_WHILE        reduce using rule 228 (math_function_call -> sin_function .)
    RW_ITERATE      reduce using rule 228 (math_function_call -> sin_function .)
    RW_REPEAT       reduce using rule 228 (math_function_call -> sin_function .)
    RW_INPUT        reduce using rule 228 (math_function_call -> sin_function .)
    RW_OUTPUT       reduce using rule 228 (math_function_call -> sin_function .)
    RW_ABS          reduce using rule 228 (math_function_call -> sin_function .)
    RW_SIN          reduce using rule 228 (math_function_call -> sin_function .)
    RW_COS          reduce using rule 228 (math_function_call -> sin_function .)
    RW_TAN          reduce using rule 228 (math_function_call -> sin_function .)
    RW_SUCC         reduce using rule 228 (math_function_call -> sin_function .)
    RW_PRED         reduce using rule 228 (math_function_call -> sin_function .)
    RW_AWAL         reduce using rule 228 (math_function_call -> sin_function .)
    RW_AKHIR        reduce using rule 228 (math_function_call -> sin_function .)
    RW_FIRSTCHAR    reduce using rule 228 (math_function_call -> sin_function .)
    RW_LASTCHAR     reduce using rule 228 (math_function_call -> sin_function .)
    RW_LONG         reduce using rule 228 (math_function_call -> sin_function .)
    RW_ISKOSONG     reduce using rule 228 (math_function_call -> sin_function .)
    RW_INTEGERTOREAL reduce using rule 228 (math_function_call -> sin_function .)
    RW_REALTOINTEGER reduce using rule 228 (math_function_call -> sin_function .)
    RW_THEN         reduce using rule 228 (math_function_call -> sin_function .)
    RW_DO           reduce using rule 228 (math_function_call -> sin_function .)
    INDENT          reduce using rule 228 (math_function_call -> sin_function .)
    S_COLON         reduce using rule 228 (math_function_call -> sin_function .)
    S_ASSIGNMENT    reduce using rule 228 (math_function_call -> sin_function .)
    RW_TIMES        reduce using rule 228 (math_function_call -> sin_function .)


state 77

    (229) math_function_call -> cos_function .

    S_UP_TO         reduce using rule 229 (math_function_call -> cos_function .)
    S_POWER         reduce using rule 229 (math_function_call -> cos_function .)
    S_TIMES         reduce using rule 229 (math_function_call -> cos_function .)
    S_DIVIDE        reduce using rule 229 (math_function_call -> cos_function .)
    RW_DIV          reduce using rule 229 (math_function_call -> cos_function .)
    RW_MOD          reduce using rule 229 (math_function_call -> cos_function .)
    RW_AND          reduce using rule 229 (math_function_call -> cos_function .)
    S_PLUS          reduce using rule 229 (math_function_call -> cos_function .)
    S_MINUS         reduce using rule 229 (math_function_call -> cos_function .)
    RW_OR           reduce using rule 229 (math_function_call -> cos_function .)
    RW_XOR          reduce using rule 229 (math_function_call -> cos_function .)
    S_EQUAL         reduce using rule 229 (math_function_call -> cos_function .)
    S_NOT_EQUAL     reduce using rule 229 (math_function_call -> cos_function .)
    S_LESS_THAN_EQUAL reduce using rule 229 (math_function_call -> cos_function .)
    S_GREATER_THAN_EQUAL reduce using rule 229 (math_function_call -> cos_function .)
    S_LESS_THAN     reduce using rule 229 (math_function_call -> cos_function .)
    S_GREATER_THAN  reduce using rule 229 (math_function_call -> cos_function .)
    S_ELEMENT_OF    reduce using rule 229 (math_function_call -> cos_function .)
    RW_EQ           reduce using rule 229 (math_function_call -> cos_function .)
    RW_NEQ          reduce using rule 229 (math_function_call -> cos_function .)
    S_LEFT_SQUARE_BRACKET reduce using rule 229 (math_function_call -> cos_function .)
    S_DOT           reduce using rule 229 (math_function_call -> cos_function .)
    S_RIGHT_BRACKET reduce using rule 229 (math_function_call -> cos_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 229 (math_function_call -> cos_function .)
    S_COMMA         reduce using rule 229 (math_function_call -> cos_function .)
    RW_KAMUS        reduce using rule 229 (math_function_call -> cos_function .)
    RW_PROCEDURE    reduce using rule 229 (math_function_call -> cos_function .)
    RW_FUNCTION     reduce using rule 229 (math_function_call -> cos_function .)
    $end            reduce using rule 229 (math_function_call -> cos_function .)
    DEDENT          reduce using rule 229 (math_function_call -> cos_function .)
    S_SEMI_COLON    reduce using rule 229 (math_function_call -> cos_function .)
    IDENTIFIER      reduce using rule 229 (math_function_call -> cos_function .)
    RW_TYPE         reduce using rule 229 (math_function_call -> cos_function .)
    S_RETURN        reduce using rule 229 (math_function_call -> cos_function .)
    RW_IF           reduce using rule 229 (math_function_call -> cos_function .)
    RW_DEPEND       reduce using rule 229 (math_function_call -> cos_function .)
    RW_WHILE        reduce using rule 229 (math_function_call -> cos_function .)
    RW_ITERATE      reduce using rule 229 (math_function_call -> cos_function .)
    RW_REPEAT       reduce using rule 229 (math_function_call -> cos_function .)
    RW_INPUT        reduce using rule 229 (math_function_call -> cos_function .)
    RW_OUTPUT       reduce using rule 229 (math_function_call -> cos_function .)
    RW_ABS          reduce using rule 229 (math_function_call -> cos_function .)
    RW_SIN          reduce using rule 229 (math_function_call -> cos_function .)
    RW_COS          reduce using rule 229 (math_function_call -> cos_function .)
    RW_TAN          reduce using rule 229 (math_function_call -> cos_function .)
    RW_SUCC         reduce using rule 229 (math_function_call -> cos_function .)
    RW_PRED         reduce using rule 229 (math_function_call -> cos_function .)
    RW_AWAL         reduce using rule 229 (math_function_call -> cos_function .)
    RW_AKHIR        reduce using rule 229 (math_function_call -> cos_function .)
    RW_FIRSTCHAR    reduce using rule 229 (math_function_call -> cos_function .)
    RW_LASTCHAR     reduce using rule 229 (math_function_call -> cos_function .)
    RW_LONG         reduce using rule 229 (math_function_call -> cos_function .)
    RW_ISKOSONG     reduce using rule 229 (math_function_call -> cos_function .)
    RW_INTEGERTOREAL reduce using rule 229 (math_function_call -> cos_function .)
    RW_REALTOINTEGER reduce using rule 229 (math_function_call -> cos_function .)
    RW_THEN         reduce using rule 229 (math_function_call -> cos_function .)
    RW_DO           reduce using rule 229 (math_function_call -> cos_function .)
    INDENT          reduce using rule 229 (math_function_call -> cos_function .)
    S_COLON         reduce using rule 229 (math_function_call -> cos_function .)
    S_ASSIGNMENT    reduce using rule 229 (math_function_call -> cos_function .)
    RW_TIMES        reduce using rule 229 (math_function_call -> cos_function .)


state 78

    (230) math_function_call -> tan_function .

    S_UP_TO         reduce using rule 230 (math_function_call -> tan_function .)
    S_POWER         reduce using rule 230 (math_function_call -> tan_function .)
    S_TIMES         reduce using rule 230 (math_function_call -> tan_function .)
    S_DIVIDE        reduce using rule 230 (math_function_call -> tan_function .)
    RW_DIV          reduce using rule 230 (math_function_call -> tan_function .)
    RW_MOD          reduce using rule 230 (math_function_call -> tan_function .)
    RW_AND          reduce using rule 230 (math_function_call -> tan_function .)
    S_PLUS          reduce using rule 230 (math_function_call -> tan_function .)
    S_MINUS         reduce using rule 230 (math_function_call -> tan_function .)
    RW_OR           reduce using rule 230 (math_function_call -> tan_function .)
    RW_XOR          reduce using rule 230 (math_function_call -> tan_function .)
    S_EQUAL         reduce using rule 230 (math_function_call -> tan_function .)
    S_NOT_EQUAL     reduce using rule 230 (math_function_call -> tan_function .)
    S_LESS_THAN_EQUAL reduce using rule 230 (math_function_call -> tan_function .)
    S_GREATER_THAN_EQUAL reduce using rule 230 (math_function_call -> tan_function .)
    S_LESS_THAN     reduce using rule 230 (math_function_call -> tan_function .)
    S_GREATER_THAN  reduce using rule 230 (math_function_call -> tan_function .)
    S_ELEMENT_OF    reduce using rule 230 (math_function_call -> tan_function .)
    RW_EQ           reduce using rule 230 (math_function_call -> tan_function .)
    RW_NEQ          reduce using rule 230 (math_function_call -> tan_function .)
    S_LEFT_SQUARE_BRACKET reduce using rule 230 (math_function_call -> tan_function .)
    S_DOT           reduce using rule 230 (math_function_call -> tan_function .)
    S_RIGHT_BRACKET reduce using rule 230 (math_function_call -> tan_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 230 (math_function_call -> tan_function .)
    S_COMMA         reduce using rule 230 (math_function_call -> tan_function .)
    RW_KAMUS        reduce using rule 230 (math_function_call -> tan_function .)
    RW_PROCEDURE    reduce using rule 230 (math_function_call -> tan_function .)
    RW_FUNCTION     reduce using rule 230 (math_function_call -> tan_function .)
    $end            reduce using rule 230 (math_function_call -> tan_function .)
    DEDENT          reduce using rule 230 (math_function_call -> tan_function .)
    S_SEMI_COLON    reduce using rule 230 (math_function_call -> tan_function .)
    IDENTIFIER      reduce using rule 230 (math_function_call -> tan_function .)
    RW_TYPE         reduce using rule 230 (math_function_call -> tan_function .)
    S_RETURN        reduce using rule 230 (math_function_call -> tan_function .)
    RW_IF           reduce using rule 230 (math_function_call -> tan_function .)
    RW_DEPEND       reduce using rule 230 (math_function_call -> tan_function .)
    RW_WHILE        reduce using rule 230 (math_function_call -> tan_function .)
    RW_ITERATE      reduce using rule 230 (math_function_call -> tan_function .)
    RW_REPEAT       reduce using rule 230 (math_function_call -> tan_function .)
    RW_INPUT        reduce using rule 230 (math_function_call -> tan_function .)
    RW_OUTPUT       reduce using rule 230 (math_function_call -> tan_function .)
    RW_ABS          reduce using rule 230 (math_function_call -> tan_function .)
    RW_SIN          reduce using rule 230 (math_function_call -> tan_function .)
    RW_COS          reduce using rule 230 (math_function_call -> tan_function .)
    RW_TAN          reduce using rule 230 (math_function_call -> tan_function .)
    RW_SUCC         reduce using rule 230 (math_function_call -> tan_function .)
    RW_PRED         reduce using rule 230 (math_function_call -> tan_function .)
    RW_AWAL         reduce using rule 230 (math_function_call -> tan_function .)
    RW_AKHIR        reduce using rule 230 (math_function_call -> tan_function .)
    RW_FIRSTCHAR    reduce using rule 230 (math_function_call -> tan_function .)
    RW_LASTCHAR     reduce using rule 230 (math_function_call -> tan_function .)
    RW_LONG         reduce using rule 230 (math_function_call -> tan_function .)
    RW_ISKOSONG     reduce using rule 230 (math_function_call -> tan_function .)
    RW_INTEGERTOREAL reduce using rule 230 (math_function_call -> tan_function .)
    RW_REALTOINTEGER reduce using rule 230 (math_function_call -> tan_function .)
    RW_THEN         reduce using rule 230 (math_function_call -> tan_function .)
    RW_DO           reduce using rule 230 (math_function_call -> tan_function .)
    INDENT          reduce using rule 230 (math_function_call -> tan_function .)
    S_COLON         reduce using rule 230 (math_function_call -> tan_function .)
    S_ASSIGNMENT    reduce using rule 230 (math_function_call -> tan_function .)
    RW_TIMES        reduce using rule 230 (math_function_call -> tan_function .)


state 79

    (231) math_function_call -> succ_function .

    S_UP_TO         reduce using rule 231 (math_function_call -> succ_function .)
    S_POWER         reduce using rule 231 (math_function_call -> succ_function .)
    S_TIMES         reduce using rule 231 (math_function_call -> succ_function .)
    S_DIVIDE        reduce using rule 231 (math_function_call -> succ_function .)
    RW_DIV          reduce using rule 231 (math_function_call -> succ_function .)
    RW_MOD          reduce using rule 231 (math_function_call -> succ_function .)
    RW_AND          reduce using rule 231 (math_function_call -> succ_function .)
    S_PLUS          reduce using rule 231 (math_function_call -> succ_function .)
    S_MINUS         reduce using rule 231 (math_function_call -> succ_function .)
    RW_OR           reduce using rule 231 (math_function_call -> succ_function .)
    RW_XOR          reduce using rule 231 (math_function_call -> succ_function .)
    S_EQUAL         reduce using rule 231 (math_function_call -> succ_function .)
    S_NOT_EQUAL     reduce using rule 231 (math_function_call -> succ_function .)
    S_LESS_THAN_EQUAL reduce using rule 231 (math_function_call -> succ_function .)
    S_GREATER_THAN_EQUAL reduce using rule 231 (math_function_call -> succ_function .)
    S_LESS_THAN     reduce using rule 231 (math_function_call -> succ_function .)
    S_GREATER_THAN  reduce using rule 231 (math_function_call -> succ_function .)
    S_ELEMENT_OF    reduce using rule 231 (math_function_call -> succ_function .)
    RW_EQ           reduce using rule 231 (math_function_call -> succ_function .)
    RW_NEQ          reduce using rule 231 (math_function_call -> succ_function .)
    S_LEFT_SQUARE_BRACKET reduce using rule 231 (math_function_call -> succ_function .)
    S_DOT           reduce using rule 231 (math_function_call -> succ_function .)
    S_RIGHT_BRACKET reduce using rule 231 (math_function_call -> succ_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 231 (math_function_call -> succ_function .)
    S_COMMA         reduce using rule 231 (math_function_call -> succ_function .)
    RW_KAMUS        reduce using rule 231 (math_function_call -> succ_function .)
    RW_PROCEDURE    reduce using rule 231 (math_function_call -> succ_function .)
    RW_FUNCTION     reduce using rule 231 (math_function_call -> succ_function .)
    $end            reduce using rule 231 (math_function_call -> succ_function .)
    DEDENT          reduce using rule 231 (math_function_call -> succ_function .)
    S_SEMI_COLON    reduce using rule 231 (math_function_call -> succ_function .)
    IDENTIFIER      reduce using rule 231 (math_function_call -> succ_function .)
    RW_TYPE         reduce using rule 231 (math_function_call -> succ_function .)
    S_RETURN        reduce using rule 231 (math_function_call -> succ_function .)
    RW_IF           reduce using rule 231 (math_function_call -> succ_function .)
    RW_DEPEND       reduce using rule 231 (math_function_call -> succ_function .)
    RW_WHILE        reduce using rule 231 (math_function_call -> succ_function .)
    RW_ITERATE      reduce using rule 231 (math_function_call -> succ_function .)
    RW_REPEAT       reduce using rule 231 (math_function_call -> succ_function .)
    RW_INPUT        reduce using rule 231 (math_function_call -> succ_function .)
    RW_OUTPUT       reduce using rule 231 (math_function_call -> succ_function .)
    RW_ABS          reduce using rule 231 (math_function_call -> succ_function .)
    RW_SIN          reduce using rule 231 (math_function_call -> succ_function .)
    RW_COS          reduce using rule 231 (math_function_call -> succ_function .)
    RW_TAN          reduce using rule 231 (math_function_call -> succ_function .)
    RW_SUCC         reduce using rule 231 (math_function_call -> succ_function .)
    RW_PRED         reduce using rule 231 (math_function_call -> succ_function .)
    RW_AWAL         reduce using rule 231 (math_function_call -> succ_function .)
    RW_AKHIR        reduce using rule 231 (math_function_call -> succ_function .)
    RW_FIRSTCHAR    reduce using rule 231 (math_function_call -> succ_function .)
    RW_LASTCHAR     reduce using rule 231 (math_function_call -> succ_function .)
    RW_LONG         reduce using rule 231 (math_function_call -> succ_function .)
    RW_ISKOSONG     reduce using rule 231 (math_function_call -> succ_function .)
    RW_INTEGERTOREAL reduce using rule 231 (math_function_call -> succ_function .)
    RW_REALTOINTEGER reduce using rule 231 (math_function_call -> succ_function .)
    RW_THEN         reduce using rule 231 (math_function_call -> succ_function .)
    RW_DO           reduce using rule 231 (math_function_call -> succ_function .)
    INDENT          reduce using rule 231 (math_function_call -> succ_function .)
    S_COLON         reduce using rule 231 (math_function_call -> succ_function .)
    S_ASSIGNMENT    reduce using rule 231 (math_function_call -> succ_function .)
    RW_TIMES        reduce using rule 231 (math_function_call -> succ_function .)


state 80

    (232) math_function_call -> pred_function .

    S_UP_TO         reduce using rule 232 (math_function_call -> pred_function .)
    S_POWER         reduce using rule 232 (math_function_call -> pred_function .)
    S_TIMES         reduce using rule 232 (math_function_call -> pred_function .)
    S_DIVIDE        reduce using rule 232 (math_function_call -> pred_function .)
    RW_DIV          reduce using rule 232 (math_function_call -> pred_function .)
    RW_MOD          reduce using rule 232 (math_function_call -> pred_function .)
    RW_AND          reduce using rule 232 (math_function_call -> pred_function .)
    S_PLUS          reduce using rule 232 (math_function_call -> pred_function .)
    S_MINUS         reduce using rule 232 (math_function_call -> pred_function .)
    RW_OR           reduce using rule 232 (math_function_call -> pred_function .)
    RW_XOR          reduce using rule 232 (math_function_call -> pred_function .)
    S_EQUAL         reduce using rule 232 (math_function_call -> pred_function .)
    S_NOT_EQUAL     reduce using rule 232 (math_function_call -> pred_function .)
    S_LESS_THAN_EQUAL reduce using rule 232 (math_function_call -> pred_function .)
    S_GREATER_THAN_EQUAL reduce using rule 232 (math_function_call -> pred_function .)
    S_LESS_THAN     reduce using rule 232 (math_function_call -> pred_function .)
    S_GREATER_THAN  reduce using rule 232 (math_function_call -> pred_function .)
    S_ELEMENT_OF    reduce using rule 232 (math_function_call -> pred_function .)
    RW_EQ           reduce using rule 232 (math_function_call -> pred_function .)
    RW_NEQ          reduce using rule 232 (math_function_call -> pred_function .)
    S_LEFT_SQUARE_BRACKET reduce using rule 232 (math_function_call -> pred_function .)
    S_DOT           reduce using rule 232 (math_function_call -> pred_function .)
    S_RIGHT_BRACKET reduce using rule 232 (math_function_call -> pred_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 232 (math_function_call -> pred_function .)
    S_COMMA         reduce using rule 232 (math_function_call -> pred_function .)
    RW_KAMUS        reduce using rule 232 (math_function_call -> pred_function .)
    RW_PROCEDURE    reduce using rule 232 (math_function_call -> pred_function .)
    RW_FUNCTION     reduce using rule 232 (math_function_call -> pred_function .)
    $end            reduce using rule 232 (math_function_call -> pred_function .)
    DEDENT          reduce using rule 232 (math_function_call -> pred_function .)
    S_SEMI_COLON    reduce using rule 232 (math_function_call -> pred_function .)
    IDENTIFIER      reduce using rule 232 (math_function_call -> pred_function .)
    RW_TYPE         reduce using rule 232 (math_function_call -> pred_function .)
    S_RETURN        reduce using rule 232 (math_function_call -> pred_function .)
    RW_IF           reduce using rule 232 (math_function_call -> pred_function .)
    RW_DEPEND       reduce using rule 232 (math_function_call -> pred_function .)
    RW_WHILE        reduce using rule 232 (math_function_call -> pred_function .)
    RW_ITERATE      reduce using rule 232 (math_function_call -> pred_function .)
    RW_REPEAT       reduce using rule 232 (math_function_call -> pred_function .)
    RW_INPUT        reduce using rule 232 (math_function_call -> pred_function .)
    RW_OUTPUT       reduce using rule 232 (math_function_call -> pred_function .)
    RW_ABS          reduce using rule 232 (math_function_call -> pred_function .)
    RW_SIN          reduce using rule 232 (math_function_call -> pred_function .)
    RW_COS          reduce using rule 232 (math_function_call -> pred_function .)
    RW_TAN          reduce using rule 232 (math_function_call -> pred_function .)
    RW_SUCC         reduce using rule 232 (math_function_call -> pred_function .)
    RW_PRED         reduce using rule 232 (math_function_call -> pred_function .)
    RW_AWAL         reduce using rule 232 (math_function_call -> pred_function .)
    RW_AKHIR        reduce using rule 232 (math_function_call -> pred_function .)
    RW_FIRSTCHAR    reduce using rule 232 (math_function_call -> pred_function .)
    RW_LASTCHAR     reduce using rule 232 (math_function_call -> pred_function .)
    RW_LONG         reduce using rule 232 (math_function_call -> pred_function .)
    RW_ISKOSONG     reduce using rule 232 (math_function_call -> pred_function .)
    RW_INTEGERTOREAL reduce using rule 232 (math_function_call -> pred_function .)
    RW_REALTOINTEGER reduce using rule 232 (math_function_call -> pred_function .)
    RW_THEN         reduce using rule 232 (math_function_call -> pred_function .)
    RW_DO           reduce using rule 232 (math_function_call -> pred_function .)
    INDENT          reduce using rule 232 (math_function_call -> pred_function .)
    S_COLON         reduce using rule 232 (math_function_call -> pred_function .)
    S_ASSIGNMENT    reduce using rule 232 (math_function_call -> pred_function .)
    RW_TIMES        reduce using rule 232 (math_function_call -> pred_function .)


state 81

    (239) string_function_call -> awal_function .

    S_UP_TO         reduce using rule 239 (string_function_call -> awal_function .)
    S_POWER         reduce using rule 239 (string_function_call -> awal_function .)
    S_TIMES         reduce using rule 239 (string_function_call -> awal_function .)
    S_DIVIDE        reduce using rule 239 (string_function_call -> awal_function .)
    RW_DIV          reduce using rule 239 (string_function_call -> awal_function .)
    RW_MOD          reduce using rule 239 (string_function_call -> awal_function .)
    RW_AND          reduce using rule 239 (string_function_call -> awal_function .)
    S_PLUS          reduce using rule 239 (string_function_call -> awal_function .)
    S_MINUS         reduce using rule 239 (string_function_call -> awal_function .)
    RW_OR           reduce using rule 239 (string_function_call -> awal_function .)
    RW_XOR          reduce using rule 239 (string_function_call -> awal_function .)
    S_EQUAL         reduce using rule 239 (string_function_call -> awal_function .)
    S_NOT_EQUAL     reduce using rule 239 (string_function_call -> awal_function .)
    S_LESS_THAN_EQUAL reduce using rule 239 (string_function_call -> awal_function .)
    S_GREATER_THAN_EQUAL reduce using rule 239 (string_function_call -> awal_function .)
    S_LESS_THAN     reduce using rule 239 (string_function_call -> awal_function .)
    S_GREATER_THAN  reduce using rule 239 (string_function_call -> awal_function .)
    S_ELEMENT_OF    reduce using rule 239 (string_function_call -> awal_function .)
    RW_EQ           reduce using rule 239 (string_function_call -> awal_function .)
    RW_NEQ          reduce using rule 239 (string_function_call -> awal_function .)
    S_LEFT_SQUARE_BRACKET reduce using rule 239 (string_function_call -> awal_function .)
    S_DOT           reduce using rule 239 (string_function_call -> awal_function .)
    S_RIGHT_BRACKET reduce using rule 239 (string_function_call -> awal_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 239 (string_function_call -> awal_function .)
    S_COMMA         reduce using rule 239 (string_function_call -> awal_function .)
    RW_KAMUS        reduce using rule 239 (string_function_call -> awal_function .)
    RW_PROCEDURE    reduce using rule 239 (string_function_call -> awal_function .)
    RW_FUNCTION     reduce using rule 239 (string_function_call -> awal_function .)
    $end            reduce using rule 239 (string_function_call -> awal_function .)
    DEDENT          reduce using rule 239 (string_function_call -> awal_function .)
    S_SEMI_COLON    reduce using rule 239 (string_function_call -> awal_function .)
    IDENTIFIER      reduce using rule 239 (string_function_call -> awal_function .)
    RW_TYPE         reduce using rule 239 (string_function_call -> awal_function .)
    S_RETURN        reduce using rule 239 (string_function_call -> awal_function .)
    RW_IF           reduce using rule 239 (string_function_call -> awal_function .)
    RW_DEPEND       reduce using rule 239 (string_function_call -> awal_function .)
    RW_WHILE        reduce using rule 239 (string_function_call -> awal_function .)
    RW_ITERATE      reduce using rule 239 (string_function_call -> awal_function .)
    RW_REPEAT       reduce using rule 239 (string_function_call -> awal_function .)
    RW_INPUT        reduce using rule 239 (string_function_call -> awal_function .)
    RW_OUTPUT       reduce using rule 239 (string_function_call -> awal_function .)
    RW_ABS          reduce using rule 239 (string_function_call -> awal_function .)
    RW_SIN          reduce using rule 239 (string_function_call -> awal_function .)
    RW_COS          reduce using rule 239 (string_function_call -> awal_function .)
    RW_TAN          reduce using rule 239 (string_function_call -> awal_function .)
    RW_SUCC         reduce using rule 239 (string_function_call -> awal_function .)
    RW_PRED         reduce using rule 239 (string_function_call -> awal_function .)
    RW_AWAL         reduce using rule 239 (string_function_call -> awal_function .)
    RW_AKHIR        reduce using rule 239 (string_function_call -> awal_function .)
    RW_FIRSTCHAR    reduce using rule 239 (string_function_call -> awal_function .)
    RW_LASTCHAR     reduce using rule 239 (string_function_call -> awal_function .)
    RW_LONG         reduce using rule 239 (string_function_call -> awal_function .)
    RW_ISKOSONG     reduce using rule 239 (string_function_call -> awal_function .)
    RW_INTEGERTOREAL reduce using rule 239 (string_function_call -> awal_function .)
    RW_REALTOINTEGER reduce using rule 239 (string_function_call -> awal_function .)
    RW_THEN         reduce using rule 239 (string_function_call -> awal_function .)
    RW_DO           reduce using rule 239 (string_function_call -> awal_function .)
    INDENT          reduce using rule 239 (string_function_call -> awal_function .)
    S_COLON         reduce using rule 239 (string_function_call -> awal_function .)
    S_ASSIGNMENT    reduce using rule 239 (string_function_call -> awal_function .)
    RW_TIMES        reduce using rule 239 (string_function_call -> awal_function .)


state 82

    (240) string_function_call -> akhir_function .

    S_UP_TO         reduce using rule 240 (string_function_call -> akhir_function .)
    S_POWER         reduce using rule 240 (string_function_call -> akhir_function .)
    S_TIMES         reduce using rule 240 (string_function_call -> akhir_function .)
    S_DIVIDE        reduce using rule 240 (string_function_call -> akhir_function .)
    RW_DIV          reduce using rule 240 (string_function_call -> akhir_function .)
    RW_MOD          reduce using rule 240 (string_function_call -> akhir_function .)
    RW_AND          reduce using rule 240 (string_function_call -> akhir_function .)
    S_PLUS          reduce using rule 240 (string_function_call -> akhir_function .)
    S_MINUS         reduce using rule 240 (string_function_call -> akhir_function .)
    RW_OR           reduce using rule 240 (string_function_call -> akhir_function .)
    RW_XOR          reduce using rule 240 (string_function_call -> akhir_function .)
    S_EQUAL         reduce using rule 240 (string_function_call -> akhir_function .)
    S_NOT_EQUAL     reduce using rule 240 (string_function_call -> akhir_function .)
    S_LESS_THAN_EQUAL reduce using rule 240 (string_function_call -> akhir_function .)
    S_GREATER_THAN_EQUAL reduce using rule 240 (string_function_call -> akhir_function .)
    S_LESS_THAN     reduce using rule 240 (string_function_call -> akhir_function .)
    S_GREATER_THAN  reduce using rule 240 (string_function_call -> akhir_function .)
    S_ELEMENT_OF    reduce using rule 240 (string_function_call -> akhir_function .)
    RW_EQ           reduce using rule 240 (string_function_call -> akhir_function .)
    RW_NEQ          reduce using rule 240 (string_function_call -> akhir_function .)
    S_LEFT_SQUARE_BRACKET reduce using rule 240 (string_function_call -> akhir_function .)
    S_DOT           reduce using rule 240 (string_function_call -> akhir_function .)
    S_RIGHT_BRACKET reduce using rule 240 (string_function_call -> akhir_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 240 (string_function_call -> akhir_function .)
    S_COMMA         reduce using rule 240 (string_function_call -> akhir_function .)
    RW_KAMUS        reduce using rule 240 (string_function_call -> akhir_function .)
    RW_PROCEDURE    reduce using rule 240 (string_function_call -> akhir_function .)
    RW_FUNCTION     reduce using rule 240 (string_function_call -> akhir_function .)
    $end            reduce using rule 240 (string_function_call -> akhir_function .)
    DEDENT          reduce using rule 240 (string_function_call -> akhir_function .)
    S_SEMI_COLON    reduce using rule 240 (string_function_call -> akhir_function .)
    IDENTIFIER      reduce using rule 240 (string_function_call -> akhir_function .)
    RW_TYPE         reduce using rule 240 (string_function_call -> akhir_function .)
    S_RETURN        reduce using rule 240 (string_function_call -> akhir_function .)
    RW_IF           reduce using rule 240 (string_function_call -> akhir_function .)
    RW_DEPEND       reduce using rule 240 (string_function_call -> akhir_function .)
    RW_WHILE        reduce using rule 240 (string_function_call -> akhir_function .)
    RW_ITERATE      reduce using rule 240 (string_function_call -> akhir_function .)
    RW_REPEAT       reduce using rule 240 (string_function_call -> akhir_function .)
    RW_INPUT        reduce using rule 240 (string_function_call -> akhir_function .)
    RW_OUTPUT       reduce using rule 240 (string_function_call -> akhir_function .)
    RW_ABS          reduce using rule 240 (string_function_call -> akhir_function .)
    RW_SIN          reduce using rule 240 (string_function_call -> akhir_function .)
    RW_COS          reduce using rule 240 (string_function_call -> akhir_function .)
    RW_TAN          reduce using rule 240 (string_function_call -> akhir_function .)
    RW_SUCC         reduce using rule 240 (string_function_call -> akhir_function .)
    RW_PRED         reduce using rule 240 (string_function_call -> akhir_function .)
    RW_AWAL         reduce using rule 240 (string_function_call -> akhir_function .)
    RW_AKHIR        reduce using rule 240 (string_function_call -> akhir_function .)
    RW_FIRSTCHAR    reduce using rule 240 (string_function_call -> akhir_function .)
    RW_LASTCHAR     reduce using rule 240 (string_function_call -> akhir_function .)
    RW_LONG         reduce using rule 240 (string_function_call -> akhir_function .)
    RW_ISKOSONG     reduce using rule 240 (string_function_call -> akhir_function .)
    RW_INTEGERTOREAL reduce using rule 240 (string_function_call -> akhir_function .)
    RW_REALTOINTEGER reduce using rule 240 (string_function_call -> akhir_function .)
    RW_THEN         reduce using rule 240 (string_function_call -> akhir_function .)
    RW_DO           reduce using rule 240 (string_function_call -> akhir_function .)
    INDENT          reduce using rule 240 (string_function_call -> akhir_function .)
    S_COLON         reduce using rule 240 (string_function_call -> akhir_function .)
    S_ASSIGNMENT    reduce using rule 240 (string_function_call -> akhir_function .)
    RW_TIMES        reduce using rule 240 (string_function_call -> akhir_function .)


state 83

    (241) string_function_call -> firstchar_function .

    S_UP_TO         reduce using rule 241 (string_function_call -> firstchar_function .)
    S_POWER         reduce using rule 241 (string_function_call -> firstchar_function .)
    S_TIMES         reduce using rule 241 (string_function_call -> firstchar_function .)
    S_DIVIDE        reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_DIV          reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_MOD          reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_AND          reduce using rule 241 (string_function_call -> firstchar_function .)
    S_PLUS          reduce using rule 241 (string_function_call -> firstchar_function .)
    S_MINUS         reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_OR           reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_XOR          reduce using rule 241 (string_function_call -> firstchar_function .)
    S_EQUAL         reduce using rule 241 (string_function_call -> firstchar_function .)
    S_NOT_EQUAL     reduce using rule 241 (string_function_call -> firstchar_function .)
    S_LESS_THAN_EQUAL reduce using rule 241 (string_function_call -> firstchar_function .)
    S_GREATER_THAN_EQUAL reduce using rule 241 (string_function_call -> firstchar_function .)
    S_LESS_THAN     reduce using rule 241 (string_function_call -> firstchar_function .)
    S_GREATER_THAN  reduce using rule 241 (string_function_call -> firstchar_function .)
    S_ELEMENT_OF    reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_EQ           reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_NEQ          reduce using rule 241 (string_function_call -> firstchar_function .)
    S_LEFT_SQUARE_BRACKET reduce using rule 241 (string_function_call -> firstchar_function .)
    S_DOT           reduce using rule 241 (string_function_call -> firstchar_function .)
    S_RIGHT_BRACKET reduce using rule 241 (string_function_call -> firstchar_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 241 (string_function_call -> firstchar_function .)
    S_COMMA         reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_KAMUS        reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_PROCEDURE    reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_FUNCTION     reduce using rule 241 (string_function_call -> firstchar_function .)
    $end            reduce using rule 241 (string_function_call -> firstchar_function .)
    DEDENT          reduce using rule 241 (string_function_call -> firstchar_function .)
    S_SEMI_COLON    reduce using rule 241 (string_function_call -> firstchar_function .)
    IDENTIFIER      reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_TYPE         reduce using rule 241 (string_function_call -> firstchar_function .)
    S_RETURN        reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_IF           reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_DEPEND       reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_WHILE        reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_ITERATE      reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_REPEAT       reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_INPUT        reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_OUTPUT       reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_ABS          reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_SIN          reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_COS          reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_TAN          reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_SUCC         reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_PRED         reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_AWAL         reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_AKHIR        reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_FIRSTCHAR    reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_LASTCHAR     reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_LONG         reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_ISKOSONG     reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_INTEGERTOREAL reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_REALTOINTEGER reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_THEN         reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_DO           reduce using rule 241 (string_function_call -> firstchar_function .)
    INDENT          reduce using rule 241 (string_function_call -> firstchar_function .)
    S_COLON         reduce using rule 241 (string_function_call -> firstchar_function .)
    S_ASSIGNMENT    reduce using rule 241 (string_function_call -> firstchar_function .)
    RW_TIMES        reduce using rule 241 (string_function_call -> firstchar_function .)


state 84

    (242) string_function_call -> lastchar_function .

    S_UP_TO         reduce using rule 242 (string_function_call -> lastchar_function .)
    S_POWER         reduce using rule 242 (string_function_call -> lastchar_function .)
    S_TIMES         reduce using rule 242 (string_function_call -> lastchar_function .)
    S_DIVIDE        reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_DIV          reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_MOD          reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_AND          reduce using rule 242 (string_function_call -> lastchar_function .)
    S_PLUS          reduce using rule 242 (string_function_call -> lastchar_function .)
    S_MINUS         reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_OR           reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_XOR          reduce using rule 242 (string_function_call -> lastchar_function .)
    S_EQUAL         reduce using rule 242 (string_function_call -> lastchar_function .)
    S_NOT_EQUAL     reduce using rule 242 (string_function_call -> lastchar_function .)
    S_LESS_THAN_EQUAL reduce using rule 242 (string_function_call -> lastchar_function .)
    S_GREATER_THAN_EQUAL reduce using rule 242 (string_function_call -> lastchar_function .)
    S_LESS_THAN     reduce using rule 242 (string_function_call -> lastchar_function .)
    S_GREATER_THAN  reduce using rule 242 (string_function_call -> lastchar_function .)
    S_ELEMENT_OF    reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_EQ           reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_NEQ          reduce using rule 242 (string_function_call -> lastchar_function .)
    S_LEFT_SQUARE_BRACKET reduce using rule 242 (string_function_call -> lastchar_function .)
    S_DOT           reduce using rule 242 (string_function_call -> lastchar_function .)
    S_RIGHT_BRACKET reduce using rule 242 (string_function_call -> lastchar_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 242 (string_function_call -> lastchar_function .)
    S_COMMA         reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_KAMUS        reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_PROCEDURE    reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_FUNCTION     reduce using rule 242 (string_function_call -> lastchar_function .)
    $end            reduce using rule 242 (string_function_call -> lastchar_function .)
    DEDENT          reduce using rule 242 (string_function_call -> lastchar_function .)
    S_SEMI_COLON    reduce using rule 242 (string_function_call -> lastchar_function .)
    IDENTIFIER      reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_TYPE         reduce using rule 242 (string_function_call -> lastchar_function .)
    S_RETURN        reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_IF           reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_DEPEND       reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_WHILE        reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_ITERATE      reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_REPEAT       reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_INPUT        reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_OUTPUT       reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_ABS          reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_SIN          reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_COS          reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_TAN          reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_SUCC         reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_PRED         reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_AWAL         reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_AKHIR        reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_FIRSTCHAR    reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_LASTCHAR     reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_LONG         reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_ISKOSONG     reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_INTEGERTOREAL reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_REALTOINTEGER reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_THEN         reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_DO           reduce using rule 242 (string_function_call -> lastchar_function .)
    INDENT          reduce using rule 242 (string_function_call -> lastchar_function .)
    S_COLON         reduce using rule 242 (string_function_call -> lastchar_function .)
    S_ASSIGNMENT    reduce using rule 242 (string_function_call -> lastchar_function .)
    RW_TIMES        reduce using rule 242 (string_function_call -> lastchar_function .)


state 85

    (243) string_function_call -> long_function .

    S_UP_TO         reduce using rule 243 (string_function_call -> long_function .)
    S_POWER         reduce using rule 243 (string_function_call -> long_function .)
    S_TIMES         reduce using rule 243 (string_function_call -> long_function .)
    S_DIVIDE        reduce using rule 243 (string_function_call -> long_function .)
    RW_DIV          reduce using rule 243 (string_function_call -> long_function .)
    RW_MOD          reduce using rule 243 (string_function_call -> long_function .)
    RW_AND          reduce using rule 243 (string_function_call -> long_function .)
    S_PLUS          reduce using rule 243 (string_function_call -> long_function .)
    S_MINUS         reduce using rule 243 (string_function_call -> long_function .)
    RW_OR           reduce using rule 243 (string_function_call -> long_function .)
    RW_XOR          reduce using rule 243 (string_function_call -> long_function .)
    S_EQUAL         reduce using rule 243 (string_function_call -> long_function .)
    S_NOT_EQUAL     reduce using rule 243 (string_function_call -> long_function .)
    S_LESS_THAN_EQUAL reduce using rule 243 (string_function_call -> long_function .)
    S_GREATER_THAN_EQUAL reduce using rule 243 (string_function_call -> long_function .)
    S_LESS_THAN     reduce using rule 243 (string_function_call -> long_function .)
    S_GREATER_THAN  reduce using rule 243 (string_function_call -> long_function .)
    S_ELEMENT_OF    reduce using rule 243 (string_function_call -> long_function .)
    RW_EQ           reduce using rule 243 (string_function_call -> long_function .)
    RW_NEQ          reduce using rule 243 (string_function_call -> long_function .)
    S_LEFT_SQUARE_BRACKET reduce using rule 243 (string_function_call -> long_function .)
    S_DOT           reduce using rule 243 (string_function_call -> long_function .)
    S_RIGHT_BRACKET reduce using rule 243 (string_function_call -> long_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 243 (string_function_call -> long_function .)
    S_COMMA         reduce using rule 243 (string_function_call -> long_function .)
    RW_KAMUS        reduce using rule 243 (string_function_call -> long_function .)
    RW_PROCEDURE    reduce using rule 243 (string_function_call -> long_function .)
    RW_FUNCTION     reduce using rule 243 (string_function_call -> long_function .)
    $end            reduce using rule 243 (string_function_call -> long_function .)
    DEDENT          reduce using rule 243 (string_function_call -> long_function .)
    S_SEMI_COLON    reduce using rule 243 (string_function_call -> long_function .)
    IDENTIFIER      reduce using rule 243 (string_function_call -> long_function .)
    RW_TYPE         reduce using rule 243 (string_function_call -> long_function .)
    S_RETURN        reduce using rule 243 (string_function_call -> long_function .)
    RW_IF           reduce using rule 243 (string_function_call -> long_function .)
    RW_DEPEND       reduce using rule 243 (string_function_call -> long_function .)
    RW_WHILE        reduce using rule 243 (string_function_call -> long_function .)
    RW_ITERATE      reduce using rule 243 (string_function_call -> long_function .)
    RW_REPEAT       reduce using rule 243 (string_function_call -> long_function .)
    RW_INPUT        reduce using rule 243 (string_function_call -> long_function .)
    RW_OUTPUT       reduce using rule 243 (string_function_call -> long_function .)
    RW_ABS          reduce using rule 243 (string_function_call -> long_function .)
    RW_SIN          reduce using rule 243 (string_function_call -> long_function .)
    RW_COS          reduce using rule 243 (string_function_call -> long_function .)
    RW_TAN          reduce using rule 243 (string_function_call -> long_function .)
    RW_SUCC         reduce using rule 243 (string_function_call -> long_function .)
    RW_PRED         reduce using rule 243 (string_function_call -> long_function .)
    RW_AWAL         reduce using rule 243 (string_function_call -> long_function .)
    RW_AKHIR        reduce using rule 243 (string_function_call -> long_function .)
    RW_FIRSTCHAR    reduce using rule 243 (string_function_call -> long_function .)
    RW_LASTCHAR     reduce using rule 243 (string_function_call -> long_function .)
    RW_LONG         reduce using rule 243 (string_function_call -> long_function .)
    RW_ISKOSONG     reduce using rule 243 (string_function_call -> long_function .)
    RW_INTEGERTOREAL reduce using rule 243 (string_function_call -> long_function .)
    RW_REALTOINTEGER reduce using rule 243 (string_function_call -> long_function .)
    RW_THEN         reduce using rule 243 (string_function_call -> long_function .)
    RW_DO           reduce using rule 243 (string_function_call -> long_function .)
    INDENT          reduce using rule 243 (string_function_call -> long_function .)
    S_COLON         reduce using rule 243 (string_function_call -> long_function .)
    S_ASSIGNMENT    reduce using rule 243 (string_function_call -> long_function .)
    RW_TIMES        reduce using rule 243 (string_function_call -> long_function .)


state 86

    (244) string_function_call -> iskosong_function .

    S_UP_TO         reduce using rule 244 (string_function_call -> iskosong_function .)
    S_POWER         reduce using rule 244 (string_function_call -> iskosong_function .)
    S_TIMES         reduce using rule 244 (string_function_call -> iskosong_function .)
    S_DIVIDE        reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_DIV          reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_MOD          reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_AND          reduce using rule 244 (string_function_call -> iskosong_function .)
    S_PLUS          reduce using rule 244 (string_function_call -> iskosong_function .)
    S_MINUS         reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_OR           reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_XOR          reduce using rule 244 (string_function_call -> iskosong_function .)
    S_EQUAL         reduce using rule 244 (string_function_call -> iskosong_function .)
    S_NOT_EQUAL     reduce using rule 244 (string_function_call -> iskosong_function .)
    S_LESS_THAN_EQUAL reduce using rule 244 (string_function_call -> iskosong_function .)
    S_GREATER_THAN_EQUAL reduce using rule 244 (string_function_call -> iskosong_function .)
    S_LESS_THAN     reduce using rule 244 (string_function_call -> iskosong_function .)
    S_GREATER_THAN  reduce using rule 244 (string_function_call -> iskosong_function .)
    S_ELEMENT_OF    reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_EQ           reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_NEQ          reduce using rule 244 (string_function_call -> iskosong_function .)
    S_LEFT_SQUARE_BRACKET reduce using rule 244 (string_function_call -> iskosong_function .)
    S_DOT           reduce using rule 244 (string_function_call -> iskosong_function .)
    S_RIGHT_BRACKET reduce using rule 244 (string_function_call -> iskosong_function .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 244 (string_function_call -> iskosong_function .)
    S_COMMA         reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_KAMUS        reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_PROCEDURE    reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_FUNCTION     reduce using rule 244 (string_function_call -> iskosong_function .)
    $end            reduce using rule 244 (string_function_call -> iskosong_function .)
    DEDENT          reduce using rule 244 (string_function_call -> iskosong_function .)
    S_SEMI_COLON    reduce using rule 244 (string_function_call -> iskosong_function .)
    IDENTIFIER      reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_TYPE         reduce using rule 244 (string_function_call -> iskosong_function .)
    S_RETURN        reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_IF           reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_DEPEND       reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_WHILE        reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_ITERATE      reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_REPEAT       reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_INPUT        reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_OUTPUT       reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_ABS          reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_SIN          reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_COS          reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_TAN          reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_SUCC         reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_PRED         reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_AWAL         reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_AKHIR        reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_FIRSTCHAR    reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_LASTCHAR     reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_LONG         reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_ISKOSONG     reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_INTEGERTOREAL reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_REALTOINTEGER reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_THEN         reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_DO           reduce using rule 244 (string_function_call -> iskosong_function .)
    INDENT          reduce using rule 244 (string_function_call -> iskosong_function .)
    S_COLON         reduce using rule 244 (string_function_call -> iskosong_function .)
    S_ASSIGNMENT    reduce using rule 244 (string_function_call -> iskosong_function .)
    RW_TIMES        reduce using rule 244 (string_function_call -> iskosong_function .)


state 87

    (251) converter_function_call -> integer_to_real .

    S_UP_TO         reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_POWER         reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_TIMES         reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_DIVIDE        reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_DIV          reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_MOD          reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_AND          reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_PLUS          reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_MINUS         reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_OR           reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_XOR          reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_EQUAL         reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_NOT_EQUAL     reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_LESS_THAN_EQUAL reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_GREATER_THAN_EQUAL reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_LESS_THAN     reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_GREATER_THAN  reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_ELEMENT_OF    reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_EQ           reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_NEQ          reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_LEFT_SQUARE_BRACKET reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_DOT           reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_RIGHT_BRACKET reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_COMMA         reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_KAMUS        reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_PROCEDURE    reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_FUNCTION     reduce using rule 251 (converter_function_call -> integer_to_real .)
    $end            reduce using rule 251 (converter_function_call -> integer_to_real .)
    DEDENT          reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_SEMI_COLON    reduce using rule 251 (converter_function_call -> integer_to_real .)
    IDENTIFIER      reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_TYPE         reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_RETURN        reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_IF           reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_DEPEND       reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_WHILE        reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_ITERATE      reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_REPEAT       reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_INPUT        reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_OUTPUT       reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_ABS          reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_SIN          reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_COS          reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_TAN          reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_SUCC         reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_PRED         reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_AWAL         reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_AKHIR        reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_FIRSTCHAR    reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_LASTCHAR     reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_LONG         reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_ISKOSONG     reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_INTEGERTOREAL reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_REALTOINTEGER reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_THEN         reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_DO           reduce using rule 251 (converter_function_call -> integer_to_real .)
    INDENT          reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_COLON         reduce using rule 251 (converter_function_call -> integer_to_real .)
    S_ASSIGNMENT    reduce using rule 251 (converter_function_call -> integer_to_real .)
    RW_TIMES        reduce using rule 251 (converter_function_call -> integer_to_real .)


state 88

    (252) converter_function_call -> real_to_integer .

    S_UP_TO         reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_POWER         reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_TIMES         reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_DIVIDE        reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_DIV          reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_MOD          reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_AND          reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_PLUS          reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_MINUS         reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_OR           reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_XOR          reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_EQUAL         reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_NOT_EQUAL     reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_LESS_THAN_EQUAL reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_GREATER_THAN_EQUAL reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_LESS_THAN     reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_GREATER_THAN  reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_ELEMENT_OF    reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_EQ           reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_NEQ          reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_LEFT_SQUARE_BRACKET reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_DOT           reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_RIGHT_BRACKET reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_COMMA         reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_KAMUS        reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_PROCEDURE    reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_FUNCTION     reduce using rule 252 (converter_function_call -> real_to_integer .)
    $end            reduce using rule 252 (converter_function_call -> real_to_integer .)
    DEDENT          reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_SEMI_COLON    reduce using rule 252 (converter_function_call -> real_to_integer .)
    IDENTIFIER      reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_TYPE         reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_RETURN        reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_IF           reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_DEPEND       reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_WHILE        reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_ITERATE      reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_REPEAT       reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_INPUT        reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_OUTPUT       reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_ABS          reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_SIN          reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_COS          reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_TAN          reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_SUCC         reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_PRED         reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_AWAL         reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_AKHIR        reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_FIRSTCHAR    reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_LASTCHAR     reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_LONG         reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_ISKOSONG     reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_INTEGERTOREAL reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_REALTOINTEGER reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_THEN         reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_DO           reduce using rule 252 (converter_function_call -> real_to_integer .)
    INDENT          reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_COLON         reduce using rule 252 (converter_function_call -> real_to_integer .)
    S_ASSIGNMENT    reduce using rule 252 (converter_function_call -> real_to_integer .)
    RW_TIMES        reduce using rule 252 (converter_function_call -> real_to_integer .)


state 89

    (192) additive_expression -> multiplicative_expression .
    (197) multiplicative_expression -> multiplicative_expression . multiplicative_op unary_expression
    (199) multiplicative_op -> . S_TIMES
    (200) multiplicative_op -> . S_DIVIDE
    (201) multiplicative_op -> . RW_DIV
    (202) multiplicative_op -> . RW_MOD
    (203) multiplicative_op -> . RW_AND

    S_PLUS          reduce using rule 192 (additive_expression -> multiplicative_expression .)
    S_MINUS         reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_OR           reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_XOR          reduce using rule 192 (additive_expression -> multiplicative_expression .)
    S_EQUAL         reduce using rule 192 (additive_expression -> multiplicative_expression .)
    S_NOT_EQUAL     reduce using rule 192 (additive_expression -> multiplicative_expression .)
    S_LESS_THAN_EQUAL reduce using rule 192 (additive_expression -> multiplicative_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 192 (additive_expression -> multiplicative_expression .)
    S_LESS_THAN     reduce using rule 192 (additive_expression -> multiplicative_expression .)
    S_GREATER_THAN  reduce using rule 192 (additive_expression -> multiplicative_expression .)
    S_ELEMENT_OF    reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_EQ           reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_NEQ          reduce using rule 192 (additive_expression -> multiplicative_expression .)
    S_UP_TO         reduce using rule 192 (additive_expression -> multiplicative_expression .)
    S_RIGHT_BRACKET reduce using rule 192 (additive_expression -> multiplicative_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 192 (additive_expression -> multiplicative_expression .)
    S_COMMA         reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_KAMUS        reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_PROCEDURE    reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_FUNCTION     reduce using rule 192 (additive_expression -> multiplicative_expression .)
    $end            reduce using rule 192 (additive_expression -> multiplicative_expression .)
    DEDENT          reduce using rule 192 (additive_expression -> multiplicative_expression .)
    S_SEMI_COLON    reduce using rule 192 (additive_expression -> multiplicative_expression .)
    IDENTIFIER      reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_TYPE         reduce using rule 192 (additive_expression -> multiplicative_expression .)
    S_RETURN        reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_IF           reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_DEPEND       reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_WHILE        reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_ITERATE      reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_REPEAT       reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_INPUT        reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_OUTPUT       reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_ABS          reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_SIN          reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_COS          reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_TAN          reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_SUCC         reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_PRED         reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_AWAL         reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_AKHIR        reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_FIRSTCHAR    reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_LASTCHAR     reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_LONG         reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_ISKOSONG     reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_INTEGERTOREAL reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_REALTOINTEGER reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_THEN         reduce using rule 192 (additive_expression -> multiplicative_expression .)
    RW_DO           reduce using rule 192 (additive_expression -> multiplicative_expression .)
    INDENT          reduce using rule 192 (additive_expression -> multiplicative_expression .)
    S_COLON         reduce using rule 192 (additive_expression -> multiplicative_expression .)
    S_TIMES         shift and go to state 180
    S_DIVIDE        shift and go to state 181
    RW_DIV          shift and go to state 182
    RW_MOD          shift and go to state 183
    RW_AND          shift and go to state 184

    multiplicative_op              shift and go to state 179

state 90

    (169) string_constant -> L_STRING .

    S_UP_TO         reduce using rule 169 (string_constant -> L_STRING .)
    S_POWER         reduce using rule 169 (string_constant -> L_STRING .)
    S_TIMES         reduce using rule 169 (string_constant -> L_STRING .)
    S_DIVIDE        reduce using rule 169 (string_constant -> L_STRING .)
    RW_DIV          reduce using rule 169 (string_constant -> L_STRING .)
    RW_MOD          reduce using rule 169 (string_constant -> L_STRING .)
    RW_AND          reduce using rule 169 (string_constant -> L_STRING .)
    S_PLUS          reduce using rule 169 (string_constant -> L_STRING .)
    S_MINUS         reduce using rule 169 (string_constant -> L_STRING .)
    RW_OR           reduce using rule 169 (string_constant -> L_STRING .)
    RW_XOR          reduce using rule 169 (string_constant -> L_STRING .)
    S_EQUAL         reduce using rule 169 (string_constant -> L_STRING .)
    S_NOT_EQUAL     reduce using rule 169 (string_constant -> L_STRING .)
    S_LESS_THAN_EQUAL reduce using rule 169 (string_constant -> L_STRING .)
    S_GREATER_THAN_EQUAL reduce using rule 169 (string_constant -> L_STRING .)
    S_LESS_THAN     reduce using rule 169 (string_constant -> L_STRING .)
    S_GREATER_THAN  reduce using rule 169 (string_constant -> L_STRING .)
    S_ELEMENT_OF    reduce using rule 169 (string_constant -> L_STRING .)
    RW_EQ           reduce using rule 169 (string_constant -> L_STRING .)
    RW_NEQ          reduce using rule 169 (string_constant -> L_STRING .)
    S_RIGHT_BRACKET reduce using rule 169 (string_constant -> L_STRING .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 169 (string_constant -> L_STRING .)
    S_COMMA         reduce using rule 169 (string_constant -> L_STRING .)
    RW_KAMUS        reduce using rule 169 (string_constant -> L_STRING .)
    RW_PROCEDURE    reduce using rule 169 (string_constant -> L_STRING .)
    RW_FUNCTION     reduce using rule 169 (string_constant -> L_STRING .)
    $end            reduce using rule 169 (string_constant -> L_STRING .)
    DEDENT          reduce using rule 169 (string_constant -> L_STRING .)
    S_SEMI_COLON    reduce using rule 169 (string_constant -> L_STRING .)
    IDENTIFIER      reduce using rule 169 (string_constant -> L_STRING .)
    RW_TYPE         reduce using rule 169 (string_constant -> L_STRING .)
    S_RETURN        reduce using rule 169 (string_constant -> L_STRING .)
    RW_IF           reduce using rule 169 (string_constant -> L_STRING .)
    RW_DEPEND       reduce using rule 169 (string_constant -> L_STRING .)
    RW_WHILE        reduce using rule 169 (string_constant -> L_STRING .)
    RW_ITERATE      reduce using rule 169 (string_constant -> L_STRING .)
    RW_REPEAT       reduce using rule 169 (string_constant -> L_STRING .)
    RW_INPUT        reduce using rule 169 (string_constant -> L_STRING .)
    RW_OUTPUT       reduce using rule 169 (string_constant -> L_STRING .)
    RW_ABS          reduce using rule 169 (string_constant -> L_STRING .)
    RW_SIN          reduce using rule 169 (string_constant -> L_STRING .)
    RW_COS          reduce using rule 169 (string_constant -> L_STRING .)
    RW_TAN          reduce using rule 169 (string_constant -> L_STRING .)
    RW_SUCC         reduce using rule 169 (string_constant -> L_STRING .)
    RW_PRED         reduce using rule 169 (string_constant -> L_STRING .)
    RW_AWAL         reduce using rule 169 (string_constant -> L_STRING .)
    RW_AKHIR        reduce using rule 169 (string_constant -> L_STRING .)
    RW_FIRSTCHAR    reduce using rule 169 (string_constant -> L_STRING .)
    RW_LASTCHAR     reduce using rule 169 (string_constant -> L_STRING .)
    RW_LONG         reduce using rule 169 (string_constant -> L_STRING .)
    RW_ISKOSONG     reduce using rule 169 (string_constant -> L_STRING .)
    RW_INTEGERTOREAL reduce using rule 169 (string_constant -> L_STRING .)
    RW_REALTOINTEGER reduce using rule 169 (string_constant -> L_STRING .)
    RW_THEN         reduce using rule 169 (string_constant -> L_STRING .)
    RW_DO           reduce using rule 169 (string_constant -> L_STRING .)
    INDENT          reduce using rule 169 (string_constant -> L_STRING .)
    S_COLON         reduce using rule 169 (string_constant -> L_STRING .)
    RW_CONSTANT     reduce using rule 169 (string_constant -> L_STRING .)


state 91

    (170) char_constant -> L_CHARACTER .

    S_UP_TO         reduce using rule 170 (char_constant -> L_CHARACTER .)
    S_POWER         reduce using rule 170 (char_constant -> L_CHARACTER .)
    S_TIMES         reduce using rule 170 (char_constant -> L_CHARACTER .)
    S_DIVIDE        reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_DIV          reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_MOD          reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_AND          reduce using rule 170 (char_constant -> L_CHARACTER .)
    S_PLUS          reduce using rule 170 (char_constant -> L_CHARACTER .)
    S_MINUS         reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_OR           reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_XOR          reduce using rule 170 (char_constant -> L_CHARACTER .)
    S_EQUAL         reduce using rule 170 (char_constant -> L_CHARACTER .)
    S_NOT_EQUAL     reduce using rule 170 (char_constant -> L_CHARACTER .)
    S_LESS_THAN_EQUAL reduce using rule 170 (char_constant -> L_CHARACTER .)
    S_GREATER_THAN_EQUAL reduce using rule 170 (char_constant -> L_CHARACTER .)
    S_LESS_THAN     reduce using rule 170 (char_constant -> L_CHARACTER .)
    S_GREATER_THAN  reduce using rule 170 (char_constant -> L_CHARACTER .)
    S_ELEMENT_OF    reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_EQ           reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_NEQ          reduce using rule 170 (char_constant -> L_CHARACTER .)
    S_RIGHT_BRACKET reduce using rule 170 (char_constant -> L_CHARACTER .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 170 (char_constant -> L_CHARACTER .)
    S_COMMA         reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_KAMUS        reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_PROCEDURE    reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_FUNCTION     reduce using rule 170 (char_constant -> L_CHARACTER .)
    $end            reduce using rule 170 (char_constant -> L_CHARACTER .)
    DEDENT          reduce using rule 170 (char_constant -> L_CHARACTER .)
    S_SEMI_COLON    reduce using rule 170 (char_constant -> L_CHARACTER .)
    IDENTIFIER      reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_TYPE         reduce using rule 170 (char_constant -> L_CHARACTER .)
    S_RETURN        reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_IF           reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_DEPEND       reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_WHILE        reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_ITERATE      reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_REPEAT       reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_INPUT        reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_OUTPUT       reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_ABS          reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_SIN          reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_COS          reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_TAN          reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_SUCC         reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_PRED         reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_AWAL         reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_AKHIR        reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_FIRSTCHAR    reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_LASTCHAR     reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_LONG         reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_ISKOSONG     reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_INTEGERTOREAL reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_REALTOINTEGER reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_THEN         reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_DO           reduce using rule 170 (char_constant -> L_CHARACTER .)
    INDENT          reduce using rule 170 (char_constant -> L_CHARACTER .)
    S_COLON         reduce using rule 170 (char_constant -> L_CHARACTER .)
    RW_CONSTANT     reduce using rule 170 (char_constant -> L_CHARACTER .)


state 92

    (165) integer_constant -> L_INTEGER_NUMBER .

    S_UP_TO         reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    S_POWER         reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    S_TIMES         reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    S_DIVIDE        reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_DIV          reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_MOD          reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_AND          reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    S_PLUS          reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    S_MINUS         reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_OR           reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_XOR          reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    S_EQUAL         reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    S_NOT_EQUAL     reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    S_LESS_THAN_EQUAL reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    S_GREATER_THAN_EQUAL reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    S_LESS_THAN     reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    S_GREATER_THAN  reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    S_ELEMENT_OF    reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_EQ           reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_NEQ          reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    S_RIGHT_BRACKET reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_KAMUS        reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_PROCEDURE    reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_FUNCTION     reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    $end            reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    DEDENT          reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    S_SEMI_COLON    reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    S_COMMA         reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    IDENTIFIER      reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_TYPE         reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_CONSTANT     reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    S_RETURN        reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_IF           reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_DEPEND       reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_WHILE        reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_ITERATE      reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_REPEAT       reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_INPUT        reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_OUTPUT       reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_ABS          reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_SIN          reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_COS          reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_TAN          reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_SUCC         reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_PRED         reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_AWAL         reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_AKHIR        reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_FIRSTCHAR    reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_LASTCHAR     reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_LONG         reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_ISKOSONG     reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_INTEGERTOREAL reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_REALTOINTEGER reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_THEN         reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_DO           reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    INDENT          reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    S_COLON         reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)
    RW_TIMES        reduce using rule 165 (integer_constant -> L_INTEGER_NUMBER .)


state 93

    (166) real_constant -> L_REAL_NUMBER .

    S_UP_TO         reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    S_POWER         reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    S_TIMES         reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    S_DIVIDE        reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_DIV          reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_MOD          reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_AND          reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    S_PLUS          reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    S_MINUS         reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_OR           reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_XOR          reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    S_EQUAL         reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    S_NOT_EQUAL     reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    S_LESS_THAN_EQUAL reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    S_GREATER_THAN_EQUAL reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    S_LESS_THAN     reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    S_GREATER_THAN  reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    S_ELEMENT_OF    reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_EQ           reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_NEQ          reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    S_RIGHT_BRACKET reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_KAMUS        reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_PROCEDURE    reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_FUNCTION     reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    $end            reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    DEDENT          reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    S_SEMI_COLON    reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    S_COMMA         reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    IDENTIFIER      reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_TYPE         reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_CONSTANT     reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    S_RETURN        reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_IF           reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_DEPEND       reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_WHILE        reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_ITERATE      reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_REPEAT       reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_INPUT        reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_OUTPUT       reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_ABS          reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_SIN          reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_COS          reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_TAN          reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_SUCC         reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_PRED         reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_AWAL         reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_AKHIR        reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_FIRSTCHAR    reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_LASTCHAR     reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_LONG         reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_ISKOSONG     reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_INTEGERTOREAL reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_REALTOINTEGER reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_THEN         reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    RW_DO           reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    INDENT          reduce using rule 166 (real_constant -> L_REAL_NUMBER .)
    S_COLON         reduce using rule 166 (real_constant -> L_REAL_NUMBER .)


state 94

    (233) abs_function -> RW_ABS . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 185


state 95

    (234) sin_function -> RW_SIN . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 186


state 96

    (235) cos_function -> RW_COS . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 187


state 97

    (236) tan_function -> RW_TAN . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 188


state 98

    (237) succ_function -> RW_SUCC . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 189


state 99

    (238) pred_function -> RW_PRED . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 190


state 100

    (245) awal_function -> RW_AWAL . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 191


state 101

    (246) akhir_function -> RW_AKHIR . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 192


state 102

    (247) firstchar_function -> RW_FIRSTCHAR . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 193


state 103

    (248) lastchar_function -> RW_LASTCHAR . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 194


state 104

    (249) long_function -> RW_LONG . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 195


state 105

    (250) iskosong_function -> RW_ISKOSONG . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 196


state 106

    (253) integer_to_real -> RW_INTEGERTOREAL . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 197


state 107

    (254) real_to_integer -> RW_REALTOINTEGER . S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 198


state 108

    (198) multiplicative_expression -> unary_expression .

    S_TIMES         reduce using rule 198 (multiplicative_expression -> unary_expression .)
    S_DIVIDE        reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_DIV          reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_MOD          reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_AND          reduce using rule 198 (multiplicative_expression -> unary_expression .)
    S_PLUS          reduce using rule 198 (multiplicative_expression -> unary_expression .)
    S_MINUS         reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_OR           reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_XOR          reduce using rule 198 (multiplicative_expression -> unary_expression .)
    S_EQUAL         reduce using rule 198 (multiplicative_expression -> unary_expression .)
    S_NOT_EQUAL     reduce using rule 198 (multiplicative_expression -> unary_expression .)
    S_LESS_THAN_EQUAL reduce using rule 198 (multiplicative_expression -> unary_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 198 (multiplicative_expression -> unary_expression .)
    S_LESS_THAN     reduce using rule 198 (multiplicative_expression -> unary_expression .)
    S_GREATER_THAN  reduce using rule 198 (multiplicative_expression -> unary_expression .)
    S_ELEMENT_OF    reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_EQ           reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_NEQ          reduce using rule 198 (multiplicative_expression -> unary_expression .)
    S_UP_TO         reduce using rule 198 (multiplicative_expression -> unary_expression .)
    S_RIGHT_BRACKET reduce using rule 198 (multiplicative_expression -> unary_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 198 (multiplicative_expression -> unary_expression .)
    S_COMMA         reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_KAMUS        reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_PROCEDURE    reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_FUNCTION     reduce using rule 198 (multiplicative_expression -> unary_expression .)
    $end            reduce using rule 198 (multiplicative_expression -> unary_expression .)
    DEDENT          reduce using rule 198 (multiplicative_expression -> unary_expression .)
    S_SEMI_COLON    reduce using rule 198 (multiplicative_expression -> unary_expression .)
    IDENTIFIER      reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_TYPE         reduce using rule 198 (multiplicative_expression -> unary_expression .)
    S_RETURN        reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_IF           reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_DEPEND       reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_WHILE        reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_ITERATE      reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_REPEAT       reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_INPUT        reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_OUTPUT       reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_ABS          reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_SIN          reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_COS          reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_TAN          reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_SUCC         reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_PRED         reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_AWAL         reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_AKHIR        reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_FIRSTCHAR    reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_LASTCHAR     reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_LONG         reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_ISKOSONG     reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_INTEGERTOREAL reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_REALTOINTEGER reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_THEN         reduce using rule 198 (multiplicative_expression -> unary_expression .)
    RW_DO           reduce using rule 198 (multiplicative_expression -> unary_expression .)
    INDENT          reduce using rule 198 (multiplicative_expression -> unary_expression .)
    S_COLON         reduce using rule 198 (multiplicative_expression -> unary_expression .)


state 109

    (204) unary_expression -> unary_op . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    unary_op                       shift and go to state 109
    unary_expression               shift and go to state 199
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 110

    (205) unary_expression -> exponentiation_expression .

    S_TIMES         reduce using rule 205 (unary_expression -> exponentiation_expression .)
    S_DIVIDE        reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_DIV          reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_MOD          reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_AND          reduce using rule 205 (unary_expression -> exponentiation_expression .)
    S_PLUS          reduce using rule 205 (unary_expression -> exponentiation_expression .)
    S_MINUS         reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_OR           reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_XOR          reduce using rule 205 (unary_expression -> exponentiation_expression .)
    S_EQUAL         reduce using rule 205 (unary_expression -> exponentiation_expression .)
    S_NOT_EQUAL     reduce using rule 205 (unary_expression -> exponentiation_expression .)
    S_LESS_THAN_EQUAL reduce using rule 205 (unary_expression -> exponentiation_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 205 (unary_expression -> exponentiation_expression .)
    S_LESS_THAN     reduce using rule 205 (unary_expression -> exponentiation_expression .)
    S_GREATER_THAN  reduce using rule 205 (unary_expression -> exponentiation_expression .)
    S_ELEMENT_OF    reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_EQ           reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_NEQ          reduce using rule 205 (unary_expression -> exponentiation_expression .)
    S_UP_TO         reduce using rule 205 (unary_expression -> exponentiation_expression .)
    S_RIGHT_BRACKET reduce using rule 205 (unary_expression -> exponentiation_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 205 (unary_expression -> exponentiation_expression .)
    S_COMMA         reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_KAMUS        reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_PROCEDURE    reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_FUNCTION     reduce using rule 205 (unary_expression -> exponentiation_expression .)
    $end            reduce using rule 205 (unary_expression -> exponentiation_expression .)
    DEDENT          reduce using rule 205 (unary_expression -> exponentiation_expression .)
    S_SEMI_COLON    reduce using rule 205 (unary_expression -> exponentiation_expression .)
    IDENTIFIER      reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_TYPE         reduce using rule 205 (unary_expression -> exponentiation_expression .)
    S_RETURN        reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_IF           reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_DEPEND       reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_WHILE        reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_ITERATE      reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_REPEAT       reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_INPUT        reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_OUTPUT       reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_ABS          reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_SIN          reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_COS          reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_TAN          reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_SUCC         reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_PRED         reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_AWAL         reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_AKHIR        reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_FIRSTCHAR    reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_LASTCHAR     reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_LONG         reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_ISKOSONG     reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_INTEGERTOREAL reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_REALTOINTEGER reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_THEN         reduce using rule 205 (unary_expression -> exponentiation_expression .)
    RW_DO           reduce using rule 205 (unary_expression -> exponentiation_expression .)
    INDENT          reduce using rule 205 (unary_expression -> exponentiation_expression .)
    S_COLON         reduce using rule 205 (unary_expression -> exponentiation_expression .)


state 111

    (210) unary_op -> RW_NOT .

    S_PLUS          reduce using rule 210 (unary_op -> RW_NOT .)
    S_MINUS         reduce using rule 210 (unary_op -> RW_NOT .)
    RW_NOT          reduce using rule 210 (unary_op -> RW_NOT .)
    S_LEFT_BRACKET  reduce using rule 210 (unary_op -> RW_NOT .)
    S_LEFT_SQUARE_BRACKET reduce using rule 210 (unary_op -> RW_NOT .)
    IDENTIFIER      reduce using rule 210 (unary_op -> RW_NOT .)
    L_BOOLEAN_TRUE  reduce using rule 210 (unary_op -> RW_NOT .)
    L_BOOLEAN_FALSE reduce using rule 210 (unary_op -> RW_NOT .)
    L_NIL           reduce using rule 210 (unary_op -> RW_NOT .)
    L_INTEGER_NUMBER reduce using rule 210 (unary_op -> RW_NOT .)
    L_REAL_NUMBER   reduce using rule 210 (unary_op -> RW_NOT .)
    L_STRING        reduce using rule 210 (unary_op -> RW_NOT .)
    L_CHARACTER     reduce using rule 210 (unary_op -> RW_NOT .)
    RW_ABS          reduce using rule 210 (unary_op -> RW_NOT .)
    RW_SIN          reduce using rule 210 (unary_op -> RW_NOT .)
    RW_COS          reduce using rule 210 (unary_op -> RW_NOT .)
    RW_TAN          reduce using rule 210 (unary_op -> RW_NOT .)
    RW_SUCC         reduce using rule 210 (unary_op -> RW_NOT .)
    RW_PRED         reduce using rule 210 (unary_op -> RW_NOT .)
    RW_AWAL         reduce using rule 210 (unary_op -> RW_NOT .)
    RW_AKHIR        reduce using rule 210 (unary_op -> RW_NOT .)
    RW_FIRSTCHAR    reduce using rule 210 (unary_op -> RW_NOT .)
    RW_LASTCHAR     reduce using rule 210 (unary_op -> RW_NOT .)
    RW_LONG         reduce using rule 210 (unary_op -> RW_NOT .)
    RW_ISKOSONG     reduce using rule 210 (unary_op -> RW_NOT .)
    RW_INTEGERTOREAL reduce using rule 210 (unary_op -> RW_NOT .)
    RW_REALTOINTEGER reduce using rule 210 (unary_op -> RW_NOT .)


state 112

    (206) exponentiation_expression -> primary_expression .
    (207) exponentiation_expression -> primary_expression . S_POWER exponentiation_expression

    S_TIMES         reduce using rule 206 (exponentiation_expression -> primary_expression .)
    S_DIVIDE        reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_DIV          reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_MOD          reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_AND          reduce using rule 206 (exponentiation_expression -> primary_expression .)
    S_PLUS          reduce using rule 206 (exponentiation_expression -> primary_expression .)
    S_MINUS         reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_OR           reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_XOR          reduce using rule 206 (exponentiation_expression -> primary_expression .)
    S_EQUAL         reduce using rule 206 (exponentiation_expression -> primary_expression .)
    S_NOT_EQUAL     reduce using rule 206 (exponentiation_expression -> primary_expression .)
    S_LESS_THAN_EQUAL reduce using rule 206 (exponentiation_expression -> primary_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 206 (exponentiation_expression -> primary_expression .)
    S_LESS_THAN     reduce using rule 206 (exponentiation_expression -> primary_expression .)
    S_GREATER_THAN  reduce using rule 206 (exponentiation_expression -> primary_expression .)
    S_ELEMENT_OF    reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_EQ           reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_NEQ          reduce using rule 206 (exponentiation_expression -> primary_expression .)
    S_UP_TO         reduce using rule 206 (exponentiation_expression -> primary_expression .)
    S_RIGHT_BRACKET reduce using rule 206 (exponentiation_expression -> primary_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 206 (exponentiation_expression -> primary_expression .)
    S_COMMA         reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_KAMUS        reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_PROCEDURE    reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_FUNCTION     reduce using rule 206 (exponentiation_expression -> primary_expression .)
    $end            reduce using rule 206 (exponentiation_expression -> primary_expression .)
    DEDENT          reduce using rule 206 (exponentiation_expression -> primary_expression .)
    S_SEMI_COLON    reduce using rule 206 (exponentiation_expression -> primary_expression .)
    IDENTIFIER      reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_TYPE         reduce using rule 206 (exponentiation_expression -> primary_expression .)
    S_RETURN        reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_IF           reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_DEPEND       reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_WHILE        reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_ITERATE      reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_REPEAT       reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_INPUT        reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_OUTPUT       reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_ABS          reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_SIN          reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_COS          reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_TAN          reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_SUCC         reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_PRED         reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_AWAL         reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_AKHIR        reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_FIRSTCHAR    reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_LASTCHAR     reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_LONG         reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_ISKOSONG     reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_INTEGERTOREAL reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_REALTOINTEGER reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_THEN         reduce using rule 206 (exponentiation_expression -> primary_expression .)
    RW_DO           reduce using rule 206 (exponentiation_expression -> primary_expression .)
    INDENT          reduce using rule 206 (exponentiation_expression -> primary_expression .)
    S_COLON         reduce using rule 206 (exponentiation_expression -> primary_expression .)
    S_POWER         shift and go to state 201


state 113

    (211) primary_expression -> variable_access .
    (176) indexed_variable -> variable_access . S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> variable_access . S_DOT identifier

    S_POWER         reduce using rule 211 (primary_expression -> variable_access .)
    S_TIMES         reduce using rule 211 (primary_expression -> variable_access .)
    S_DIVIDE        reduce using rule 211 (primary_expression -> variable_access .)
    RW_DIV          reduce using rule 211 (primary_expression -> variable_access .)
    RW_MOD          reduce using rule 211 (primary_expression -> variable_access .)
    RW_AND          reduce using rule 211 (primary_expression -> variable_access .)
    S_PLUS          reduce using rule 211 (primary_expression -> variable_access .)
    S_MINUS         reduce using rule 211 (primary_expression -> variable_access .)
    RW_OR           reduce using rule 211 (primary_expression -> variable_access .)
    RW_XOR          reduce using rule 211 (primary_expression -> variable_access .)
    S_EQUAL         reduce using rule 211 (primary_expression -> variable_access .)
    S_NOT_EQUAL     reduce using rule 211 (primary_expression -> variable_access .)
    S_LESS_THAN_EQUAL reduce using rule 211 (primary_expression -> variable_access .)
    S_GREATER_THAN_EQUAL reduce using rule 211 (primary_expression -> variable_access .)
    S_LESS_THAN     reduce using rule 211 (primary_expression -> variable_access .)
    S_GREATER_THAN  reduce using rule 211 (primary_expression -> variable_access .)
    S_ELEMENT_OF    reduce using rule 211 (primary_expression -> variable_access .)
    RW_EQ           reduce using rule 211 (primary_expression -> variable_access .)
    RW_NEQ          reduce using rule 211 (primary_expression -> variable_access .)
    S_UP_TO         reduce using rule 211 (primary_expression -> variable_access .)
    S_RIGHT_BRACKET reduce using rule 211 (primary_expression -> variable_access .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 211 (primary_expression -> variable_access .)
    S_COMMA         reduce using rule 211 (primary_expression -> variable_access .)
    RW_KAMUS        reduce using rule 211 (primary_expression -> variable_access .)
    RW_PROCEDURE    reduce using rule 211 (primary_expression -> variable_access .)
    RW_FUNCTION     reduce using rule 211 (primary_expression -> variable_access .)
    $end            reduce using rule 211 (primary_expression -> variable_access .)
    DEDENT          reduce using rule 211 (primary_expression -> variable_access .)
    S_SEMI_COLON    reduce using rule 211 (primary_expression -> variable_access .)
    IDENTIFIER      reduce using rule 211 (primary_expression -> variable_access .)
    RW_TYPE         reduce using rule 211 (primary_expression -> variable_access .)
    S_RETURN        reduce using rule 211 (primary_expression -> variable_access .)
    RW_IF           reduce using rule 211 (primary_expression -> variable_access .)
    RW_DEPEND       reduce using rule 211 (primary_expression -> variable_access .)
    RW_WHILE        reduce using rule 211 (primary_expression -> variable_access .)
    RW_ITERATE      reduce using rule 211 (primary_expression -> variable_access .)
    RW_REPEAT       reduce using rule 211 (primary_expression -> variable_access .)
    RW_INPUT        reduce using rule 211 (primary_expression -> variable_access .)
    RW_OUTPUT       reduce using rule 211 (primary_expression -> variable_access .)
    RW_ABS          reduce using rule 211 (primary_expression -> variable_access .)
    RW_SIN          reduce using rule 211 (primary_expression -> variable_access .)
    RW_COS          reduce using rule 211 (primary_expression -> variable_access .)
    RW_TAN          reduce using rule 211 (primary_expression -> variable_access .)
    RW_SUCC         reduce using rule 211 (primary_expression -> variable_access .)
    RW_PRED         reduce using rule 211 (primary_expression -> variable_access .)
    RW_AWAL         reduce using rule 211 (primary_expression -> variable_access .)
    RW_AKHIR        reduce using rule 211 (primary_expression -> variable_access .)
    RW_FIRSTCHAR    reduce using rule 211 (primary_expression -> variable_access .)
    RW_LASTCHAR     reduce using rule 211 (primary_expression -> variable_access .)
    RW_LONG         reduce using rule 211 (primary_expression -> variable_access .)
    RW_ISKOSONG     reduce using rule 211 (primary_expression -> variable_access .)
    RW_INTEGERTOREAL reduce using rule 211 (primary_expression -> variable_access .)
    RW_REALTOINTEGER reduce using rule 211 (primary_expression -> variable_access .)
    RW_THEN         reduce using rule 211 (primary_expression -> variable_access .)
    RW_DO           reduce using rule 211 (primary_expression -> variable_access .)
    INDENT          reduce using rule 211 (primary_expression -> variable_access .)
    S_COLON         reduce using rule 211 (primary_expression -> variable_access .)
    S_LEFT_SQUARE_BRACKET shift and go to state 202
    S_DOT           shift and go to state 203


state 114

    (212) primary_expression -> unsigned_constant .

    S_POWER         reduce using rule 212 (primary_expression -> unsigned_constant .)
    S_TIMES         reduce using rule 212 (primary_expression -> unsigned_constant .)
    S_DIVIDE        reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_DIV          reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_MOD          reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_AND          reduce using rule 212 (primary_expression -> unsigned_constant .)
    S_PLUS          reduce using rule 212 (primary_expression -> unsigned_constant .)
    S_MINUS         reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_OR           reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_XOR          reduce using rule 212 (primary_expression -> unsigned_constant .)
    S_EQUAL         reduce using rule 212 (primary_expression -> unsigned_constant .)
    S_NOT_EQUAL     reduce using rule 212 (primary_expression -> unsigned_constant .)
    S_LESS_THAN_EQUAL reduce using rule 212 (primary_expression -> unsigned_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 212 (primary_expression -> unsigned_constant .)
    S_LESS_THAN     reduce using rule 212 (primary_expression -> unsigned_constant .)
    S_GREATER_THAN  reduce using rule 212 (primary_expression -> unsigned_constant .)
    S_ELEMENT_OF    reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_EQ           reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_NEQ          reduce using rule 212 (primary_expression -> unsigned_constant .)
    S_UP_TO         reduce using rule 212 (primary_expression -> unsigned_constant .)
    S_RIGHT_BRACKET reduce using rule 212 (primary_expression -> unsigned_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 212 (primary_expression -> unsigned_constant .)
    S_COMMA         reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_KAMUS        reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_PROCEDURE    reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_FUNCTION     reduce using rule 212 (primary_expression -> unsigned_constant .)
    $end            reduce using rule 212 (primary_expression -> unsigned_constant .)
    DEDENT          reduce using rule 212 (primary_expression -> unsigned_constant .)
    S_SEMI_COLON    reduce using rule 212 (primary_expression -> unsigned_constant .)
    IDENTIFIER      reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_TYPE         reduce using rule 212 (primary_expression -> unsigned_constant .)
    S_RETURN        reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_IF           reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_DEPEND       reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_WHILE        reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_ITERATE      reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_REPEAT       reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_INPUT        reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_OUTPUT       reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_ABS          reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_SIN          reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_COS          reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_TAN          reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_SUCC         reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_PRED         reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_AWAL         reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_AKHIR        reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_FIRSTCHAR    reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_LASTCHAR     reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_LONG         reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_ISKOSONG     reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_INTEGERTOREAL reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_REALTOINTEGER reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_THEN         reduce using rule 212 (primary_expression -> unsigned_constant .)
    RW_DO           reduce using rule 212 (primary_expression -> unsigned_constant .)
    INDENT          reduce using rule 212 (primary_expression -> unsigned_constant .)
    S_COLON         reduce using rule 212 (primary_expression -> unsigned_constant .)


state 115

    (214) primary_expression -> set_constructor .

    S_POWER         reduce using rule 214 (primary_expression -> set_constructor .)
    S_TIMES         reduce using rule 214 (primary_expression -> set_constructor .)
    S_DIVIDE        reduce using rule 214 (primary_expression -> set_constructor .)
    RW_DIV          reduce using rule 214 (primary_expression -> set_constructor .)
    RW_MOD          reduce using rule 214 (primary_expression -> set_constructor .)
    RW_AND          reduce using rule 214 (primary_expression -> set_constructor .)
    S_PLUS          reduce using rule 214 (primary_expression -> set_constructor .)
    S_MINUS         reduce using rule 214 (primary_expression -> set_constructor .)
    RW_OR           reduce using rule 214 (primary_expression -> set_constructor .)
    RW_XOR          reduce using rule 214 (primary_expression -> set_constructor .)
    S_EQUAL         reduce using rule 214 (primary_expression -> set_constructor .)
    S_NOT_EQUAL     reduce using rule 214 (primary_expression -> set_constructor .)
    S_LESS_THAN_EQUAL reduce using rule 214 (primary_expression -> set_constructor .)
    S_GREATER_THAN_EQUAL reduce using rule 214 (primary_expression -> set_constructor .)
    S_LESS_THAN     reduce using rule 214 (primary_expression -> set_constructor .)
    S_GREATER_THAN  reduce using rule 214 (primary_expression -> set_constructor .)
    S_ELEMENT_OF    reduce using rule 214 (primary_expression -> set_constructor .)
    RW_EQ           reduce using rule 214 (primary_expression -> set_constructor .)
    RW_NEQ          reduce using rule 214 (primary_expression -> set_constructor .)
    S_UP_TO         reduce using rule 214 (primary_expression -> set_constructor .)
    S_RIGHT_BRACKET reduce using rule 214 (primary_expression -> set_constructor .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 214 (primary_expression -> set_constructor .)
    S_COMMA         reduce using rule 214 (primary_expression -> set_constructor .)
    RW_KAMUS        reduce using rule 214 (primary_expression -> set_constructor .)
    RW_PROCEDURE    reduce using rule 214 (primary_expression -> set_constructor .)
    RW_FUNCTION     reduce using rule 214 (primary_expression -> set_constructor .)
    $end            reduce using rule 214 (primary_expression -> set_constructor .)
    DEDENT          reduce using rule 214 (primary_expression -> set_constructor .)
    S_SEMI_COLON    reduce using rule 214 (primary_expression -> set_constructor .)
    IDENTIFIER      reduce using rule 214 (primary_expression -> set_constructor .)
    RW_TYPE         reduce using rule 214 (primary_expression -> set_constructor .)
    S_RETURN        reduce using rule 214 (primary_expression -> set_constructor .)
    RW_IF           reduce using rule 214 (primary_expression -> set_constructor .)
    RW_DEPEND       reduce using rule 214 (primary_expression -> set_constructor .)
    RW_WHILE        reduce using rule 214 (primary_expression -> set_constructor .)
    RW_ITERATE      reduce using rule 214 (primary_expression -> set_constructor .)
    RW_REPEAT       reduce using rule 214 (primary_expression -> set_constructor .)
    RW_INPUT        reduce using rule 214 (primary_expression -> set_constructor .)
    RW_OUTPUT       reduce using rule 214 (primary_expression -> set_constructor .)
    RW_ABS          reduce using rule 214 (primary_expression -> set_constructor .)
    RW_SIN          reduce using rule 214 (primary_expression -> set_constructor .)
    RW_COS          reduce using rule 214 (primary_expression -> set_constructor .)
    RW_TAN          reduce using rule 214 (primary_expression -> set_constructor .)
    RW_SUCC         reduce using rule 214 (primary_expression -> set_constructor .)
    RW_PRED         reduce using rule 214 (primary_expression -> set_constructor .)
    RW_AWAL         reduce using rule 214 (primary_expression -> set_constructor .)
    RW_AKHIR        reduce using rule 214 (primary_expression -> set_constructor .)
    RW_FIRSTCHAR    reduce using rule 214 (primary_expression -> set_constructor .)
    RW_LASTCHAR     reduce using rule 214 (primary_expression -> set_constructor .)
    RW_LONG         reduce using rule 214 (primary_expression -> set_constructor .)
    RW_ISKOSONG     reduce using rule 214 (primary_expression -> set_constructor .)
    RW_INTEGERTOREAL reduce using rule 214 (primary_expression -> set_constructor .)
    RW_REALTOINTEGER reduce using rule 214 (primary_expression -> set_constructor .)
    RW_THEN         reduce using rule 214 (primary_expression -> set_constructor .)
    RW_DO           reduce using rule 214 (primary_expression -> set_constructor .)
    INDENT          reduce using rule 214 (primary_expression -> set_constructor .)
    S_COLON         reduce using rule 214 (primary_expression -> set_constructor .)


state 116

    (173) variable_access -> indexed_variable .

    S_LEFT_SQUARE_BRACKET reduce using rule 173 (variable_access -> indexed_variable .)
    S_DOT           reduce using rule 173 (variable_access -> indexed_variable .)
    S_POWER         reduce using rule 173 (variable_access -> indexed_variable .)
    S_TIMES         reduce using rule 173 (variable_access -> indexed_variable .)
    S_DIVIDE        reduce using rule 173 (variable_access -> indexed_variable .)
    RW_DIV          reduce using rule 173 (variable_access -> indexed_variable .)
    RW_MOD          reduce using rule 173 (variable_access -> indexed_variable .)
    RW_AND          reduce using rule 173 (variable_access -> indexed_variable .)
    S_PLUS          reduce using rule 173 (variable_access -> indexed_variable .)
    S_MINUS         reduce using rule 173 (variable_access -> indexed_variable .)
    RW_OR           reduce using rule 173 (variable_access -> indexed_variable .)
    RW_XOR          reduce using rule 173 (variable_access -> indexed_variable .)
    S_EQUAL         reduce using rule 173 (variable_access -> indexed_variable .)
    S_NOT_EQUAL     reduce using rule 173 (variable_access -> indexed_variable .)
    S_LESS_THAN_EQUAL reduce using rule 173 (variable_access -> indexed_variable .)
    S_GREATER_THAN_EQUAL reduce using rule 173 (variable_access -> indexed_variable .)
    S_LESS_THAN     reduce using rule 173 (variable_access -> indexed_variable .)
    S_GREATER_THAN  reduce using rule 173 (variable_access -> indexed_variable .)
    S_ELEMENT_OF    reduce using rule 173 (variable_access -> indexed_variable .)
    RW_EQ           reduce using rule 173 (variable_access -> indexed_variable .)
    RW_NEQ          reduce using rule 173 (variable_access -> indexed_variable .)
    S_UP_TO         reduce using rule 173 (variable_access -> indexed_variable .)
    S_RIGHT_BRACKET reduce using rule 173 (variable_access -> indexed_variable .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 173 (variable_access -> indexed_variable .)
    S_COMMA         reduce using rule 173 (variable_access -> indexed_variable .)
    RW_KAMUS        reduce using rule 173 (variable_access -> indexed_variable .)
    RW_PROCEDURE    reduce using rule 173 (variable_access -> indexed_variable .)
    RW_FUNCTION     reduce using rule 173 (variable_access -> indexed_variable .)
    $end            reduce using rule 173 (variable_access -> indexed_variable .)
    DEDENT          reduce using rule 173 (variable_access -> indexed_variable .)
    S_SEMI_COLON    reduce using rule 173 (variable_access -> indexed_variable .)
    IDENTIFIER      reduce using rule 173 (variable_access -> indexed_variable .)
    RW_TYPE         reduce using rule 173 (variable_access -> indexed_variable .)
    S_RETURN        reduce using rule 173 (variable_access -> indexed_variable .)
    RW_IF           reduce using rule 173 (variable_access -> indexed_variable .)
    RW_DEPEND       reduce using rule 173 (variable_access -> indexed_variable .)
    RW_WHILE        reduce using rule 173 (variable_access -> indexed_variable .)
    RW_ITERATE      reduce using rule 173 (variable_access -> indexed_variable .)
    RW_REPEAT       reduce using rule 173 (variable_access -> indexed_variable .)
    RW_INPUT        reduce using rule 173 (variable_access -> indexed_variable .)
    RW_OUTPUT       reduce using rule 173 (variable_access -> indexed_variable .)
    RW_ABS          reduce using rule 173 (variable_access -> indexed_variable .)
    RW_SIN          reduce using rule 173 (variable_access -> indexed_variable .)
    RW_COS          reduce using rule 173 (variable_access -> indexed_variable .)
    RW_TAN          reduce using rule 173 (variable_access -> indexed_variable .)
    RW_SUCC         reduce using rule 173 (variable_access -> indexed_variable .)
    RW_PRED         reduce using rule 173 (variable_access -> indexed_variable .)
    RW_AWAL         reduce using rule 173 (variable_access -> indexed_variable .)
    RW_AKHIR        reduce using rule 173 (variable_access -> indexed_variable .)
    RW_FIRSTCHAR    reduce using rule 173 (variable_access -> indexed_variable .)
    RW_LASTCHAR     reduce using rule 173 (variable_access -> indexed_variable .)
    RW_LONG         reduce using rule 173 (variable_access -> indexed_variable .)
    RW_ISKOSONG     reduce using rule 173 (variable_access -> indexed_variable .)
    RW_INTEGERTOREAL reduce using rule 173 (variable_access -> indexed_variable .)
    RW_REALTOINTEGER reduce using rule 173 (variable_access -> indexed_variable .)
    RW_THEN         reduce using rule 173 (variable_access -> indexed_variable .)
    RW_DO           reduce using rule 173 (variable_access -> indexed_variable .)
    INDENT          reduce using rule 173 (variable_access -> indexed_variable .)
    S_COLON         reduce using rule 173 (variable_access -> indexed_variable .)
    S_ASSIGNMENT    reduce using rule 173 (variable_access -> indexed_variable .)
    RW_TIMES        reduce using rule 173 (variable_access -> indexed_variable .)


state 117

    (174) variable_access -> field_designator .

    S_LEFT_SQUARE_BRACKET reduce using rule 174 (variable_access -> field_designator .)
    S_DOT           reduce using rule 174 (variable_access -> field_designator .)
    S_POWER         reduce using rule 174 (variable_access -> field_designator .)
    S_TIMES         reduce using rule 174 (variable_access -> field_designator .)
    S_DIVIDE        reduce using rule 174 (variable_access -> field_designator .)
    RW_DIV          reduce using rule 174 (variable_access -> field_designator .)
    RW_MOD          reduce using rule 174 (variable_access -> field_designator .)
    RW_AND          reduce using rule 174 (variable_access -> field_designator .)
    S_PLUS          reduce using rule 174 (variable_access -> field_designator .)
    S_MINUS         reduce using rule 174 (variable_access -> field_designator .)
    RW_OR           reduce using rule 174 (variable_access -> field_designator .)
    RW_XOR          reduce using rule 174 (variable_access -> field_designator .)
    S_EQUAL         reduce using rule 174 (variable_access -> field_designator .)
    S_NOT_EQUAL     reduce using rule 174 (variable_access -> field_designator .)
    S_LESS_THAN_EQUAL reduce using rule 174 (variable_access -> field_designator .)
    S_GREATER_THAN_EQUAL reduce using rule 174 (variable_access -> field_designator .)
    S_LESS_THAN     reduce using rule 174 (variable_access -> field_designator .)
    S_GREATER_THAN  reduce using rule 174 (variable_access -> field_designator .)
    S_ELEMENT_OF    reduce using rule 174 (variable_access -> field_designator .)
    RW_EQ           reduce using rule 174 (variable_access -> field_designator .)
    RW_NEQ          reduce using rule 174 (variable_access -> field_designator .)
    S_UP_TO         reduce using rule 174 (variable_access -> field_designator .)
    S_RIGHT_BRACKET reduce using rule 174 (variable_access -> field_designator .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 174 (variable_access -> field_designator .)
    S_COMMA         reduce using rule 174 (variable_access -> field_designator .)
    RW_KAMUS        reduce using rule 174 (variable_access -> field_designator .)
    RW_PROCEDURE    reduce using rule 174 (variable_access -> field_designator .)
    RW_FUNCTION     reduce using rule 174 (variable_access -> field_designator .)
    $end            reduce using rule 174 (variable_access -> field_designator .)
    DEDENT          reduce using rule 174 (variable_access -> field_designator .)
    S_SEMI_COLON    reduce using rule 174 (variable_access -> field_designator .)
    IDENTIFIER      reduce using rule 174 (variable_access -> field_designator .)
    RW_TYPE         reduce using rule 174 (variable_access -> field_designator .)
    S_RETURN        reduce using rule 174 (variable_access -> field_designator .)
    RW_IF           reduce using rule 174 (variable_access -> field_designator .)
    RW_DEPEND       reduce using rule 174 (variable_access -> field_designator .)
    RW_WHILE        reduce using rule 174 (variable_access -> field_designator .)
    RW_ITERATE      reduce using rule 174 (variable_access -> field_designator .)
    RW_REPEAT       reduce using rule 174 (variable_access -> field_designator .)
    RW_INPUT        reduce using rule 174 (variable_access -> field_designator .)
    RW_OUTPUT       reduce using rule 174 (variable_access -> field_designator .)
    RW_ABS          reduce using rule 174 (variable_access -> field_designator .)
    RW_SIN          reduce using rule 174 (variable_access -> field_designator .)
    RW_COS          reduce using rule 174 (variable_access -> field_designator .)
    RW_TAN          reduce using rule 174 (variable_access -> field_designator .)
    RW_SUCC         reduce using rule 174 (variable_access -> field_designator .)
    RW_PRED         reduce using rule 174 (variable_access -> field_designator .)
    RW_AWAL         reduce using rule 174 (variable_access -> field_designator .)
    RW_AKHIR        reduce using rule 174 (variable_access -> field_designator .)
    RW_FIRSTCHAR    reduce using rule 174 (variable_access -> field_designator .)
    RW_LASTCHAR     reduce using rule 174 (variable_access -> field_designator .)
    RW_LONG         reduce using rule 174 (variable_access -> field_designator .)
    RW_ISKOSONG     reduce using rule 174 (variable_access -> field_designator .)
    RW_INTEGERTOREAL reduce using rule 174 (variable_access -> field_designator .)
    RW_REALTOINTEGER reduce using rule 174 (variable_access -> field_designator .)
    RW_THEN         reduce using rule 174 (variable_access -> field_designator .)
    RW_DO           reduce using rule 174 (variable_access -> field_designator .)
    INDENT          reduce using rule 174 (variable_access -> field_designator .)
    S_COLON         reduce using rule 174 (variable_access -> field_designator .)
    S_ASSIGNMENT    reduce using rule 174 (variable_access -> field_designator .)
    RW_TIMES        reduce using rule 174 (variable_access -> field_designator .)


state 118

    (216) set_constructor -> S_LEFT_SQUARE_BRACKET . member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> S_LEFT_SQUARE_BRACKET . S_RIGHT_SQUARE_BRACKET
    (218) member_designator_list -> . member_designator_list S_COMMA member_designator
    (219) member_designator_list -> . member_designator
    (220) member_designator -> . member_designator S_UP_TO expression
    (221) member_designator -> . expression
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_RIGHT_SQUARE_BRACKET shift and go to state 205
    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    member_designator_list         shift and go to state 204
    member_designator              shift and go to state 206
    expression                     shift and go to state 207
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 119

    (78) formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list . S_RIGHT_BRACKET

    S_RIGHT_BRACKET shift and go to state 208


state 120

    (79) formal_parameter_section_list -> empty .

    S_RIGHT_BRACKET reduce using rule 79 (formal_parameter_section_list -> empty .)


state 121

    (80) formal_parameter_section_list -> formal_parameter_section .
    (81) formal_parameter_section -> formal_parameter_section . S_SEMI_COLON parameter_specification
    (82) formal_parameter_section -> formal_parameter_section . S_COMMA parameter_specification

    S_RIGHT_BRACKET reduce using rule 80 (formal_parameter_section_list -> formal_parameter_section .)
    S_SEMI_COLON    shift and go to state 209
    S_COMMA         shift and go to state 210


state 122

    (83) formal_parameter_section -> parameter_specification .

    S_SEMI_COLON    reduce using rule 83 (formal_parameter_section -> parameter_specification .)
    S_COMMA         reduce using rule 83 (formal_parameter_section -> parameter_specification .)
    S_RIGHT_BRACKET reduce using rule 83 (formal_parameter_section -> parameter_specification .)


state 123

    (84) parameter_specification -> procedure_parameter_type . variable_sub_declaration
    (60) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (256) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    variable_sub_declaration       shift and go to state 211
    identifier_list                shift and go to state 35
    identifier                     shift and go to state 36

state 124

    (85) procedure_parameter_type -> RW_INPUT .
    (87) procedure_parameter_type -> RW_INPUT . S_DIVIDE RW_OUTPUT

    IDENTIFIER      reduce using rule 85 (procedure_parameter_type -> RW_INPUT .)
    S_DIVIDE        shift and go to state 212


state 125

    (86) procedure_parameter_type -> RW_OUTPUT .

    IDENTIFIER      reduce using rule 86 (procedure_parameter_type -> RW_OUTPUT .)


state 126

    (9) block -> kamus_declaration INDENT constant_declaration_block . type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (13) type_declaration_block -> . empty
    (14) type_declaration_block -> . type_declaration
    (255) empty -> .
    (66) type_declaration -> . type_declaration type_sub_declaration
    (67) type_declaration -> . type_sub_declaration
    (68) type_sub_declaration -> . RW_TYPE identifier S_COLON type_variety

    IDENTIFIER      reduce using rule 255 (empty -> .)
    DEDENT          reduce using rule 255 (empty -> .)
    RW_PROCEDURE    reduce using rule 255 (empty -> .)
    RW_FUNCTION     reduce using rule 255 (empty -> .)
    RW_TYPE         shift and go to state 217

    type_declaration_block         shift and go to state 213
    empty                          shift and go to state 214
    type_declaration               shift and go to state 215
    type_sub_declaration           shift and go to state 216

state 127

    (11) constant_declaration_block -> empty .

    RW_TYPE         reduce using rule 11 (constant_declaration_block -> empty .)
    IDENTIFIER      reduce using rule 11 (constant_declaration_block -> empty .)
    DEDENT          reduce using rule 11 (constant_declaration_block -> empty .)
    RW_PROCEDURE    reduce using rule 11 (constant_declaration_block -> empty .)
    RW_FUNCTION     reduce using rule 11 (constant_declaration_block -> empty .)


state 128

    (12) constant_declaration_block -> constant_declaration .
    (63) constant_declaration -> constant_declaration . constant_sub_declaration
    (65) constant_sub_declaration -> . RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant

    RW_TYPE         reduce using rule 12 (constant_declaration_block -> constant_declaration .)
    IDENTIFIER      reduce using rule 12 (constant_declaration_block -> constant_declaration .)
    DEDENT          reduce using rule 12 (constant_declaration_block -> constant_declaration .)
    RW_PROCEDURE    reduce using rule 12 (constant_declaration_block -> constant_declaration .)
    RW_FUNCTION     reduce using rule 12 (constant_declaration_block -> constant_declaration .)
    RW_CONSTANT     shift and go to state 130

    constant_sub_declaration       shift and go to state 218

state 129

    (64) constant_declaration -> constant_sub_declaration .

    RW_CONSTANT     reduce using rule 64 (constant_declaration -> constant_sub_declaration .)
    RW_TYPE         reduce using rule 64 (constant_declaration -> constant_sub_declaration .)
    IDENTIFIER      reduce using rule 64 (constant_declaration -> constant_sub_declaration .)
    DEDENT          reduce using rule 64 (constant_declaration -> constant_sub_declaration .)
    RW_PROCEDURE    reduce using rule 64 (constant_declaration -> constant_sub_declaration .)
    RW_FUNCTION     reduce using rule 64 (constant_declaration -> constant_sub_declaration .)


state 130

    (65) constant_sub_declaration -> RW_CONSTANT . identifier S_COLON type_denoter S_EQUAL constant
    (256) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    identifier                     shift and go to state 219

state 131

    (10) block -> kamus_declaration algorithm_block procedure_and_function_implementation_block .

    $end            reduce using rule 10 (block -> kamus_declaration algorithm_block procedure_and_function_implementation_block .)


state 132

    (20) procedure_and_function_implementation_block -> empty .

    $end            reduce using rule 20 (procedure_and_function_implementation_block -> empty .)


state 133

    (21) procedure_and_function_implementation_block -> subprogram_implementation_list .
    (22) subprogram_implementation_list -> subprogram_implementation_list . subprogram_implementation
    (24) subprogram_implementation -> . procedure_implementation
    (25) subprogram_implementation -> . function_implementation
    (26) procedure_implementation -> . procedure_declaration procedure_implementation_block
    (27) procedure_implementation -> . procedure_declaration
    (30) function_implementation -> . function_declaration function_implementation_block
    (31) function_implementation -> . function_declaration
    (76) procedure_declaration -> . procedure_identifier formal_parameter_list
    (88) function_declaration -> . function_identification function_formal_parameter_list function_return_type
    (89) function_declaration -> . function_identification function_return_type
    (77) procedure_identifier -> . RW_PROCEDURE identifier
    (90) function_identification -> . RW_FUNCTION identifier

    $end            reduce using rule 21 (procedure_and_function_implementation_block -> subprogram_implementation_list .)
    RW_PROCEDURE    shift and go to state 9
    RW_FUNCTION     shift and go to state 8

    subprogram_implementation      shift and go to state 220
    procedure_implementation       shift and go to state 135
    function_implementation        shift and go to state 136
    procedure_declaration          shift and go to state 137
    function_declaration           shift and go to state 138
    procedure_identifier           shift and go to state 7
    function_identification        shift and go to state 6

state 134

    (23) subprogram_implementation_list -> subprogram_implementation .

    RW_PROCEDURE    reduce using rule 23 (subprogram_implementation_list -> subprogram_implementation .)
    RW_FUNCTION     reduce using rule 23 (subprogram_implementation_list -> subprogram_implementation .)
    $end            reduce using rule 23 (subprogram_implementation_list -> subprogram_implementation .)


state 135

    (24) subprogram_implementation -> procedure_implementation .

    RW_PROCEDURE    reduce using rule 24 (subprogram_implementation -> procedure_implementation .)
    RW_FUNCTION     reduce using rule 24 (subprogram_implementation -> procedure_implementation .)
    $end            reduce using rule 24 (subprogram_implementation -> procedure_implementation .)


state 136

    (25) subprogram_implementation -> function_implementation .

    RW_PROCEDURE    reduce using rule 25 (subprogram_implementation -> function_implementation .)
    RW_FUNCTION     reduce using rule 25 (subprogram_implementation -> function_implementation .)
    $end            reduce using rule 25 (subprogram_implementation -> function_implementation .)


state 137

    (26) procedure_implementation -> procedure_declaration . procedure_implementation_block
    (27) procedure_implementation -> procedure_declaration .
    (28) procedure_implementation_block -> . kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
    (29) procedure_implementation_block -> . kamus_declaration algorithm_block
    (7) kamus_declaration -> . RW_KAMUS
    (8) kamus_declaration -> . RW_KAMUS RW_LOKAL

    RW_PROCEDURE    reduce using rule 27 (procedure_implementation -> procedure_declaration .)
    RW_FUNCTION     reduce using rule 27 (procedure_implementation -> procedure_declaration .)
    $end            reduce using rule 27 (procedure_implementation -> procedure_declaration .)
    RW_KAMUS        shift and go to state 14

    procedure_implementation_block shift and go to state 221
    kamus_declaration              shift and go to state 222

state 138

    (30) function_implementation -> function_declaration . function_implementation_block
    (31) function_implementation -> function_declaration .
    (32) function_implementation_block -> . kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
    (33) function_implementation_block -> . kamus_declaration algorithm_block
    (7) kamus_declaration -> . RW_KAMUS
    (8) kamus_declaration -> . RW_KAMUS RW_LOKAL

    RW_PROCEDURE    reduce using rule 31 (function_implementation -> function_declaration .)
    RW_FUNCTION     reduce using rule 31 (function_implementation -> function_declaration .)
    $end            reduce using rule 31 (function_implementation -> function_declaration .)
    RW_KAMUS        shift and go to state 14

    function_implementation_block  shift and go to state 223
    kamus_declaration              shift and go to state 224

state 139

    (19) algorithm_block -> RW_ALGORITMA statement_part .

    RW_PROCEDURE    reduce using rule 19 (algorithm_block -> RW_ALGORITMA statement_part .)
    RW_FUNCTION     reduce using rule 19 (algorithm_block -> RW_ALGORITMA statement_part .)
    $end            reduce using rule 19 (algorithm_block -> RW_ALGORITMA statement_part .)


state 140

    (100) statement_part -> compound_statement .

    RW_PROCEDURE    reduce using rule 100 (statement_part -> compound_statement .)
    RW_FUNCTION     reduce using rule 100 (statement_part -> compound_statement .)
    $end            reduce using rule 100 (statement_part -> compound_statement .)


state 141

    (101) compound_statement -> INDENT . statement_sequence DEDENT
    (102) statement_sequence -> . statement_sequence S_SEMI_COLON statement
    (103) statement_sequence -> . statement_sequence statement
    (104) statement_sequence -> . statement
    (105) statement -> . assignment_statement
    (106) statement -> . procedure_statement
    (107) statement -> . function_returned_statement
    (108) statement -> . if_statement
    (109) statement -> . depend_on_statement
    (110) statement -> . while_statement
    (111) statement -> . traversal_statement
    (112) statement -> . repeat_statement
    (113) statement -> . iterate_stop_statement
    (114) assignment_statement -> . variable_access S_ASSIGNMENT expression
    (115) procedure_statement -> . builtin_procedure_statements
    (116) procedure_statement -> . identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
    (117) procedure_statement -> . identifier
    (131) function_returned_statement -> . S_RETURN expression
    (136) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement
    (137) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
    (132) depend_on_statement -> . RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (145) while_statement -> . RW_WHILE boolean_expression RW_DO compound_statement
    (147) traversal_statement -> . control_variable RW_TRAVERSAL traversal_range_value compound_statement
    (139) repeat_statement -> . repeat_until_statement
    (140) repeat_statement -> . repeat_times_statement
    (146) iterate_stop_statement -> . RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (121) builtin_procedure_statements -> . input_statement
    (122) builtin_procedure_statements -> . output_statement
    (256) identifier -> . IDENTIFIER
    (149) control_variable -> . identifier
    (141) repeat_until_statement -> . RW_REPEAT compound_statement RW_UNTIL boolean_expression
    (142) repeat_times_statement -> . RW_REPEAT variable_access RW_TIMES compound_statement
    (143) repeat_times_statement -> . RW_REPEAT integer_constant RW_TIMES compound_statement
    (144) repeat_times_statement -> . RW_REPEAT function_designator RW_TIMES compound_statement
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (123) input_statement -> . RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET
    (127) output_statement -> . RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_RETURN        shift and go to state 239
    RW_IF           shift and go to state 240
    RW_DEPEND       shift and go to state 241
    RW_WHILE        shift and go to state 242
    RW_ITERATE      shift and go to state 246
    IDENTIFIER      shift and go to state 11
    RW_REPEAT       shift and go to state 250
    RW_INPUT        shift and go to state 251
    RW_OUTPUT       shift and go to state 252
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    statement_sequence             shift and go to state 225
    statement                      shift and go to state 226
    assignment_statement           shift and go to state 227
    procedure_statement            shift and go to state 228
    function_returned_statement    shift and go to state 229
    if_statement                   shift and go to state 230
    depend_on_statement            shift and go to state 231
    while_statement                shift and go to state 232
    traversal_statement            shift and go to state 233
    repeat_statement               shift and go to state 234
    iterate_stop_statement         shift and go to state 235
    variable_access                shift and go to state 236
    builtin_procedure_statements   shift and go to state 237
    identifier                     shift and go to state 238
    control_variable               shift and go to state 243
    repeat_until_statement         shift and go to state 244
    repeat_times_statement         shift and go to state 245
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    function_designator            shift and go to state 247
    input_statement                shift and go to state 248
    output_statement               shift and go to state 249
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 142

    (92) function_formal_parameter_list -> S_LEFT_BRACKET function_parameter_list_option S_RIGHT_BRACKET .

    S_RETURN        reduce using rule 92 (function_formal_parameter_list -> S_LEFT_BRACKET function_parameter_list_option S_RIGHT_BRACKET .)


state 143

    (96) function_parameter_list -> function_parameter_list S_SEMI_COLON . function_parameter_declaration
    (99) function_parameter_declaration -> . variable_sub_declaration
    (60) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (256) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    function_parameter_declaration shift and go to state 253
    variable_sub_declaration       shift and go to state 34
    identifier_list                shift and go to state 35
    identifier                     shift and go to state 36

state 144

    (97) function_parameter_list -> function_parameter_list S_COMMA . function_parameter_declaration
    (99) function_parameter_declaration -> . variable_sub_declaration
    (60) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (256) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    function_parameter_declaration shift and go to state 254
    variable_sub_declaration       shift and go to state 34
    identifier_list                shift and go to state 35
    identifier                     shift and go to state 36

state 145

    (60) variable_sub_declaration -> identifier_list S_COLON . type_denoter
    (34) type_denoter -> . ordinal_type
    (35) type_denoter -> . structured_type
    (36) type_denoter -> . RW_INTEGER
    (37) type_denoter -> . RW_REAL
    (38) type_denoter -> . RW_STRING
    (39) type_denoter -> . RW_CHARACTER
    (40) type_denoter -> . RW_BOOLEAN
    (41) ordinal_type -> . enumerated_type
    (42) ordinal_type -> . subrange_type
    (43) ordinal_type -> . identifier
    (51) structured_type -> . array_type
    (44) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (45) subrange_type -> . subrange_type_option
    (256) identifier -> . IDENTIFIER
    (52) array_type -> . RW_ARRAY array_index RW_OF component_type
    (46) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (47) subrange_option -> . identifier
    (48) subrange_option -> . constant
    (49) subrange_option -> . function_designator
    (50) subrange_option -> . expression
    (154) constant -> . string_char_constant
    (155) constant -> . non_string_constant
    (156) constant -> . sign non_string_constant
    (157) constant -> . boolean_constant
    (158) constant -> . nil_constant
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (159) sign -> . S_PLUS
    (160) sign -> . S_MINUS
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier

    RW_INTEGER      shift and go to state 40
    RW_REAL         shift and go to state 41
    RW_STRING       shift and go to state 42
    RW_CHARACTER    shift and go to state 43
    RW_BOOLEAN      shift and go to state 44
    S_LEFT_BRACKET  shift and go to state 49
    IDENTIFIER      shift and go to state 11
    RW_ARRAY        shift and go to state 51
    S_PLUS          shift and go to state 70
    S_MINUS         shift and go to state 71
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107
    RW_NOT          shift and go to state 111
    S_LEFT_SQUARE_BRACKET shift and go to state 118

    type_denoter                   shift and go to state 255
    ordinal_type                   shift and go to state 38
    structured_type                shift and go to state 39
    enumerated_type                shift and go to state 45
    subrange_type                  shift and go to state 46
    identifier                     shift and go to state 47
    array_type                     shift and go to state 48
    subrange_type_option           shift and go to state 50
    subrange_option                shift and go to state 52
    constant                       shift and go to state 53
    function_designator            shift and go to state 54
    expression                     shift and go to state 55
    string_char_constant           shift and go to state 56
    non_string_constant            shift and go to state 57
    sign                           shift and go to state 58
    boolean_constant               shift and go to state 59
    nil_constant                   shift and go to state 60
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    additive_expression            shift and go to state 65
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117

state 146

    (5) identifier_list -> identifier_list S_COMMA . identifier
    (256) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    identifier                     shift and go to state 256

state 147

    (226) user_defined_function_call -> identifier function_actual_parameter_list .

    S_UP_TO         reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_POWER         reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_TIMES         reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_DIVIDE        reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_DIV          reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_MOD          reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_AND          reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_PLUS          reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_MINUS         reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_OR           reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_XOR          reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_EQUAL         reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_NOT_EQUAL     reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_LESS_THAN_EQUAL reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_GREATER_THAN_EQUAL reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_LESS_THAN     reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_GREATER_THAN  reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_ELEMENT_OF    reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_EQ           reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_NEQ          reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_LEFT_SQUARE_BRACKET reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_DOT           reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_RIGHT_BRACKET reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_COMMA         reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_KAMUS        reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_PROCEDURE    reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_FUNCTION     reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    $end            reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    DEDENT          reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_SEMI_COLON    reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    IDENTIFIER      reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_TYPE         reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_RETURN        reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_IF           reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_DEPEND       reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_WHILE        reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_ITERATE      reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_REPEAT       reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_INPUT        reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_OUTPUT       reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_ABS          reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_SIN          reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_COS          reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_TAN          reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_SUCC         reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_PRED         reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_AWAL         reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_AKHIR        reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_FIRSTCHAR    reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_LASTCHAR     reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_LONG         reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_ISKOSONG     reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_INTEGERTOREAL reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_REALTOINTEGER reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_THEN         reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_DO           reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    INDENT          reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_COLON         reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    S_ASSIGNMENT    reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)
    RW_TIMES        reduce using rule 226 (user_defined_function_call -> identifier function_actual_parameter_list .)


state 148

    (93) function_actual_parameter_list -> S_LEFT_BRACKET . actual_parameter_list S_RIGHT_BRACKET
    (118) actual_parameter_list -> . actual_parameter_list S_COMMA actual_parameter
    (119) actual_parameter_list -> . actual_parameter
    (120) actual_parameter -> . expression
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    actual_parameter_list          shift and go to state 257
    actual_parameter               shift and go to state 258
    expression                     shift and go to state 259
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 149

    (213) primary_expression -> S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    expression                     shift and go to state 151
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 150

    (44) enumerated_type -> S_LEFT_BRACKET identifier_list . S_RIGHT_BRACKET
    (5) identifier_list -> identifier_list . S_COMMA identifier

    S_RIGHT_BRACKET shift and go to state 260
    S_COMMA         shift and go to state 146


state 151

    (213) primary_expression -> S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 261
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 152

    (6) identifier_list -> identifier .
    (172) variable_access -> identifier .
    (226) user_defined_function_call -> identifier . function_actual_parameter_list
    (93) function_actual_parameter_list -> . S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET

  ! reduce/reduce conflict for S_RIGHT_BRACKET resolved using rule 6 (identifier_list -> identifier .)
    S_RIGHT_BRACKET reduce using rule 6 (identifier_list -> identifier .)
    S_COMMA         reduce using rule 6 (identifier_list -> identifier .)
    S_LEFT_SQUARE_BRACKET reduce using rule 172 (variable_access -> identifier .)
    S_DOT           reduce using rule 172 (variable_access -> identifier .)
    S_POWER         reduce using rule 172 (variable_access -> identifier .)
    S_TIMES         reduce using rule 172 (variable_access -> identifier .)
    S_DIVIDE        reduce using rule 172 (variable_access -> identifier .)
    RW_DIV          reduce using rule 172 (variable_access -> identifier .)
    RW_MOD          reduce using rule 172 (variable_access -> identifier .)
    RW_AND          reduce using rule 172 (variable_access -> identifier .)
    S_PLUS          reduce using rule 172 (variable_access -> identifier .)
    S_MINUS         reduce using rule 172 (variable_access -> identifier .)
    RW_OR           reduce using rule 172 (variable_access -> identifier .)
    RW_XOR          reduce using rule 172 (variable_access -> identifier .)
    S_EQUAL         reduce using rule 172 (variable_access -> identifier .)
    S_NOT_EQUAL     reduce using rule 172 (variable_access -> identifier .)
    S_LESS_THAN_EQUAL reduce using rule 172 (variable_access -> identifier .)
    S_GREATER_THAN_EQUAL reduce using rule 172 (variable_access -> identifier .)
    S_LESS_THAN     reduce using rule 172 (variable_access -> identifier .)
    S_GREATER_THAN  reduce using rule 172 (variable_access -> identifier .)
    S_ELEMENT_OF    reduce using rule 172 (variable_access -> identifier .)
    RW_EQ           reduce using rule 172 (variable_access -> identifier .)
    RW_NEQ          reduce using rule 172 (variable_access -> identifier .)
    S_LEFT_BRACKET  shift and go to state 148

  ! S_RIGHT_BRACKET [ reduce using rule 172 (variable_access -> identifier .) ]

    function_actual_parameter_list shift and go to state 147

state 153

    (208) unary_op -> S_PLUS .

    S_PLUS          reduce using rule 208 (unary_op -> S_PLUS .)
    S_MINUS         reduce using rule 208 (unary_op -> S_PLUS .)
    RW_NOT          reduce using rule 208 (unary_op -> S_PLUS .)
    S_LEFT_BRACKET  reduce using rule 208 (unary_op -> S_PLUS .)
    S_LEFT_SQUARE_BRACKET reduce using rule 208 (unary_op -> S_PLUS .)
    IDENTIFIER      reduce using rule 208 (unary_op -> S_PLUS .)
    L_BOOLEAN_TRUE  reduce using rule 208 (unary_op -> S_PLUS .)
    L_BOOLEAN_FALSE reduce using rule 208 (unary_op -> S_PLUS .)
    L_NIL           reduce using rule 208 (unary_op -> S_PLUS .)
    L_INTEGER_NUMBER reduce using rule 208 (unary_op -> S_PLUS .)
    L_REAL_NUMBER   reduce using rule 208 (unary_op -> S_PLUS .)
    L_STRING        reduce using rule 208 (unary_op -> S_PLUS .)
    L_CHARACTER     reduce using rule 208 (unary_op -> S_PLUS .)
    RW_ABS          reduce using rule 208 (unary_op -> S_PLUS .)
    RW_SIN          reduce using rule 208 (unary_op -> S_PLUS .)
    RW_COS          reduce using rule 208 (unary_op -> S_PLUS .)
    RW_TAN          reduce using rule 208 (unary_op -> S_PLUS .)
    RW_SUCC         reduce using rule 208 (unary_op -> S_PLUS .)
    RW_PRED         reduce using rule 208 (unary_op -> S_PLUS .)
    RW_AWAL         reduce using rule 208 (unary_op -> S_PLUS .)
    RW_AKHIR        reduce using rule 208 (unary_op -> S_PLUS .)
    RW_FIRSTCHAR    reduce using rule 208 (unary_op -> S_PLUS .)
    RW_LASTCHAR     reduce using rule 208 (unary_op -> S_PLUS .)
    RW_LONG         reduce using rule 208 (unary_op -> S_PLUS .)
    RW_ISKOSONG     reduce using rule 208 (unary_op -> S_PLUS .)
    RW_INTEGERTOREAL reduce using rule 208 (unary_op -> S_PLUS .)
    RW_REALTOINTEGER reduce using rule 208 (unary_op -> S_PLUS .)


state 154

    (209) unary_op -> S_MINUS .

    S_PLUS          reduce using rule 209 (unary_op -> S_MINUS .)
    S_MINUS         reduce using rule 209 (unary_op -> S_MINUS .)
    RW_NOT          reduce using rule 209 (unary_op -> S_MINUS .)
    S_LEFT_BRACKET  reduce using rule 209 (unary_op -> S_MINUS .)
    S_LEFT_SQUARE_BRACKET reduce using rule 209 (unary_op -> S_MINUS .)
    IDENTIFIER      reduce using rule 209 (unary_op -> S_MINUS .)
    L_BOOLEAN_TRUE  reduce using rule 209 (unary_op -> S_MINUS .)
    L_BOOLEAN_FALSE reduce using rule 209 (unary_op -> S_MINUS .)
    L_NIL           reduce using rule 209 (unary_op -> S_MINUS .)
    L_INTEGER_NUMBER reduce using rule 209 (unary_op -> S_MINUS .)
    L_REAL_NUMBER   reduce using rule 209 (unary_op -> S_MINUS .)
    L_STRING        reduce using rule 209 (unary_op -> S_MINUS .)
    L_CHARACTER     reduce using rule 209 (unary_op -> S_MINUS .)
    RW_ABS          reduce using rule 209 (unary_op -> S_MINUS .)
    RW_SIN          reduce using rule 209 (unary_op -> S_MINUS .)
    RW_COS          reduce using rule 209 (unary_op -> S_MINUS .)
    RW_TAN          reduce using rule 209 (unary_op -> S_MINUS .)
    RW_SUCC         reduce using rule 209 (unary_op -> S_MINUS .)
    RW_PRED         reduce using rule 209 (unary_op -> S_MINUS .)
    RW_AWAL         reduce using rule 209 (unary_op -> S_MINUS .)
    RW_AKHIR        reduce using rule 209 (unary_op -> S_MINUS .)
    RW_FIRSTCHAR    reduce using rule 209 (unary_op -> S_MINUS .)
    RW_LASTCHAR     reduce using rule 209 (unary_op -> S_MINUS .)
    RW_LONG         reduce using rule 209 (unary_op -> S_MINUS .)
    RW_ISKOSONG     reduce using rule 209 (unary_op -> S_MINUS .)
    RW_INTEGERTOREAL reduce using rule 209 (unary_op -> S_MINUS .)
    RW_REALTOINTEGER reduce using rule 209 (unary_op -> S_MINUS .)


state 155

    (215) primary_expression -> function_designator .
    (175) variable_access -> function_designator .

  ! reduce/reduce conflict for S_POWER resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_TIMES resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_DIVIDE resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_DIV resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_MOD resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_AND resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_PLUS resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_MINUS resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_OR resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_XOR resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_RIGHT_BRACKET resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_EQUAL resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_NOT_EQUAL resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_LESS_THAN_EQUAL resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_GREATER_THAN_EQUAL resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_LESS_THAN resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_GREATER_THAN resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_ELEMENT_OF resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_EQ resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_NEQ resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_UP_TO resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_RIGHT_SQUARE_BRACKET resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_COMMA resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_KAMUS resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_PROCEDURE resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_FUNCTION resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for $end resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for DEDENT resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_SEMI_COLON resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_TYPE resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_RETURN resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_IF resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_DEPEND resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_WHILE resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_ITERATE resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_REPEAT resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_INPUT resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_OUTPUT resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_ABS resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_SIN resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_COS resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_TAN resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_SUCC resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_PRED resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_AWAL resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_AKHIR resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_FIRSTCHAR resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_LASTCHAR resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_LONG resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_ISKOSONG resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_INTEGERTOREAL resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_REALTOINTEGER resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_THEN resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for RW_DO resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for INDENT resolved using rule 175 (variable_access -> function_designator .)
  ! reduce/reduce conflict for S_COLON resolved using rule 175 (variable_access -> function_designator .)
    S_LEFT_SQUARE_BRACKET reduce using rule 175 (variable_access -> function_designator .)
    S_DOT           reduce using rule 175 (variable_access -> function_designator .)
    S_POWER         reduce using rule 175 (variable_access -> function_designator .)
    S_TIMES         reduce using rule 175 (variable_access -> function_designator .)
    S_DIVIDE        reduce using rule 175 (variable_access -> function_designator .)
    RW_DIV          reduce using rule 175 (variable_access -> function_designator .)
    RW_MOD          reduce using rule 175 (variable_access -> function_designator .)
    RW_AND          reduce using rule 175 (variable_access -> function_designator .)
    S_PLUS          reduce using rule 175 (variable_access -> function_designator .)
    S_MINUS         reduce using rule 175 (variable_access -> function_designator .)
    RW_OR           reduce using rule 175 (variable_access -> function_designator .)
    RW_XOR          reduce using rule 175 (variable_access -> function_designator .)
    S_RIGHT_BRACKET reduce using rule 175 (variable_access -> function_designator .)
    S_EQUAL         reduce using rule 175 (variable_access -> function_designator .)
    S_NOT_EQUAL     reduce using rule 175 (variable_access -> function_designator .)
    S_LESS_THAN_EQUAL reduce using rule 175 (variable_access -> function_designator .)
    S_GREATER_THAN_EQUAL reduce using rule 175 (variable_access -> function_designator .)
    S_LESS_THAN     reduce using rule 175 (variable_access -> function_designator .)
    S_GREATER_THAN  reduce using rule 175 (variable_access -> function_designator .)
    S_ELEMENT_OF    reduce using rule 175 (variable_access -> function_designator .)
    RW_EQ           reduce using rule 175 (variable_access -> function_designator .)
    RW_NEQ          reduce using rule 175 (variable_access -> function_designator .)
    S_UP_TO         reduce using rule 175 (variable_access -> function_designator .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 175 (variable_access -> function_designator .)
    S_COMMA         reduce using rule 175 (variable_access -> function_designator .)
    RW_KAMUS        reduce using rule 175 (variable_access -> function_designator .)
    RW_PROCEDURE    reduce using rule 175 (variable_access -> function_designator .)
    RW_FUNCTION     reduce using rule 175 (variable_access -> function_designator .)
    $end            reduce using rule 175 (variable_access -> function_designator .)
    DEDENT          reduce using rule 175 (variable_access -> function_designator .)
    S_SEMI_COLON    reduce using rule 175 (variable_access -> function_designator .)
    IDENTIFIER      reduce using rule 175 (variable_access -> function_designator .)
    RW_TYPE         reduce using rule 175 (variable_access -> function_designator .)
    S_RETURN        reduce using rule 175 (variable_access -> function_designator .)
    RW_IF           reduce using rule 175 (variable_access -> function_designator .)
    RW_DEPEND       reduce using rule 175 (variable_access -> function_designator .)
    RW_WHILE        reduce using rule 175 (variable_access -> function_designator .)
    RW_ITERATE      reduce using rule 175 (variable_access -> function_designator .)
    RW_REPEAT       reduce using rule 175 (variable_access -> function_designator .)
    RW_INPUT        reduce using rule 175 (variable_access -> function_designator .)
    RW_OUTPUT       reduce using rule 175 (variable_access -> function_designator .)
    RW_ABS          reduce using rule 175 (variable_access -> function_designator .)
    RW_SIN          reduce using rule 175 (variable_access -> function_designator .)
    RW_COS          reduce using rule 175 (variable_access -> function_designator .)
    RW_TAN          reduce using rule 175 (variable_access -> function_designator .)
    RW_SUCC         reduce using rule 175 (variable_access -> function_designator .)
    RW_PRED         reduce using rule 175 (variable_access -> function_designator .)
    RW_AWAL         reduce using rule 175 (variable_access -> function_designator .)
    RW_AKHIR        reduce using rule 175 (variable_access -> function_designator .)
    RW_FIRSTCHAR    reduce using rule 175 (variable_access -> function_designator .)
    RW_LASTCHAR     reduce using rule 175 (variable_access -> function_designator .)
    RW_LONG         reduce using rule 175 (variable_access -> function_designator .)
    RW_ISKOSONG     reduce using rule 175 (variable_access -> function_designator .)
    RW_INTEGERTOREAL reduce using rule 175 (variable_access -> function_designator .)
    RW_REALTOINTEGER reduce using rule 175 (variable_access -> function_designator .)
    RW_THEN         reduce using rule 175 (variable_access -> function_designator .)
    RW_DO           reduce using rule 175 (variable_access -> function_designator .)
    INDENT          reduce using rule 175 (variable_access -> function_designator .)
    S_COLON         reduce using rule 175 (variable_access -> function_designator .)

  ! S_POWER         [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_TIMES         [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_DIVIDE        [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_DIV          [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_MOD          [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_AND          [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_PLUS          [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_MINUS         [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_OR           [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_XOR          [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_RIGHT_BRACKET [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_EQUAL         [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_NOT_EQUAL     [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_LESS_THAN_EQUAL [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_GREATER_THAN_EQUAL [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_LESS_THAN     [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_GREATER_THAN  [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_ELEMENT_OF    [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_EQ           [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_NEQ          [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_UP_TO         [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_RIGHT_SQUARE_BRACKET [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_COMMA         [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_KAMUS        [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_PROCEDURE    [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_FUNCTION     [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! $end            [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! DEDENT          [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_SEMI_COLON    [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! IDENTIFIER      [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_TYPE         [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_RETURN        [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_IF           [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_DEPEND       [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_WHILE        [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_ITERATE      [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_REPEAT       [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_INPUT        [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_OUTPUT       [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_ABS          [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_SIN          [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_COS          [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_TAN          [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_SUCC         [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_PRED         [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_AWAL         [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_AKHIR        [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_FIRSTCHAR    [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_LASTCHAR     [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_LONG         [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_ISKOSONG     [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_INTEGERTOREAL [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_REALTOINTEGER [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_THEN         [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! RW_DO           [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! INDENT          [ reduce using rule 215 (primary_expression -> function_designator .) ]
  ! S_COLON         [ reduce using rule 215 (primary_expression -> function_designator .) ]


state 156

    (150) unsigned_constant -> non_string_constant .

    S_POWER         reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_TIMES         reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_DIVIDE        reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_DIV          reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_MOD          reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_AND          reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_PLUS          reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_MINUS         reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_OR           reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_XOR          reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_RIGHT_BRACKET reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_EQUAL         reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_NOT_EQUAL     reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_LESS_THAN_EQUAL reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_LESS_THAN     reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_GREATER_THAN  reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_ELEMENT_OF    reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_EQ           reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_NEQ          reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_UP_TO         reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_COMMA         reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_KAMUS        reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_PROCEDURE    reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_FUNCTION     reduce using rule 150 (unsigned_constant -> non_string_constant .)
    $end            reduce using rule 150 (unsigned_constant -> non_string_constant .)
    DEDENT          reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_SEMI_COLON    reduce using rule 150 (unsigned_constant -> non_string_constant .)
    IDENTIFIER      reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_TYPE         reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_RETURN        reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_IF           reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_DEPEND       reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_WHILE        reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_ITERATE      reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_REPEAT       reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_INPUT        reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_OUTPUT       reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_ABS          reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_SIN          reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_COS          reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_TAN          reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_SUCC         reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_PRED         reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_AWAL         reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_AKHIR        reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_FIRSTCHAR    reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_LASTCHAR     reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_LONG         reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_ISKOSONG     reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_INTEGERTOREAL reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_REALTOINTEGER reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_THEN         reduce using rule 150 (unsigned_constant -> non_string_constant .)
    RW_DO           reduce using rule 150 (unsigned_constant -> non_string_constant .)
    INDENT          reduce using rule 150 (unsigned_constant -> non_string_constant .)
    S_COLON         reduce using rule 150 (unsigned_constant -> non_string_constant .)


state 157

    (151) unsigned_constant -> string_char_constant .

    S_POWER         reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_TIMES         reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_DIVIDE        reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_DIV          reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_MOD          reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_AND          reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_PLUS          reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_MINUS         reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_OR           reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_XOR          reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_RIGHT_BRACKET reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_EQUAL         reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_NOT_EQUAL     reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_LESS_THAN_EQUAL reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_LESS_THAN     reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_GREATER_THAN  reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_ELEMENT_OF    reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_EQ           reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_NEQ          reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_UP_TO         reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_COMMA         reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_KAMUS        reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_PROCEDURE    reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_FUNCTION     reduce using rule 151 (unsigned_constant -> string_char_constant .)
    $end            reduce using rule 151 (unsigned_constant -> string_char_constant .)
    DEDENT          reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_SEMI_COLON    reduce using rule 151 (unsigned_constant -> string_char_constant .)
    IDENTIFIER      reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_TYPE         reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_RETURN        reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_IF           reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_DEPEND       reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_WHILE        reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_ITERATE      reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_REPEAT       reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_INPUT        reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_OUTPUT       reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_ABS          reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_SIN          reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_COS          reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_TAN          reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_SUCC         reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_PRED         reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_AWAL         reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_AKHIR        reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_FIRSTCHAR    reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_LASTCHAR     reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_LONG         reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_ISKOSONG     reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_INTEGERTOREAL reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_REALTOINTEGER reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_THEN         reduce using rule 151 (unsigned_constant -> string_char_constant .)
    RW_DO           reduce using rule 151 (unsigned_constant -> string_char_constant .)
    INDENT          reduce using rule 151 (unsigned_constant -> string_char_constant .)
    S_COLON         reduce using rule 151 (unsigned_constant -> string_char_constant .)


state 158

    (152) unsigned_constant -> boolean_constant .

    S_POWER         reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_TIMES         reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_DIVIDE        reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_DIV          reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_MOD          reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_AND          reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_PLUS          reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_MINUS         reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_OR           reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_XOR          reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_RIGHT_BRACKET reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_EQUAL         reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_NOT_EQUAL     reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_LESS_THAN_EQUAL reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_LESS_THAN     reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_GREATER_THAN  reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_ELEMENT_OF    reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_EQ           reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_NEQ          reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_UP_TO         reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_COMMA         reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_KAMUS        reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_PROCEDURE    reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_FUNCTION     reduce using rule 152 (unsigned_constant -> boolean_constant .)
    $end            reduce using rule 152 (unsigned_constant -> boolean_constant .)
    DEDENT          reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_SEMI_COLON    reduce using rule 152 (unsigned_constant -> boolean_constant .)
    IDENTIFIER      reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_TYPE         reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_RETURN        reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_IF           reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_DEPEND       reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_WHILE        reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_ITERATE      reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_REPEAT       reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_INPUT        reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_OUTPUT       reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_ABS          reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_SIN          reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_COS          reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_TAN          reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_SUCC         reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_PRED         reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_AWAL         reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_AKHIR        reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_FIRSTCHAR    reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_LASTCHAR     reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_LONG         reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_ISKOSONG     reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_INTEGERTOREAL reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_REALTOINTEGER reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_THEN         reduce using rule 152 (unsigned_constant -> boolean_constant .)
    RW_DO           reduce using rule 152 (unsigned_constant -> boolean_constant .)
    INDENT          reduce using rule 152 (unsigned_constant -> boolean_constant .)
    S_COLON         reduce using rule 152 (unsigned_constant -> boolean_constant .)


state 159

    (153) unsigned_constant -> nil_constant .

    S_POWER         reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_TIMES         reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_DIVIDE        reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_DIV          reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_MOD          reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_AND          reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_PLUS          reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_MINUS         reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_OR           reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_XOR          reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_RIGHT_BRACKET reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_EQUAL         reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_NOT_EQUAL     reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_LESS_THAN_EQUAL reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_GREATER_THAN_EQUAL reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_LESS_THAN     reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_GREATER_THAN  reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_ELEMENT_OF    reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_EQ           reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_NEQ          reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_UP_TO         reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_COMMA         reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_KAMUS        reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_PROCEDURE    reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_FUNCTION     reduce using rule 153 (unsigned_constant -> nil_constant .)
    $end            reduce using rule 153 (unsigned_constant -> nil_constant .)
    DEDENT          reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_SEMI_COLON    reduce using rule 153 (unsigned_constant -> nil_constant .)
    IDENTIFIER      reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_TYPE         reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_RETURN        reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_IF           reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_DEPEND       reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_WHILE        reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_ITERATE      reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_REPEAT       reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_INPUT        reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_OUTPUT       reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_ABS          reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_SIN          reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_COS          reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_TAN          reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_SUCC         reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_PRED         reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_AWAL         reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_AKHIR        reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_FIRSTCHAR    reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_LASTCHAR     reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_LONG         reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_ISKOSONG     reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_INTEGERTOREAL reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_REALTOINTEGER reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_THEN         reduce using rule 153 (unsigned_constant -> nil_constant .)
    RW_DO           reduce using rule 153 (unsigned_constant -> nil_constant .)
    INDENT          reduce using rule 153 (unsigned_constant -> nil_constant .)
    S_COLON         reduce using rule 153 (unsigned_constant -> nil_constant .)


state 160

    (52) array_type -> RW_ARRAY array_index . RW_OF component_type

    RW_OF           shift and go to state 262


state 161

    (53) array_index -> S_LEFT_SQUARE_BRACKET . index_list S_RIGHT_SQUARE_BRACKET
    (54) index_list -> . index_list S_COMMA index_type
    (55) index_list -> . index_type
    (56) index_type -> . ordinal_type
    (41) ordinal_type -> . enumerated_type
    (42) ordinal_type -> . subrange_type
    (43) ordinal_type -> . identifier
    (44) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (45) subrange_type -> . subrange_type_option
    (256) identifier -> . IDENTIFIER
    (46) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (47) subrange_option -> . identifier
    (48) subrange_option -> . constant
    (49) subrange_option -> . function_designator
    (50) subrange_option -> . expression
    (154) constant -> . string_char_constant
    (155) constant -> . non_string_constant
    (156) constant -> . sign non_string_constant
    (157) constant -> . boolean_constant
    (158) constant -> . nil_constant
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (159) sign -> . S_PLUS
    (160) sign -> . S_MINUS
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier

    S_LEFT_BRACKET  shift and go to state 49
    IDENTIFIER      shift and go to state 11
    S_PLUS          shift and go to state 70
    S_MINUS         shift and go to state 71
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107
    RW_NOT          shift and go to state 111
    S_LEFT_SQUARE_BRACKET shift and go to state 118

    index_list                     shift and go to state 263
    index_type                     shift and go to state 264
    ordinal_type                   shift and go to state 265
    enumerated_type                shift and go to state 45
    subrange_type                  shift and go to state 46
    identifier                     shift and go to state 47
    subrange_type_option           shift and go to state 50
    subrange_option                shift and go to state 52
    constant                       shift and go to state 53
    function_designator            shift and go to state 54
    expression                     shift and go to state 55
    string_char_constant           shift and go to state 56
    non_string_constant            shift and go to state 57
    sign                           shift and go to state 58
    boolean_constant               shift and go to state 59
    nil_constant                   shift and go to state 60
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    additive_expression            shift and go to state 65
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117

state 162

    (46) subrange_type_option -> subrange_option S_UP_TO . subrange_option
    (47) subrange_option -> . identifier
    (48) subrange_option -> . constant
    (49) subrange_option -> . function_designator
    (50) subrange_option -> . expression
    (256) identifier -> . IDENTIFIER
    (154) constant -> . string_char_constant
    (155) constant -> . non_string_constant
    (156) constant -> . sign non_string_constant
    (157) constant -> . boolean_constant
    (158) constant -> . nil_constant
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (159) sign -> . S_PLUS
    (160) sign -> . S_MINUS
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier

    IDENTIFIER      shift and go to state 11
    S_PLUS          shift and go to state 70
    S_MINUS         shift and go to state 71
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118

    subrange_option                shift and go to state 266
    identifier                     shift and go to state 267
    constant                       shift and go to state 53
    function_designator            shift and go to state 54
    expression                     shift and go to state 55
    string_char_constant           shift and go to state 56
    non_string_constant            shift and go to state 57
    sign                           shift and go to state 58
    boolean_constant               shift and go to state 59
    nil_constant                   shift and go to state 60
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    additive_expression            shift and go to state 65
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117

state 163

    (180) expression -> expression relational_op . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    additive_expression            shift and go to state 268
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 164

    (182) relational_op -> S_EQUAL .

    S_PLUS          reduce using rule 182 (relational_op -> S_EQUAL .)
    S_MINUS         reduce using rule 182 (relational_op -> S_EQUAL .)
    RW_NOT          reduce using rule 182 (relational_op -> S_EQUAL .)
    S_LEFT_BRACKET  reduce using rule 182 (relational_op -> S_EQUAL .)
    S_LEFT_SQUARE_BRACKET reduce using rule 182 (relational_op -> S_EQUAL .)
    IDENTIFIER      reduce using rule 182 (relational_op -> S_EQUAL .)
    L_BOOLEAN_TRUE  reduce using rule 182 (relational_op -> S_EQUAL .)
    L_BOOLEAN_FALSE reduce using rule 182 (relational_op -> S_EQUAL .)
    L_NIL           reduce using rule 182 (relational_op -> S_EQUAL .)
    L_INTEGER_NUMBER reduce using rule 182 (relational_op -> S_EQUAL .)
    L_REAL_NUMBER   reduce using rule 182 (relational_op -> S_EQUAL .)
    L_STRING        reduce using rule 182 (relational_op -> S_EQUAL .)
    L_CHARACTER     reduce using rule 182 (relational_op -> S_EQUAL .)
    RW_ABS          reduce using rule 182 (relational_op -> S_EQUAL .)
    RW_SIN          reduce using rule 182 (relational_op -> S_EQUAL .)
    RW_COS          reduce using rule 182 (relational_op -> S_EQUAL .)
    RW_TAN          reduce using rule 182 (relational_op -> S_EQUAL .)
    RW_SUCC         reduce using rule 182 (relational_op -> S_EQUAL .)
    RW_PRED         reduce using rule 182 (relational_op -> S_EQUAL .)
    RW_AWAL         reduce using rule 182 (relational_op -> S_EQUAL .)
    RW_AKHIR        reduce using rule 182 (relational_op -> S_EQUAL .)
    RW_FIRSTCHAR    reduce using rule 182 (relational_op -> S_EQUAL .)
    RW_LASTCHAR     reduce using rule 182 (relational_op -> S_EQUAL .)
    RW_LONG         reduce using rule 182 (relational_op -> S_EQUAL .)
    RW_ISKOSONG     reduce using rule 182 (relational_op -> S_EQUAL .)
    RW_INTEGERTOREAL reduce using rule 182 (relational_op -> S_EQUAL .)
    RW_REALTOINTEGER reduce using rule 182 (relational_op -> S_EQUAL .)


state 165

    (183) relational_op -> S_NOT_EQUAL .

    S_PLUS          reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    S_MINUS         reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    RW_NOT          reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    S_LEFT_BRACKET  reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    S_LEFT_SQUARE_BRACKET reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    IDENTIFIER      reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    L_BOOLEAN_TRUE  reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    L_BOOLEAN_FALSE reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    L_NIL           reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    L_INTEGER_NUMBER reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    L_REAL_NUMBER   reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    L_STRING        reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    L_CHARACTER     reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    RW_ABS          reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    RW_SIN          reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    RW_COS          reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    RW_TAN          reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    RW_SUCC         reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    RW_PRED         reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    RW_AWAL         reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    RW_AKHIR        reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    RW_FIRSTCHAR    reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    RW_LASTCHAR     reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    RW_LONG         reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    RW_ISKOSONG     reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    RW_INTEGERTOREAL reduce using rule 183 (relational_op -> S_NOT_EQUAL .)
    RW_REALTOINTEGER reduce using rule 183 (relational_op -> S_NOT_EQUAL .)


state 166

    (184) relational_op -> S_LESS_THAN_EQUAL .

    S_PLUS          reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    S_MINUS         reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_NOT          reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    S_LEFT_BRACKET  reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    S_LEFT_SQUARE_BRACKET reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    IDENTIFIER      reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    L_BOOLEAN_TRUE  reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    L_BOOLEAN_FALSE reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    L_NIL           reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    L_INTEGER_NUMBER reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    L_REAL_NUMBER   reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    L_STRING        reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    L_CHARACTER     reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_ABS          reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_SIN          reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_COS          reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_TAN          reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_SUCC         reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_PRED         reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_AWAL         reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_AKHIR        reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_FIRSTCHAR    reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_LASTCHAR     reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_LONG         reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_ISKOSONG     reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_INTEGERTOREAL reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)
    RW_REALTOINTEGER reduce using rule 184 (relational_op -> S_LESS_THAN_EQUAL .)


state 167

    (185) relational_op -> S_GREATER_THAN_EQUAL .

    S_PLUS          reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    S_MINUS         reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_NOT          reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    S_LEFT_BRACKET  reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    S_LEFT_SQUARE_BRACKET reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    IDENTIFIER      reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_BOOLEAN_TRUE  reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_BOOLEAN_FALSE reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_NIL           reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_INTEGER_NUMBER reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_REAL_NUMBER   reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_STRING        reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    L_CHARACTER     reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_ABS          reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_SIN          reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_COS          reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_TAN          reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_SUCC         reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_PRED         reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_AWAL         reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_AKHIR        reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_FIRSTCHAR    reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_LASTCHAR     reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_LONG         reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_ISKOSONG     reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_INTEGERTOREAL reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)
    RW_REALTOINTEGER reduce using rule 185 (relational_op -> S_GREATER_THAN_EQUAL .)


state 168

    (186) relational_op -> S_LESS_THAN .

    S_PLUS          reduce using rule 186 (relational_op -> S_LESS_THAN .)
    S_MINUS         reduce using rule 186 (relational_op -> S_LESS_THAN .)
    RW_NOT          reduce using rule 186 (relational_op -> S_LESS_THAN .)
    S_LEFT_BRACKET  reduce using rule 186 (relational_op -> S_LESS_THAN .)
    S_LEFT_SQUARE_BRACKET reduce using rule 186 (relational_op -> S_LESS_THAN .)
    IDENTIFIER      reduce using rule 186 (relational_op -> S_LESS_THAN .)
    L_BOOLEAN_TRUE  reduce using rule 186 (relational_op -> S_LESS_THAN .)
    L_BOOLEAN_FALSE reduce using rule 186 (relational_op -> S_LESS_THAN .)
    L_NIL           reduce using rule 186 (relational_op -> S_LESS_THAN .)
    L_INTEGER_NUMBER reduce using rule 186 (relational_op -> S_LESS_THAN .)
    L_REAL_NUMBER   reduce using rule 186 (relational_op -> S_LESS_THAN .)
    L_STRING        reduce using rule 186 (relational_op -> S_LESS_THAN .)
    L_CHARACTER     reduce using rule 186 (relational_op -> S_LESS_THAN .)
    RW_ABS          reduce using rule 186 (relational_op -> S_LESS_THAN .)
    RW_SIN          reduce using rule 186 (relational_op -> S_LESS_THAN .)
    RW_COS          reduce using rule 186 (relational_op -> S_LESS_THAN .)
    RW_TAN          reduce using rule 186 (relational_op -> S_LESS_THAN .)
    RW_SUCC         reduce using rule 186 (relational_op -> S_LESS_THAN .)
    RW_PRED         reduce using rule 186 (relational_op -> S_LESS_THAN .)
    RW_AWAL         reduce using rule 186 (relational_op -> S_LESS_THAN .)
    RW_AKHIR        reduce using rule 186 (relational_op -> S_LESS_THAN .)
    RW_FIRSTCHAR    reduce using rule 186 (relational_op -> S_LESS_THAN .)
    RW_LASTCHAR     reduce using rule 186 (relational_op -> S_LESS_THAN .)
    RW_LONG         reduce using rule 186 (relational_op -> S_LESS_THAN .)
    RW_ISKOSONG     reduce using rule 186 (relational_op -> S_LESS_THAN .)
    RW_INTEGERTOREAL reduce using rule 186 (relational_op -> S_LESS_THAN .)
    RW_REALTOINTEGER reduce using rule 186 (relational_op -> S_LESS_THAN .)


state 169

    (187) relational_op -> S_GREATER_THAN .

    S_PLUS          reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    S_MINUS         reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    RW_NOT          reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    S_LEFT_BRACKET  reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    S_LEFT_SQUARE_BRACKET reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    IDENTIFIER      reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    L_BOOLEAN_TRUE  reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    L_BOOLEAN_FALSE reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    L_NIL           reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    L_INTEGER_NUMBER reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    L_REAL_NUMBER   reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    L_STRING        reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    L_CHARACTER     reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    RW_ABS          reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    RW_SIN          reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    RW_COS          reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    RW_TAN          reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    RW_SUCC         reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    RW_PRED         reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    RW_AWAL         reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    RW_AKHIR        reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    RW_FIRSTCHAR    reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    RW_LASTCHAR     reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    RW_LONG         reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    RW_ISKOSONG     reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    RW_INTEGERTOREAL reduce using rule 187 (relational_op -> S_GREATER_THAN .)
    RW_REALTOINTEGER reduce using rule 187 (relational_op -> S_GREATER_THAN .)


state 170

    (188) relational_op -> S_ELEMENT_OF .

    S_PLUS          reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    S_MINUS         reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    RW_NOT          reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    S_LEFT_BRACKET  reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    S_LEFT_SQUARE_BRACKET reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    IDENTIFIER      reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    L_BOOLEAN_TRUE  reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    L_BOOLEAN_FALSE reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    L_NIL           reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    L_INTEGER_NUMBER reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    L_REAL_NUMBER   reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    L_STRING        reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    L_CHARACTER     reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    RW_ABS          reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    RW_SIN          reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    RW_COS          reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    RW_TAN          reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    RW_SUCC         reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    RW_PRED         reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    RW_AWAL         reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    RW_AKHIR        reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    RW_FIRSTCHAR    reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    RW_LASTCHAR     reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    RW_LONG         reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    RW_ISKOSONG     reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    RW_INTEGERTOREAL reduce using rule 188 (relational_op -> S_ELEMENT_OF .)
    RW_REALTOINTEGER reduce using rule 188 (relational_op -> S_ELEMENT_OF .)


state 171

    (189) relational_op -> RW_EQ .

    S_PLUS          reduce using rule 189 (relational_op -> RW_EQ .)
    S_MINUS         reduce using rule 189 (relational_op -> RW_EQ .)
    RW_NOT          reduce using rule 189 (relational_op -> RW_EQ .)
    S_LEFT_BRACKET  reduce using rule 189 (relational_op -> RW_EQ .)
    S_LEFT_SQUARE_BRACKET reduce using rule 189 (relational_op -> RW_EQ .)
    IDENTIFIER      reduce using rule 189 (relational_op -> RW_EQ .)
    L_BOOLEAN_TRUE  reduce using rule 189 (relational_op -> RW_EQ .)
    L_BOOLEAN_FALSE reduce using rule 189 (relational_op -> RW_EQ .)
    L_NIL           reduce using rule 189 (relational_op -> RW_EQ .)
    L_INTEGER_NUMBER reduce using rule 189 (relational_op -> RW_EQ .)
    L_REAL_NUMBER   reduce using rule 189 (relational_op -> RW_EQ .)
    L_STRING        reduce using rule 189 (relational_op -> RW_EQ .)
    L_CHARACTER     reduce using rule 189 (relational_op -> RW_EQ .)
    RW_ABS          reduce using rule 189 (relational_op -> RW_EQ .)
    RW_SIN          reduce using rule 189 (relational_op -> RW_EQ .)
    RW_COS          reduce using rule 189 (relational_op -> RW_EQ .)
    RW_TAN          reduce using rule 189 (relational_op -> RW_EQ .)
    RW_SUCC         reduce using rule 189 (relational_op -> RW_EQ .)
    RW_PRED         reduce using rule 189 (relational_op -> RW_EQ .)
    RW_AWAL         reduce using rule 189 (relational_op -> RW_EQ .)
    RW_AKHIR        reduce using rule 189 (relational_op -> RW_EQ .)
    RW_FIRSTCHAR    reduce using rule 189 (relational_op -> RW_EQ .)
    RW_LASTCHAR     reduce using rule 189 (relational_op -> RW_EQ .)
    RW_LONG         reduce using rule 189 (relational_op -> RW_EQ .)
    RW_ISKOSONG     reduce using rule 189 (relational_op -> RW_EQ .)
    RW_INTEGERTOREAL reduce using rule 189 (relational_op -> RW_EQ .)
    RW_REALTOINTEGER reduce using rule 189 (relational_op -> RW_EQ .)


state 172

    (190) relational_op -> RW_NEQ .

    S_PLUS          reduce using rule 190 (relational_op -> RW_NEQ .)
    S_MINUS         reduce using rule 190 (relational_op -> RW_NEQ .)
    RW_NOT          reduce using rule 190 (relational_op -> RW_NEQ .)
    S_LEFT_BRACKET  reduce using rule 190 (relational_op -> RW_NEQ .)
    S_LEFT_SQUARE_BRACKET reduce using rule 190 (relational_op -> RW_NEQ .)
    IDENTIFIER      reduce using rule 190 (relational_op -> RW_NEQ .)
    L_BOOLEAN_TRUE  reduce using rule 190 (relational_op -> RW_NEQ .)
    L_BOOLEAN_FALSE reduce using rule 190 (relational_op -> RW_NEQ .)
    L_NIL           reduce using rule 190 (relational_op -> RW_NEQ .)
    L_INTEGER_NUMBER reduce using rule 190 (relational_op -> RW_NEQ .)
    L_REAL_NUMBER   reduce using rule 190 (relational_op -> RW_NEQ .)
    L_STRING        reduce using rule 190 (relational_op -> RW_NEQ .)
    L_CHARACTER     reduce using rule 190 (relational_op -> RW_NEQ .)
    RW_ABS          reduce using rule 190 (relational_op -> RW_NEQ .)
    RW_SIN          reduce using rule 190 (relational_op -> RW_NEQ .)
    RW_COS          reduce using rule 190 (relational_op -> RW_NEQ .)
    RW_TAN          reduce using rule 190 (relational_op -> RW_NEQ .)
    RW_SUCC         reduce using rule 190 (relational_op -> RW_NEQ .)
    RW_PRED         reduce using rule 190 (relational_op -> RW_NEQ .)
    RW_AWAL         reduce using rule 190 (relational_op -> RW_NEQ .)
    RW_AKHIR        reduce using rule 190 (relational_op -> RW_NEQ .)
    RW_FIRSTCHAR    reduce using rule 190 (relational_op -> RW_NEQ .)
    RW_LASTCHAR     reduce using rule 190 (relational_op -> RW_NEQ .)
    RW_LONG         reduce using rule 190 (relational_op -> RW_NEQ .)
    RW_ISKOSONG     reduce using rule 190 (relational_op -> RW_NEQ .)
    RW_INTEGERTOREAL reduce using rule 190 (relational_op -> RW_NEQ .)
    RW_REALTOINTEGER reduce using rule 190 (relational_op -> RW_NEQ .)


state 173

    (156) constant -> sign non_string_constant .

    S_UP_TO         reduce using rule 156 (constant -> sign non_string_constant .)
    RW_KAMUS        reduce using rule 156 (constant -> sign non_string_constant .)
    RW_PROCEDURE    reduce using rule 156 (constant -> sign non_string_constant .)
    RW_FUNCTION     reduce using rule 156 (constant -> sign non_string_constant .)
    $end            reduce using rule 156 (constant -> sign non_string_constant .)
    DEDENT          reduce using rule 156 (constant -> sign non_string_constant .)
    S_SEMI_COLON    reduce using rule 156 (constant -> sign non_string_constant .)
    S_COMMA         reduce using rule 156 (constant -> sign non_string_constant .)
    S_RIGHT_BRACKET reduce using rule 156 (constant -> sign non_string_constant .)
    IDENTIFIER      reduce using rule 156 (constant -> sign non_string_constant .)
    S_GREATER_THAN  reduce using rule 156 (constant -> sign non_string_constant .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 156 (constant -> sign non_string_constant .)
    S_EQUAL         reduce using rule 156 (constant -> sign non_string_constant .)
    RW_TYPE         reduce using rule 156 (constant -> sign non_string_constant .)
    RW_CONSTANT     reduce using rule 156 (constant -> sign non_string_constant .)


state 174

    (191) additive_expression -> additive_expression additive_op . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    multiplicative_expression      shift and go to state 269
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 175

    (193) additive_op -> S_PLUS .

    S_PLUS          reduce using rule 193 (additive_op -> S_PLUS .)
    S_MINUS         reduce using rule 193 (additive_op -> S_PLUS .)
    RW_NOT          reduce using rule 193 (additive_op -> S_PLUS .)
    S_LEFT_BRACKET  reduce using rule 193 (additive_op -> S_PLUS .)
    S_LEFT_SQUARE_BRACKET reduce using rule 193 (additive_op -> S_PLUS .)
    IDENTIFIER      reduce using rule 193 (additive_op -> S_PLUS .)
    L_BOOLEAN_TRUE  reduce using rule 193 (additive_op -> S_PLUS .)
    L_BOOLEAN_FALSE reduce using rule 193 (additive_op -> S_PLUS .)
    L_NIL           reduce using rule 193 (additive_op -> S_PLUS .)
    L_INTEGER_NUMBER reduce using rule 193 (additive_op -> S_PLUS .)
    L_REAL_NUMBER   reduce using rule 193 (additive_op -> S_PLUS .)
    L_STRING        reduce using rule 193 (additive_op -> S_PLUS .)
    L_CHARACTER     reduce using rule 193 (additive_op -> S_PLUS .)
    RW_ABS          reduce using rule 193 (additive_op -> S_PLUS .)
    RW_SIN          reduce using rule 193 (additive_op -> S_PLUS .)
    RW_COS          reduce using rule 193 (additive_op -> S_PLUS .)
    RW_TAN          reduce using rule 193 (additive_op -> S_PLUS .)
    RW_SUCC         reduce using rule 193 (additive_op -> S_PLUS .)
    RW_PRED         reduce using rule 193 (additive_op -> S_PLUS .)
    RW_AWAL         reduce using rule 193 (additive_op -> S_PLUS .)
    RW_AKHIR        reduce using rule 193 (additive_op -> S_PLUS .)
    RW_FIRSTCHAR    reduce using rule 193 (additive_op -> S_PLUS .)
    RW_LASTCHAR     reduce using rule 193 (additive_op -> S_PLUS .)
    RW_LONG         reduce using rule 193 (additive_op -> S_PLUS .)
    RW_ISKOSONG     reduce using rule 193 (additive_op -> S_PLUS .)
    RW_INTEGERTOREAL reduce using rule 193 (additive_op -> S_PLUS .)
    RW_REALTOINTEGER reduce using rule 193 (additive_op -> S_PLUS .)


state 176

    (194) additive_op -> S_MINUS .

    S_PLUS          reduce using rule 194 (additive_op -> S_MINUS .)
    S_MINUS         reduce using rule 194 (additive_op -> S_MINUS .)
    RW_NOT          reduce using rule 194 (additive_op -> S_MINUS .)
    S_LEFT_BRACKET  reduce using rule 194 (additive_op -> S_MINUS .)
    S_LEFT_SQUARE_BRACKET reduce using rule 194 (additive_op -> S_MINUS .)
    IDENTIFIER      reduce using rule 194 (additive_op -> S_MINUS .)
    L_BOOLEAN_TRUE  reduce using rule 194 (additive_op -> S_MINUS .)
    L_BOOLEAN_FALSE reduce using rule 194 (additive_op -> S_MINUS .)
    L_NIL           reduce using rule 194 (additive_op -> S_MINUS .)
    L_INTEGER_NUMBER reduce using rule 194 (additive_op -> S_MINUS .)
    L_REAL_NUMBER   reduce using rule 194 (additive_op -> S_MINUS .)
    L_STRING        reduce using rule 194 (additive_op -> S_MINUS .)
    L_CHARACTER     reduce using rule 194 (additive_op -> S_MINUS .)
    RW_ABS          reduce using rule 194 (additive_op -> S_MINUS .)
    RW_SIN          reduce using rule 194 (additive_op -> S_MINUS .)
    RW_COS          reduce using rule 194 (additive_op -> S_MINUS .)
    RW_TAN          reduce using rule 194 (additive_op -> S_MINUS .)
    RW_SUCC         reduce using rule 194 (additive_op -> S_MINUS .)
    RW_PRED         reduce using rule 194 (additive_op -> S_MINUS .)
    RW_AWAL         reduce using rule 194 (additive_op -> S_MINUS .)
    RW_AKHIR        reduce using rule 194 (additive_op -> S_MINUS .)
    RW_FIRSTCHAR    reduce using rule 194 (additive_op -> S_MINUS .)
    RW_LASTCHAR     reduce using rule 194 (additive_op -> S_MINUS .)
    RW_LONG         reduce using rule 194 (additive_op -> S_MINUS .)
    RW_ISKOSONG     reduce using rule 194 (additive_op -> S_MINUS .)
    RW_INTEGERTOREAL reduce using rule 194 (additive_op -> S_MINUS .)
    RW_REALTOINTEGER reduce using rule 194 (additive_op -> S_MINUS .)


state 177

    (195) additive_op -> RW_OR .

    S_PLUS          reduce using rule 195 (additive_op -> RW_OR .)
    S_MINUS         reduce using rule 195 (additive_op -> RW_OR .)
    RW_NOT          reduce using rule 195 (additive_op -> RW_OR .)
    S_LEFT_BRACKET  reduce using rule 195 (additive_op -> RW_OR .)
    S_LEFT_SQUARE_BRACKET reduce using rule 195 (additive_op -> RW_OR .)
    IDENTIFIER      reduce using rule 195 (additive_op -> RW_OR .)
    L_BOOLEAN_TRUE  reduce using rule 195 (additive_op -> RW_OR .)
    L_BOOLEAN_FALSE reduce using rule 195 (additive_op -> RW_OR .)
    L_NIL           reduce using rule 195 (additive_op -> RW_OR .)
    L_INTEGER_NUMBER reduce using rule 195 (additive_op -> RW_OR .)
    L_REAL_NUMBER   reduce using rule 195 (additive_op -> RW_OR .)
    L_STRING        reduce using rule 195 (additive_op -> RW_OR .)
    L_CHARACTER     reduce using rule 195 (additive_op -> RW_OR .)
    RW_ABS          reduce using rule 195 (additive_op -> RW_OR .)
    RW_SIN          reduce using rule 195 (additive_op -> RW_OR .)
    RW_COS          reduce using rule 195 (additive_op -> RW_OR .)
    RW_TAN          reduce using rule 195 (additive_op -> RW_OR .)
    RW_SUCC         reduce using rule 195 (additive_op -> RW_OR .)
    RW_PRED         reduce using rule 195 (additive_op -> RW_OR .)
    RW_AWAL         reduce using rule 195 (additive_op -> RW_OR .)
    RW_AKHIR        reduce using rule 195 (additive_op -> RW_OR .)
    RW_FIRSTCHAR    reduce using rule 195 (additive_op -> RW_OR .)
    RW_LASTCHAR     reduce using rule 195 (additive_op -> RW_OR .)
    RW_LONG         reduce using rule 195 (additive_op -> RW_OR .)
    RW_ISKOSONG     reduce using rule 195 (additive_op -> RW_OR .)
    RW_INTEGERTOREAL reduce using rule 195 (additive_op -> RW_OR .)
    RW_REALTOINTEGER reduce using rule 195 (additive_op -> RW_OR .)


state 178

    (196) additive_op -> RW_XOR .

    S_PLUS          reduce using rule 196 (additive_op -> RW_XOR .)
    S_MINUS         reduce using rule 196 (additive_op -> RW_XOR .)
    RW_NOT          reduce using rule 196 (additive_op -> RW_XOR .)
    S_LEFT_BRACKET  reduce using rule 196 (additive_op -> RW_XOR .)
    S_LEFT_SQUARE_BRACKET reduce using rule 196 (additive_op -> RW_XOR .)
    IDENTIFIER      reduce using rule 196 (additive_op -> RW_XOR .)
    L_BOOLEAN_TRUE  reduce using rule 196 (additive_op -> RW_XOR .)
    L_BOOLEAN_FALSE reduce using rule 196 (additive_op -> RW_XOR .)
    L_NIL           reduce using rule 196 (additive_op -> RW_XOR .)
    L_INTEGER_NUMBER reduce using rule 196 (additive_op -> RW_XOR .)
    L_REAL_NUMBER   reduce using rule 196 (additive_op -> RW_XOR .)
    L_STRING        reduce using rule 196 (additive_op -> RW_XOR .)
    L_CHARACTER     reduce using rule 196 (additive_op -> RW_XOR .)
    RW_ABS          reduce using rule 196 (additive_op -> RW_XOR .)
    RW_SIN          reduce using rule 196 (additive_op -> RW_XOR .)
    RW_COS          reduce using rule 196 (additive_op -> RW_XOR .)
    RW_TAN          reduce using rule 196 (additive_op -> RW_XOR .)
    RW_SUCC         reduce using rule 196 (additive_op -> RW_XOR .)
    RW_PRED         reduce using rule 196 (additive_op -> RW_XOR .)
    RW_AWAL         reduce using rule 196 (additive_op -> RW_XOR .)
    RW_AKHIR        reduce using rule 196 (additive_op -> RW_XOR .)
    RW_FIRSTCHAR    reduce using rule 196 (additive_op -> RW_XOR .)
    RW_LASTCHAR     reduce using rule 196 (additive_op -> RW_XOR .)
    RW_LONG         reduce using rule 196 (additive_op -> RW_XOR .)
    RW_ISKOSONG     reduce using rule 196 (additive_op -> RW_XOR .)
    RW_INTEGERTOREAL reduce using rule 196 (additive_op -> RW_XOR .)
    RW_REALTOINTEGER reduce using rule 196 (additive_op -> RW_XOR .)


state 179

    (197) multiplicative_expression -> multiplicative_expression multiplicative_op . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    unary_expression               shift and go to state 270
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 180

    (199) multiplicative_op -> S_TIMES .

    S_PLUS          reduce using rule 199 (multiplicative_op -> S_TIMES .)
    S_MINUS         reduce using rule 199 (multiplicative_op -> S_TIMES .)
    RW_NOT          reduce using rule 199 (multiplicative_op -> S_TIMES .)
    S_LEFT_BRACKET  reduce using rule 199 (multiplicative_op -> S_TIMES .)
    S_LEFT_SQUARE_BRACKET reduce using rule 199 (multiplicative_op -> S_TIMES .)
    IDENTIFIER      reduce using rule 199 (multiplicative_op -> S_TIMES .)
    L_BOOLEAN_TRUE  reduce using rule 199 (multiplicative_op -> S_TIMES .)
    L_BOOLEAN_FALSE reduce using rule 199 (multiplicative_op -> S_TIMES .)
    L_NIL           reduce using rule 199 (multiplicative_op -> S_TIMES .)
    L_INTEGER_NUMBER reduce using rule 199 (multiplicative_op -> S_TIMES .)
    L_REAL_NUMBER   reduce using rule 199 (multiplicative_op -> S_TIMES .)
    L_STRING        reduce using rule 199 (multiplicative_op -> S_TIMES .)
    L_CHARACTER     reduce using rule 199 (multiplicative_op -> S_TIMES .)
    RW_ABS          reduce using rule 199 (multiplicative_op -> S_TIMES .)
    RW_SIN          reduce using rule 199 (multiplicative_op -> S_TIMES .)
    RW_COS          reduce using rule 199 (multiplicative_op -> S_TIMES .)
    RW_TAN          reduce using rule 199 (multiplicative_op -> S_TIMES .)
    RW_SUCC         reduce using rule 199 (multiplicative_op -> S_TIMES .)
    RW_PRED         reduce using rule 199 (multiplicative_op -> S_TIMES .)
    RW_AWAL         reduce using rule 199 (multiplicative_op -> S_TIMES .)
    RW_AKHIR        reduce using rule 199 (multiplicative_op -> S_TIMES .)
    RW_FIRSTCHAR    reduce using rule 199 (multiplicative_op -> S_TIMES .)
    RW_LASTCHAR     reduce using rule 199 (multiplicative_op -> S_TIMES .)
    RW_LONG         reduce using rule 199 (multiplicative_op -> S_TIMES .)
    RW_ISKOSONG     reduce using rule 199 (multiplicative_op -> S_TIMES .)
    RW_INTEGERTOREAL reduce using rule 199 (multiplicative_op -> S_TIMES .)
    RW_REALTOINTEGER reduce using rule 199 (multiplicative_op -> S_TIMES .)


state 181

    (200) multiplicative_op -> S_DIVIDE .

    S_PLUS          reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    S_MINUS         reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    RW_NOT          reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    S_LEFT_BRACKET  reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    S_LEFT_SQUARE_BRACKET reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    IDENTIFIER      reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    L_BOOLEAN_TRUE  reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    L_BOOLEAN_FALSE reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    L_NIL           reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    L_INTEGER_NUMBER reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    L_REAL_NUMBER   reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    L_STRING        reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    L_CHARACTER     reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    RW_ABS          reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    RW_SIN          reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    RW_COS          reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    RW_TAN          reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    RW_SUCC         reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    RW_PRED         reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    RW_AWAL         reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    RW_AKHIR        reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    RW_FIRSTCHAR    reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    RW_LASTCHAR     reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    RW_LONG         reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    RW_ISKOSONG     reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    RW_INTEGERTOREAL reduce using rule 200 (multiplicative_op -> S_DIVIDE .)
    RW_REALTOINTEGER reduce using rule 200 (multiplicative_op -> S_DIVIDE .)


state 182

    (201) multiplicative_op -> RW_DIV .

    S_PLUS          reduce using rule 201 (multiplicative_op -> RW_DIV .)
    S_MINUS         reduce using rule 201 (multiplicative_op -> RW_DIV .)
    RW_NOT          reduce using rule 201 (multiplicative_op -> RW_DIV .)
    S_LEFT_BRACKET  reduce using rule 201 (multiplicative_op -> RW_DIV .)
    S_LEFT_SQUARE_BRACKET reduce using rule 201 (multiplicative_op -> RW_DIV .)
    IDENTIFIER      reduce using rule 201 (multiplicative_op -> RW_DIV .)
    L_BOOLEAN_TRUE  reduce using rule 201 (multiplicative_op -> RW_DIV .)
    L_BOOLEAN_FALSE reduce using rule 201 (multiplicative_op -> RW_DIV .)
    L_NIL           reduce using rule 201 (multiplicative_op -> RW_DIV .)
    L_INTEGER_NUMBER reduce using rule 201 (multiplicative_op -> RW_DIV .)
    L_REAL_NUMBER   reduce using rule 201 (multiplicative_op -> RW_DIV .)
    L_STRING        reduce using rule 201 (multiplicative_op -> RW_DIV .)
    L_CHARACTER     reduce using rule 201 (multiplicative_op -> RW_DIV .)
    RW_ABS          reduce using rule 201 (multiplicative_op -> RW_DIV .)
    RW_SIN          reduce using rule 201 (multiplicative_op -> RW_DIV .)
    RW_COS          reduce using rule 201 (multiplicative_op -> RW_DIV .)
    RW_TAN          reduce using rule 201 (multiplicative_op -> RW_DIV .)
    RW_SUCC         reduce using rule 201 (multiplicative_op -> RW_DIV .)
    RW_PRED         reduce using rule 201 (multiplicative_op -> RW_DIV .)
    RW_AWAL         reduce using rule 201 (multiplicative_op -> RW_DIV .)
    RW_AKHIR        reduce using rule 201 (multiplicative_op -> RW_DIV .)
    RW_FIRSTCHAR    reduce using rule 201 (multiplicative_op -> RW_DIV .)
    RW_LASTCHAR     reduce using rule 201 (multiplicative_op -> RW_DIV .)
    RW_LONG         reduce using rule 201 (multiplicative_op -> RW_DIV .)
    RW_ISKOSONG     reduce using rule 201 (multiplicative_op -> RW_DIV .)
    RW_INTEGERTOREAL reduce using rule 201 (multiplicative_op -> RW_DIV .)
    RW_REALTOINTEGER reduce using rule 201 (multiplicative_op -> RW_DIV .)


state 183

    (202) multiplicative_op -> RW_MOD .

    S_PLUS          reduce using rule 202 (multiplicative_op -> RW_MOD .)
    S_MINUS         reduce using rule 202 (multiplicative_op -> RW_MOD .)
    RW_NOT          reduce using rule 202 (multiplicative_op -> RW_MOD .)
    S_LEFT_BRACKET  reduce using rule 202 (multiplicative_op -> RW_MOD .)
    S_LEFT_SQUARE_BRACKET reduce using rule 202 (multiplicative_op -> RW_MOD .)
    IDENTIFIER      reduce using rule 202 (multiplicative_op -> RW_MOD .)
    L_BOOLEAN_TRUE  reduce using rule 202 (multiplicative_op -> RW_MOD .)
    L_BOOLEAN_FALSE reduce using rule 202 (multiplicative_op -> RW_MOD .)
    L_NIL           reduce using rule 202 (multiplicative_op -> RW_MOD .)
    L_INTEGER_NUMBER reduce using rule 202 (multiplicative_op -> RW_MOD .)
    L_REAL_NUMBER   reduce using rule 202 (multiplicative_op -> RW_MOD .)
    L_STRING        reduce using rule 202 (multiplicative_op -> RW_MOD .)
    L_CHARACTER     reduce using rule 202 (multiplicative_op -> RW_MOD .)
    RW_ABS          reduce using rule 202 (multiplicative_op -> RW_MOD .)
    RW_SIN          reduce using rule 202 (multiplicative_op -> RW_MOD .)
    RW_COS          reduce using rule 202 (multiplicative_op -> RW_MOD .)
    RW_TAN          reduce using rule 202 (multiplicative_op -> RW_MOD .)
    RW_SUCC         reduce using rule 202 (multiplicative_op -> RW_MOD .)
    RW_PRED         reduce using rule 202 (multiplicative_op -> RW_MOD .)
    RW_AWAL         reduce using rule 202 (multiplicative_op -> RW_MOD .)
    RW_AKHIR        reduce using rule 202 (multiplicative_op -> RW_MOD .)
    RW_FIRSTCHAR    reduce using rule 202 (multiplicative_op -> RW_MOD .)
    RW_LASTCHAR     reduce using rule 202 (multiplicative_op -> RW_MOD .)
    RW_LONG         reduce using rule 202 (multiplicative_op -> RW_MOD .)
    RW_ISKOSONG     reduce using rule 202 (multiplicative_op -> RW_MOD .)
    RW_INTEGERTOREAL reduce using rule 202 (multiplicative_op -> RW_MOD .)
    RW_REALTOINTEGER reduce using rule 202 (multiplicative_op -> RW_MOD .)


state 184

    (203) multiplicative_op -> RW_AND .

    S_PLUS          reduce using rule 203 (multiplicative_op -> RW_AND .)
    S_MINUS         reduce using rule 203 (multiplicative_op -> RW_AND .)
    RW_NOT          reduce using rule 203 (multiplicative_op -> RW_AND .)
    S_LEFT_BRACKET  reduce using rule 203 (multiplicative_op -> RW_AND .)
    S_LEFT_SQUARE_BRACKET reduce using rule 203 (multiplicative_op -> RW_AND .)
    IDENTIFIER      reduce using rule 203 (multiplicative_op -> RW_AND .)
    L_BOOLEAN_TRUE  reduce using rule 203 (multiplicative_op -> RW_AND .)
    L_BOOLEAN_FALSE reduce using rule 203 (multiplicative_op -> RW_AND .)
    L_NIL           reduce using rule 203 (multiplicative_op -> RW_AND .)
    L_INTEGER_NUMBER reduce using rule 203 (multiplicative_op -> RW_AND .)
    L_REAL_NUMBER   reduce using rule 203 (multiplicative_op -> RW_AND .)
    L_STRING        reduce using rule 203 (multiplicative_op -> RW_AND .)
    L_CHARACTER     reduce using rule 203 (multiplicative_op -> RW_AND .)
    RW_ABS          reduce using rule 203 (multiplicative_op -> RW_AND .)
    RW_SIN          reduce using rule 203 (multiplicative_op -> RW_AND .)
    RW_COS          reduce using rule 203 (multiplicative_op -> RW_AND .)
    RW_TAN          reduce using rule 203 (multiplicative_op -> RW_AND .)
    RW_SUCC         reduce using rule 203 (multiplicative_op -> RW_AND .)
    RW_PRED         reduce using rule 203 (multiplicative_op -> RW_AND .)
    RW_AWAL         reduce using rule 203 (multiplicative_op -> RW_AND .)
    RW_AKHIR        reduce using rule 203 (multiplicative_op -> RW_AND .)
    RW_FIRSTCHAR    reduce using rule 203 (multiplicative_op -> RW_AND .)
    RW_LASTCHAR     reduce using rule 203 (multiplicative_op -> RW_AND .)
    RW_LONG         reduce using rule 203 (multiplicative_op -> RW_AND .)
    RW_ISKOSONG     reduce using rule 203 (multiplicative_op -> RW_AND .)
    RW_INTEGERTOREAL reduce using rule 203 (multiplicative_op -> RW_AND .)
    RW_REALTOINTEGER reduce using rule 203 (multiplicative_op -> RW_AND .)


state 185

    (233) abs_function -> RW_ABS S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    expression                     shift and go to state 271
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 186

    (234) sin_function -> RW_SIN S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    expression                     shift and go to state 272
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 187

    (235) cos_function -> RW_COS S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    expression                     shift and go to state 273
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 188

    (236) tan_function -> RW_TAN S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    expression                     shift and go to state 274
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 189

    (237) succ_function -> RW_SUCC S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    expression                     shift and go to state 275
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 190

    (238) pred_function -> RW_PRED S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    expression                     shift and go to state 276
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 191

    (245) awal_function -> RW_AWAL S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    expression                     shift and go to state 277
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 192

    (246) akhir_function -> RW_AKHIR S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    expression                     shift and go to state 278
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 193

    (247) firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    expression                     shift and go to state 279
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 194

    (248) lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    expression                     shift and go to state 280
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 195

    (249) long_function -> RW_LONG S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    expression                     shift and go to state 281
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 196

    (250) iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    expression                     shift and go to state 282
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 197

    (253) integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    expression                     shift and go to state 283
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 198

    (254) real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET . expression S_RIGHT_BRACKET
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    expression                     shift and go to state 284
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 199

    (204) unary_expression -> unary_op unary_expression .

    S_TIMES         reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    S_DIVIDE        reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_DIV          reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_MOD          reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_AND          reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    S_PLUS          reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    S_MINUS         reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_OR           reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_XOR          reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    S_EQUAL         reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    S_NOT_EQUAL     reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    S_LESS_THAN_EQUAL reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    S_LESS_THAN     reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    S_GREATER_THAN  reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    S_ELEMENT_OF    reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_EQ           reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_NEQ          reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    S_UP_TO         reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    S_RIGHT_BRACKET reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    S_COMMA         reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_KAMUS        reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_PROCEDURE    reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_FUNCTION     reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    $end            reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    DEDENT          reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    S_SEMI_COLON    reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    IDENTIFIER      reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_TYPE         reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    S_RETURN        reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_IF           reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_DEPEND       reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_WHILE        reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_ITERATE      reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_REPEAT       reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_INPUT        reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_OUTPUT       reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_ABS          reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_SIN          reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_COS          reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_TAN          reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_SUCC         reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_PRED         reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_AWAL         reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_AKHIR        reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_FIRSTCHAR    reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_LASTCHAR     reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_LONG         reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_ISKOSONG     reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_INTEGERTOREAL reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_REALTOINTEGER reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_THEN         reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    RW_DO           reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    INDENT          reduce using rule 204 (unary_expression -> unary_op unary_expression .)
    S_COLON         reduce using rule 204 (unary_expression -> unary_op unary_expression .)


state 200

    (172) variable_access -> identifier .
    (226) user_defined_function_call -> identifier . function_actual_parameter_list
    (93) function_actual_parameter_list -> . S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET

    S_LEFT_SQUARE_BRACKET reduce using rule 172 (variable_access -> identifier .)
    S_DOT           reduce using rule 172 (variable_access -> identifier .)
    S_POWER         reduce using rule 172 (variable_access -> identifier .)
    S_TIMES         reduce using rule 172 (variable_access -> identifier .)
    S_DIVIDE        reduce using rule 172 (variable_access -> identifier .)
    RW_DIV          reduce using rule 172 (variable_access -> identifier .)
    RW_MOD          reduce using rule 172 (variable_access -> identifier .)
    RW_AND          reduce using rule 172 (variable_access -> identifier .)
    S_PLUS          reduce using rule 172 (variable_access -> identifier .)
    S_MINUS         reduce using rule 172 (variable_access -> identifier .)
    RW_OR           reduce using rule 172 (variable_access -> identifier .)
    RW_XOR          reduce using rule 172 (variable_access -> identifier .)
    S_EQUAL         reduce using rule 172 (variable_access -> identifier .)
    S_NOT_EQUAL     reduce using rule 172 (variable_access -> identifier .)
    S_LESS_THAN_EQUAL reduce using rule 172 (variable_access -> identifier .)
    S_GREATER_THAN_EQUAL reduce using rule 172 (variable_access -> identifier .)
    S_LESS_THAN     reduce using rule 172 (variable_access -> identifier .)
    S_GREATER_THAN  reduce using rule 172 (variable_access -> identifier .)
    S_ELEMENT_OF    reduce using rule 172 (variable_access -> identifier .)
    RW_EQ           reduce using rule 172 (variable_access -> identifier .)
    RW_NEQ          reduce using rule 172 (variable_access -> identifier .)
    S_UP_TO         reduce using rule 172 (variable_access -> identifier .)
    S_RIGHT_BRACKET reduce using rule 172 (variable_access -> identifier .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 172 (variable_access -> identifier .)
    S_COMMA         reduce using rule 172 (variable_access -> identifier .)
    RW_KAMUS        reduce using rule 172 (variable_access -> identifier .)
    RW_PROCEDURE    reduce using rule 172 (variable_access -> identifier .)
    RW_FUNCTION     reduce using rule 172 (variable_access -> identifier .)
    $end            reduce using rule 172 (variable_access -> identifier .)
    DEDENT          reduce using rule 172 (variable_access -> identifier .)
    S_SEMI_COLON    reduce using rule 172 (variable_access -> identifier .)
    IDENTIFIER      reduce using rule 172 (variable_access -> identifier .)
    RW_TYPE         reduce using rule 172 (variable_access -> identifier .)
    S_RETURN        reduce using rule 172 (variable_access -> identifier .)
    RW_IF           reduce using rule 172 (variable_access -> identifier .)
    RW_DEPEND       reduce using rule 172 (variable_access -> identifier .)
    RW_WHILE        reduce using rule 172 (variable_access -> identifier .)
    RW_ITERATE      reduce using rule 172 (variable_access -> identifier .)
    RW_REPEAT       reduce using rule 172 (variable_access -> identifier .)
    RW_INPUT        reduce using rule 172 (variable_access -> identifier .)
    RW_OUTPUT       reduce using rule 172 (variable_access -> identifier .)
    RW_ABS          reduce using rule 172 (variable_access -> identifier .)
    RW_SIN          reduce using rule 172 (variable_access -> identifier .)
    RW_COS          reduce using rule 172 (variable_access -> identifier .)
    RW_TAN          reduce using rule 172 (variable_access -> identifier .)
    RW_SUCC         reduce using rule 172 (variable_access -> identifier .)
    RW_PRED         reduce using rule 172 (variable_access -> identifier .)
    RW_AWAL         reduce using rule 172 (variable_access -> identifier .)
    RW_AKHIR        reduce using rule 172 (variable_access -> identifier .)
    RW_FIRSTCHAR    reduce using rule 172 (variable_access -> identifier .)
    RW_LASTCHAR     reduce using rule 172 (variable_access -> identifier .)
    RW_LONG         reduce using rule 172 (variable_access -> identifier .)
    RW_ISKOSONG     reduce using rule 172 (variable_access -> identifier .)
    RW_INTEGERTOREAL reduce using rule 172 (variable_access -> identifier .)
    RW_REALTOINTEGER reduce using rule 172 (variable_access -> identifier .)
    RW_THEN         reduce using rule 172 (variable_access -> identifier .)
    RW_DO           reduce using rule 172 (variable_access -> identifier .)
    INDENT          reduce using rule 172 (variable_access -> identifier .)
    S_COLON         reduce using rule 172 (variable_access -> identifier .)
    RW_TIMES        reduce using rule 172 (variable_access -> identifier .)
    S_LEFT_BRACKET  shift and go to state 148

    function_actual_parameter_list shift and go to state 147

state 201

    (207) exponentiation_expression -> primary_expression S_POWER . exponentiation_expression
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    primary_expression             shift and go to state 112
    exponentiation_expression      shift and go to state 285
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 202

    (176) indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET . index_expression_list S_RIGHT_SQUARE_BRACKET
    (177) index_expression_list -> . index_expression_list S_COMMA expression
    (178) index_expression_list -> . expression
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    variable_access                shift and go to state 113
    index_expression_list          shift and go to state 286
    expression                     shift and go to state 287
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 203

    (179) field_designator -> variable_access S_DOT . identifier
    (256) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    identifier                     shift and go to state 288

state 204

    (216) set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list . S_RIGHT_SQUARE_BRACKET
    (218) member_designator_list -> member_designator_list . S_COMMA member_designator

    S_RIGHT_SQUARE_BRACKET shift and go to state 289
    S_COMMA         shift and go to state 290


state 205

    (217) set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .

    S_POWER         reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_TIMES         reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_DIVIDE        reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_DIV          reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_MOD          reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_AND          reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_PLUS          reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_MINUS         reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_OR           reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_XOR          reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_EQUAL         reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_NOT_EQUAL     reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_LESS_THAN     reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_GREATER_THAN  reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_ELEMENT_OF    reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_EQ           reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_NEQ          reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_UP_TO         reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_COMMA         reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_KAMUS        reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_PROCEDURE    reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_FUNCTION     reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    $end            reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    DEDENT          reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_SEMI_COLON    reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    IDENTIFIER      reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_TYPE         reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_RETURN        reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_IF           reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_DEPEND       reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_WHILE        reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_ITERATE      reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_REPEAT       reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_INPUT        reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_OUTPUT       reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_ABS          reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_SIN          reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_COS          reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_TAN          reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_SUCC         reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_PRED         reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_AWAL         reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_AKHIR        reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_LASTCHAR     reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_LONG         reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_ISKOSONG     reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_REALTOINTEGER reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_THEN         reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    RW_DO           reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    INDENT          reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)
    S_COLON         reduce using rule 217 (set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET .)


state 206

    (219) member_designator_list -> member_designator .
    (220) member_designator -> member_designator . S_UP_TO expression

    S_RIGHT_SQUARE_BRACKET reduce using rule 219 (member_designator_list -> member_designator .)
    S_COMMA         reduce using rule 219 (member_designator_list -> member_designator .)
    S_UP_TO         shift and go to state 291


state 207

    (221) member_designator -> expression .
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_UP_TO         reduce using rule 221 (member_designator -> expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 221 (member_designator -> expression .)
    S_COMMA         reduce using rule 221 (member_designator -> expression .)
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 208

    (78) formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET .

    RW_KAMUS        reduce using rule 78 (formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 78 (formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 78 (formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET .)
    $end            reduce using rule 78 (formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 78 (formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET .)


state 209

    (81) formal_parameter_section -> formal_parameter_section S_SEMI_COLON . parameter_specification
    (84) parameter_specification -> . procedure_parameter_type variable_sub_declaration
    (85) procedure_parameter_type -> . RW_INPUT
    (86) procedure_parameter_type -> . RW_OUTPUT
    (87) procedure_parameter_type -> . RW_INPUT S_DIVIDE RW_OUTPUT

    RW_INPUT        shift and go to state 124
    RW_OUTPUT       shift and go to state 125

    parameter_specification        shift and go to state 292
    procedure_parameter_type       shift and go to state 123

state 210

    (82) formal_parameter_section -> formal_parameter_section S_COMMA . parameter_specification
    (84) parameter_specification -> . procedure_parameter_type variable_sub_declaration
    (85) procedure_parameter_type -> . RW_INPUT
    (86) procedure_parameter_type -> . RW_OUTPUT
    (87) procedure_parameter_type -> . RW_INPUT S_DIVIDE RW_OUTPUT

    RW_INPUT        shift and go to state 124
    RW_OUTPUT       shift and go to state 125

    parameter_specification        shift and go to state 293
    procedure_parameter_type       shift and go to state 123

state 211

    (84) parameter_specification -> procedure_parameter_type variable_sub_declaration .

    S_SEMI_COLON    reduce using rule 84 (parameter_specification -> procedure_parameter_type variable_sub_declaration .)
    S_COMMA         reduce using rule 84 (parameter_specification -> procedure_parameter_type variable_sub_declaration .)
    S_RIGHT_BRACKET reduce using rule 84 (parameter_specification -> procedure_parameter_type variable_sub_declaration .)


state 212

    (87) procedure_parameter_type -> RW_INPUT S_DIVIDE . RW_OUTPUT

    RW_OUTPUT       shift and go to state 294


state 213

    (9) block -> kamus_declaration INDENT constant_declaration_block type_declaration_block . variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (15) variable_declaration_block -> . empty
    (16) variable_declaration_block -> . variable_declaration
    (255) empty -> .
    (58) variable_declaration -> . variable_declaration variable_sub_declaration
    (59) variable_declaration -> . variable_sub_declaration
    (60) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (256) identifier -> . IDENTIFIER

    DEDENT          reduce using rule 255 (empty -> .)
    RW_PROCEDURE    reduce using rule 255 (empty -> .)
    RW_FUNCTION     reduce using rule 255 (empty -> .)
    IDENTIFIER      shift and go to state 11

    variable_declaration_block     shift and go to state 295
    empty                          shift and go to state 296
    variable_declaration           shift and go to state 297
    variable_sub_declaration       shift and go to state 298
    identifier_list                shift and go to state 35
    identifier                     shift and go to state 36

state 214

    (13) type_declaration_block -> empty .

    IDENTIFIER      reduce using rule 13 (type_declaration_block -> empty .)
    DEDENT          reduce using rule 13 (type_declaration_block -> empty .)
    RW_PROCEDURE    reduce using rule 13 (type_declaration_block -> empty .)
    RW_FUNCTION     reduce using rule 13 (type_declaration_block -> empty .)


state 215

    (14) type_declaration_block -> type_declaration .
    (66) type_declaration -> type_declaration . type_sub_declaration
    (68) type_sub_declaration -> . RW_TYPE identifier S_COLON type_variety

    IDENTIFIER      reduce using rule 14 (type_declaration_block -> type_declaration .)
    DEDENT          reduce using rule 14 (type_declaration_block -> type_declaration .)
    RW_PROCEDURE    reduce using rule 14 (type_declaration_block -> type_declaration .)
    RW_FUNCTION     reduce using rule 14 (type_declaration_block -> type_declaration .)
    RW_TYPE         shift and go to state 217

    type_sub_declaration           shift and go to state 299

state 216

    (67) type_declaration -> type_sub_declaration .

    RW_TYPE         reduce using rule 67 (type_declaration -> type_sub_declaration .)
    IDENTIFIER      reduce using rule 67 (type_declaration -> type_sub_declaration .)
    DEDENT          reduce using rule 67 (type_declaration -> type_sub_declaration .)
    RW_PROCEDURE    reduce using rule 67 (type_declaration -> type_sub_declaration .)
    RW_FUNCTION     reduce using rule 67 (type_declaration -> type_sub_declaration .)


state 217

    (68) type_sub_declaration -> RW_TYPE . identifier S_COLON type_variety
    (256) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    identifier                     shift and go to state 300

state 218

    (63) constant_declaration -> constant_declaration constant_sub_declaration .

    RW_CONSTANT     reduce using rule 63 (constant_declaration -> constant_declaration constant_sub_declaration .)
    RW_TYPE         reduce using rule 63 (constant_declaration -> constant_declaration constant_sub_declaration .)
    IDENTIFIER      reduce using rule 63 (constant_declaration -> constant_declaration constant_sub_declaration .)
    DEDENT          reduce using rule 63 (constant_declaration -> constant_declaration constant_sub_declaration .)
    RW_PROCEDURE    reduce using rule 63 (constant_declaration -> constant_declaration constant_sub_declaration .)
    RW_FUNCTION     reduce using rule 63 (constant_declaration -> constant_declaration constant_sub_declaration .)


state 219

    (65) constant_sub_declaration -> RW_CONSTANT identifier . S_COLON type_denoter S_EQUAL constant

    S_COLON         shift and go to state 301


state 220

    (22) subprogram_implementation_list -> subprogram_implementation_list subprogram_implementation .

    RW_PROCEDURE    reduce using rule 22 (subprogram_implementation_list -> subprogram_implementation_list subprogram_implementation .)
    RW_FUNCTION     reduce using rule 22 (subprogram_implementation_list -> subprogram_implementation_list subprogram_implementation .)
    $end            reduce using rule 22 (subprogram_implementation_list -> subprogram_implementation_list subprogram_implementation .)


state 221

    (26) procedure_implementation -> procedure_declaration procedure_implementation_block .

    RW_PROCEDURE    reduce using rule 26 (procedure_implementation -> procedure_declaration procedure_implementation_block .)
    RW_FUNCTION     reduce using rule 26 (procedure_implementation -> procedure_declaration procedure_implementation_block .)
    $end            reduce using rule 26 (procedure_implementation -> procedure_declaration procedure_implementation_block .)


state 222

    (28) procedure_implementation_block -> kamus_declaration . INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
    (29) procedure_implementation_block -> kamus_declaration . algorithm_block
    (19) algorithm_block -> . RW_ALGORITMA statement_part

    INDENT          shift and go to state 302
    RW_ALGORITMA    shift and go to state 27

    algorithm_block                shift and go to state 303

state 223

    (30) function_implementation -> function_declaration function_implementation_block .

    RW_PROCEDURE    reduce using rule 30 (function_implementation -> function_declaration function_implementation_block .)
    RW_FUNCTION     reduce using rule 30 (function_implementation -> function_declaration function_implementation_block .)
    $end            reduce using rule 30 (function_implementation -> function_declaration function_implementation_block .)


state 224

    (32) function_implementation_block -> kamus_declaration . INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
    (33) function_implementation_block -> kamus_declaration . algorithm_block
    (19) algorithm_block -> . RW_ALGORITMA statement_part

    INDENT          shift and go to state 304
    RW_ALGORITMA    shift and go to state 27

    algorithm_block                shift and go to state 305

state 225

    (101) compound_statement -> INDENT statement_sequence . DEDENT
    (102) statement_sequence -> statement_sequence . S_SEMI_COLON statement
    (103) statement_sequence -> statement_sequence . statement
    (105) statement -> . assignment_statement
    (106) statement -> . procedure_statement
    (107) statement -> . function_returned_statement
    (108) statement -> . if_statement
    (109) statement -> . depend_on_statement
    (110) statement -> . while_statement
    (111) statement -> . traversal_statement
    (112) statement -> . repeat_statement
    (113) statement -> . iterate_stop_statement
    (114) assignment_statement -> . variable_access S_ASSIGNMENT expression
    (115) procedure_statement -> . builtin_procedure_statements
    (116) procedure_statement -> . identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
    (117) procedure_statement -> . identifier
    (131) function_returned_statement -> . S_RETURN expression
    (136) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement
    (137) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
    (132) depend_on_statement -> . RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (145) while_statement -> . RW_WHILE boolean_expression RW_DO compound_statement
    (147) traversal_statement -> . control_variable RW_TRAVERSAL traversal_range_value compound_statement
    (139) repeat_statement -> . repeat_until_statement
    (140) repeat_statement -> . repeat_times_statement
    (146) iterate_stop_statement -> . RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (121) builtin_procedure_statements -> . input_statement
    (122) builtin_procedure_statements -> . output_statement
    (256) identifier -> . IDENTIFIER
    (149) control_variable -> . identifier
    (141) repeat_until_statement -> . RW_REPEAT compound_statement RW_UNTIL boolean_expression
    (142) repeat_times_statement -> . RW_REPEAT variable_access RW_TIMES compound_statement
    (143) repeat_times_statement -> . RW_REPEAT integer_constant RW_TIMES compound_statement
    (144) repeat_times_statement -> . RW_REPEAT function_designator RW_TIMES compound_statement
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (123) input_statement -> . RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET
    (127) output_statement -> . RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    DEDENT          shift and go to state 306
    S_SEMI_COLON    shift and go to state 307
    S_RETURN        shift and go to state 239
    RW_IF           shift and go to state 240
    RW_DEPEND       shift and go to state 241
    RW_WHILE        shift and go to state 242
    RW_ITERATE      shift and go to state 246
    IDENTIFIER      shift and go to state 11
    RW_REPEAT       shift and go to state 250
    RW_INPUT        shift and go to state 251
    RW_OUTPUT       shift and go to state 252
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    statement                      shift and go to state 308
    assignment_statement           shift and go to state 227
    procedure_statement            shift and go to state 228
    function_returned_statement    shift and go to state 229
    if_statement                   shift and go to state 230
    depend_on_statement            shift and go to state 231
    while_statement                shift and go to state 232
    traversal_statement            shift and go to state 233
    repeat_statement               shift and go to state 234
    iterate_stop_statement         shift and go to state 235
    variable_access                shift and go to state 236
    builtin_procedure_statements   shift and go to state 237
    identifier                     shift and go to state 238
    control_variable               shift and go to state 243
    repeat_until_statement         shift and go to state 244
    repeat_times_statement         shift and go to state 245
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    function_designator            shift and go to state 247
    input_statement                shift and go to state 248
    output_statement               shift and go to state 249
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 226

    (104) statement_sequence -> statement .

    DEDENT          reduce using rule 104 (statement_sequence -> statement .)
    S_SEMI_COLON    reduce using rule 104 (statement_sequence -> statement .)
    S_RETURN        reduce using rule 104 (statement_sequence -> statement .)
    RW_IF           reduce using rule 104 (statement_sequence -> statement .)
    RW_DEPEND       reduce using rule 104 (statement_sequence -> statement .)
    RW_WHILE        reduce using rule 104 (statement_sequence -> statement .)
    RW_ITERATE      reduce using rule 104 (statement_sequence -> statement .)
    IDENTIFIER      reduce using rule 104 (statement_sequence -> statement .)
    RW_REPEAT       reduce using rule 104 (statement_sequence -> statement .)
    RW_INPUT        reduce using rule 104 (statement_sequence -> statement .)
    RW_OUTPUT       reduce using rule 104 (statement_sequence -> statement .)
    RW_ABS          reduce using rule 104 (statement_sequence -> statement .)
    RW_SIN          reduce using rule 104 (statement_sequence -> statement .)
    RW_COS          reduce using rule 104 (statement_sequence -> statement .)
    RW_TAN          reduce using rule 104 (statement_sequence -> statement .)
    RW_SUCC         reduce using rule 104 (statement_sequence -> statement .)
    RW_PRED         reduce using rule 104 (statement_sequence -> statement .)
    RW_AWAL         reduce using rule 104 (statement_sequence -> statement .)
    RW_AKHIR        reduce using rule 104 (statement_sequence -> statement .)
    RW_FIRSTCHAR    reduce using rule 104 (statement_sequence -> statement .)
    RW_LASTCHAR     reduce using rule 104 (statement_sequence -> statement .)
    RW_LONG         reduce using rule 104 (statement_sequence -> statement .)
    RW_ISKOSONG     reduce using rule 104 (statement_sequence -> statement .)
    RW_INTEGERTOREAL reduce using rule 104 (statement_sequence -> statement .)
    RW_REALTOINTEGER reduce using rule 104 (statement_sequence -> statement .)


state 227

    (105) statement -> assignment_statement .

    DEDENT          reduce using rule 105 (statement -> assignment_statement .)
    S_SEMI_COLON    reduce using rule 105 (statement -> assignment_statement .)
    S_RETURN        reduce using rule 105 (statement -> assignment_statement .)
    RW_IF           reduce using rule 105 (statement -> assignment_statement .)
    RW_DEPEND       reduce using rule 105 (statement -> assignment_statement .)
    RW_WHILE        reduce using rule 105 (statement -> assignment_statement .)
    RW_ITERATE      reduce using rule 105 (statement -> assignment_statement .)
    IDENTIFIER      reduce using rule 105 (statement -> assignment_statement .)
    RW_REPEAT       reduce using rule 105 (statement -> assignment_statement .)
    RW_INPUT        reduce using rule 105 (statement -> assignment_statement .)
    RW_OUTPUT       reduce using rule 105 (statement -> assignment_statement .)
    RW_ABS          reduce using rule 105 (statement -> assignment_statement .)
    RW_SIN          reduce using rule 105 (statement -> assignment_statement .)
    RW_COS          reduce using rule 105 (statement -> assignment_statement .)
    RW_TAN          reduce using rule 105 (statement -> assignment_statement .)
    RW_SUCC         reduce using rule 105 (statement -> assignment_statement .)
    RW_PRED         reduce using rule 105 (statement -> assignment_statement .)
    RW_AWAL         reduce using rule 105 (statement -> assignment_statement .)
    RW_AKHIR        reduce using rule 105 (statement -> assignment_statement .)
    RW_FIRSTCHAR    reduce using rule 105 (statement -> assignment_statement .)
    RW_LASTCHAR     reduce using rule 105 (statement -> assignment_statement .)
    RW_LONG         reduce using rule 105 (statement -> assignment_statement .)
    RW_ISKOSONG     reduce using rule 105 (statement -> assignment_statement .)
    RW_INTEGERTOREAL reduce using rule 105 (statement -> assignment_statement .)
    RW_REALTOINTEGER reduce using rule 105 (statement -> assignment_statement .)


state 228

    (106) statement -> procedure_statement .

    DEDENT          reduce using rule 106 (statement -> procedure_statement .)
    S_SEMI_COLON    reduce using rule 106 (statement -> procedure_statement .)
    S_RETURN        reduce using rule 106 (statement -> procedure_statement .)
    RW_IF           reduce using rule 106 (statement -> procedure_statement .)
    RW_DEPEND       reduce using rule 106 (statement -> procedure_statement .)
    RW_WHILE        reduce using rule 106 (statement -> procedure_statement .)
    RW_ITERATE      reduce using rule 106 (statement -> procedure_statement .)
    IDENTIFIER      reduce using rule 106 (statement -> procedure_statement .)
    RW_REPEAT       reduce using rule 106 (statement -> procedure_statement .)
    RW_INPUT        reduce using rule 106 (statement -> procedure_statement .)
    RW_OUTPUT       reduce using rule 106 (statement -> procedure_statement .)
    RW_ABS          reduce using rule 106 (statement -> procedure_statement .)
    RW_SIN          reduce using rule 106 (statement -> procedure_statement .)
    RW_COS          reduce using rule 106 (statement -> procedure_statement .)
    RW_TAN          reduce using rule 106 (statement -> procedure_statement .)
    RW_SUCC         reduce using rule 106 (statement -> procedure_statement .)
    RW_PRED         reduce using rule 106 (statement -> procedure_statement .)
    RW_AWAL         reduce using rule 106 (statement -> procedure_statement .)
    RW_AKHIR        reduce using rule 106 (statement -> procedure_statement .)
    RW_FIRSTCHAR    reduce using rule 106 (statement -> procedure_statement .)
    RW_LASTCHAR     reduce using rule 106 (statement -> procedure_statement .)
    RW_LONG         reduce using rule 106 (statement -> procedure_statement .)
    RW_ISKOSONG     reduce using rule 106 (statement -> procedure_statement .)
    RW_INTEGERTOREAL reduce using rule 106 (statement -> procedure_statement .)
    RW_REALTOINTEGER reduce using rule 106 (statement -> procedure_statement .)


state 229

    (107) statement -> function_returned_statement .

    DEDENT          reduce using rule 107 (statement -> function_returned_statement .)
    S_SEMI_COLON    reduce using rule 107 (statement -> function_returned_statement .)
    S_RETURN        reduce using rule 107 (statement -> function_returned_statement .)
    RW_IF           reduce using rule 107 (statement -> function_returned_statement .)
    RW_DEPEND       reduce using rule 107 (statement -> function_returned_statement .)
    RW_WHILE        reduce using rule 107 (statement -> function_returned_statement .)
    RW_ITERATE      reduce using rule 107 (statement -> function_returned_statement .)
    IDENTIFIER      reduce using rule 107 (statement -> function_returned_statement .)
    RW_REPEAT       reduce using rule 107 (statement -> function_returned_statement .)
    RW_INPUT        reduce using rule 107 (statement -> function_returned_statement .)
    RW_OUTPUT       reduce using rule 107 (statement -> function_returned_statement .)
    RW_ABS          reduce using rule 107 (statement -> function_returned_statement .)
    RW_SIN          reduce using rule 107 (statement -> function_returned_statement .)
    RW_COS          reduce using rule 107 (statement -> function_returned_statement .)
    RW_TAN          reduce using rule 107 (statement -> function_returned_statement .)
    RW_SUCC         reduce using rule 107 (statement -> function_returned_statement .)
    RW_PRED         reduce using rule 107 (statement -> function_returned_statement .)
    RW_AWAL         reduce using rule 107 (statement -> function_returned_statement .)
    RW_AKHIR        reduce using rule 107 (statement -> function_returned_statement .)
    RW_FIRSTCHAR    reduce using rule 107 (statement -> function_returned_statement .)
    RW_LASTCHAR     reduce using rule 107 (statement -> function_returned_statement .)
    RW_LONG         reduce using rule 107 (statement -> function_returned_statement .)
    RW_ISKOSONG     reduce using rule 107 (statement -> function_returned_statement .)
    RW_INTEGERTOREAL reduce using rule 107 (statement -> function_returned_statement .)
    RW_REALTOINTEGER reduce using rule 107 (statement -> function_returned_statement .)


state 230

    (108) statement -> if_statement .

    DEDENT          reduce using rule 108 (statement -> if_statement .)
    S_SEMI_COLON    reduce using rule 108 (statement -> if_statement .)
    S_RETURN        reduce using rule 108 (statement -> if_statement .)
    RW_IF           reduce using rule 108 (statement -> if_statement .)
    RW_DEPEND       reduce using rule 108 (statement -> if_statement .)
    RW_WHILE        reduce using rule 108 (statement -> if_statement .)
    RW_ITERATE      reduce using rule 108 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 108 (statement -> if_statement .)
    RW_REPEAT       reduce using rule 108 (statement -> if_statement .)
    RW_INPUT        reduce using rule 108 (statement -> if_statement .)
    RW_OUTPUT       reduce using rule 108 (statement -> if_statement .)
    RW_ABS          reduce using rule 108 (statement -> if_statement .)
    RW_SIN          reduce using rule 108 (statement -> if_statement .)
    RW_COS          reduce using rule 108 (statement -> if_statement .)
    RW_TAN          reduce using rule 108 (statement -> if_statement .)
    RW_SUCC         reduce using rule 108 (statement -> if_statement .)
    RW_PRED         reduce using rule 108 (statement -> if_statement .)
    RW_AWAL         reduce using rule 108 (statement -> if_statement .)
    RW_AKHIR        reduce using rule 108 (statement -> if_statement .)
    RW_FIRSTCHAR    reduce using rule 108 (statement -> if_statement .)
    RW_LASTCHAR     reduce using rule 108 (statement -> if_statement .)
    RW_LONG         reduce using rule 108 (statement -> if_statement .)
    RW_ISKOSONG     reduce using rule 108 (statement -> if_statement .)
    RW_INTEGERTOREAL reduce using rule 108 (statement -> if_statement .)
    RW_REALTOINTEGER reduce using rule 108 (statement -> if_statement .)


state 231

    (109) statement -> depend_on_statement .

    DEDENT          reduce using rule 109 (statement -> depend_on_statement .)
    S_SEMI_COLON    reduce using rule 109 (statement -> depend_on_statement .)
    S_RETURN        reduce using rule 109 (statement -> depend_on_statement .)
    RW_IF           reduce using rule 109 (statement -> depend_on_statement .)
    RW_DEPEND       reduce using rule 109 (statement -> depend_on_statement .)
    RW_WHILE        reduce using rule 109 (statement -> depend_on_statement .)
    RW_ITERATE      reduce using rule 109 (statement -> depend_on_statement .)
    IDENTIFIER      reduce using rule 109 (statement -> depend_on_statement .)
    RW_REPEAT       reduce using rule 109 (statement -> depend_on_statement .)
    RW_INPUT        reduce using rule 109 (statement -> depend_on_statement .)
    RW_OUTPUT       reduce using rule 109 (statement -> depend_on_statement .)
    RW_ABS          reduce using rule 109 (statement -> depend_on_statement .)
    RW_SIN          reduce using rule 109 (statement -> depend_on_statement .)
    RW_COS          reduce using rule 109 (statement -> depend_on_statement .)
    RW_TAN          reduce using rule 109 (statement -> depend_on_statement .)
    RW_SUCC         reduce using rule 109 (statement -> depend_on_statement .)
    RW_PRED         reduce using rule 109 (statement -> depend_on_statement .)
    RW_AWAL         reduce using rule 109 (statement -> depend_on_statement .)
    RW_AKHIR        reduce using rule 109 (statement -> depend_on_statement .)
    RW_FIRSTCHAR    reduce using rule 109 (statement -> depend_on_statement .)
    RW_LASTCHAR     reduce using rule 109 (statement -> depend_on_statement .)
    RW_LONG         reduce using rule 109 (statement -> depend_on_statement .)
    RW_ISKOSONG     reduce using rule 109 (statement -> depend_on_statement .)
    RW_INTEGERTOREAL reduce using rule 109 (statement -> depend_on_statement .)
    RW_REALTOINTEGER reduce using rule 109 (statement -> depend_on_statement .)


state 232

    (110) statement -> while_statement .

    DEDENT          reduce using rule 110 (statement -> while_statement .)
    S_SEMI_COLON    reduce using rule 110 (statement -> while_statement .)
    S_RETURN        reduce using rule 110 (statement -> while_statement .)
    RW_IF           reduce using rule 110 (statement -> while_statement .)
    RW_DEPEND       reduce using rule 110 (statement -> while_statement .)
    RW_WHILE        reduce using rule 110 (statement -> while_statement .)
    RW_ITERATE      reduce using rule 110 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 110 (statement -> while_statement .)
    RW_REPEAT       reduce using rule 110 (statement -> while_statement .)
    RW_INPUT        reduce using rule 110 (statement -> while_statement .)
    RW_OUTPUT       reduce using rule 110 (statement -> while_statement .)
    RW_ABS          reduce using rule 110 (statement -> while_statement .)
    RW_SIN          reduce using rule 110 (statement -> while_statement .)
    RW_COS          reduce using rule 110 (statement -> while_statement .)
    RW_TAN          reduce using rule 110 (statement -> while_statement .)
    RW_SUCC         reduce using rule 110 (statement -> while_statement .)
    RW_PRED         reduce using rule 110 (statement -> while_statement .)
    RW_AWAL         reduce using rule 110 (statement -> while_statement .)
    RW_AKHIR        reduce using rule 110 (statement -> while_statement .)
    RW_FIRSTCHAR    reduce using rule 110 (statement -> while_statement .)
    RW_LASTCHAR     reduce using rule 110 (statement -> while_statement .)
    RW_LONG         reduce using rule 110 (statement -> while_statement .)
    RW_ISKOSONG     reduce using rule 110 (statement -> while_statement .)
    RW_INTEGERTOREAL reduce using rule 110 (statement -> while_statement .)
    RW_REALTOINTEGER reduce using rule 110 (statement -> while_statement .)


state 233

    (111) statement -> traversal_statement .

    DEDENT          reduce using rule 111 (statement -> traversal_statement .)
    S_SEMI_COLON    reduce using rule 111 (statement -> traversal_statement .)
    S_RETURN        reduce using rule 111 (statement -> traversal_statement .)
    RW_IF           reduce using rule 111 (statement -> traversal_statement .)
    RW_DEPEND       reduce using rule 111 (statement -> traversal_statement .)
    RW_WHILE        reduce using rule 111 (statement -> traversal_statement .)
    RW_ITERATE      reduce using rule 111 (statement -> traversal_statement .)
    IDENTIFIER      reduce using rule 111 (statement -> traversal_statement .)
    RW_REPEAT       reduce using rule 111 (statement -> traversal_statement .)
    RW_INPUT        reduce using rule 111 (statement -> traversal_statement .)
    RW_OUTPUT       reduce using rule 111 (statement -> traversal_statement .)
    RW_ABS          reduce using rule 111 (statement -> traversal_statement .)
    RW_SIN          reduce using rule 111 (statement -> traversal_statement .)
    RW_COS          reduce using rule 111 (statement -> traversal_statement .)
    RW_TAN          reduce using rule 111 (statement -> traversal_statement .)
    RW_SUCC         reduce using rule 111 (statement -> traversal_statement .)
    RW_PRED         reduce using rule 111 (statement -> traversal_statement .)
    RW_AWAL         reduce using rule 111 (statement -> traversal_statement .)
    RW_AKHIR        reduce using rule 111 (statement -> traversal_statement .)
    RW_FIRSTCHAR    reduce using rule 111 (statement -> traversal_statement .)
    RW_LASTCHAR     reduce using rule 111 (statement -> traversal_statement .)
    RW_LONG         reduce using rule 111 (statement -> traversal_statement .)
    RW_ISKOSONG     reduce using rule 111 (statement -> traversal_statement .)
    RW_INTEGERTOREAL reduce using rule 111 (statement -> traversal_statement .)
    RW_REALTOINTEGER reduce using rule 111 (statement -> traversal_statement .)


state 234

    (112) statement -> repeat_statement .

    DEDENT          reduce using rule 112 (statement -> repeat_statement .)
    S_SEMI_COLON    reduce using rule 112 (statement -> repeat_statement .)
    S_RETURN        reduce using rule 112 (statement -> repeat_statement .)
    RW_IF           reduce using rule 112 (statement -> repeat_statement .)
    RW_DEPEND       reduce using rule 112 (statement -> repeat_statement .)
    RW_WHILE        reduce using rule 112 (statement -> repeat_statement .)
    RW_ITERATE      reduce using rule 112 (statement -> repeat_statement .)
    IDENTIFIER      reduce using rule 112 (statement -> repeat_statement .)
    RW_REPEAT       reduce using rule 112 (statement -> repeat_statement .)
    RW_INPUT        reduce using rule 112 (statement -> repeat_statement .)
    RW_OUTPUT       reduce using rule 112 (statement -> repeat_statement .)
    RW_ABS          reduce using rule 112 (statement -> repeat_statement .)
    RW_SIN          reduce using rule 112 (statement -> repeat_statement .)
    RW_COS          reduce using rule 112 (statement -> repeat_statement .)
    RW_TAN          reduce using rule 112 (statement -> repeat_statement .)
    RW_SUCC         reduce using rule 112 (statement -> repeat_statement .)
    RW_PRED         reduce using rule 112 (statement -> repeat_statement .)
    RW_AWAL         reduce using rule 112 (statement -> repeat_statement .)
    RW_AKHIR        reduce using rule 112 (statement -> repeat_statement .)
    RW_FIRSTCHAR    reduce using rule 112 (statement -> repeat_statement .)
    RW_LASTCHAR     reduce using rule 112 (statement -> repeat_statement .)
    RW_LONG         reduce using rule 112 (statement -> repeat_statement .)
    RW_ISKOSONG     reduce using rule 112 (statement -> repeat_statement .)
    RW_INTEGERTOREAL reduce using rule 112 (statement -> repeat_statement .)
    RW_REALTOINTEGER reduce using rule 112 (statement -> repeat_statement .)


state 235

    (113) statement -> iterate_stop_statement .

    DEDENT          reduce using rule 113 (statement -> iterate_stop_statement .)
    S_SEMI_COLON    reduce using rule 113 (statement -> iterate_stop_statement .)
    S_RETURN        reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_IF           reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_DEPEND       reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_WHILE        reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_ITERATE      reduce using rule 113 (statement -> iterate_stop_statement .)
    IDENTIFIER      reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_REPEAT       reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_INPUT        reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_OUTPUT       reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_ABS          reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_SIN          reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_COS          reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_TAN          reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_SUCC         reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_PRED         reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_AWAL         reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_AKHIR        reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_FIRSTCHAR    reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_LASTCHAR     reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_LONG         reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_ISKOSONG     reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_INTEGERTOREAL reduce using rule 113 (statement -> iterate_stop_statement .)
    RW_REALTOINTEGER reduce using rule 113 (statement -> iterate_stop_statement .)


state 236

    (114) assignment_statement -> variable_access . S_ASSIGNMENT expression
    (176) indexed_variable -> variable_access . S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> variable_access . S_DOT identifier

    S_ASSIGNMENT    shift and go to state 309
    S_LEFT_SQUARE_BRACKET shift and go to state 202
    S_DOT           shift and go to state 203


state 237

    (115) procedure_statement -> builtin_procedure_statements .

    DEDENT          reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    S_SEMI_COLON    reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    S_RETURN        reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_IF           reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_DEPEND       reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_WHILE        reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_ITERATE      reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    IDENTIFIER      reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_REPEAT       reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_INPUT        reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_OUTPUT       reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_ABS          reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_SIN          reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_COS          reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_TAN          reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_SUCC         reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_PRED         reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_AWAL         reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_AKHIR        reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_FIRSTCHAR    reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_LASTCHAR     reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_LONG         reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_ISKOSONG     reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_INTEGERTOREAL reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)
    RW_REALTOINTEGER reduce using rule 115 (procedure_statement -> builtin_procedure_statements .)


state 238

    (116) procedure_statement -> identifier . S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
    (117) procedure_statement -> identifier .
    (172) variable_access -> identifier .
    (149) control_variable -> identifier .
    (226) user_defined_function_call -> identifier . function_actual_parameter_list
    (93) function_actual_parameter_list -> . S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 310
    DEDENT          reduce using rule 117 (procedure_statement -> identifier .)
    S_SEMI_COLON    reduce using rule 117 (procedure_statement -> identifier .)
    S_RETURN        reduce using rule 117 (procedure_statement -> identifier .)
    RW_IF           reduce using rule 117 (procedure_statement -> identifier .)
    RW_DEPEND       reduce using rule 117 (procedure_statement -> identifier .)
    RW_WHILE        reduce using rule 117 (procedure_statement -> identifier .)
    RW_ITERATE      reduce using rule 117 (procedure_statement -> identifier .)
    IDENTIFIER      reduce using rule 117 (procedure_statement -> identifier .)
    RW_REPEAT       reduce using rule 117 (procedure_statement -> identifier .)
    RW_INPUT        reduce using rule 117 (procedure_statement -> identifier .)
    RW_OUTPUT       reduce using rule 117 (procedure_statement -> identifier .)
    RW_ABS          reduce using rule 117 (procedure_statement -> identifier .)
    RW_SIN          reduce using rule 117 (procedure_statement -> identifier .)
    RW_COS          reduce using rule 117 (procedure_statement -> identifier .)
    RW_TAN          reduce using rule 117 (procedure_statement -> identifier .)
    RW_SUCC         reduce using rule 117 (procedure_statement -> identifier .)
    RW_PRED         reduce using rule 117 (procedure_statement -> identifier .)
    RW_AWAL         reduce using rule 117 (procedure_statement -> identifier .)
    RW_AKHIR        reduce using rule 117 (procedure_statement -> identifier .)
    RW_FIRSTCHAR    reduce using rule 117 (procedure_statement -> identifier .)
    RW_LASTCHAR     reduce using rule 117 (procedure_statement -> identifier .)
    RW_LONG         reduce using rule 117 (procedure_statement -> identifier .)
    RW_ISKOSONG     reduce using rule 117 (procedure_statement -> identifier .)
    RW_INTEGERTOREAL reduce using rule 117 (procedure_statement -> identifier .)
    RW_REALTOINTEGER reduce using rule 117 (procedure_statement -> identifier .)
    S_ASSIGNMENT    reduce using rule 172 (variable_access -> identifier .)
    S_LEFT_SQUARE_BRACKET reduce using rule 172 (variable_access -> identifier .)
    S_DOT           reduce using rule 172 (variable_access -> identifier .)
    RW_TRAVERSAL    reduce using rule 149 (control_variable -> identifier .)

    function_actual_parameter_list shift and go to state 147

state 239

    (131) function_returned_statement -> S_RETURN . expression
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    expression                     shift and go to state 311
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 240

    (136) if_statement -> RW_IF . boolean_expression RW_THEN compound_statement
    (137) if_statement -> RW_IF . boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
    (138) boolean_expression -> . expression
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    boolean_expression             shift and go to state 312
    expression                     shift and go to state 313
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 241

    (132) depend_on_statement -> RW_DEPEND . RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT

    RW_ON           shift and go to state 314


state 242

    (145) while_statement -> RW_WHILE . boolean_expression RW_DO compound_statement
    (138) boolean_expression -> . expression
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    boolean_expression             shift and go to state 315
    expression                     shift and go to state 313
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 243

    (147) traversal_statement -> control_variable . RW_TRAVERSAL traversal_range_value compound_statement

    RW_TRAVERSAL    shift and go to state 316


state 244

    (139) repeat_statement -> repeat_until_statement .

    DEDENT          reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    S_SEMI_COLON    reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    S_RETURN        reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_IF           reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_DEPEND       reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_WHILE        reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_ITERATE      reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    IDENTIFIER      reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_REPEAT       reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_INPUT        reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_OUTPUT       reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_ABS          reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_SIN          reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_COS          reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_TAN          reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_SUCC         reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_PRED         reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_AWAL         reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_AKHIR        reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_FIRSTCHAR    reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_LASTCHAR     reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_LONG         reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_ISKOSONG     reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_INTEGERTOREAL reduce using rule 139 (repeat_statement -> repeat_until_statement .)
    RW_REALTOINTEGER reduce using rule 139 (repeat_statement -> repeat_until_statement .)


state 245

    (140) repeat_statement -> repeat_times_statement .

    DEDENT          reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    S_SEMI_COLON    reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    S_RETURN        reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_IF           reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_DEPEND       reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_WHILE        reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_ITERATE      reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    IDENTIFIER      reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_REPEAT       reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_INPUT        reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_OUTPUT       reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_ABS          reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_SIN          reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_COS          reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_TAN          reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_SUCC         reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_PRED         reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_AWAL         reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_AKHIR        reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_FIRSTCHAR    reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_LASTCHAR     reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_LONG         reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_ISKOSONG     reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_INTEGERTOREAL reduce using rule 140 (repeat_statement -> repeat_times_statement .)
    RW_REALTOINTEGER reduce using rule 140 (repeat_statement -> repeat_times_statement .)


state 246

    (146) iterate_stop_statement -> RW_ITERATE . compound_statement RW_STOP boolean_expression compound_statement
    (101) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 141

    compound_statement             shift and go to state 317

state 247

    (175) variable_access -> function_designator .

    S_ASSIGNMENT    reduce using rule 175 (variable_access -> function_designator .)
    S_LEFT_SQUARE_BRACKET reduce using rule 175 (variable_access -> function_designator .)
    S_DOT           reduce using rule 175 (variable_access -> function_designator .)
    S_RIGHT_BRACKET reduce using rule 175 (variable_access -> function_designator .)
    S_COMMA         reduce using rule 175 (variable_access -> function_designator .)


state 248

    (121) builtin_procedure_statements -> input_statement .

    DEDENT          reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    S_SEMI_COLON    reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    S_RETURN        reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_IF           reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_DEPEND       reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_WHILE        reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_ITERATE      reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    IDENTIFIER      reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_REPEAT       reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_INPUT        reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_OUTPUT       reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_ABS          reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_SIN          reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_COS          reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_TAN          reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_SUCC         reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_PRED         reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_AWAL         reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_AKHIR        reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_FIRSTCHAR    reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_LASTCHAR     reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_LONG         reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_ISKOSONG     reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_INTEGERTOREAL reduce using rule 121 (builtin_procedure_statements -> input_statement .)
    RW_REALTOINTEGER reduce using rule 121 (builtin_procedure_statements -> input_statement .)


state 249

    (122) builtin_procedure_statements -> output_statement .

    DEDENT          reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    S_SEMI_COLON    reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    S_RETURN        reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_IF           reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_DEPEND       reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_WHILE        reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_ITERATE      reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    IDENTIFIER      reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_REPEAT       reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_INPUT        reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_OUTPUT       reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_ABS          reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_SIN          reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_COS          reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_TAN          reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_SUCC         reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_PRED         reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_AWAL         reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_AKHIR        reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_FIRSTCHAR    reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_LASTCHAR     reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_LONG         reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_ISKOSONG     reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_INTEGERTOREAL reduce using rule 122 (builtin_procedure_statements -> output_statement .)
    RW_REALTOINTEGER reduce using rule 122 (builtin_procedure_statements -> output_statement .)


state 250

    (141) repeat_until_statement -> RW_REPEAT . compound_statement RW_UNTIL boolean_expression
    (142) repeat_times_statement -> RW_REPEAT . variable_access RW_TIMES compound_statement
    (143) repeat_times_statement -> RW_REPEAT . integer_constant RW_TIMES compound_statement
    (144) repeat_times_statement -> RW_REPEAT . function_designator RW_TIMES compound_statement
    (101) compound_statement -> . INDENT statement_sequence DEDENT
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (165) integer_constant -> . L_INTEGER_NUMBER
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    INDENT          shift and go to state 141
    L_INTEGER_NUMBER shift and go to state 92
    IDENTIFIER      shift and go to state 11
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    compound_statement             shift and go to state 318
    variable_access                shift and go to state 319
    integer_constant               shift and go to state 320
    function_designator            shift and go to state 321
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 251

    (123) input_statement -> RW_INPUT . S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 322


state 252

    (127) output_statement -> RW_OUTPUT . S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET

    S_LEFT_BRACKET  shift and go to state 323


state 253

    (96) function_parameter_list -> function_parameter_list S_SEMI_COLON function_parameter_declaration .

    S_SEMI_COLON    reduce using rule 96 (function_parameter_list -> function_parameter_list S_SEMI_COLON function_parameter_declaration .)
    S_COMMA         reduce using rule 96 (function_parameter_list -> function_parameter_list S_SEMI_COLON function_parameter_declaration .)
    S_RIGHT_BRACKET reduce using rule 96 (function_parameter_list -> function_parameter_list S_SEMI_COLON function_parameter_declaration .)


state 254

    (97) function_parameter_list -> function_parameter_list S_COMMA function_parameter_declaration .

    S_SEMI_COLON    reduce using rule 97 (function_parameter_list -> function_parameter_list S_COMMA function_parameter_declaration .)
    S_COMMA         reduce using rule 97 (function_parameter_list -> function_parameter_list S_COMMA function_parameter_declaration .)
    S_RIGHT_BRACKET reduce using rule 97 (function_parameter_list -> function_parameter_list S_COMMA function_parameter_declaration .)


state 255

    (60) variable_sub_declaration -> identifier_list S_COLON type_denoter .

    S_SEMI_COLON    reduce using rule 60 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    S_COMMA         reduce using rule 60 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    S_RIGHT_BRACKET reduce using rule 60 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    IDENTIFIER      reduce using rule 60 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    DEDENT          reduce using rule 60 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    RW_PROCEDURE    reduce using rule 60 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    RW_FUNCTION     reduce using rule 60 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)
    S_GREATER_THAN  reduce using rule 60 (variable_sub_declaration -> identifier_list S_COLON type_denoter .)


state 256

    (5) identifier_list -> identifier_list S_COMMA identifier .

    S_COLON         reduce using rule 5 (identifier_list -> identifier_list S_COMMA identifier .)
    S_COMMA         reduce using rule 5 (identifier_list -> identifier_list S_COMMA identifier .)
    S_RIGHT_BRACKET reduce using rule 5 (identifier_list -> identifier_list S_COMMA identifier .)


state 257

    (93) function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list . S_RIGHT_BRACKET
    (118) actual_parameter_list -> actual_parameter_list . S_COMMA actual_parameter

    S_RIGHT_BRACKET shift and go to state 324
    S_COMMA         shift and go to state 325


state 258

    (119) actual_parameter_list -> actual_parameter .

    S_RIGHT_BRACKET reduce using rule 119 (actual_parameter_list -> actual_parameter .)
    S_COMMA         reduce using rule 119 (actual_parameter_list -> actual_parameter .)


state 259

    (120) actual_parameter -> expression .
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET reduce using rule 120 (actual_parameter -> expression .)
    S_COMMA         reduce using rule 120 (actual_parameter -> expression .)
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 260

    (44) enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .

    RW_KAMUS        reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    $end            reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 44 (enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET .)


state 261

    (213) primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_POWER         reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_UP_TO         reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ABS          reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SIN          reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_COS          reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TAN          reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SUCC         reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PRED         reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AWAL         reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AKHIR        reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LASTCHAR     reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LONG         reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ISKOSONG     reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REALTOINTEGER reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 213 (primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 262

    (52) array_type -> RW_ARRAY array_index RW_OF . component_type
    (57) component_type -> . type_denoter
    (34) type_denoter -> . ordinal_type
    (35) type_denoter -> . structured_type
    (36) type_denoter -> . RW_INTEGER
    (37) type_denoter -> . RW_REAL
    (38) type_denoter -> . RW_STRING
    (39) type_denoter -> . RW_CHARACTER
    (40) type_denoter -> . RW_BOOLEAN
    (41) ordinal_type -> . enumerated_type
    (42) ordinal_type -> . subrange_type
    (43) ordinal_type -> . identifier
    (51) structured_type -> . array_type
    (44) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (45) subrange_type -> . subrange_type_option
    (256) identifier -> . IDENTIFIER
    (52) array_type -> . RW_ARRAY array_index RW_OF component_type
    (46) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (47) subrange_option -> . identifier
    (48) subrange_option -> . constant
    (49) subrange_option -> . function_designator
    (50) subrange_option -> . expression
    (154) constant -> . string_char_constant
    (155) constant -> . non_string_constant
    (156) constant -> . sign non_string_constant
    (157) constant -> . boolean_constant
    (158) constant -> . nil_constant
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (159) sign -> . S_PLUS
    (160) sign -> . S_MINUS
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier

    RW_INTEGER      shift and go to state 40
    RW_REAL         shift and go to state 41
    RW_STRING       shift and go to state 42
    RW_CHARACTER    shift and go to state 43
    RW_BOOLEAN      shift and go to state 44
    S_LEFT_BRACKET  shift and go to state 49
    IDENTIFIER      shift and go to state 11
    RW_ARRAY        shift and go to state 51
    S_PLUS          shift and go to state 70
    S_MINUS         shift and go to state 71
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107
    RW_NOT          shift and go to state 111
    S_LEFT_SQUARE_BRACKET shift and go to state 118

    component_type                 shift and go to state 326
    type_denoter                   shift and go to state 327
    ordinal_type                   shift and go to state 38
    structured_type                shift and go to state 39
    enumerated_type                shift and go to state 45
    subrange_type                  shift and go to state 46
    identifier                     shift and go to state 47
    array_type                     shift and go to state 48
    subrange_type_option           shift and go to state 50
    subrange_option                shift and go to state 52
    constant                       shift and go to state 53
    function_designator            shift and go to state 54
    expression                     shift and go to state 55
    string_char_constant           shift and go to state 56
    non_string_constant            shift and go to state 57
    sign                           shift and go to state 58
    boolean_constant               shift and go to state 59
    nil_constant                   shift and go to state 60
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    additive_expression            shift and go to state 65
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117

state 263

    (53) array_index -> S_LEFT_SQUARE_BRACKET index_list . S_RIGHT_SQUARE_BRACKET
    (54) index_list -> index_list . S_COMMA index_type

    S_RIGHT_SQUARE_BRACKET shift and go to state 328
    S_COMMA         shift and go to state 329


state 264

    (55) index_list -> index_type .

    S_RIGHT_SQUARE_BRACKET reduce using rule 55 (index_list -> index_type .)
    S_COMMA         reduce using rule 55 (index_list -> index_type .)


state 265

    (56) index_type -> ordinal_type .

    S_RIGHT_SQUARE_BRACKET reduce using rule 56 (index_type -> ordinal_type .)
    S_COMMA         reduce using rule 56 (index_type -> ordinal_type .)


state 266

    (46) subrange_type_option -> subrange_option S_UP_TO subrange_option .

    RW_KAMUS        reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    RW_PROCEDURE    reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    RW_FUNCTION     reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    $end            reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    DEDENT          reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    S_SEMI_COLON    reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    S_COMMA         reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    S_RIGHT_BRACKET reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    IDENTIFIER      reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    S_GREATER_THAN  reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    S_EQUAL         reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)
    RW_TYPE         reduce using rule 46 (subrange_type_option -> subrange_option S_UP_TO subrange_option .)


state 267

    (47) subrange_option -> identifier .
    (226) user_defined_function_call -> identifier . function_actual_parameter_list
    (172) variable_access -> identifier .
    (93) function_actual_parameter_list -> . S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET

  ! reduce/reduce conflict for S_EQUAL resolved using rule 47 (subrange_option -> identifier .)
  ! reduce/reduce conflict for S_GREATER_THAN resolved using rule 47 (subrange_option -> identifier .)
  ! reduce/reduce conflict for RW_KAMUS resolved using rule 47 (subrange_option -> identifier .)
  ! reduce/reduce conflict for RW_PROCEDURE resolved using rule 47 (subrange_option -> identifier .)
  ! reduce/reduce conflict for RW_FUNCTION resolved using rule 47 (subrange_option -> identifier .)
  ! reduce/reduce conflict for $end resolved using rule 47 (subrange_option -> identifier .)
  ! reduce/reduce conflict for DEDENT resolved using rule 47 (subrange_option -> identifier .)
  ! reduce/reduce conflict for S_SEMI_COLON resolved using rule 47 (subrange_option -> identifier .)
  ! reduce/reduce conflict for S_COMMA resolved using rule 47 (subrange_option -> identifier .)
  ! reduce/reduce conflict for S_RIGHT_BRACKET resolved using rule 47 (subrange_option -> identifier .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 47 (subrange_option -> identifier .)
  ! reduce/reduce conflict for S_RIGHT_SQUARE_BRACKET resolved using rule 47 (subrange_option -> identifier .)
  ! reduce/reduce conflict for RW_TYPE resolved using rule 47 (subrange_option -> identifier .)
  ! reduce/reduce conflict for S_UP_TO resolved using rule 47 (subrange_option -> identifier .)
    RW_KAMUS        reduce using rule 47 (subrange_option -> identifier .)
    RW_PROCEDURE    reduce using rule 47 (subrange_option -> identifier .)
    RW_FUNCTION     reduce using rule 47 (subrange_option -> identifier .)
    $end            reduce using rule 47 (subrange_option -> identifier .)
    DEDENT          reduce using rule 47 (subrange_option -> identifier .)
    S_SEMI_COLON    reduce using rule 47 (subrange_option -> identifier .)
    S_COMMA         reduce using rule 47 (subrange_option -> identifier .)
    S_RIGHT_BRACKET reduce using rule 47 (subrange_option -> identifier .)
    IDENTIFIER      reduce using rule 47 (subrange_option -> identifier .)
    S_GREATER_THAN  reduce using rule 47 (subrange_option -> identifier .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 47 (subrange_option -> identifier .)
    S_EQUAL         reduce using rule 47 (subrange_option -> identifier .)
    RW_TYPE         reduce using rule 47 (subrange_option -> identifier .)
    S_UP_TO         reduce using rule 47 (subrange_option -> identifier .)
    S_LEFT_SQUARE_BRACKET reduce using rule 172 (variable_access -> identifier .)
    S_DOT           reduce using rule 172 (variable_access -> identifier .)
    S_POWER         reduce using rule 172 (variable_access -> identifier .)
    S_TIMES         reduce using rule 172 (variable_access -> identifier .)
    S_DIVIDE        reduce using rule 172 (variable_access -> identifier .)
    RW_DIV          reduce using rule 172 (variable_access -> identifier .)
    RW_MOD          reduce using rule 172 (variable_access -> identifier .)
    RW_AND          reduce using rule 172 (variable_access -> identifier .)
    S_PLUS          reduce using rule 172 (variable_access -> identifier .)
    S_MINUS         reduce using rule 172 (variable_access -> identifier .)
    RW_OR           reduce using rule 172 (variable_access -> identifier .)
    RW_XOR          reduce using rule 172 (variable_access -> identifier .)
    S_NOT_EQUAL     reduce using rule 172 (variable_access -> identifier .)
    S_LESS_THAN_EQUAL reduce using rule 172 (variable_access -> identifier .)
    S_GREATER_THAN_EQUAL reduce using rule 172 (variable_access -> identifier .)
    S_LESS_THAN     reduce using rule 172 (variable_access -> identifier .)
    S_ELEMENT_OF    reduce using rule 172 (variable_access -> identifier .)
    RW_EQ           reduce using rule 172 (variable_access -> identifier .)
    RW_NEQ          reduce using rule 172 (variable_access -> identifier .)
    S_LEFT_BRACKET  shift and go to state 148

  ! S_EQUAL         [ reduce using rule 172 (variable_access -> identifier .) ]
  ! S_GREATER_THAN  [ reduce using rule 172 (variable_access -> identifier .) ]
  ! RW_KAMUS        [ reduce using rule 172 (variable_access -> identifier .) ]
  ! RW_PROCEDURE    [ reduce using rule 172 (variable_access -> identifier .) ]
  ! RW_FUNCTION     [ reduce using rule 172 (variable_access -> identifier .) ]
  ! $end            [ reduce using rule 172 (variable_access -> identifier .) ]
  ! DEDENT          [ reduce using rule 172 (variable_access -> identifier .) ]
  ! S_SEMI_COLON    [ reduce using rule 172 (variable_access -> identifier .) ]
  ! S_COMMA         [ reduce using rule 172 (variable_access -> identifier .) ]
  ! S_RIGHT_BRACKET [ reduce using rule 172 (variable_access -> identifier .) ]
  ! IDENTIFIER      [ reduce using rule 172 (variable_access -> identifier .) ]
  ! S_RIGHT_SQUARE_BRACKET [ reduce using rule 172 (variable_access -> identifier .) ]
  ! RW_TYPE         [ reduce using rule 172 (variable_access -> identifier .) ]
  ! S_UP_TO         [ reduce using rule 172 (variable_access -> identifier .) ]

    function_actual_parameter_list shift and go to state 147

state 268

    (180) expression -> expression relational_op additive_expression .
    (191) additive_expression -> additive_expression . additive_op multiplicative_expression
    (193) additive_op -> . S_PLUS
    (194) additive_op -> . S_MINUS
    (195) additive_op -> . RW_OR
    (196) additive_op -> . RW_XOR

    S_EQUAL         reduce using rule 180 (expression -> expression relational_op additive_expression .)
    S_NOT_EQUAL     reduce using rule 180 (expression -> expression relational_op additive_expression .)
    S_LESS_THAN_EQUAL reduce using rule 180 (expression -> expression relational_op additive_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 180 (expression -> expression relational_op additive_expression .)
    S_LESS_THAN     reduce using rule 180 (expression -> expression relational_op additive_expression .)
    S_GREATER_THAN  reduce using rule 180 (expression -> expression relational_op additive_expression .)
    S_ELEMENT_OF    reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_EQ           reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_NEQ          reduce using rule 180 (expression -> expression relational_op additive_expression .)
    S_UP_TO         reduce using rule 180 (expression -> expression relational_op additive_expression .)
    S_RIGHT_BRACKET reduce using rule 180 (expression -> expression relational_op additive_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 180 (expression -> expression relational_op additive_expression .)
    S_COMMA         reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_KAMUS        reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_PROCEDURE    reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_FUNCTION     reduce using rule 180 (expression -> expression relational_op additive_expression .)
    $end            reduce using rule 180 (expression -> expression relational_op additive_expression .)
    DEDENT          reduce using rule 180 (expression -> expression relational_op additive_expression .)
    S_SEMI_COLON    reduce using rule 180 (expression -> expression relational_op additive_expression .)
    IDENTIFIER      reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_TYPE         reduce using rule 180 (expression -> expression relational_op additive_expression .)
    S_RETURN        reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_IF           reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_DEPEND       reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_WHILE        reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_ITERATE      reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_REPEAT       reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_INPUT        reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_OUTPUT       reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_ABS          reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_SIN          reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_COS          reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_TAN          reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_SUCC         reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_PRED         reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_AWAL         reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_AKHIR        reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_FIRSTCHAR    reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_LASTCHAR     reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_LONG         reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_ISKOSONG     reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_INTEGERTOREAL reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_REALTOINTEGER reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_THEN         reduce using rule 180 (expression -> expression relational_op additive_expression .)
    RW_DO           reduce using rule 180 (expression -> expression relational_op additive_expression .)
    INDENT          reduce using rule 180 (expression -> expression relational_op additive_expression .)
    S_COLON         reduce using rule 180 (expression -> expression relational_op additive_expression .)
    S_PLUS          shift and go to state 175
    S_MINUS         shift and go to state 176
    RW_OR           shift and go to state 177
    RW_XOR          shift and go to state 178

    additive_op                    shift and go to state 174

state 269

    (191) additive_expression -> additive_expression additive_op multiplicative_expression .
    (197) multiplicative_expression -> multiplicative_expression . multiplicative_op unary_expression
    (199) multiplicative_op -> . S_TIMES
    (200) multiplicative_op -> . S_DIVIDE
    (201) multiplicative_op -> . RW_DIV
    (202) multiplicative_op -> . RW_MOD
    (203) multiplicative_op -> . RW_AND

    S_PLUS          reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_MINUS         reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_OR           reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_XOR          reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_EQUAL         reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_NOT_EQUAL     reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_LESS_THAN_EQUAL reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_LESS_THAN     reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_GREATER_THAN  reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_ELEMENT_OF    reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_EQ           reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_NEQ          reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_UP_TO         reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_RIGHT_BRACKET reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_COMMA         reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_KAMUS        reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_PROCEDURE    reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_FUNCTION     reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    $end            reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    DEDENT          reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_SEMI_COLON    reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    IDENTIFIER      reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_TYPE         reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_RETURN        reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_IF           reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_DEPEND       reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_WHILE        reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_ITERATE      reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_REPEAT       reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_INPUT        reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_OUTPUT       reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_ABS          reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_SIN          reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_COS          reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_TAN          reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_SUCC         reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_PRED         reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_AWAL         reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_AKHIR        reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_FIRSTCHAR    reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_LASTCHAR     reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_LONG         reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_ISKOSONG     reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_INTEGERTOREAL reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_REALTOINTEGER reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_THEN         reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    RW_DO           reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    INDENT          reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_COLON         reduce using rule 191 (additive_expression -> additive_expression additive_op multiplicative_expression .)
    S_TIMES         shift and go to state 180
    S_DIVIDE        shift and go to state 181
    RW_DIV          shift and go to state 182
    RW_MOD          shift and go to state 183
    RW_AND          shift and go to state 184

    multiplicative_op              shift and go to state 179

state 270

    (197) multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .

    S_TIMES         reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_DIVIDE        reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_DIV          reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_MOD          reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_AND          reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_PLUS          reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_MINUS         reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_OR           reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_XOR          reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_EQUAL         reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_NOT_EQUAL     reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_LESS_THAN_EQUAL reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_LESS_THAN     reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_GREATER_THAN  reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_ELEMENT_OF    reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_EQ           reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_NEQ          reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_UP_TO         reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_RIGHT_BRACKET reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_COMMA         reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_KAMUS        reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_PROCEDURE    reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_FUNCTION     reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    $end            reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    DEDENT          reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_SEMI_COLON    reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    IDENTIFIER      reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_TYPE         reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_RETURN        reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_IF           reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_DEPEND       reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_WHILE        reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_ITERATE      reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_REPEAT       reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_INPUT        reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_OUTPUT       reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_ABS          reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_SIN          reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_COS          reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_TAN          reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_SUCC         reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_PRED         reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_AWAL         reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_AKHIR        reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_FIRSTCHAR    reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_LASTCHAR     reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_LONG         reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_ISKOSONG     reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_INTEGERTOREAL reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_REALTOINTEGER reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_THEN         reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    RW_DO           reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    INDENT          reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)
    S_COLON         reduce using rule 197 (multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression .)


state 271

    (233) abs_function -> RW_ABS S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 330
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 272

    (234) sin_function -> RW_SIN S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 331
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 273

    (235) cos_function -> RW_COS S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 332
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 274

    (236) tan_function -> RW_TAN S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 333
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 275

    (237) succ_function -> RW_SUCC S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 334
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 276

    (238) pred_function -> RW_PRED S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 335
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 277

    (245) awal_function -> RW_AWAL S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 336
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 278

    (246) akhir_function -> RW_AKHIR S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 337
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 279

    (247) firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 338
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 280

    (248) lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 339
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 281

    (249) long_function -> RW_LONG S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 340
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 282

    (250) iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 341
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 283

    (253) integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 342
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 284

    (254) real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression . S_RIGHT_BRACKET
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET shift and go to state 343
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 285

    (207) exponentiation_expression -> primary_expression S_POWER exponentiation_expression .

    S_TIMES         reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_DIVIDE        reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_DIV          reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_MOD          reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_AND          reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_PLUS          reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_MINUS         reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_OR           reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_XOR          reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_EQUAL         reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_NOT_EQUAL     reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_LESS_THAN_EQUAL reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_GREATER_THAN_EQUAL reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_LESS_THAN     reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_GREATER_THAN  reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_ELEMENT_OF    reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_EQ           reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_NEQ          reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_UP_TO         reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_RIGHT_BRACKET reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_COMMA         reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_KAMUS        reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_PROCEDURE    reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_FUNCTION     reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    $end            reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    DEDENT          reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_SEMI_COLON    reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    IDENTIFIER      reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_TYPE         reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_RETURN        reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_IF           reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_DEPEND       reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_WHILE        reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_ITERATE      reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_REPEAT       reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_INPUT        reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_OUTPUT       reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_ABS          reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_SIN          reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_COS          reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_TAN          reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_SUCC         reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_PRED         reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_AWAL         reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_AKHIR        reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_FIRSTCHAR    reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_LASTCHAR     reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_LONG         reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_ISKOSONG     reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_INTEGERTOREAL reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_REALTOINTEGER reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_THEN         reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    RW_DO           reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    INDENT          reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)
    S_COLON         reduce using rule 207 (exponentiation_expression -> primary_expression S_POWER exponentiation_expression .)


state 286

    (176) indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list . S_RIGHT_SQUARE_BRACKET
    (177) index_expression_list -> index_expression_list . S_COMMA expression

    S_RIGHT_SQUARE_BRACKET shift and go to state 344
    S_COMMA         shift and go to state 345


state 287

    (178) index_expression_list -> expression .
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_RIGHT_SQUARE_BRACKET reduce using rule 178 (index_expression_list -> expression .)
    S_COMMA         reduce using rule 178 (index_expression_list -> expression .)
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 288

    (179) field_designator -> variable_access S_DOT identifier .

    S_LEFT_SQUARE_BRACKET reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_DOT           reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_POWER         reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_TIMES         reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_DIVIDE        reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_DIV          reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_MOD          reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_AND          reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_PLUS          reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_MINUS         reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_OR           reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_XOR          reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_EQUAL         reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_NOT_EQUAL     reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_LESS_THAN_EQUAL reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_GREATER_THAN_EQUAL reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_LESS_THAN     reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_GREATER_THAN  reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_ELEMENT_OF    reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_EQ           reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_NEQ          reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_UP_TO         reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_RIGHT_BRACKET reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_COMMA         reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_KAMUS        reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_PROCEDURE    reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_FUNCTION     reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    $end            reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    DEDENT          reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_SEMI_COLON    reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    IDENTIFIER      reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_TYPE         reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_RETURN        reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_IF           reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_DEPEND       reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_WHILE        reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_ITERATE      reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_REPEAT       reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_INPUT        reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_OUTPUT       reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_ABS          reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_SIN          reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_COS          reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_TAN          reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_SUCC         reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_PRED         reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_AWAL         reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_AKHIR        reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_FIRSTCHAR    reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_LASTCHAR     reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_LONG         reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_ISKOSONG     reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_INTEGERTOREAL reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_REALTOINTEGER reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_THEN         reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_DO           reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    INDENT          reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_COLON         reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    S_ASSIGNMENT    reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)
    RW_TIMES        reduce using rule 179 (field_designator -> variable_access S_DOT identifier .)


state 289

    (216) set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .

    S_POWER         reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_TIMES         reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_DIVIDE        reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_DIV          reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_MOD          reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_AND          reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_PLUS          reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_MINUS         reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_OR           reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_XOR          reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_EQUAL         reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_NOT_EQUAL     reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_LESS_THAN     reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_GREATER_THAN  reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_ELEMENT_OF    reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_EQ           reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_NEQ          reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_UP_TO         reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_COMMA         reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_KAMUS        reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_PROCEDURE    reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_FUNCTION     reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    $end            reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    DEDENT          reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_SEMI_COLON    reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    IDENTIFIER      reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_TYPE         reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_RETURN        reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_IF           reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_DEPEND       reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_WHILE        reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_ITERATE      reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_REPEAT       reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_INPUT        reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_OUTPUT       reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_ABS          reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_SIN          reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_COS          reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_TAN          reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_SUCC         reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_PRED         reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_AWAL         reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_AKHIR        reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_LASTCHAR     reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_LONG         reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_ISKOSONG     reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_REALTOINTEGER reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_THEN         reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    RW_DO           reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    INDENT          reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)
    S_COLON         reduce using rule 216 (set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET .)


state 290

    (218) member_designator_list -> member_designator_list S_COMMA . member_designator
    (220) member_designator -> . member_designator S_UP_TO expression
    (221) member_designator -> . expression
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    member_designator              shift and go to state 346
    expression                     shift and go to state 207
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 291

    (220) member_designator -> member_designator S_UP_TO . expression
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    expression                     shift and go to state 347
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 292

    (81) formal_parameter_section -> formal_parameter_section S_SEMI_COLON parameter_specification .

    S_SEMI_COLON    reduce using rule 81 (formal_parameter_section -> formal_parameter_section S_SEMI_COLON parameter_specification .)
    S_COMMA         reduce using rule 81 (formal_parameter_section -> formal_parameter_section S_SEMI_COLON parameter_specification .)
    S_RIGHT_BRACKET reduce using rule 81 (formal_parameter_section -> formal_parameter_section S_SEMI_COLON parameter_specification .)


state 293

    (82) formal_parameter_section -> formal_parameter_section S_COMMA parameter_specification .

    S_SEMI_COLON    reduce using rule 82 (formal_parameter_section -> formal_parameter_section S_COMMA parameter_specification .)
    S_COMMA         reduce using rule 82 (formal_parameter_section -> formal_parameter_section S_COMMA parameter_specification .)
    S_RIGHT_BRACKET reduce using rule 82 (formal_parameter_section -> formal_parameter_section S_COMMA parameter_specification .)


state 294

    (87) procedure_parameter_type -> RW_INPUT S_DIVIDE RW_OUTPUT .

    IDENTIFIER      reduce using rule 87 (procedure_parameter_type -> RW_INPUT S_DIVIDE RW_OUTPUT .)


state 295

    (9) block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block . procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block
    (17) procedure_and_function_declaration_block -> . DEDENT
    (18) procedure_and_function_declaration_block -> . procedure_and_function_declaration DEDENT
    (72) procedure_and_function_declaration -> . procedure_and_function_declaration procedure_and_function_sub_declaration
    (73) procedure_and_function_declaration -> . procedure_and_function_sub_declaration
    (74) procedure_and_function_sub_declaration -> . procedure_declaration
    (75) procedure_and_function_sub_declaration -> . function_declaration
    (76) procedure_declaration -> . procedure_identifier formal_parameter_list
    (88) function_declaration -> . function_identification function_formal_parameter_list function_return_type
    (89) function_declaration -> . function_identification function_return_type
    (77) procedure_identifier -> . RW_PROCEDURE identifier
    (90) function_identification -> . RW_FUNCTION identifier

    DEDENT          shift and go to state 349
    RW_PROCEDURE    shift and go to state 9
    RW_FUNCTION     shift and go to state 8

    procedure_and_function_declaration_block shift and go to state 348
    procedure_and_function_declaration shift and go to state 350
    procedure_and_function_sub_declaration shift and go to state 351
    procedure_declaration          shift and go to state 352
    function_declaration           shift and go to state 353
    procedure_identifier           shift and go to state 7
    function_identification        shift and go to state 6

state 296

    (15) variable_declaration_block -> empty .

    DEDENT          reduce using rule 15 (variable_declaration_block -> empty .)
    RW_PROCEDURE    reduce using rule 15 (variable_declaration_block -> empty .)
    RW_FUNCTION     reduce using rule 15 (variable_declaration_block -> empty .)


state 297

    (16) variable_declaration_block -> variable_declaration .
    (58) variable_declaration -> variable_declaration . variable_sub_declaration
    (60) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (256) identifier -> . IDENTIFIER

    DEDENT          reduce using rule 16 (variable_declaration_block -> variable_declaration .)
    RW_PROCEDURE    reduce using rule 16 (variable_declaration_block -> variable_declaration .)
    RW_FUNCTION     reduce using rule 16 (variable_declaration_block -> variable_declaration .)
    IDENTIFIER      shift and go to state 11

    variable_sub_declaration       shift and go to state 354
    identifier_list                shift and go to state 35
    identifier                     shift and go to state 36

state 298

    (59) variable_declaration -> variable_sub_declaration .

    IDENTIFIER      reduce using rule 59 (variable_declaration -> variable_sub_declaration .)
    DEDENT          reduce using rule 59 (variable_declaration -> variable_sub_declaration .)
    RW_PROCEDURE    reduce using rule 59 (variable_declaration -> variable_sub_declaration .)
    RW_FUNCTION     reduce using rule 59 (variable_declaration -> variable_sub_declaration .)


state 299

    (66) type_declaration -> type_declaration type_sub_declaration .

    RW_TYPE         reduce using rule 66 (type_declaration -> type_declaration type_sub_declaration .)
    IDENTIFIER      reduce using rule 66 (type_declaration -> type_declaration type_sub_declaration .)
    DEDENT          reduce using rule 66 (type_declaration -> type_declaration type_sub_declaration .)
    RW_PROCEDURE    reduce using rule 66 (type_declaration -> type_declaration type_sub_declaration .)
    RW_FUNCTION     reduce using rule 66 (type_declaration -> type_declaration type_sub_declaration .)


state 300

    (68) type_sub_declaration -> RW_TYPE identifier . S_COLON type_variety

    S_COLON         shift and go to state 355


state 301

    (65) constant_sub_declaration -> RW_CONSTANT identifier S_COLON . type_denoter S_EQUAL constant
    (34) type_denoter -> . ordinal_type
    (35) type_denoter -> . structured_type
    (36) type_denoter -> . RW_INTEGER
    (37) type_denoter -> . RW_REAL
    (38) type_denoter -> . RW_STRING
    (39) type_denoter -> . RW_CHARACTER
    (40) type_denoter -> . RW_BOOLEAN
    (41) ordinal_type -> . enumerated_type
    (42) ordinal_type -> . subrange_type
    (43) ordinal_type -> . identifier
    (51) structured_type -> . array_type
    (44) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (45) subrange_type -> . subrange_type_option
    (256) identifier -> . IDENTIFIER
    (52) array_type -> . RW_ARRAY array_index RW_OF component_type
    (46) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (47) subrange_option -> . identifier
    (48) subrange_option -> . constant
    (49) subrange_option -> . function_designator
    (50) subrange_option -> . expression
    (154) constant -> . string_char_constant
    (155) constant -> . non_string_constant
    (156) constant -> . sign non_string_constant
    (157) constant -> . boolean_constant
    (158) constant -> . nil_constant
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (159) sign -> . S_PLUS
    (160) sign -> . S_MINUS
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier

    RW_INTEGER      shift and go to state 40
    RW_REAL         shift and go to state 41
    RW_STRING       shift and go to state 42
    RW_CHARACTER    shift and go to state 43
    RW_BOOLEAN      shift and go to state 44
    S_LEFT_BRACKET  shift and go to state 49
    IDENTIFIER      shift and go to state 11
    RW_ARRAY        shift and go to state 51
    S_PLUS          shift and go to state 70
    S_MINUS         shift and go to state 71
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107
    RW_NOT          shift and go to state 111
    S_LEFT_SQUARE_BRACKET shift and go to state 118

    identifier                     shift and go to state 47
    type_denoter                   shift and go to state 356
    constant                       shift and go to state 53
    ordinal_type                   shift and go to state 38
    structured_type                shift and go to state 39
    enumerated_type                shift and go to state 45
    subrange_type                  shift and go to state 46
    array_type                     shift and go to state 48
    subrange_type_option           shift and go to state 50
    subrange_option                shift and go to state 52
    function_designator            shift and go to state 54
    expression                     shift and go to state 55
    string_char_constant           shift and go to state 56
    non_string_constant            shift and go to state 57
    sign                           shift and go to state 58
    boolean_constant               shift and go to state 59
    nil_constant                   shift and go to state 60
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    additive_expression            shift and go to state 65
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117

state 302

    (28) procedure_implementation_block -> kamus_declaration INDENT . constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
    (11) constant_declaration_block -> . empty
    (12) constant_declaration_block -> . constant_declaration
    (255) empty -> .
    (63) constant_declaration -> . constant_declaration constant_sub_declaration
    (64) constant_declaration -> . constant_sub_declaration
    (65) constant_sub_declaration -> . RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant

    RW_TYPE         reduce using rule 255 (empty -> .)
    IDENTIFIER      reduce using rule 255 (empty -> .)
    DEDENT          reduce using rule 255 (empty -> .)
    RW_CONSTANT     shift and go to state 130

    constant_declaration_block     shift and go to state 357
    empty                          shift and go to state 127
    constant_declaration           shift and go to state 128
    constant_sub_declaration       shift and go to state 129

state 303

    (29) procedure_implementation_block -> kamus_declaration algorithm_block .

    RW_PROCEDURE    reduce using rule 29 (procedure_implementation_block -> kamus_declaration algorithm_block .)
    RW_FUNCTION     reduce using rule 29 (procedure_implementation_block -> kamus_declaration algorithm_block .)
    $end            reduce using rule 29 (procedure_implementation_block -> kamus_declaration algorithm_block .)


state 304

    (32) function_implementation_block -> kamus_declaration INDENT . constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block
    (11) constant_declaration_block -> . empty
    (12) constant_declaration_block -> . constant_declaration
    (255) empty -> .
    (63) constant_declaration -> . constant_declaration constant_sub_declaration
    (64) constant_declaration -> . constant_sub_declaration
    (65) constant_sub_declaration -> . RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant

    RW_TYPE         reduce using rule 255 (empty -> .)
    IDENTIFIER      reduce using rule 255 (empty -> .)
    DEDENT          reduce using rule 255 (empty -> .)
    RW_CONSTANT     shift and go to state 130

    constant_declaration_block     shift and go to state 358
    empty                          shift and go to state 127
    constant_declaration           shift and go to state 128
    constant_sub_declaration       shift and go to state 129

state 305

    (33) function_implementation_block -> kamus_declaration algorithm_block .

    RW_PROCEDURE    reduce using rule 33 (function_implementation_block -> kamus_declaration algorithm_block .)
    RW_FUNCTION     reduce using rule 33 (function_implementation_block -> kamus_declaration algorithm_block .)
    $end            reduce using rule 33 (function_implementation_block -> kamus_declaration algorithm_block .)


state 306

    (101) compound_statement -> INDENT statement_sequence DEDENT .

    RW_PROCEDURE    reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_FUNCTION     reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    $end            reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_STOP         reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_UNTIL        reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_ELSE         reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    DEDENT          reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    S_SEMI_COLON    reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    S_RETURN        reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_IF           reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_DEPEND       reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_WHILE        reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_ITERATE      reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    IDENTIFIER      reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_REPEAT       reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_INPUT        reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_OUTPUT       reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_ABS          reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_SIN          reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_COS          reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_TAN          reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_SUCC         reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_PRED         reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_AWAL         reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_AKHIR        reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_FIRSTCHAR    reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_LASTCHAR     reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_LONG         reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_ISKOSONG     reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_INTEGERTOREAL reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)
    RW_REALTOINTEGER reduce using rule 101 (compound_statement -> INDENT statement_sequence DEDENT .)


state 307

    (102) statement_sequence -> statement_sequence S_SEMI_COLON . statement
    (105) statement -> . assignment_statement
    (106) statement -> . procedure_statement
    (107) statement -> . function_returned_statement
    (108) statement -> . if_statement
    (109) statement -> . depend_on_statement
    (110) statement -> . while_statement
    (111) statement -> . traversal_statement
    (112) statement -> . repeat_statement
    (113) statement -> . iterate_stop_statement
    (114) assignment_statement -> . variable_access S_ASSIGNMENT expression
    (115) procedure_statement -> . builtin_procedure_statements
    (116) procedure_statement -> . identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
    (117) procedure_statement -> . identifier
    (131) function_returned_statement -> . S_RETURN expression
    (136) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement
    (137) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
    (132) depend_on_statement -> . RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (145) while_statement -> . RW_WHILE boolean_expression RW_DO compound_statement
    (147) traversal_statement -> . control_variable RW_TRAVERSAL traversal_range_value compound_statement
    (139) repeat_statement -> . repeat_until_statement
    (140) repeat_statement -> . repeat_times_statement
    (146) iterate_stop_statement -> . RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (121) builtin_procedure_statements -> . input_statement
    (122) builtin_procedure_statements -> . output_statement
    (256) identifier -> . IDENTIFIER
    (149) control_variable -> . identifier
    (141) repeat_until_statement -> . RW_REPEAT compound_statement RW_UNTIL boolean_expression
    (142) repeat_times_statement -> . RW_REPEAT variable_access RW_TIMES compound_statement
    (143) repeat_times_statement -> . RW_REPEAT integer_constant RW_TIMES compound_statement
    (144) repeat_times_statement -> . RW_REPEAT function_designator RW_TIMES compound_statement
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (123) input_statement -> . RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET
    (127) output_statement -> . RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_RETURN        shift and go to state 239
    RW_IF           shift and go to state 240
    RW_DEPEND       shift and go to state 241
    RW_WHILE        shift and go to state 242
    RW_ITERATE      shift and go to state 246
    IDENTIFIER      shift and go to state 11
    RW_REPEAT       shift and go to state 250
    RW_INPUT        shift and go to state 251
    RW_OUTPUT       shift and go to state 252
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    statement                      shift and go to state 359
    assignment_statement           shift and go to state 227
    procedure_statement            shift and go to state 228
    function_returned_statement    shift and go to state 229
    if_statement                   shift and go to state 230
    depend_on_statement            shift and go to state 231
    while_statement                shift and go to state 232
    traversal_statement            shift and go to state 233
    repeat_statement               shift and go to state 234
    iterate_stop_statement         shift and go to state 235
    variable_access                shift and go to state 236
    builtin_procedure_statements   shift and go to state 237
    identifier                     shift and go to state 238
    control_variable               shift and go to state 243
    repeat_until_statement         shift and go to state 244
    repeat_times_statement         shift and go to state 245
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    function_designator            shift and go to state 247
    input_statement                shift and go to state 248
    output_statement               shift and go to state 249
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 308

    (103) statement_sequence -> statement_sequence statement .

    DEDENT          reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    S_SEMI_COLON    reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    S_RETURN        reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_IF           reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_DEPEND       reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_WHILE        reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_ITERATE      reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    IDENTIFIER      reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_REPEAT       reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_INPUT        reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_OUTPUT       reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_ABS          reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_SIN          reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_COS          reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_TAN          reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_SUCC         reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_PRED         reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_AWAL         reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_AKHIR        reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_FIRSTCHAR    reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_LASTCHAR     reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_LONG         reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_ISKOSONG     reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_INTEGERTOREAL reduce using rule 103 (statement_sequence -> statement_sequence statement .)
    RW_REALTOINTEGER reduce using rule 103 (statement_sequence -> statement_sequence statement .)


state 309

    (114) assignment_statement -> variable_access S_ASSIGNMENT . expression
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    variable_access                shift and go to state 113
    expression                     shift and go to state 360
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 310

    (116) procedure_statement -> identifier S_LEFT_BRACKET . actual_parameter_list S_RIGHT_BRACKET
    (93) function_actual_parameter_list -> S_LEFT_BRACKET . actual_parameter_list S_RIGHT_BRACKET
    (118) actual_parameter_list -> . actual_parameter_list S_COMMA actual_parameter
    (119) actual_parameter_list -> . actual_parameter
    (120) actual_parameter -> . expression
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    identifier                     shift and go to state 200
    actual_parameter_list          shift and go to state 361
    actual_parameter               shift and go to state 258
    expression                     shift and go to state 259
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 311

    (131) function_returned_statement -> S_RETURN expression .
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    DEDENT          reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    S_SEMI_COLON    reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    S_RETURN        reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_IF           reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_DEPEND       reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_WHILE        reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_ITERATE      reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    IDENTIFIER      reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_REPEAT       reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_INPUT        reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_OUTPUT       reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_ABS          reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_SIN          reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_COS          reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_TAN          reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_SUCC         reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_PRED         reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_AWAL         reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_AKHIR        reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_FIRSTCHAR    reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_LASTCHAR     reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_LONG         reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_ISKOSONG     reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_INTEGERTOREAL reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    RW_REALTOINTEGER reduce using rule 131 (function_returned_statement -> S_RETURN expression .)
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 312

    (136) if_statement -> RW_IF boolean_expression . RW_THEN compound_statement
    (137) if_statement -> RW_IF boolean_expression . RW_THEN compound_statement RW_ELSE compound_statement

    RW_THEN         shift and go to state 362


state 313

    (138) boolean_expression -> expression .
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    RW_THEN         reduce using rule 138 (boolean_expression -> expression .)
    RW_DO           reduce using rule 138 (boolean_expression -> expression .)
    INDENT          reduce using rule 138 (boolean_expression -> expression .)
    DEDENT          reduce using rule 138 (boolean_expression -> expression .)
    S_SEMI_COLON    reduce using rule 138 (boolean_expression -> expression .)
    S_RETURN        reduce using rule 138 (boolean_expression -> expression .)
    RW_IF           reduce using rule 138 (boolean_expression -> expression .)
    RW_DEPEND       reduce using rule 138 (boolean_expression -> expression .)
    RW_WHILE        reduce using rule 138 (boolean_expression -> expression .)
    RW_ITERATE      reduce using rule 138 (boolean_expression -> expression .)
    IDENTIFIER      reduce using rule 138 (boolean_expression -> expression .)
    RW_REPEAT       reduce using rule 138 (boolean_expression -> expression .)
    RW_INPUT        reduce using rule 138 (boolean_expression -> expression .)
    RW_OUTPUT       reduce using rule 138 (boolean_expression -> expression .)
    RW_ABS          reduce using rule 138 (boolean_expression -> expression .)
    RW_SIN          reduce using rule 138 (boolean_expression -> expression .)
    RW_COS          reduce using rule 138 (boolean_expression -> expression .)
    RW_TAN          reduce using rule 138 (boolean_expression -> expression .)
    RW_SUCC         reduce using rule 138 (boolean_expression -> expression .)
    RW_PRED         reduce using rule 138 (boolean_expression -> expression .)
    RW_AWAL         reduce using rule 138 (boolean_expression -> expression .)
    RW_AKHIR        reduce using rule 138 (boolean_expression -> expression .)
    RW_FIRSTCHAR    reduce using rule 138 (boolean_expression -> expression .)
    RW_LASTCHAR     reduce using rule 138 (boolean_expression -> expression .)
    RW_LONG         reduce using rule 138 (boolean_expression -> expression .)
    RW_ISKOSONG     reduce using rule 138 (boolean_expression -> expression .)
    RW_INTEGERTOREAL reduce using rule 138 (boolean_expression -> expression .)
    RW_REALTOINTEGER reduce using rule 138 (boolean_expression -> expression .)
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 314

    (132) depend_on_statement -> RW_DEPEND RW_ON . S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT

    S_LEFT_BRACKET  shift and go to state 363


state 315

    (145) while_statement -> RW_WHILE boolean_expression . RW_DO compound_statement

    RW_DO           shift and go to state 364


state 316

    (147) traversal_statement -> control_variable RW_TRAVERSAL . traversal_range_value compound_statement
    (148) traversal_range_value -> . S_LEFT_SQUARE_BRACKET subrange_type S_RIGHT_SQUARE_BRACKET

    S_LEFT_SQUARE_BRACKET shift and go to state 366

    traversal_range_value          shift and go to state 365

state 317

    (146) iterate_stop_statement -> RW_ITERATE compound_statement . RW_STOP boolean_expression compound_statement

    RW_STOP         shift and go to state 367


state 318

    (141) repeat_until_statement -> RW_REPEAT compound_statement . RW_UNTIL boolean_expression

    RW_UNTIL        shift and go to state 368


state 319

    (142) repeat_times_statement -> RW_REPEAT variable_access . RW_TIMES compound_statement
    (176) indexed_variable -> variable_access . S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> variable_access . S_DOT identifier

    RW_TIMES        shift and go to state 369
    S_LEFT_SQUARE_BRACKET shift and go to state 202
    S_DOT           shift and go to state 203


state 320

    (143) repeat_times_statement -> RW_REPEAT integer_constant . RW_TIMES compound_statement

    RW_TIMES        shift and go to state 370


state 321

    (144) repeat_times_statement -> RW_REPEAT function_designator . RW_TIMES compound_statement
    (175) variable_access -> function_designator .

  ! shift/reduce conflict for RW_TIMES resolved as shift
    RW_TIMES        shift and go to state 371
    S_LEFT_SQUARE_BRACKET reduce using rule 175 (variable_access -> function_designator .)
    S_DOT           reduce using rule 175 (variable_access -> function_designator .)

  ! RW_TIMES        [ reduce using rule 175 (variable_access -> function_designator .) ]


state 322

    (123) input_statement -> RW_INPUT S_LEFT_BRACKET . input_statement_parameter_list S_RIGHT_BRACKET
    (124) input_statement_parameter_list -> . input_statement_parameter_list S_COMMA input_statement_parameter
    (125) input_statement_parameter_list -> . input_statement_parameter
    (126) input_statement_parameter -> . variable_access
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    IDENTIFIER      shift and go to state 11
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    input_statement_parameter_list shift and go to state 372
    input_statement_parameter      shift and go to state 373
    variable_access                shift and go to state 374
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    function_designator            shift and go to state 247
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 323

    (127) output_statement -> RW_OUTPUT S_LEFT_BRACKET . output_statement_parameter_list S_RIGHT_BRACKET
    (128) output_statement_parameter_list -> . output_statement_parameter_list S_COMMA output_statement_parameter
    (129) output_statement_parameter_list -> . output_statement_parameter
    (130) output_statement_parameter -> . expression
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    output_statement_parameter_list shift and go to state 375
    output_statement_parameter     shift and go to state 376
    expression                     shift and go to state 377
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 324

    (93) function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_LEFT_SQUARE_BRACKET reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_DOT           reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    $end            reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_ABS          reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_SIN          reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_COS          reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_TAN          reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_SUCC         reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_PRED         reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_AWAL         reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_AKHIR        reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_LASTCHAR     reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_LONG         reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_ISKOSONG     reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_REALTOINTEGER reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    INDENT          reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)


state 325

    (118) actual_parameter_list -> actual_parameter_list S_COMMA . actual_parameter
    (120) actual_parameter -> . expression
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    actual_parameter               shift and go to state 378
    expression                     shift and go to state 259
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 326

    (52) array_type -> RW_ARRAY array_index RW_OF component_type .

    RW_KAMUS        reduce using rule 52 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    RW_PROCEDURE    reduce using rule 52 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    RW_FUNCTION     reduce using rule 52 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    $end            reduce using rule 52 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    DEDENT          reduce using rule 52 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    S_SEMI_COLON    reduce using rule 52 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    S_COMMA         reduce using rule 52 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    S_RIGHT_BRACKET reduce using rule 52 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    IDENTIFIER      reduce using rule 52 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    S_GREATER_THAN  reduce using rule 52 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    S_EQUAL         reduce using rule 52 (array_type -> RW_ARRAY array_index RW_OF component_type .)
    RW_TYPE         reduce using rule 52 (array_type -> RW_ARRAY array_index RW_OF component_type .)


state 327

    (57) component_type -> type_denoter .

    RW_KAMUS        reduce using rule 57 (component_type -> type_denoter .)
    RW_PROCEDURE    reduce using rule 57 (component_type -> type_denoter .)
    RW_FUNCTION     reduce using rule 57 (component_type -> type_denoter .)
    $end            reduce using rule 57 (component_type -> type_denoter .)
    DEDENT          reduce using rule 57 (component_type -> type_denoter .)
    S_SEMI_COLON    reduce using rule 57 (component_type -> type_denoter .)
    S_COMMA         reduce using rule 57 (component_type -> type_denoter .)
    S_RIGHT_BRACKET reduce using rule 57 (component_type -> type_denoter .)
    IDENTIFIER      reduce using rule 57 (component_type -> type_denoter .)
    S_GREATER_THAN  reduce using rule 57 (component_type -> type_denoter .)
    S_EQUAL         reduce using rule 57 (component_type -> type_denoter .)
    RW_TYPE         reduce using rule 57 (component_type -> type_denoter .)


state 328

    (53) array_index -> S_LEFT_SQUARE_BRACKET index_list S_RIGHT_SQUARE_BRACKET .

    RW_OF           reduce using rule 53 (array_index -> S_LEFT_SQUARE_BRACKET index_list S_RIGHT_SQUARE_BRACKET .)


state 329

    (54) index_list -> index_list S_COMMA . index_type
    (56) index_type -> . ordinal_type
    (41) ordinal_type -> . enumerated_type
    (42) ordinal_type -> . subrange_type
    (43) ordinal_type -> . identifier
    (44) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (45) subrange_type -> . subrange_type_option
    (256) identifier -> . IDENTIFIER
    (46) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (47) subrange_option -> . identifier
    (48) subrange_option -> . constant
    (49) subrange_option -> . function_designator
    (50) subrange_option -> . expression
    (154) constant -> . string_char_constant
    (155) constant -> . non_string_constant
    (156) constant -> . sign non_string_constant
    (157) constant -> . boolean_constant
    (158) constant -> . nil_constant
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (159) sign -> . S_PLUS
    (160) sign -> . S_MINUS
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier

    S_LEFT_BRACKET  shift and go to state 49
    IDENTIFIER      shift and go to state 11
    S_PLUS          shift and go to state 70
    S_MINUS         shift and go to state 71
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107
    RW_NOT          shift and go to state 111
    S_LEFT_SQUARE_BRACKET shift and go to state 118

    index_type                     shift and go to state 379
    ordinal_type                   shift and go to state 265
    enumerated_type                shift and go to state 45
    subrange_type                  shift and go to state 46
    identifier                     shift and go to state 47
    subrange_type_option           shift and go to state 50
    subrange_option                shift and go to state 52
    constant                       shift and go to state 53
    function_designator            shift and go to state 54
    expression                     shift and go to state 55
    string_char_constant           shift and go to state 56
    non_string_constant            shift and go to state 57
    sign                           shift and go to state 58
    boolean_constant               shift and go to state 59
    nil_constant                   shift and go to state 60
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    additive_expression            shift and go to state 65
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117

state 330

    (233) abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LEFT_SQUARE_BRACKET reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DOT           reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ABS          reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SIN          reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_COS          reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TAN          reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SUCC         reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PRED         reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AWAL         reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AKHIR        reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LASTCHAR     reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LONG         reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ISKOSONG     reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REALTOINTEGER reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ASSIGNMENT    reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 233 (abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 331

    (234) sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LEFT_SQUARE_BRACKET reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DOT           reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ABS          reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SIN          reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_COS          reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TAN          reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SUCC         reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PRED         reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AWAL         reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AKHIR        reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LASTCHAR     reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LONG         reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ISKOSONG     reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REALTOINTEGER reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ASSIGNMENT    reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 234 (sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 332

    (235) cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LEFT_SQUARE_BRACKET reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DOT           reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ABS          reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SIN          reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_COS          reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TAN          reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SUCC         reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PRED         reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AWAL         reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AKHIR        reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LASTCHAR     reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LONG         reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ISKOSONG     reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REALTOINTEGER reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ASSIGNMENT    reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 235 (cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 333

    (236) tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LEFT_SQUARE_BRACKET reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DOT           reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ABS          reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SIN          reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_COS          reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TAN          reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SUCC         reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PRED         reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AWAL         reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AKHIR        reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LASTCHAR     reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LONG         reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ISKOSONG     reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REALTOINTEGER reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ASSIGNMENT    reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 236 (tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 334

    (237) succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LEFT_SQUARE_BRACKET reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DOT           reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ABS          reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SIN          reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_COS          reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TAN          reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SUCC         reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PRED         reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AWAL         reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AKHIR        reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LASTCHAR     reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LONG         reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ISKOSONG     reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REALTOINTEGER reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ASSIGNMENT    reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 237 (succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 335

    (238) pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LEFT_SQUARE_BRACKET reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DOT           reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ABS          reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SIN          reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_COS          reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TAN          reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SUCC         reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PRED         reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AWAL         reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AKHIR        reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LASTCHAR     reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LONG         reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ISKOSONG     reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REALTOINTEGER reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ASSIGNMENT    reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 238 (pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 336

    (245) awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LEFT_SQUARE_BRACKET reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DOT           reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ABS          reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SIN          reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_COS          reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TAN          reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SUCC         reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PRED         reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AWAL         reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AKHIR        reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LASTCHAR     reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LONG         reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ISKOSONG     reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REALTOINTEGER reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ASSIGNMENT    reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 245 (awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 337

    (246) akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LEFT_SQUARE_BRACKET reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DOT           reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ABS          reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SIN          reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_COS          reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TAN          reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SUCC         reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PRED         reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AWAL         reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AKHIR        reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LASTCHAR     reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LONG         reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ISKOSONG     reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REALTOINTEGER reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ASSIGNMENT    reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 246 (akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 338

    (247) firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LEFT_SQUARE_BRACKET reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DOT           reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ABS          reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SIN          reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_COS          reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TAN          reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SUCC         reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PRED         reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AWAL         reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AKHIR        reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LASTCHAR     reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LONG         reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ISKOSONG     reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REALTOINTEGER reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ASSIGNMENT    reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 247 (firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 339

    (248) lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LEFT_SQUARE_BRACKET reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DOT           reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ABS          reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SIN          reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_COS          reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TAN          reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SUCC         reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PRED         reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AWAL         reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AKHIR        reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LASTCHAR     reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LONG         reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ISKOSONG     reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REALTOINTEGER reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ASSIGNMENT    reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 248 (lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 340

    (249) long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LEFT_SQUARE_BRACKET reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DOT           reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ABS          reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SIN          reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_COS          reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TAN          reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SUCC         reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PRED         reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AWAL         reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AKHIR        reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LASTCHAR     reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LONG         reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ISKOSONG     reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REALTOINTEGER reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ASSIGNMENT    reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 249 (long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 341

    (250) iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LEFT_SQUARE_BRACKET reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DOT           reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ABS          reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SIN          reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_COS          reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TAN          reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SUCC         reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PRED         reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AWAL         reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AKHIR        reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LASTCHAR     reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LONG         reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ISKOSONG     reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REALTOINTEGER reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ASSIGNMENT    reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 250 (iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 342

    (253) integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LEFT_SQUARE_BRACKET reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DOT           reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ABS          reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SIN          reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_COS          reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TAN          reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SUCC         reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PRED         reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AWAL         reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AKHIR        reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LASTCHAR     reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LONG         reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ISKOSONG     reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REALTOINTEGER reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ASSIGNMENT    reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 253 (integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 343

    (254) real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .

    S_UP_TO         reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_POWER         reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_TIMES         reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DIVIDE        reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DIV          reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_MOD          reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AND          reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_PLUS          reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_MINUS         reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OR           reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_XOR          reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_EQUAL         reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_NOT_EQUAL     reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LESS_THAN     reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_GREATER_THAN  reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ELEMENT_OF    reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_EQ           reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_NEQ          reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_LEFT_SQUARE_BRACKET reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_DOT           reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COMMA         reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_KAMUS        reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PROCEDURE    reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FUNCTION     reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    $end            reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    DEDENT          reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TYPE         reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ABS          reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SIN          reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_COS          reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TAN          reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_SUCC         reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_PRED         reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AWAL         reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_AKHIR        reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LASTCHAR     reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_LONG         reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_ISKOSONG     reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_REALTOINTEGER reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_THEN         reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_DO           reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    INDENT          reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_COLON         reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    S_ASSIGNMENT    reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)
    RW_TIMES        reduce using rule 254 (real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET .)


state 344

    (176) indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .

    S_LEFT_SQUARE_BRACKET reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_DOT           reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_POWER         reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_TIMES         reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_DIVIDE        reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_DIV          reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_MOD          reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_AND          reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_PLUS          reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_MINUS         reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_OR           reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_XOR          reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_EQUAL         reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_NOT_EQUAL     reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_LESS_THAN_EQUAL reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_GREATER_THAN_EQUAL reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_LESS_THAN     reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_GREATER_THAN  reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_ELEMENT_OF    reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_EQ           reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_NEQ          reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_UP_TO         reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_RIGHT_BRACKET reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_COMMA         reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_KAMUS        reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_PROCEDURE    reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_FUNCTION     reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    $end            reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    DEDENT          reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_SEMI_COLON    reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    IDENTIFIER      reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_TYPE         reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_RETURN        reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_IF           reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_DEPEND       reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_WHILE        reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_ITERATE      reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_REPEAT       reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_INPUT        reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_OUTPUT       reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_ABS          reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_SIN          reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_COS          reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_TAN          reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_SUCC         reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_PRED         reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_AWAL         reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_AKHIR        reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_LASTCHAR     reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_LONG         reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_ISKOSONG     reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_REALTOINTEGER reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_THEN         reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_DO           reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    INDENT          reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_COLON         reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    S_ASSIGNMENT    reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)
    RW_TIMES        reduce using rule 176 (indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET .)


state 345

    (177) index_expression_list -> index_expression_list S_COMMA . expression
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    expression                     shift and go to state 380
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 346

    (218) member_designator_list -> member_designator_list S_COMMA member_designator .
    (220) member_designator -> member_designator . S_UP_TO expression

    S_RIGHT_SQUARE_BRACKET reduce using rule 218 (member_designator_list -> member_designator_list S_COMMA member_designator .)
    S_COMMA         reduce using rule 218 (member_designator_list -> member_designator_list S_COMMA member_designator .)
    S_UP_TO         shift and go to state 291


state 347

    (220) member_designator -> member_designator S_UP_TO expression .
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_UP_TO         reduce using rule 220 (member_designator -> member_designator S_UP_TO expression .)
    S_RIGHT_SQUARE_BRACKET reduce using rule 220 (member_designator -> member_designator S_UP_TO expression .)
    S_COMMA         reduce using rule 220 (member_designator -> member_designator S_UP_TO expression .)
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 348

    (9) block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block . algorithm_block procedure_and_function_implementation_block
    (19) algorithm_block -> . RW_ALGORITMA statement_part

    RW_ALGORITMA    shift and go to state 27

    algorithm_block                shift and go to state 381

state 349

    (17) procedure_and_function_declaration_block -> DEDENT .

    RW_ALGORITMA    reduce using rule 17 (procedure_and_function_declaration_block -> DEDENT .)


state 350

    (18) procedure_and_function_declaration_block -> procedure_and_function_declaration . DEDENT
    (72) procedure_and_function_declaration -> procedure_and_function_declaration . procedure_and_function_sub_declaration
    (74) procedure_and_function_sub_declaration -> . procedure_declaration
    (75) procedure_and_function_sub_declaration -> . function_declaration
    (76) procedure_declaration -> . procedure_identifier formal_parameter_list
    (88) function_declaration -> . function_identification function_formal_parameter_list function_return_type
    (89) function_declaration -> . function_identification function_return_type
    (77) procedure_identifier -> . RW_PROCEDURE identifier
    (90) function_identification -> . RW_FUNCTION identifier

    DEDENT          shift and go to state 382
    RW_PROCEDURE    shift and go to state 9
    RW_FUNCTION     shift and go to state 8

    procedure_and_function_sub_declaration shift and go to state 383
    procedure_declaration          shift and go to state 352
    function_declaration           shift and go to state 353
    procedure_identifier           shift and go to state 7
    function_identification        shift and go to state 6

state 351

    (73) procedure_and_function_declaration -> procedure_and_function_sub_declaration .

    DEDENT          reduce using rule 73 (procedure_and_function_declaration -> procedure_and_function_sub_declaration .)
    RW_PROCEDURE    reduce using rule 73 (procedure_and_function_declaration -> procedure_and_function_sub_declaration .)
    RW_FUNCTION     reduce using rule 73 (procedure_and_function_declaration -> procedure_and_function_sub_declaration .)


state 352

    (74) procedure_and_function_sub_declaration -> procedure_declaration .

    DEDENT          reduce using rule 74 (procedure_and_function_sub_declaration -> procedure_declaration .)
    RW_PROCEDURE    reduce using rule 74 (procedure_and_function_sub_declaration -> procedure_declaration .)
    RW_FUNCTION     reduce using rule 74 (procedure_and_function_sub_declaration -> procedure_declaration .)


state 353

    (75) procedure_and_function_sub_declaration -> function_declaration .

    DEDENT          reduce using rule 75 (procedure_and_function_sub_declaration -> function_declaration .)
    RW_PROCEDURE    reduce using rule 75 (procedure_and_function_sub_declaration -> function_declaration .)
    RW_FUNCTION     reduce using rule 75 (procedure_and_function_sub_declaration -> function_declaration .)


state 354

    (58) variable_declaration -> variable_declaration variable_sub_declaration .

    IDENTIFIER      reduce using rule 58 (variable_declaration -> variable_declaration variable_sub_declaration .)
    DEDENT          reduce using rule 58 (variable_declaration -> variable_declaration variable_sub_declaration .)
    RW_PROCEDURE    reduce using rule 58 (variable_declaration -> variable_declaration variable_sub_declaration .)
    RW_FUNCTION     reduce using rule 58 (variable_declaration -> variable_declaration variable_sub_declaration .)


state 355

    (68) type_sub_declaration -> RW_TYPE identifier S_COLON . type_variety
    (69) type_variety -> . type_denoter
    (70) type_variety -> . type_user_defined
    (34) type_denoter -> . ordinal_type
    (35) type_denoter -> . structured_type
    (36) type_denoter -> . RW_INTEGER
    (37) type_denoter -> . RW_REAL
    (38) type_denoter -> . RW_STRING
    (39) type_denoter -> . RW_CHARACTER
    (40) type_denoter -> . RW_BOOLEAN
    (71) type_user_defined -> . S_LESS_THAN variable_declaration_comma S_GREATER_THAN
    (41) ordinal_type -> . enumerated_type
    (42) ordinal_type -> . subrange_type
    (43) ordinal_type -> . identifier
    (51) structured_type -> . array_type
    (44) enumerated_type -> . S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET
    (45) subrange_type -> . subrange_type_option
    (256) identifier -> . IDENTIFIER
    (52) array_type -> . RW_ARRAY array_index RW_OF component_type
    (46) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (47) subrange_option -> . identifier
    (48) subrange_option -> . constant
    (49) subrange_option -> . function_designator
    (50) subrange_option -> . expression
    (154) constant -> . string_char_constant
    (155) constant -> . non_string_constant
    (156) constant -> . sign non_string_constant
    (157) constant -> . boolean_constant
    (158) constant -> . nil_constant
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (159) sign -> . S_PLUS
    (160) sign -> . S_MINUS
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier

    RW_INTEGER      shift and go to state 40
    RW_REAL         shift and go to state 41
    RW_STRING       shift and go to state 42
    RW_CHARACTER    shift and go to state 43
    RW_BOOLEAN      shift and go to state 44
    S_LESS_THAN     shift and go to state 387
    S_LEFT_BRACKET  shift and go to state 49
    IDENTIFIER      shift and go to state 11
    RW_ARRAY        shift and go to state 51
    S_PLUS          shift and go to state 70
    S_MINUS         shift and go to state 71
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107
    RW_NOT          shift and go to state 111
    S_LEFT_SQUARE_BRACKET shift and go to state 118

    identifier                     shift and go to state 47
    type_variety                   shift and go to state 384
    type_denoter                   shift and go to state 385
    type_user_defined              shift and go to state 386
    ordinal_type                   shift and go to state 38
    structured_type                shift and go to state 39
    enumerated_type                shift and go to state 45
    subrange_type                  shift and go to state 46
    array_type                     shift and go to state 48
    subrange_type_option           shift and go to state 50
    subrange_option                shift and go to state 52
    constant                       shift and go to state 53
    function_designator            shift and go to state 54
    expression                     shift and go to state 55
    string_char_constant           shift and go to state 56
    non_string_constant            shift and go to state 57
    sign                           shift and go to state 58
    boolean_constant               shift and go to state 59
    nil_constant                   shift and go to state 60
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    additive_expression            shift and go to state 65
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117

state 356

    (65) constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter . S_EQUAL constant

    S_EQUAL         shift and go to state 388


state 357

    (28) procedure_implementation_block -> kamus_declaration INDENT constant_declaration_block . type_declaration_block variable_declaration_block DEDENT algorithm_block
    (13) type_declaration_block -> . empty
    (14) type_declaration_block -> . type_declaration
    (255) empty -> .
    (66) type_declaration -> . type_declaration type_sub_declaration
    (67) type_declaration -> . type_sub_declaration
    (68) type_sub_declaration -> . RW_TYPE identifier S_COLON type_variety

    IDENTIFIER      reduce using rule 255 (empty -> .)
    DEDENT          reduce using rule 255 (empty -> .)
    RW_TYPE         shift and go to state 217

    type_declaration_block         shift and go to state 389
    empty                          shift and go to state 214
    type_declaration               shift and go to state 215
    type_sub_declaration           shift and go to state 216

state 358

    (32) function_implementation_block -> kamus_declaration INDENT constant_declaration_block . type_declaration_block variable_declaration_block DEDENT algorithm_block
    (13) type_declaration_block -> . empty
    (14) type_declaration_block -> . type_declaration
    (255) empty -> .
    (66) type_declaration -> . type_declaration type_sub_declaration
    (67) type_declaration -> . type_sub_declaration
    (68) type_sub_declaration -> . RW_TYPE identifier S_COLON type_variety

    IDENTIFIER      reduce using rule 255 (empty -> .)
    DEDENT          reduce using rule 255 (empty -> .)
    RW_TYPE         shift and go to state 217

    type_declaration_block         shift and go to state 390
    empty                          shift and go to state 214
    type_declaration               shift and go to state 215
    type_sub_declaration           shift and go to state 216

state 359

    (102) statement_sequence -> statement_sequence S_SEMI_COLON statement .

    DEDENT          reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    S_SEMI_COLON    reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    S_RETURN        reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_IF           reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_DEPEND       reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_WHILE        reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_ITERATE      reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    IDENTIFIER      reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_REPEAT       reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_INPUT        reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_OUTPUT       reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_ABS          reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_SIN          reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_COS          reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_TAN          reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_SUCC         reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_PRED         reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_AWAL         reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_AKHIR        reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_FIRSTCHAR    reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_LASTCHAR     reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_LONG         reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_ISKOSONG     reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_INTEGERTOREAL reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)
    RW_REALTOINTEGER reduce using rule 102 (statement_sequence -> statement_sequence S_SEMI_COLON statement .)


state 360

    (114) assignment_statement -> variable_access S_ASSIGNMENT expression .
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    DEDENT          reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    S_SEMI_COLON    reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    S_RETURN        reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_IF           reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_DEPEND       reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_WHILE        reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_ITERATE      reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    IDENTIFIER      reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_REPEAT       reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_INPUT        reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_OUTPUT       reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_ABS          reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_SIN          reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_COS          reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_TAN          reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_SUCC         reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_PRED         reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_AWAL         reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_AKHIR        reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_FIRSTCHAR    reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_LASTCHAR     reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_LONG         reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_ISKOSONG     reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_INTEGERTOREAL reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    RW_REALTOINTEGER reduce using rule 114 (assignment_statement -> variable_access S_ASSIGNMENT expression .)
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 361

    (116) procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list . S_RIGHT_BRACKET
    (93) function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list . S_RIGHT_BRACKET
    (118) actual_parameter_list -> actual_parameter_list . S_COMMA actual_parameter

    S_RIGHT_BRACKET shift and go to state 391
    S_COMMA         shift and go to state 325


state 362

    (136) if_statement -> RW_IF boolean_expression RW_THEN . compound_statement
    (137) if_statement -> RW_IF boolean_expression RW_THEN . compound_statement RW_ELSE compound_statement
    (101) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 141

    compound_statement             shift and go to state 392

state 363

    (132) depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET . input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (124) input_statement_parameter_list -> . input_statement_parameter_list S_COMMA input_statement_parameter
    (125) input_statement_parameter_list -> . input_statement_parameter
    (126) input_statement_parameter -> . variable_access
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    IDENTIFIER      shift and go to state 11
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    input_statement_parameter_list shift and go to state 393
    input_statement_parameter      shift and go to state 373
    variable_access                shift and go to state 374
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    function_designator            shift and go to state 247
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 364

    (145) while_statement -> RW_WHILE boolean_expression RW_DO . compound_statement
    (101) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 141

    compound_statement             shift and go to state 394

state 365

    (147) traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value . compound_statement
    (101) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 141

    compound_statement             shift and go to state 395

state 366

    (148) traversal_range_value -> S_LEFT_SQUARE_BRACKET . subrange_type S_RIGHT_SQUARE_BRACKET
    (45) subrange_type -> . subrange_type_option
    (46) subrange_type_option -> . subrange_option S_UP_TO subrange_option
    (47) subrange_option -> . identifier
    (48) subrange_option -> . constant
    (49) subrange_option -> . function_designator
    (50) subrange_option -> . expression
    (256) identifier -> . IDENTIFIER
    (154) constant -> . string_char_constant
    (155) constant -> . non_string_constant
    (156) constant -> . sign non_string_constant
    (157) constant -> . boolean_constant
    (158) constant -> . nil_constant
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (159) sign -> . S_PLUS
    (160) sign -> . S_MINUS
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier

    IDENTIFIER      shift and go to state 11
    S_PLUS          shift and go to state 70
    S_MINUS         shift and go to state 71
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118

    subrange_type                  shift and go to state 396
    subrange_type_option           shift and go to state 50
    subrange_option                shift and go to state 52
    identifier                     shift and go to state 267
    constant                       shift and go to state 53
    function_designator            shift and go to state 54
    expression                     shift and go to state 55
    string_char_constant           shift and go to state 56
    non_string_constant            shift and go to state 57
    sign                           shift and go to state 58
    boolean_constant               shift and go to state 59
    nil_constant                   shift and go to state 60
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    additive_expression            shift and go to state 65
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117

state 367

    (146) iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP . boolean_expression compound_statement
    (138) boolean_expression -> . expression
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    boolean_expression             shift and go to state 397
    expression                     shift and go to state 313
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 368

    (141) repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL . boolean_expression
    (138) boolean_expression -> . expression
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    boolean_expression             shift and go to state 398
    expression                     shift and go to state 313
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 369

    (142) repeat_times_statement -> RW_REPEAT variable_access RW_TIMES . compound_statement
    (101) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 141

    compound_statement             shift and go to state 399

state 370

    (143) repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES . compound_statement
    (101) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 141

    compound_statement             shift and go to state 400

state 371

    (144) repeat_times_statement -> RW_REPEAT function_designator RW_TIMES . compound_statement
    (101) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 141

    compound_statement             shift and go to state 401

state 372

    (123) input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list . S_RIGHT_BRACKET
    (124) input_statement_parameter_list -> input_statement_parameter_list . S_COMMA input_statement_parameter

    S_RIGHT_BRACKET shift and go to state 402
    S_COMMA         shift and go to state 403


state 373

    (125) input_statement_parameter_list -> input_statement_parameter .

    S_RIGHT_BRACKET reduce using rule 125 (input_statement_parameter_list -> input_statement_parameter .)
    S_COMMA         reduce using rule 125 (input_statement_parameter_list -> input_statement_parameter .)


state 374

    (126) input_statement_parameter -> variable_access .
    (176) indexed_variable -> variable_access . S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> variable_access . S_DOT identifier

    S_RIGHT_BRACKET reduce using rule 126 (input_statement_parameter -> variable_access .)
    S_COMMA         reduce using rule 126 (input_statement_parameter -> variable_access .)
    S_LEFT_SQUARE_BRACKET shift and go to state 202
    S_DOT           shift and go to state 203


state 375

    (127) output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list . S_RIGHT_BRACKET
    (128) output_statement_parameter_list -> output_statement_parameter_list . S_COMMA output_statement_parameter

    S_RIGHT_BRACKET shift and go to state 404
    S_COMMA         shift and go to state 405


state 376

    (129) output_statement_parameter_list -> output_statement_parameter .

    S_RIGHT_BRACKET reduce using rule 129 (output_statement_parameter_list -> output_statement_parameter .)
    S_COMMA         reduce using rule 129 (output_statement_parameter_list -> output_statement_parameter .)


state 377

    (130) output_statement_parameter -> expression .
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_RIGHT_BRACKET reduce using rule 130 (output_statement_parameter -> expression .)
    S_COMMA         reduce using rule 130 (output_statement_parameter -> expression .)
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 378

    (118) actual_parameter_list -> actual_parameter_list S_COMMA actual_parameter .

    S_RIGHT_BRACKET reduce using rule 118 (actual_parameter_list -> actual_parameter_list S_COMMA actual_parameter .)
    S_COMMA         reduce using rule 118 (actual_parameter_list -> actual_parameter_list S_COMMA actual_parameter .)


state 379

    (54) index_list -> index_list S_COMMA index_type .

    S_RIGHT_SQUARE_BRACKET reduce using rule 54 (index_list -> index_list S_COMMA index_type .)
    S_COMMA         reduce using rule 54 (index_list -> index_list S_COMMA index_type .)


state 380

    (177) index_expression_list -> index_expression_list S_COMMA expression .
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_RIGHT_SQUARE_BRACKET reduce using rule 177 (index_expression_list -> index_expression_list S_COMMA expression .)
    S_COMMA         reduce using rule 177 (index_expression_list -> index_expression_list S_COMMA expression .)
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 381

    (9) block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block . procedure_and_function_implementation_block
    (20) procedure_and_function_implementation_block -> . empty
    (21) procedure_and_function_implementation_block -> . subprogram_implementation_list
    (255) empty -> .
    (22) subprogram_implementation_list -> . subprogram_implementation_list subprogram_implementation
    (23) subprogram_implementation_list -> . subprogram_implementation
    (24) subprogram_implementation -> . procedure_implementation
    (25) subprogram_implementation -> . function_implementation
    (26) procedure_implementation -> . procedure_declaration procedure_implementation_block
    (27) procedure_implementation -> . procedure_declaration
    (30) function_implementation -> . function_declaration function_implementation_block
    (31) function_implementation -> . function_declaration
    (76) procedure_declaration -> . procedure_identifier formal_parameter_list
    (88) function_declaration -> . function_identification function_formal_parameter_list function_return_type
    (89) function_declaration -> . function_identification function_return_type
    (77) procedure_identifier -> . RW_PROCEDURE identifier
    (90) function_identification -> . RW_FUNCTION identifier

    $end            reduce using rule 255 (empty -> .)
    RW_PROCEDURE    shift and go to state 9
    RW_FUNCTION     shift and go to state 8

    procedure_and_function_implementation_block shift and go to state 406
    empty                          shift and go to state 132
    subprogram_implementation_list shift and go to state 133
    subprogram_implementation      shift and go to state 134
    procedure_implementation       shift and go to state 135
    function_implementation        shift and go to state 136
    procedure_declaration          shift and go to state 137
    function_declaration           shift and go to state 138
    procedure_identifier           shift and go to state 7
    function_identification        shift and go to state 6

state 382

    (18) procedure_and_function_declaration_block -> procedure_and_function_declaration DEDENT .

    RW_ALGORITMA    reduce using rule 18 (procedure_and_function_declaration_block -> procedure_and_function_declaration DEDENT .)


state 383

    (72) procedure_and_function_declaration -> procedure_and_function_declaration procedure_and_function_sub_declaration .

    DEDENT          reduce using rule 72 (procedure_and_function_declaration -> procedure_and_function_declaration procedure_and_function_sub_declaration .)
    RW_PROCEDURE    reduce using rule 72 (procedure_and_function_declaration -> procedure_and_function_declaration procedure_and_function_sub_declaration .)
    RW_FUNCTION     reduce using rule 72 (procedure_and_function_declaration -> procedure_and_function_declaration procedure_and_function_sub_declaration .)


state 384

    (68) type_sub_declaration -> RW_TYPE identifier S_COLON type_variety .

    RW_TYPE         reduce using rule 68 (type_sub_declaration -> RW_TYPE identifier S_COLON type_variety .)
    IDENTIFIER      reduce using rule 68 (type_sub_declaration -> RW_TYPE identifier S_COLON type_variety .)
    DEDENT          reduce using rule 68 (type_sub_declaration -> RW_TYPE identifier S_COLON type_variety .)
    RW_PROCEDURE    reduce using rule 68 (type_sub_declaration -> RW_TYPE identifier S_COLON type_variety .)
    RW_FUNCTION     reduce using rule 68 (type_sub_declaration -> RW_TYPE identifier S_COLON type_variety .)


state 385

    (69) type_variety -> type_denoter .

    RW_TYPE         reduce using rule 69 (type_variety -> type_denoter .)
    IDENTIFIER      reduce using rule 69 (type_variety -> type_denoter .)
    DEDENT          reduce using rule 69 (type_variety -> type_denoter .)
    RW_PROCEDURE    reduce using rule 69 (type_variety -> type_denoter .)
    RW_FUNCTION     reduce using rule 69 (type_variety -> type_denoter .)


state 386

    (70) type_variety -> type_user_defined .

    RW_TYPE         reduce using rule 70 (type_variety -> type_user_defined .)
    IDENTIFIER      reduce using rule 70 (type_variety -> type_user_defined .)
    DEDENT          reduce using rule 70 (type_variety -> type_user_defined .)
    RW_PROCEDURE    reduce using rule 70 (type_variety -> type_user_defined .)
    RW_FUNCTION     reduce using rule 70 (type_variety -> type_user_defined .)


state 387

    (71) type_user_defined -> S_LESS_THAN . variable_declaration_comma S_GREATER_THAN
    (61) variable_declaration_comma -> . variable_sub_declaration
    (62) variable_declaration_comma -> . variable_sub_declaration S_COMMA variable_declaration_comma
    (60) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (256) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    variable_declaration_comma     shift and go to state 407
    variable_sub_declaration       shift and go to state 408
    identifier_list                shift and go to state 35
    identifier                     shift and go to state 36

state 388

    (65) constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL . constant
    (154) constant -> . string_char_constant
    (155) constant -> . non_string_constant
    (156) constant -> . sign non_string_constant
    (157) constant -> . boolean_constant
    (158) constant -> . nil_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (159) sign -> . S_PLUS
    (160) sign -> . S_MINUS
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER

    S_PLUS          shift and go to state 414
    S_MINUS         shift and go to state 415
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93

    constant                       shift and go to state 409
    string_char_constant           shift and go to state 410
    non_string_constant            shift and go to state 411
    sign                           shift and go to state 58
    boolean_constant               shift and go to state 412
    nil_constant                   shift and go to state 413
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69

state 389

    (28) procedure_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block . variable_declaration_block DEDENT algorithm_block
    (15) variable_declaration_block -> . empty
    (16) variable_declaration_block -> . variable_declaration
    (255) empty -> .
    (58) variable_declaration -> . variable_declaration variable_sub_declaration
    (59) variable_declaration -> . variable_sub_declaration
    (60) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (256) identifier -> . IDENTIFIER

    DEDENT          reduce using rule 255 (empty -> .)
    IDENTIFIER      shift and go to state 11

    variable_declaration_block     shift and go to state 416
    empty                          shift and go to state 296
    variable_declaration           shift and go to state 297
    variable_sub_declaration       shift and go to state 298
    identifier_list                shift and go to state 35
    identifier                     shift and go to state 36

state 390

    (32) function_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block . variable_declaration_block DEDENT algorithm_block
    (15) variable_declaration_block -> . empty
    (16) variable_declaration_block -> . variable_declaration
    (255) empty -> .
    (58) variable_declaration -> . variable_declaration variable_sub_declaration
    (59) variable_declaration -> . variable_sub_declaration
    (60) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (256) identifier -> . IDENTIFIER

    DEDENT          reduce using rule 255 (empty -> .)
    IDENTIFIER      shift and go to state 11

    variable_declaration_block     shift and go to state 417
    empty                          shift and go to state 296
    variable_declaration           shift and go to state 297
    variable_sub_declaration       shift and go to state 298
    identifier_list                shift and go to state 35
    identifier                     shift and go to state 36

state 391

    (116) procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .
    (93) function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .

    DEDENT          reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_ABS          reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_SIN          reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_COS          reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_TAN          reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_SUCC         reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_PRED         reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_AWAL         reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_AKHIR        reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_LASTCHAR     reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_LONG         reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_ISKOSONG     reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    RW_REALTOINTEGER reduce using rule 116 (procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_ASSIGNMENT    reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_LEFT_SQUARE_BRACKET reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)
    S_DOT           reduce using rule 93 (function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET .)


state 392

    (136) if_statement -> RW_IF boolean_expression RW_THEN compound_statement .
    (137) if_statement -> RW_IF boolean_expression RW_THEN compound_statement . RW_ELSE compound_statement

    DEDENT          reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    S_SEMI_COLON    reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    S_RETURN        reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_IF           reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_DEPEND       reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_WHILE        reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_ITERATE      reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    IDENTIFIER      reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_REPEAT       reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_INPUT        reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_OUTPUT       reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_ABS          reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_SIN          reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_COS          reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_TAN          reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_SUCC         reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_PRED         reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_AWAL         reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_AKHIR        reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_FIRSTCHAR    reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_LASTCHAR     reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_LONG         reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_ISKOSONG     reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_INTEGERTOREAL reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_REALTOINTEGER reduce using rule 136 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement .)
    RW_ELSE         shift and go to state 418


state 393

    (132) depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list . S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (124) input_statement_parameter_list -> input_statement_parameter_list . S_COMMA input_statement_parameter

    S_RIGHT_BRACKET shift and go to state 419
    S_COMMA         shift and go to state 403


state 394

    (145) while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .

    DEDENT          reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    S_SEMI_COLON    reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    S_RETURN        reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_IF           reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_DEPEND       reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_WHILE        reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_ITERATE      reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    IDENTIFIER      reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_REPEAT       reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_INPUT        reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_OUTPUT       reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_ABS          reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_SIN          reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_COS          reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_TAN          reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_SUCC         reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_PRED         reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_AWAL         reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_AKHIR        reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_FIRSTCHAR    reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_LASTCHAR     reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_LONG         reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_ISKOSONG     reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_INTEGERTOREAL reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)
    RW_REALTOINTEGER reduce using rule 145 (while_statement -> RW_WHILE boolean_expression RW_DO compound_statement .)


state 395

    (147) traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .

    DEDENT          reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    S_SEMI_COLON    reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    S_RETURN        reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_IF           reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_DEPEND       reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_WHILE        reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_ITERATE      reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    IDENTIFIER      reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_REPEAT       reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_INPUT        reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_OUTPUT       reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_ABS          reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_SIN          reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_COS          reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_TAN          reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_SUCC         reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_PRED         reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_AWAL         reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_AKHIR        reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_FIRSTCHAR    reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_LASTCHAR     reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_LONG         reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_ISKOSONG     reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_INTEGERTOREAL reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)
    RW_REALTOINTEGER reduce using rule 147 (traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement .)


state 396

    (148) traversal_range_value -> S_LEFT_SQUARE_BRACKET subrange_type . S_RIGHT_SQUARE_BRACKET

    S_RIGHT_SQUARE_BRACKET shift and go to state 420


state 397

    (146) iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression . compound_statement
    (101) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 141

    compound_statement             shift and go to state 421

state 398

    (141) repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .

    DEDENT          reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    S_SEMI_COLON    reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    S_RETURN        reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_IF           reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_DEPEND       reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_WHILE        reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_ITERATE      reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    IDENTIFIER      reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_REPEAT       reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_INPUT        reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_OUTPUT       reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_ABS          reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_SIN          reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_COS          reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_TAN          reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_SUCC         reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_PRED         reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_AWAL         reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_AKHIR        reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_FIRSTCHAR    reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_LASTCHAR     reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_LONG         reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_ISKOSONG     reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_INTEGERTOREAL reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)
    RW_REALTOINTEGER reduce using rule 141 (repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression .)


state 399

    (142) repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .

    DEDENT          reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    S_SEMI_COLON    reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    S_RETURN        reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_IF           reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_DEPEND       reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_WHILE        reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_ITERATE      reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    IDENTIFIER      reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_REPEAT       reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_INPUT        reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_OUTPUT       reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_ABS          reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_SIN          reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_COS          reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_TAN          reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_SUCC         reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_PRED         reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_AWAL         reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_AKHIR        reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_FIRSTCHAR    reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_LASTCHAR     reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_LONG         reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_ISKOSONG     reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_INTEGERTOREAL reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)
    RW_REALTOINTEGER reduce using rule 142 (repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement .)


state 400

    (143) repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .

    DEDENT          reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    S_SEMI_COLON    reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    S_RETURN        reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_IF           reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_DEPEND       reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_WHILE        reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_ITERATE      reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    IDENTIFIER      reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_REPEAT       reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_INPUT        reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_OUTPUT       reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_ABS          reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_SIN          reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_COS          reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_TAN          reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_SUCC         reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_PRED         reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_AWAL         reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_AKHIR        reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_FIRSTCHAR    reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_LASTCHAR     reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_LONG         reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_ISKOSONG     reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_INTEGERTOREAL reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)
    RW_REALTOINTEGER reduce using rule 143 (repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement .)


state 401

    (144) repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .

    DEDENT          reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    S_SEMI_COLON    reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    S_RETURN        reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_IF           reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_DEPEND       reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_WHILE        reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_ITERATE      reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    IDENTIFIER      reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_REPEAT       reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_INPUT        reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_OUTPUT       reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_ABS          reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_SIN          reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_COS          reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_TAN          reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_SUCC         reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_PRED         reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_AWAL         reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_AKHIR        reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_FIRSTCHAR    reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_LASTCHAR     reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_LONG         reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_ISKOSONG     reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_INTEGERTOREAL reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)
    RW_REALTOINTEGER reduce using rule 144 (repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement .)


state 402

    (123) input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .

    DEDENT          reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_ABS          reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_SIN          reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_COS          reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_TAN          reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_SUCC         reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_PRED         reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_AWAL         reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_AKHIR        reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_LASTCHAR     reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_LONG         reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_ISKOSONG     reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)
    RW_REALTOINTEGER reduce using rule 123 (input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET .)


state 403

    (124) input_statement_parameter_list -> input_statement_parameter_list S_COMMA . input_statement_parameter
    (126) input_statement_parameter -> . variable_access
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    IDENTIFIER      shift and go to state 11
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    input_statement_parameter      shift and go to state 422
    variable_access                shift and go to state 374
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    function_designator            shift and go to state 247
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 404

    (127) output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .

    DEDENT          reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    S_SEMI_COLON    reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    S_RETURN        reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_IF           reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_DEPEND       reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_WHILE        reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_ITERATE      reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_REPEAT       reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_INPUT        reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_OUTPUT       reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_ABS          reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_SIN          reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_COS          reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_TAN          reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_SUCC         reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_PRED         reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_AWAL         reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_AKHIR        reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_FIRSTCHAR    reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_LASTCHAR     reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_LONG         reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_ISKOSONG     reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_INTEGERTOREAL reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)
    RW_REALTOINTEGER reduce using rule 127 (output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET .)


state 405

    (128) output_statement_parameter_list -> output_statement_parameter_list S_COMMA . output_statement_parameter
    (130) output_statement_parameter -> . expression
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    output_statement_parameter     shift and go to state 423
    expression                     shift and go to state 377
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 406

    (9) block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block .

    $end            reduce using rule 9 (block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block .)


state 407

    (71) type_user_defined -> S_LESS_THAN variable_declaration_comma . S_GREATER_THAN

    S_GREATER_THAN  shift and go to state 424


state 408

    (61) variable_declaration_comma -> variable_sub_declaration .
    (62) variable_declaration_comma -> variable_sub_declaration . S_COMMA variable_declaration_comma

    S_GREATER_THAN  reduce using rule 61 (variable_declaration_comma -> variable_sub_declaration .)
    S_COMMA         shift and go to state 425


state 409

    (65) constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .

    RW_CONSTANT     reduce using rule 65 (constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .)
    RW_TYPE         reduce using rule 65 (constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .)
    IDENTIFIER      reduce using rule 65 (constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .)
    DEDENT          reduce using rule 65 (constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .)
    RW_PROCEDURE    reduce using rule 65 (constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .)
    RW_FUNCTION     reduce using rule 65 (constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant .)


state 410

    (154) constant -> string_char_constant .

    RW_CONSTANT     reduce using rule 154 (constant -> string_char_constant .)
    RW_TYPE         reduce using rule 154 (constant -> string_char_constant .)
    IDENTIFIER      reduce using rule 154 (constant -> string_char_constant .)
    DEDENT          reduce using rule 154 (constant -> string_char_constant .)
    RW_PROCEDURE    reduce using rule 154 (constant -> string_char_constant .)
    RW_FUNCTION     reduce using rule 154 (constant -> string_char_constant .)


state 411

    (155) constant -> non_string_constant .

    RW_CONSTANT     reduce using rule 155 (constant -> non_string_constant .)
    RW_TYPE         reduce using rule 155 (constant -> non_string_constant .)
    IDENTIFIER      reduce using rule 155 (constant -> non_string_constant .)
    DEDENT          reduce using rule 155 (constant -> non_string_constant .)
    RW_PROCEDURE    reduce using rule 155 (constant -> non_string_constant .)
    RW_FUNCTION     reduce using rule 155 (constant -> non_string_constant .)


state 412

    (157) constant -> boolean_constant .

    RW_CONSTANT     reduce using rule 157 (constant -> boolean_constant .)
    RW_TYPE         reduce using rule 157 (constant -> boolean_constant .)
    IDENTIFIER      reduce using rule 157 (constant -> boolean_constant .)
    DEDENT          reduce using rule 157 (constant -> boolean_constant .)
    RW_PROCEDURE    reduce using rule 157 (constant -> boolean_constant .)
    RW_FUNCTION     reduce using rule 157 (constant -> boolean_constant .)


state 413

    (158) constant -> nil_constant .

    RW_CONSTANT     reduce using rule 158 (constant -> nil_constant .)
    RW_TYPE         reduce using rule 158 (constant -> nil_constant .)
    IDENTIFIER      reduce using rule 158 (constant -> nil_constant .)
    DEDENT          reduce using rule 158 (constant -> nil_constant .)
    RW_PROCEDURE    reduce using rule 158 (constant -> nil_constant .)
    RW_FUNCTION     reduce using rule 158 (constant -> nil_constant .)


state 414

    (159) sign -> S_PLUS .

    L_INTEGER_NUMBER reduce using rule 159 (sign -> S_PLUS .)
    L_REAL_NUMBER   reduce using rule 159 (sign -> S_PLUS .)


state 415

    (160) sign -> S_MINUS .

    L_INTEGER_NUMBER reduce using rule 160 (sign -> S_MINUS .)
    L_REAL_NUMBER   reduce using rule 160 (sign -> S_MINUS .)


state 416

    (28) procedure_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block . DEDENT algorithm_block

    DEDENT          shift and go to state 426


state 417

    (32) function_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block . DEDENT algorithm_block

    DEDENT          shift and go to state 427


state 418

    (137) if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE . compound_statement
    (101) compound_statement -> . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 141

    compound_statement             shift and go to state 428

state 419

    (132) depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET . INDENT depend_on_action_list DEDENT

    INDENT          shift and go to state 429


state 420

    (148) traversal_range_value -> S_LEFT_SQUARE_BRACKET subrange_type S_RIGHT_SQUARE_BRACKET .

    INDENT          reduce using rule 148 (traversal_range_value -> S_LEFT_SQUARE_BRACKET subrange_type S_RIGHT_SQUARE_BRACKET .)


state 421

    (146) iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .

    DEDENT          reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    S_SEMI_COLON    reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    S_RETURN        reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_IF           reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_DEPEND       reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_WHILE        reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_ITERATE      reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    IDENTIFIER      reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_REPEAT       reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_INPUT        reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_OUTPUT       reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_ABS          reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_SIN          reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_COS          reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_TAN          reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_SUCC         reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_PRED         reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_AWAL         reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_AKHIR        reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_FIRSTCHAR    reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_LASTCHAR     reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_LONG         reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_ISKOSONG     reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_INTEGERTOREAL reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)
    RW_REALTOINTEGER reduce using rule 146 (iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement .)


state 422

    (124) input_statement_parameter_list -> input_statement_parameter_list S_COMMA input_statement_parameter .

    S_RIGHT_BRACKET reduce using rule 124 (input_statement_parameter_list -> input_statement_parameter_list S_COMMA input_statement_parameter .)
    S_COMMA         reduce using rule 124 (input_statement_parameter_list -> input_statement_parameter_list S_COMMA input_statement_parameter .)


state 423

    (128) output_statement_parameter_list -> output_statement_parameter_list S_COMMA output_statement_parameter .

    S_RIGHT_BRACKET reduce using rule 128 (output_statement_parameter_list -> output_statement_parameter_list S_COMMA output_statement_parameter .)
    S_COMMA         reduce using rule 128 (output_statement_parameter_list -> output_statement_parameter_list S_COMMA output_statement_parameter .)


state 424

    (71) type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN .

    RW_TYPE         reduce using rule 71 (type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN .)
    IDENTIFIER      reduce using rule 71 (type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN .)
    DEDENT          reduce using rule 71 (type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN .)
    RW_PROCEDURE    reduce using rule 71 (type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN .)
    RW_FUNCTION     reduce using rule 71 (type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN .)


state 425

    (62) variable_declaration_comma -> variable_sub_declaration S_COMMA . variable_declaration_comma
    (61) variable_declaration_comma -> . variable_sub_declaration
    (62) variable_declaration_comma -> . variable_sub_declaration S_COMMA variable_declaration_comma
    (60) variable_sub_declaration -> . identifier_list S_COLON type_denoter
    (5) identifier_list -> . identifier_list S_COMMA identifier
    (6) identifier_list -> . identifier
    (256) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 11

    variable_sub_declaration       shift and go to state 408
    variable_declaration_comma     shift and go to state 430
    identifier_list                shift and go to state 35
    identifier                     shift and go to state 36

state 426

    (28) procedure_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT . algorithm_block
    (19) algorithm_block -> . RW_ALGORITMA statement_part

    RW_ALGORITMA    shift and go to state 27

    algorithm_block                shift and go to state 431

state 427

    (32) function_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT . algorithm_block
    (19) algorithm_block -> . RW_ALGORITMA statement_part

    RW_ALGORITMA    shift and go to state 27

    algorithm_block                shift and go to state 432

state 428

    (137) if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .

    DEDENT          reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    S_SEMI_COLON    reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    S_RETURN        reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_IF           reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_DEPEND       reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_WHILE        reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_ITERATE      reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    IDENTIFIER      reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_REPEAT       reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_INPUT        reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_OUTPUT       reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_ABS          reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_SIN          reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_COS          reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_TAN          reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_SUCC         reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_PRED         reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_AWAL         reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_AKHIR        reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_FIRSTCHAR    reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_LASTCHAR     reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_LONG         reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_ISKOSONG     reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_INTEGERTOREAL reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)
    RW_REALTOINTEGER reduce using rule 137 (if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement .)


state 429

    (132) depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT . depend_on_action_list DEDENT
    (133) depend_on_action_list -> . depend_on_action_list depend_on_action
    (134) depend_on_action_list -> . depend_on_action
    (135) depend_on_action -> . expression S_COLON INDENT statement_sequence DEDENT
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    depend_on_action_list          shift and go to state 433
    depend_on_action               shift and go to state 434
    expression                     shift and go to state 435
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 430

    (62) variable_declaration_comma -> variable_sub_declaration S_COMMA variable_declaration_comma .

    S_GREATER_THAN  reduce using rule 62 (variable_declaration_comma -> variable_sub_declaration S_COMMA variable_declaration_comma .)


state 431

    (28) procedure_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .

    RW_PROCEDURE    reduce using rule 28 (procedure_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .)
    RW_FUNCTION     reduce using rule 28 (procedure_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .)
    $end            reduce using rule 28 (procedure_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .)


state 432

    (32) function_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .

    RW_PROCEDURE    reduce using rule 32 (function_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .)
    RW_FUNCTION     reduce using rule 32 (function_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .)
    $end            reduce using rule 32 (function_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block .)


state 433

    (132) depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list . DEDENT
    (133) depend_on_action_list -> depend_on_action_list . depend_on_action
    (135) depend_on_action -> . expression S_COLON INDENT statement_sequence DEDENT
    (180) expression -> . expression relational_op additive_expression
    (181) expression -> . additive_expression
    (191) additive_expression -> . additive_expression additive_op multiplicative_expression
    (192) additive_expression -> . multiplicative_expression
    (197) multiplicative_expression -> . multiplicative_expression multiplicative_op unary_expression
    (198) multiplicative_expression -> . unary_expression
    (204) unary_expression -> . unary_op unary_expression
    (205) unary_expression -> . exponentiation_expression
    (208) unary_op -> . S_PLUS
    (209) unary_op -> . S_MINUS
    (210) unary_op -> . RW_NOT
    (206) exponentiation_expression -> . primary_expression
    (207) exponentiation_expression -> . primary_expression S_POWER exponentiation_expression
    (211) primary_expression -> . variable_access
    (212) primary_expression -> . unsigned_constant
    (213) primary_expression -> . S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (214) primary_expression -> . set_constructor
    (215) primary_expression -> . function_designator
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (150) unsigned_constant -> . non_string_constant
    (151) unsigned_constant -> . string_char_constant
    (152) unsigned_constant -> . boolean_constant
    (153) unsigned_constant -> . nil_constant
    (216) set_constructor -> . S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET
    (217) set_constructor -> . S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (256) identifier -> . IDENTIFIER
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (163) non_string_constant -> . integer_constant
    (164) non_string_constant -> . real_constant
    (167) string_char_constant -> . string_constant
    (168) string_char_constant -> . char_constant
    (161) boolean_constant -> . L_BOOLEAN_TRUE
    (162) boolean_constant -> . L_BOOLEAN_FALSE
    (171) nil_constant -> . L_NIL
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (165) integer_constant -> . L_INTEGER_NUMBER
    (166) real_constant -> . L_REAL_NUMBER
    (169) string_constant -> . L_STRING
    (170) char_constant -> . L_CHARACTER
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    DEDENT          shift and go to state 436
    S_PLUS          shift and go to state 153
    S_MINUS         shift and go to state 154
    RW_NOT          shift and go to state 111
    S_LEFT_BRACKET  shift and go to state 149
    S_LEFT_SQUARE_BRACKET shift and go to state 118
    IDENTIFIER      shift and go to state 11
    L_BOOLEAN_TRUE  shift and go to state 72
    L_BOOLEAN_FALSE shift and go to state 73
    L_NIL           shift and go to state 74
    L_INTEGER_NUMBER shift and go to state 92
    L_REAL_NUMBER   shift and go to state 93
    L_STRING        shift and go to state 90
    L_CHARACTER     shift and go to state 91
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    depend_on_action               shift and go to state 437
    expression                     shift and go to state 435
    additive_expression            shift and go to state 65
    multiplicative_expression      shift and go to state 89
    unary_expression               shift and go to state 108
    unary_op                       shift and go to state 109
    exponentiation_expression      shift and go to state 110
    primary_expression             shift and go to state 112
    variable_access                shift and go to state 113
    unsigned_constant              shift and go to state 114
    set_constructor                shift and go to state 115
    function_designator            shift and go to state 155
    identifier                     shift and go to state 200
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    non_string_constant            shift and go to state 156
    string_char_constant           shift and go to state 157
    boolean_constant               shift and go to state 158
    nil_constant                   shift and go to state 159
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    integer_constant               shift and go to state 68
    real_constant                  shift and go to state 69
    string_constant                shift and go to state 66
    char_constant                  shift and go to state 67
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 434

    (134) depend_on_action_list -> depend_on_action .

    DEDENT          reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    S_PLUS          reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    S_MINUS         reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    RW_NOT          reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    S_LEFT_BRACKET  reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    S_LEFT_SQUARE_BRACKET reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    IDENTIFIER      reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    L_BOOLEAN_TRUE  reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    L_BOOLEAN_FALSE reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    L_NIL           reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    L_INTEGER_NUMBER reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    L_REAL_NUMBER   reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    L_STRING        reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    L_CHARACTER     reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    RW_ABS          reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    RW_SIN          reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    RW_COS          reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    RW_TAN          reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    RW_SUCC         reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    RW_PRED         reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    RW_AWAL         reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    RW_AKHIR        reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    RW_FIRSTCHAR    reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    RW_LASTCHAR     reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    RW_LONG         reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    RW_ISKOSONG     reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    RW_INTEGERTOREAL reduce using rule 134 (depend_on_action_list -> depend_on_action .)
    RW_REALTOINTEGER reduce using rule 134 (depend_on_action_list -> depend_on_action .)


state 435

    (135) depend_on_action -> expression . S_COLON INDENT statement_sequence DEDENT
    (180) expression -> expression . relational_op additive_expression
    (182) relational_op -> . S_EQUAL
    (183) relational_op -> . S_NOT_EQUAL
    (184) relational_op -> . S_LESS_THAN_EQUAL
    (185) relational_op -> . S_GREATER_THAN_EQUAL
    (186) relational_op -> . S_LESS_THAN
    (187) relational_op -> . S_GREATER_THAN
    (188) relational_op -> . S_ELEMENT_OF
    (189) relational_op -> . RW_EQ
    (190) relational_op -> . RW_NEQ

    S_COLON         shift and go to state 438
    S_EQUAL         shift and go to state 164
    S_NOT_EQUAL     shift and go to state 165
    S_LESS_THAN_EQUAL shift and go to state 166
    S_GREATER_THAN_EQUAL shift and go to state 167
    S_LESS_THAN     shift and go to state 168
    S_GREATER_THAN  shift and go to state 169
    S_ELEMENT_OF    shift and go to state 170
    RW_EQ           shift and go to state 171
    RW_NEQ          shift and go to state 172

    relational_op                  shift and go to state 163

state 436

    (132) depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .

    DEDENT          reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    S_SEMI_COLON    reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    S_RETURN        reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_IF           reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_DEPEND       reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_WHILE        reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_ITERATE      reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    IDENTIFIER      reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_REPEAT       reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_INPUT        reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_OUTPUT       reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_ABS          reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_SIN          reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_COS          reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_TAN          reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_SUCC         reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_PRED         reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_AWAL         reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_AKHIR        reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_FIRSTCHAR    reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_LASTCHAR     reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_LONG         reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_ISKOSONG     reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_INTEGERTOREAL reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)
    RW_REALTOINTEGER reduce using rule 132 (depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT .)


state 437

    (133) depend_on_action_list -> depend_on_action_list depend_on_action .

    DEDENT          reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    S_PLUS          reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    S_MINUS         reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_NOT          reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    S_LEFT_BRACKET  reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    S_LEFT_SQUARE_BRACKET reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    IDENTIFIER      reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_BOOLEAN_TRUE  reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_BOOLEAN_FALSE reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_NIL           reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_INTEGER_NUMBER reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_REAL_NUMBER   reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_STRING        reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    L_CHARACTER     reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_ABS          reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_SIN          reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_COS          reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_TAN          reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_SUCC         reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_PRED         reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_AWAL         reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_AKHIR        reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_FIRSTCHAR    reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_LASTCHAR     reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_LONG         reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_ISKOSONG     reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_INTEGERTOREAL reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)
    RW_REALTOINTEGER reduce using rule 133 (depend_on_action_list -> depend_on_action_list depend_on_action .)


state 438

    (135) depend_on_action -> expression S_COLON . INDENT statement_sequence DEDENT

    INDENT          shift and go to state 439


state 439

    (135) depend_on_action -> expression S_COLON INDENT . statement_sequence DEDENT
    (102) statement_sequence -> . statement_sequence S_SEMI_COLON statement
    (103) statement_sequence -> . statement_sequence statement
    (104) statement_sequence -> . statement
    (105) statement -> . assignment_statement
    (106) statement -> . procedure_statement
    (107) statement -> . function_returned_statement
    (108) statement -> . if_statement
    (109) statement -> . depend_on_statement
    (110) statement -> . while_statement
    (111) statement -> . traversal_statement
    (112) statement -> . repeat_statement
    (113) statement -> . iterate_stop_statement
    (114) assignment_statement -> . variable_access S_ASSIGNMENT expression
    (115) procedure_statement -> . builtin_procedure_statements
    (116) procedure_statement -> . identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
    (117) procedure_statement -> . identifier
    (131) function_returned_statement -> . S_RETURN expression
    (136) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement
    (137) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
    (132) depend_on_statement -> . RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (145) while_statement -> . RW_WHILE boolean_expression RW_DO compound_statement
    (147) traversal_statement -> . control_variable RW_TRAVERSAL traversal_range_value compound_statement
    (139) repeat_statement -> . repeat_until_statement
    (140) repeat_statement -> . repeat_times_statement
    (146) iterate_stop_statement -> . RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (121) builtin_procedure_statements -> . input_statement
    (122) builtin_procedure_statements -> . output_statement
    (256) identifier -> . IDENTIFIER
    (149) control_variable -> . identifier
    (141) repeat_until_statement -> . RW_REPEAT compound_statement RW_UNTIL boolean_expression
    (142) repeat_times_statement -> . RW_REPEAT variable_access RW_TIMES compound_statement
    (143) repeat_times_statement -> . RW_REPEAT integer_constant RW_TIMES compound_statement
    (144) repeat_times_statement -> . RW_REPEAT function_designator RW_TIMES compound_statement
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (123) input_statement -> . RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET
    (127) output_statement -> . RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    S_RETURN        shift and go to state 239
    RW_IF           shift and go to state 240
    RW_DEPEND       shift and go to state 241
    RW_WHILE        shift and go to state 242
    RW_ITERATE      shift and go to state 246
    IDENTIFIER      shift and go to state 11
    RW_REPEAT       shift and go to state 250
    RW_INPUT        shift and go to state 251
    RW_OUTPUT       shift and go to state 252
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    statement_sequence             shift and go to state 440
    statement                      shift and go to state 226
    assignment_statement           shift and go to state 227
    procedure_statement            shift and go to state 228
    function_returned_statement    shift and go to state 229
    if_statement                   shift and go to state 230
    depend_on_statement            shift and go to state 231
    while_statement                shift and go to state 232
    traversal_statement            shift and go to state 233
    repeat_statement               shift and go to state 234
    iterate_stop_statement         shift and go to state 235
    variable_access                shift and go to state 236
    builtin_procedure_statements   shift and go to state 237
    identifier                     shift and go to state 238
    control_variable               shift and go to state 243
    repeat_until_statement         shift and go to state 244
    repeat_times_statement         shift and go to state 245
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    function_designator            shift and go to state 247
    input_statement                shift and go to state 248
    output_statement               shift and go to state 249
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 440

    (135) depend_on_action -> expression S_COLON INDENT statement_sequence . DEDENT
    (102) statement_sequence -> statement_sequence . S_SEMI_COLON statement
    (103) statement_sequence -> statement_sequence . statement
    (105) statement -> . assignment_statement
    (106) statement -> . procedure_statement
    (107) statement -> . function_returned_statement
    (108) statement -> . if_statement
    (109) statement -> . depend_on_statement
    (110) statement -> . while_statement
    (111) statement -> . traversal_statement
    (112) statement -> . repeat_statement
    (113) statement -> . iterate_stop_statement
    (114) assignment_statement -> . variable_access S_ASSIGNMENT expression
    (115) procedure_statement -> . builtin_procedure_statements
    (116) procedure_statement -> . identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET
    (117) procedure_statement -> . identifier
    (131) function_returned_statement -> . S_RETURN expression
    (136) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement
    (137) if_statement -> . RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement
    (132) depend_on_statement -> . RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT
    (145) while_statement -> . RW_WHILE boolean_expression RW_DO compound_statement
    (147) traversal_statement -> . control_variable RW_TRAVERSAL traversal_range_value compound_statement
    (139) repeat_statement -> . repeat_until_statement
    (140) repeat_statement -> . repeat_times_statement
    (146) iterate_stop_statement -> . RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement
    (172) variable_access -> . identifier
    (173) variable_access -> . indexed_variable
    (174) variable_access -> . field_designator
    (175) variable_access -> . function_designator
    (121) builtin_procedure_statements -> . input_statement
    (122) builtin_procedure_statements -> . output_statement
    (256) identifier -> . IDENTIFIER
    (149) control_variable -> . identifier
    (141) repeat_until_statement -> . RW_REPEAT compound_statement RW_UNTIL boolean_expression
    (142) repeat_times_statement -> . RW_REPEAT variable_access RW_TIMES compound_statement
    (143) repeat_times_statement -> . RW_REPEAT integer_constant RW_TIMES compound_statement
    (144) repeat_times_statement -> . RW_REPEAT function_designator RW_TIMES compound_statement
    (176) indexed_variable -> . variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET
    (179) field_designator -> . variable_access S_DOT identifier
    (222) function_designator -> . user_defined_function_call
    (223) function_designator -> . math_function_call
    (224) function_designator -> . string_function_call
    (225) function_designator -> . converter_function_call
    (123) input_statement -> . RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET
    (127) output_statement -> . RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET
    (226) user_defined_function_call -> . identifier function_actual_parameter_list
    (227) math_function_call -> . abs_function
    (228) math_function_call -> . sin_function
    (229) math_function_call -> . cos_function
    (230) math_function_call -> . tan_function
    (231) math_function_call -> . succ_function
    (232) math_function_call -> . pred_function
    (239) string_function_call -> . awal_function
    (240) string_function_call -> . akhir_function
    (241) string_function_call -> . firstchar_function
    (242) string_function_call -> . lastchar_function
    (243) string_function_call -> . long_function
    (244) string_function_call -> . iskosong_function
    (251) converter_function_call -> . integer_to_real
    (252) converter_function_call -> . real_to_integer
    (233) abs_function -> . RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (234) sin_function -> . RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (235) cos_function -> . RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (236) tan_function -> . RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (237) succ_function -> . RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (238) pred_function -> . RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (245) awal_function -> . RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (246) akhir_function -> . RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (247) firstchar_function -> . RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (248) lastchar_function -> . RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (249) long_function -> . RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (250) iskosong_function -> . RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (253) integer_to_real -> . RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET
    (254) real_to_integer -> . RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET

    DEDENT          shift and go to state 441
    S_SEMI_COLON    shift and go to state 307
    S_RETURN        shift and go to state 239
    RW_IF           shift and go to state 240
    RW_DEPEND       shift and go to state 241
    RW_WHILE        shift and go to state 242
    RW_ITERATE      shift and go to state 246
    IDENTIFIER      shift and go to state 11
    RW_REPEAT       shift and go to state 250
    RW_INPUT        shift and go to state 251
    RW_OUTPUT       shift and go to state 252
    RW_ABS          shift and go to state 94
    RW_SIN          shift and go to state 95
    RW_COS          shift and go to state 96
    RW_TAN          shift and go to state 97
    RW_SUCC         shift and go to state 98
    RW_PRED         shift and go to state 99
    RW_AWAL         shift and go to state 100
    RW_AKHIR        shift and go to state 101
    RW_FIRSTCHAR    shift and go to state 102
    RW_LASTCHAR     shift and go to state 103
    RW_LONG         shift and go to state 104
    RW_ISKOSONG     shift and go to state 105
    RW_INTEGERTOREAL shift and go to state 106
    RW_REALTOINTEGER shift and go to state 107

    statement                      shift and go to state 308
    assignment_statement           shift and go to state 227
    procedure_statement            shift and go to state 228
    function_returned_statement    shift and go to state 229
    if_statement                   shift and go to state 230
    depend_on_statement            shift and go to state 231
    while_statement                shift and go to state 232
    traversal_statement            shift and go to state 233
    repeat_statement               shift and go to state 234
    iterate_stop_statement         shift and go to state 235
    variable_access                shift and go to state 236
    builtin_procedure_statements   shift and go to state 237
    identifier                     shift and go to state 238
    control_variable               shift and go to state 243
    repeat_until_statement         shift and go to state 244
    repeat_times_statement         shift and go to state 245
    indexed_variable               shift and go to state 116
    field_designator               shift and go to state 117
    function_designator            shift and go to state 247
    input_statement                shift and go to state 248
    output_statement               shift and go to state 249
    user_defined_function_call     shift and go to state 61
    math_function_call             shift and go to state 62
    string_function_call           shift and go to state 63
    converter_function_call        shift and go to state 64
    abs_function                   shift and go to state 75
    sin_function                   shift and go to state 76
    cos_function                   shift and go to state 77
    tan_function                   shift and go to state 78
    succ_function                  shift and go to state 79
    pred_function                  shift and go to state 80
    awal_function                  shift and go to state 81
    akhir_function                 shift and go to state 82
    firstchar_function             shift and go to state 83
    lastchar_function              shift and go to state 84
    long_function                  shift and go to state 85
    iskosong_function              shift and go to state 86
    integer_to_real                shift and go to state 87
    real_to_integer                shift and go to state 88

state 441

    (135) depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .

    DEDENT          reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    S_PLUS          reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    S_MINUS         reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_NOT          reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    S_LEFT_BRACKET  reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    S_LEFT_SQUARE_BRACKET reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    IDENTIFIER      reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_BOOLEAN_TRUE  reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_BOOLEAN_FALSE reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_NIL           reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_INTEGER_NUMBER reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_REAL_NUMBER   reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_STRING        reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    L_CHARACTER     reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_ABS          reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_SIN          reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_COS          reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_TAN          reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_SUCC         reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_PRED         reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_AWAL         reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_AKHIR        reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_FIRSTCHAR    reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_LASTCHAR     reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_LONG         reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_ISKOSONG     reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_INTEGERTOREAL reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)
    RW_REALTOINTEGER reduce using rule 135 (depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for S_EQUAL in state 55 resolved as shift
WARNING: shift/reduce conflict for S_GREATER_THAN in state 55 resolved as shift
WARNING: shift/reduce conflict for RW_TIMES in state 321 resolved as shift
WARNING: reduce/reduce conflict in state 47 resolved using rule (ordinal_type -> identifier)
WARNING: rejected rule (variable_access -> identifier) in state 47
WARNING: reduce/reduce conflict in state 47 resolved using rule (subrange_option -> identifier)
WARNING: rejected rule (variable_access -> identifier) in state 47
WARNING: reduce/reduce conflict in state 54 resolved using rule (subrange_option -> function_designator)
WARNING: rejected rule (primary_expression -> function_designator) in state 54
WARNING: reduce/reduce conflict in state 54 resolved using rule (variable_access -> function_designator)
WARNING: rejected rule (primary_expression -> function_designator) in state 54
WARNING: reduce/reduce conflict in state 54 resolved using rule (subrange_option -> function_designator)
WARNING: rejected rule (variable_access -> function_designator) in state 54
WARNING: reduce/reduce conflict in state 56 resolved using rule (unsigned_constant -> string_char_constant)
WARNING: rejected rule (constant -> string_char_constant) in state 56
WARNING: reduce/reduce conflict in state 57 resolved using rule (unsigned_constant -> non_string_constant)
WARNING: rejected rule (constant -> non_string_constant) in state 57
WARNING: reduce/reduce conflict in state 59 resolved using rule (unsigned_constant -> boolean_constant)
WARNING: rejected rule (constant -> boolean_constant) in state 59
WARNING: reduce/reduce conflict in state 60 resolved using rule (unsigned_constant -> nil_constant)
WARNING: rejected rule (constant -> nil_constant) in state 60
WARNING: reduce/reduce conflict in state 70 resolved using rule (sign -> S_PLUS)
WARNING: rejected rule (unary_op -> S_PLUS) in state 70
WARNING: reduce/reduce conflict in state 71 resolved using rule (sign -> S_MINUS)
WARNING: rejected rule (unary_op -> S_MINUS) in state 71
WARNING: reduce/reduce conflict in state 152 resolved using rule (identifier_list -> identifier)
WARNING: rejected rule (variable_access -> identifier) in state 152
WARNING: reduce/reduce conflict in state 155 resolved using rule (variable_access -> function_designator)
WARNING: rejected rule (primary_expression -> function_designator) in state 155
WARNING: reduce/reduce conflict in state 267 resolved using rule (subrange_option -> identifier)
WARNING: rejected rule (variable_access -> identifier) in state 267
WARNING: Rule (primary_expression -> function_designator) is never reduced
