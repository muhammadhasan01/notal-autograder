
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'fileCOMMENT DEDENT IDENTIFIER INDENT L_BOOLEAN_FALSE L_BOOLEAN_TRUE L_CHARACTER L_INTEGER_NUMBER L_NIL L_REAL_NUMBER L_STRING RW_ABS RW_AKHIR RW_ALGORITMA RW_AND RW_ARRAY RW_AWAL RW_BOOLEAN RW_CHARACTER RW_CLOSE RW_CONSTANT RW_COS RW_DEPEND RW_DIV RW_DO RW_ELSE RW_EQ RW_FIRSTCHAR RW_FUNCTION RW_IF RW_INPUT RW_INTEGER RW_INTEGERTOREAL RW_ISKOSONG RW_ITERATE RW_JUDUL RW_KAMUS RW_LASTCHAR RW_LOKAL RW_LONG RW_MOD RW_MODUL RW_NEQ RW_NOT RW_OF RW_ON RW_OPEN RW_OR RW_OUTPUT RW_PRED RW_PROCEDURE RW_PROGRAM RW_READ RW_REAL RW_REALTOINTEGER RW_REPEAT RW_REWRITE RW_SEQFILE RW_SIN RW_STOP RW_STRING RW_SUCC RW_TAN RW_THEN RW_TIMES RW_TRAVERSAL RW_TYPE RW_UNTIL RW_WHILE RW_XOR S_ASSIGNMENT S_COLON S_COMMA S_CONCATENATION S_DIVIDE S_DOT S_DOUBLE_QUOTE S_ELEMENT_OF S_EQUAL S_GREATER_THAN S_GREATER_THAN_EQUAL S_LEFT_BRACKET S_LEFT_CURLY_BRACKET S_LEFT_SQUARE_BRACKET S_LESS_THAN S_LESS_THAN_EQUAL S_MINUS S_NOT_EQUAL S_PLUS S_POWER S_RETURN S_RIGHT_BRACKET S_RIGHT_CURLY_BRACKET S_RIGHT_SQUARE_BRACKET S_SEMI_COLON S_SINGLE_QUOTE S_TIMES S_UP_TO WHITESPACEfile :   program\n        program  :   RW_PROGRAM identifier block\n        identifier_list  : identifier_list S_COMMA identifier\n                            | identifier\n        block    :   RW_KAMUS INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block\n                    | RW_KAMUS algorithm_block procedure_and_function_implementation_block\n        constant_declaration_block  : empty\n                    | constant_declaration\n        type_declaration_block  :   empty\n                    |   type_declaration\n        variable_declaration_block  :   empty\n                    |   variable_declaration\n        procedure_and_function_declaration_block  :   DEDENT\n                    |   procedure_and_function_declaration DEDENT\n        algorithm_block  :   RW_ALGORITMA statement_part\n        procedure_and_function_implementation_block  :   empty\n                    |   subprogram_implementation_list\n        subprogram_implementation_list : subprogram_implementation_list subprogram_implementation\n                                        | subprogram_implementation\n        subprogram_implementation : procedure_implementation\n                                     | function_implementation\n        procedure_implementation :   procedure_declaration   procedure_implementation_block\n                                    |   procedure_declaration\n        procedure_implementation_block   :   RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block\n                                            | RW_KAMUS RW_LOKAL algorithm_block\n        function_implementation  :   function_declaration function_implementation_block\n                                    |   function_declaration\n        function_implementation_block    :   RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT  algorithm_block\n                                            | RW_KAMUS RW_LOKAL algorithm_block\n        type_denoter :   ordinal_type\n                        |   structured_type\n                        |   RW_INTEGER\n                        |   RW_REAL\n                        |   RW_STRING\n                        |   RW_CHARACTER\n                        |   RW_BOOLEAN\n        ordinal_type :   enumerated_type\n                        |   subrange_type\n                        |   identifier\n        enumerated_type  :   S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET\n        subrange_type    :  subrange_type_option\n        subrange_type_option    :   subrange_option S_UP_TO subrange_option\n        subrange_option  :   identifier\n                            |   constant\n                            |   function_designator\n        structured_type  :   array_type\n        array_type   :   RW_ARRAY array_index RW_OF component_type\n        array_index  :   S_LEFT_SQUARE_BRACKET index_list S_RIGHT_SQUARE_BRACKET\n        index_list   :   index_list S_COMMA index_type\n                        |   index_type\n        index_type   :   ordinal_type\n        component_type   :   type_denotervariable_declaration :  variable_declaration variable_sub_declaration\n                                |   variable_sub_declaration\n        variable_sub_declaration :   identifier_list S_COLON type_denoter\n        variable_declaration_comma   :   variable_sub_declaration\n                                        |   variable_sub_declaration S_COMMA variable_declaration_comma\n        constant_declaration :   constant_declaration constant_sub_declaration\n                                |   constant_sub_declaration\n        constant_sub_declaration :   RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant\n        type_declaration :   type_declaration type_sub_declaration\n                            |   type_sub_declaration\n        type_sub_declaration :   RW_TYPE identifier S_COLON type_variety\n        type_variety :   type_denoter\n                        |   type_user_defined\n        type_user_defined    :   S_LESS_THAN variable_declaration_comma S_GREATER_THAN\n        procedure_and_function_declaration   :   procedure_and_function_declaration procedure_and_function_sub_declaration\n                                                |   procedure_and_function_sub_declaration\n        procedure_and_function_sub_declaration   :   procedure_declaration\n                                                    |   function_declaration\n        procedure_declaration    :  procedure_identifier formal_parameter_list\n        procedure_identifier :   RW_PROCEDURE identifier\n        formal_parameter_list    :   S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET\n        formal_parameter_section_list    :   empty\n                                            |   formal_parameter_section\n        formal_parameter_section :   formal_parameter_section S_SEMI_COLON parameter_specification\n                                    |   parameter_specification\n        parameter_specification  :   procedure_parameter_type  variable_sub_declaration\n        procedure_parameter_type :   RW_INPUT\n                                    |   RW_OUTPUT\n                                    |   RW_INPUT S_DIVIDE RW_OUTPUT\n        function_declaration :   function_identification function_formal_parameter_list function_return_type\n                                |   function_identification function_return_type\n        function_identification  :   RW_FUNCTION identifier\n        function_return_type :   S_RETURN type_denoter\n        function_formal_parameter_list   :   S_LEFT_BRACKET function_parameter_list_option S_RIGHT_BRACKET\n        function_actual_parameter_list   :   S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET\n        function_parameter_list_option   :   function_parameter_list\n                                            |   empty\n        function_parameter_list  :   function_parameter_list S_SEMI_COLON function_parameter_declaration\n                                    |   function_parameter_list S_COMMA function_parameter_declaration\n                                    |   function_parameter_declaration\n        function_parameter_declaration   :   variable_sub_declaration\n        statement_part   :   compound_statement\n        compound_statement   :   INDENT  statement_sequence  DEDENT\n        statement_sequence   :   statement_sequence S_SEMI_COLON statement\n                                |   statement_sequence statement\n                                |   statement\n        statement    : assignment_statement\n                        | procedure_statement\n                        | function_returned_statement\n                        |   if_statement\n                        | depend_on_statement\n                        | while_statement\n                        | traversal_statement\n                        |   repeat_statement\n                        |   iterate_stop_statement\n        assignment_statement :   variable_access S_ASSIGNMENT expression\n        procedure_statement :   builtin_procedure_statements\n                                |   identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET\n                                |   identifier\n        actual_parameter_list    :   actual_parameter_list S_COMMA actual_parameter\n                                    |   actual_parameter\n        actual_parameter :   expression\n        builtin_procedure_statements     :   input_statement\n                                            |   output_statement\n        input_statement  :   RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET\n        input_statement_parameter_list   :   input_statement_parameter_list S_COMMA input_statement_parameter\n                                            |   input_statement_parameter\n        input_statement_parameter    :   variable_access\n        output_statement  :   RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET\n        output_statement_parameter_list  :   output_statement_parameter_list S_COMMA output_statement_parameter\n                                            |   output_statement_parameter\n        output_statement_parameter   :   expression\n        function_returned_statement  :   S_RETURN expression\n        depend_on_statement  :   RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT\n        depend_on_action_list    :   depend_on_action_list   depend_on_action\n                                            |   depend_on_action\n        depend_on_action :   expression S_COLON INDENT statement_sequence DEDENT\n        if_statement : RW_IF boolean_expression RW_THEN compound_statement\n                        | RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement\n        boolean_expression   :   expression\n        repeat_statement :   repeat_until_statement\n                            |   repeat_times_statement\n        repeat_until_statement   :   RW_REPEAT compound_statement RW_UNTIL boolean_expression\n        repeat_times_statement   :   RW_REPEAT variable_access RW_TIMES compound_statement\n                                    |   RW_REPEAT integer_constant RW_TIMES compound_statement\n                                    |   RW_REPEAT function_designator RW_TIMES compound_statement\n        while_statement   :   RW_WHILE boolean_expression RW_DO compound_statement\n        iterate_stop_statement   :   RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement\n        traversal_statement  :   control_variable RW_TRAVERSAL traversal_range_value compound_statement\n        traversal_range_value    :   S_LEFT_SQUARE_BRACKET subrange_type S_RIGHT_SQUARE_BRACKET\n        control_variable :   identifier\n        unsigned_constant :  non_string_constant\n                            |   string_char_constant\n                            |   boolean_constant\n                            |   nil_constant\n        constant :   string_char_constant\n                    |   non_string_constant\n                    |   sign non_string_constant\n                    |   boolean_constant\n                    |   nil_constant\n        sign     :   S_PLUS\n                    |   S_MINUS\n        boolean_constant :   L_BOOLEAN_TRUE\n                            |   L_BOOLEAN_FALSE\n        non_string_constant  :    integer_constant\n                                |    real_constant\n        integer_constant :   L_INTEGER_NUMBER\n        real_constant    :   L_REAL_NUMBER\n        string_char_constant :   string_constant\n                                |   char_constant\n        string_constant    :   L_STRING\n        char_constant    :   L_CHARACTER\n        nil_constant :   L_NIL\n        variable_access : identifier\n                            | indexed_variable\n                            | field_designator\n        indexed_variable :   variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET\n        index_expression_list    :   index_expression_list S_COMMA expression\n                                    |   expression\n        field_designator :   variable_access S_DOT identifier\n        expression : expression relational_op additive_expression\n                    |   additive_expression\n        relational_op : S_EQUAL\n                | S_NOT_EQUAL\n                | S_LESS_THAN_EQUAL\n                | S_GREATER_THAN_EQUAL\n                | S_LESS_THAN\n                | S_GREATER_THAN\n                | S_ELEMENT_OF\n                | RW_EQ\n                | RW_NEQ\n        additive_expression : additive_expression additive_op multiplicative_expression\n                            |   multiplicative_expression\n        additive_op : S_PLUS\n                    | S_MINUS\n                    | RW_OR\n                    | RW_XOR\n        multiplicative_expression : multiplicative_expression multiplicative_op unary_expression\n                                    |   unary_expression\n        multiplicative_op : S_TIMES\n                            | S_DIVIDE\n                            | RW_DIV\n                            | RW_MOD\n                            | RW_AND\n        unary_expression : unary_op unary_expression\n                        |   exponentiation_expression\n        exponentiation_expression    :   primary_expression\n                                        |   primary_expression S_POWER exponentiation_expression\n        unary_op : S_PLUS\n            |   S_MINUS\n            |   RW_NOT\n        primary_expression : variable_access\n                            | unsigned_constant\n                            | S_LEFT_BRACKET expression S_RIGHT_BRACKET\n                            | set_constructor\n                            | function_designator\n        set_constructor  :   S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET\n                            |   S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET\n        member_designator_list   :   member_designator_list  S_COMMA member_designator\n                                    |   member_designator\n        member_designator    :   member_designator S_UP_TO   expression\n                                |   expression\n        function_designator  :    user_defined_function_call\n                                |   math_function_call\n                                |   string_function_call\n                                |   converter_function_call\n        user_defined_function_call    :   identifier function_actual_parameter_list\n        math_function_call   :   abs_function\n                                |   sin_function\n                                |   cos_function\n                                |   tan_function\n                                |   succ_function\n                                |   pred_function\n        abs_function : RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        sin_function :   RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        cos_function :   RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        tan_function :   RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        succ_function    :   RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        pred_function    :   RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        string_function_call :   awal_function\n                                |   akhir_function\n                                |   firstchar_function\n                                |   lastchar_function\n                                |   long_function\n                                |   iskosong_function\n        awal_function    :   RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        akhir_function    :   RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        firstchar_function    :   RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        lastchar_function    :   RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        long_function    :   RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        iskosong_function    :   RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        converter_function_call  :   integer_to_real\n                                    |   real_to_integer\n        integer_to_real  :   RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        real_to_integer  :   RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        empty    :\n        identifier   :   IDENTIFIER\n        '
    
_lr_action_items = {'RW_PROGRAM':([0,],[3,]),'$end':([1,2,5,6,9,16,17,18,19,20,21,22,23,28,29,38,39,41,43,46,98,104,105,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,125,126,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,172,224,226,227,234,240,308,325,330,331,372,378,379,380,383,384,385,386,387,388,389,390,391,392,393,394,395,396,420,421,],[0,-1,-249,-2,-248,-6,-16,-17,-19,-20,-21,-23,-27,-15,-94,-18,-22,-26,-71,-83,-82,-85,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-46,-41,-44,-45,-148,-149,-151,-152,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-95,-25,-29,-73,-219,-150,-248,-40,-42,-43,-5,-87,-47,-52,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,-24,-28,]),'IDENTIFIER':([3,5,8,11,12,13,14,15,26,27,30,31,32,33,34,35,36,47,48,51,52,53,54,55,56,57,58,59,60,61,63,64,65,66,68,70,71,73,74,75,76,77,82,83,86,88,95,96,97,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,125,126,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,201,210,211,218,219,220,221,223,225,232,233,234,235,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,288,292,295,296,297,311,313,314,315,316,318,319,321,325,326,330,331,346,347,348,349,350,351,352,353,354,355,356,357,358,360,361,364,365,366,367,368,369,370,371,375,376,377,378,379,380,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,404,407,408,412,413,417,418,422,423,425,426,427,],[5,-249,-248,-248,-7,-8,-59,5,5,5,5,5,-9,-10,-62,5,-58,5,5,5,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-109,-111,5,5,5,-133,-134,-167,-168,-115,-116,5,5,-54,-61,5,5,-79,-80,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-46,5,-41,-44,-45,-148,-149,-151,-152,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-95,5,-97,5,5,5,5,-125,-174,-185,-191,5,-198,-201,-202,-203,-199,-204,-205,5,-207,-208,-166,-144,-145,-146,-147,5,-132,5,5,-53,5,5,5,-248,-248,5,5,-219,5,5,5,-150,5,5,5,5,5,5,5,5,5,5,5,5,5,5,-96,-108,-172,5,-175,-176,-177,-178,-179,-180,-181,-182,-183,5,-186,-187,-188,-189,5,-192,-193,-194,-195,-196,-197,5,-210,5,5,5,5,-55,-63,-64,-65,5,-248,-248,-81,-40,5,-42,-43,-169,5,-110,5,-173,-184,-190,-200,-206,-209,5,5,-130,-139,-141,-135,-136,-137,-138,-117,5,-121,5,-60,5,5,-87,-47,-52,5,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,-140,-66,5,-131,5,5,-128,-126,-127,5,5,-129,]),'RW_KAMUS':([4,5,22,23,43,46,98,104,105,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,125,126,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,227,234,240,325,330,331,378,379,380,383,384,385,386,387,388,389,390,391,392,393,394,395,396,],[7,-249,40,42,-71,-83,-82,-85,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-46,-41,-44,-45,-148,-149,-151,-152,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-73,-219,-150,-40,-42,-43,-87,-47,-52,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,]),'S_COLON':([5,37,73,74,84,85,87,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,180,181,182,184,188,189,190,192,193,194,195,196,197,198,234,259,284,288,312,346,350,351,352,353,354,355,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,419,],[-249,88,-167,-168,219,-4,221,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-219,-172,-197,-210,-3,-169,-173,-184,-190,-200,-206,-209,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,424,]),'S_LEFT_BRACKET':([5,24,25,48,49,50,64,65,66,68,78,79,88,114,158,159,160,161,162,163,164,165,166,167,168,169,170,171,175,176,178,183,185,186,187,191,194,199,202,211,219,221,235,238,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,296,297,326,331,347,349,356,357,371,382,413,417,418,423,427,],[-249,44,47,116,-72,-84,178,191,191,191,210,211,116,235,241,242,243,244,245,246,247,248,249,250,251,252,253,254,191,191,191,191,-201,-202,-203,191,235,191,292,191,116,116,191,116,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,-175,-176,-177,-178,-179,-180,-181,-182,-183,191,-186,-187,-188,-189,191,-192,-193,-194,-195,-196,191,191,191,116,235,191,191,191,191,191,116,191,191,-128,-127,-129,]),'S_RETURN':([5,25,30,45,50,51,52,53,54,55,56,57,58,59,60,61,63,64,70,71,73,74,75,76,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,172,173,174,179,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,231,234,255,256,259,284,288,346,348,350,351,352,353,354,355,358,360,361,364,365,366,367,368,370,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,404,412,422,425,426,],[-249,48,65,48,-84,65,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-109,-111,-133,-134,-167,-168,-115,-116,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-95,65,-97,-125,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-132,-86,-219,-96,-108,-172,-197,-210,-169,-110,-173,-184,-190,-200,-206,-209,-130,-139,-141,-135,-136,-137,-138,-117,-121,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,-140,-131,-126,65,65,]),'DEDENT':([5,8,11,12,13,14,31,32,33,34,36,43,46,51,52,53,54,55,56,57,58,59,60,61,63,64,70,71,73,74,75,76,80,81,82,83,86,98,104,105,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,125,126,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,172,174,179,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,214,215,216,217,218,223,225,227,234,240,255,256,259,284,288,310,311,313,314,315,318,319,325,330,331,346,348,350,351,352,353,354,355,358,360,361,364,365,366,367,368,370,375,376,377,378,379,380,383,384,385,386,387,388,389,390,391,392,393,394,395,396,404,407,409,410,412,417,418,422,423,426,427,],[-249,-248,-248,-7,-8,-59,-248,-9,-10,-62,-58,-71,-83,172,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-109,-111,-133,-134,-167,-168,-115,-116,213,-11,-12,-54,-61,-82,-85,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-46,-41,-44,-45,-148,-149,-151,-152,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-95,-97,-125,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-132,309,-68,-69,-70,-53,-248,-248,-73,-219,-150,-96,-108,-172,-197,-210,-67,-55,-63,-64,-65,-248,-248,-40,-42,-43,-169,-110,-173,-184,-190,-200,-206,-209,-130,-139,-141,-135,-136,-137,-138,-117,-121,-60,-248,-248,-87,-47,-52,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,-140,-66,415,416,-131,422,-128,-126,-127,427,-129,]),'S_SEMI_COLON':([5,51,52,53,54,55,56,57,58,59,60,61,63,64,70,71,73,74,75,76,93,94,100,102,103,105,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,125,126,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,172,174,179,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,229,234,240,255,256,259,284,288,311,320,322,323,325,330,331,346,348,350,351,352,353,354,355,358,360,361,364,365,366,367,368,370,378,379,380,383,384,385,386,387,388,389,390,391,392,393,394,395,396,404,412,422,426,],[-249,173,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-109,-111,-133,-134,-167,-168,-115,-116,228,-77,232,-92,-93,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-46,-41,-44,-45,-148,-149,-151,-152,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-95,-97,-125,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-132,-78,-219,-150,-96,-108,-172,-197,-210,-55,-76,-90,-91,-40,-42,-43,-169,-110,-173,-184,-190,-200,-206,-209,-130,-139,-141,-135,-136,-137,-138,-117,-121,-87,-47,-52,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,-140,-131,-126,173,]),'RW_IF':([5,30,51,52,53,54,55,56,57,58,59,60,61,63,64,70,71,73,74,75,76,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,172,173,174,179,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,234,255,256,259,284,288,346,348,350,351,352,353,354,355,358,360,361,364,365,366,367,368,370,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,404,412,422,425,426,],[-249,66,66,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-109,-111,-133,-134,-167,-168,-115,-116,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-95,66,-97,-125,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-132,-219,-96,-108,-172,-197,-210,-169,-110,-173,-184,-190,-200,-206,-209,-130,-139,-141,-135,-136,-137,-138,-117,-121,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,-140,-131,-126,66,66,]),'RW_DEPEND':([5,30,51,52,53,54,55,56,57,58,59,60,61,63,64,70,71,73,74,75,76,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,172,173,174,179,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,234,255,256,259,284,288,346,348,350,351,352,353,354,355,358,360,361,364,365,366,367,368,370,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,404,412,422,425,426,],[-249,67,67,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-109,-111,-133,-134,-167,-168,-115,-116,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-95,67,-97,-125,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-132,-219,-96,-108,-172,-197,-210,-169,-110,-173,-184,-190,-200,-206,-209,-130,-139,-141,-135,-136,-137,-138,-117,-121,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,-140,-131,-126,67,67,]),'RW_WHILE':([5,30,51,52,53,54,55,56,57,58,59,60,61,63,64,70,71,73,74,75,76,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,172,173,174,179,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,234,255,256,259,284,288,346,348,350,351,352,353,354,355,358,360,361,364,365,366,367,368,370,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,404,412,422,425,426,],[-249,68,68,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-109,-111,-133,-134,-167,-168,-115,-116,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-95,68,-97,-125,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-132,-219,-96,-108,-172,-197,-210,-169,-110,-173,-184,-190,-200,-206,-209,-130,-139,-141,-135,-136,-137,-138,-117,-121,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,-140,-131,-126,68,68,]),'RW_ITERATE':([5,30,51,52,53,54,55,56,57,58,59,60,61,63,64,70,71,73,74,75,76,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,172,173,174,179,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,234,255,256,259,284,288,346,348,350,351,352,353,354,355,358,360,361,364,365,366,367,368,370,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,404,412,422,425,426,],[-249,72,72,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-109,-111,-133,-134,-167,-168,-115,-116,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-95,72,-97,-125,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-132,-219,-96,-108,-172,-197,-210,-169,-110,-173,-184,-190,-200,-206,-209,-130,-139,-141,-135,-136,-137,-138,-117,-121,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,-140,-131,-126,72,72,]),'RW_REPEAT':([5,30,51,52,53,54,55,56,57,58,59,60,61,63,64,70,71,73,74,75,76,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,172,173,174,179,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,234,255,256,259,284,288,346,348,350,351,352,353,354,355,358,360,361,364,365,366,367,368,370,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,404,412,422,425,426,],[-249,77,77,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-109,-111,-133,-134,-167,-168,-115,-116,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-95,77,-97,-125,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-132,-219,-96,-108,-172,-197,-210,-169,-110,-173,-184,-190,-200,-206,-209,-130,-139,-141,-135,-136,-137,-138,-117,-121,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,-140,-131,-126,77,77,]),'RW_INPUT':([5,30,44,51,52,53,54,55,56,57,58,59,60,61,63,64,70,71,73,74,75,76,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,172,173,174,179,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,228,234,255,256,259,284,288,346,348,350,351,352,353,354,355,358,360,361,364,365,366,367,368,370,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,404,412,422,425,426,],[-249,78,96,78,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-109,-111,-133,-134,-167,-168,-115,-116,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-95,78,-97,-125,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-132,96,-219,-96,-108,-172,-197,-210,-169,-110,-173,-184,-190,-200,-206,-209,-130,-139,-141,-135,-136,-137,-138,-117,-121,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,-140,-131,-126,78,78,]),'RW_OUTPUT':([5,30,44,51,52,53,54,55,56,57,58,59,60,61,63,64,70,71,73,74,75,76,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,172,173,174,179,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,228,230,234,255,256,259,284,288,346,348,350,351,352,353,354,355,358,360,361,364,365,366,367,368,370,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,404,412,422,425,426,],[-249,79,97,79,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-109,-111,-133,-134,-167,-168,-115,-116,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-95,79,-97,-125,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-132,97,321,-219,-96,-108,-172,-197,-210,-169,-110,-173,-184,-190,-200,-206,-209,-130,-139,-141,-135,-136,-137,-138,-117,-121,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,-140,-131,-126,79,79,]),'S_ASSIGNMENT':([5,62,64,73,74,259,346,],[-249,175,-166,-167,-168,-172,-169,]),'S_LEFT_SQUARE_BRACKET':([5,62,64,65,66,68,73,74,118,175,176,178,183,185,186,187,189,191,194,199,204,207,211,235,241,242,243,244,245,246,247,248,249,250,251,252,253,254,259,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,296,297,303,304,346,347,349,356,357,371,413,417,418,423,427,],[-249,176,-166,199,199,199,-167,-168,238,199,199,199,199,-201,-202,-203,176,199,-166,199,295,176,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,-172,199,-175,-176,-177,-178,-179,-180,-181,-182,-183,199,-186,-187,-188,-189,199,-192,-193,-194,-195,-196,199,199,199,176,-166,-169,199,199,199,199,199,199,199,-128,-127,-129,]),'S_DOT':([5,62,64,73,74,189,194,207,259,303,304,346,],[-249,177,-166,-167,-168,177,-166,177,-172,177,-166,-169,]),'RW_TRAVERSAL':([5,64,69,],[-249,-143,204,]),'S_COMMA':([5,73,74,84,85,100,102,103,105,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,125,126,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,180,181,182,184,188,189,190,192,193,194,195,196,197,198,234,236,240,257,258,259,260,261,262,284,287,288,289,290,301,302,303,304,305,306,307,311,312,322,323,324,325,327,328,329,330,331,346,350,351,352,353,354,355,359,374,378,379,380,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,405,406,411,],[-249,-167,-168,220,-4,233,-92,-93,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-46,-41,-44,-45,-148,-149,-151,-152,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-219,220,-150,347,-171,-172,349,-113,-114,-197,356,-210,-212,-214,369,-119,-120,-166,371,-123,-124,-55,-3,-90,-91,349,-40,382,-50,-51,-42,-43,-169,-173,-184,-190,-200,-206,-209,369,408,-87,-47,-52,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,-170,-112,-211,-213,-118,-122,-49,]),'RW_PROCEDURE':([5,8,9,11,12,13,14,18,19,20,21,22,23,28,29,31,32,33,34,36,38,39,41,43,46,80,81,82,83,86,98,104,105,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,125,126,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,172,214,215,216,217,218,224,226,227,234,240,308,310,311,313,314,315,325,330,331,375,378,379,380,383,384,385,386,387,388,389,390,391,392,393,394,395,396,407,420,421,],[-249,-248,26,-248,-7,-8,-59,26,-19,-20,-21,-23,-27,-15,-94,-248,-9,-10,-62,-58,-18,-22,-26,-71,-83,26,-11,-12,-54,-61,-82,-85,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-46,-41,-44,-45,-148,-149,-151,-152,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-95,26,-68,-69,-70,-53,-25,-29,-73,-219,-150,26,-67,-55,-63,-64,-65,-40,-42,-43,-60,-87,-47,-52,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,-66,-24,-28,]),'RW_FUNCTION':([5,8,9,11,12,13,14,18,19,20,21,22,23,28,29,31,32,33,34,36,38,39,41,43,46,80,81,82,83,86,98,104,105,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,125,126,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,172,214,215,216,217,218,224,226,227,234,240,308,310,311,313,314,315,325,330,331,375,378,379,380,383,384,385,386,387,388,389,390,391,392,393,394,395,396,407,420,421,],[-249,-248,27,-248,-7,-8,-59,27,-19,-20,-21,-23,-27,-15,-94,-248,-9,-10,-62,-58,-18,-22,-26,-71,-83,27,-11,-12,-54,-61,-82,-85,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-46,-41,-44,-45,-148,-149,-151,-152,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-95,27,-68,-69,-70,-53,-25,-29,-73,-219,-150,27,-67,-55,-63,-64,-65,-40,-42,-43,-60,-87,-47,-52,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,-66,-24,-28,]),'S_UP_TO':([5,73,74,114,119,120,121,122,123,125,126,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,180,181,182,184,188,189,190,192,193,194,195,196,197,198,234,240,259,284,288,289,290,331,346,350,351,352,353,354,355,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,399,400,],[-249,-167,-168,-43,239,-44,-45,-148,-149,-151,-152,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-219,-150,-172,-197,-210,357,-214,-43,-169,-173,-184,-190,-200,-206,-209,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,357,-213,]),'S_POWER':([5,73,74,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,188,189,190,192,193,194,195,196,197,198,234,259,288,346,354,355,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,],[-249,-167,-168,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,285,-204,-205,-207,-208,-166,-144,-145,-146,-147,-219,-172,-210,-169,-206,-209,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,]),'S_TIMES':([5,73,74,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,181,182,184,188,189,190,192,193,194,195,196,197,198,234,259,284,288,346,351,352,353,354,355,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,],[-249,-167,-168,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,279,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-219,-172,-197,-210,-169,279,-190,-200,-206,-209,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,]),'S_DIVIDE':([5,73,74,96,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,181,182,184,188,189,190,192,193,194,195,196,197,198,234,259,284,288,346,351,352,353,354,355,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,],[-249,-167,-168,230,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,280,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-219,-172,-197,-210,-169,280,-190,-200,-206,-209,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,]),'RW_DIV':([5,73,74,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,181,182,184,188,189,190,192,193,194,195,196,197,198,234,259,284,288,346,351,352,353,354,355,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,],[-249,-167,-168,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,281,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-219,-172,-197,-210,-169,281,-190,-200,-206,-209,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,]),'RW_MOD':([5,73,74,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,181,182,184,188,189,190,192,193,194,195,196,197,198,234,259,284,288,346,351,352,353,354,355,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,],[-249,-167,-168,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,282,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-219,-172,-197,-210,-169,282,-190,-200,-206,-209,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,]),'RW_AND':([5,73,74,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,181,182,184,188,189,190,192,193,194,195,196,197,198,234,259,284,288,346,351,352,353,354,355,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,],[-249,-167,-168,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,283,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-219,-172,-197,-210,-169,283,-190,-200,-206,-209,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,]),'S_PLUS':([5,48,65,66,68,73,74,88,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,175,176,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,211,219,221,234,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,259,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,288,295,296,297,317,326,346,347,349,350,351,352,353,354,355,356,357,371,378,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,413,417,418,423,427,],[-249,135,185,185,185,-167,-168,135,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,185,185,185,274,-185,-191,185,-198,-201,-202,-203,-199,-204,-205,185,-207,-208,-166,-144,-145,-146,-147,185,185,135,135,-219,185,135,135,185,185,185,185,185,185,185,185,185,185,185,185,185,185,-172,185,-175,-176,-177,-178,-179,-180,-181,-182,-183,185,-186,-187,-188,-189,185,-192,-193,-194,-195,-196,-197,-210,135,185,185,135,135,-169,185,185,274,-184,-190,-200,-206,-209,185,185,185,-87,135,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,185,185,-128,-127,-129,]),'S_MINUS':([5,48,65,66,68,73,74,88,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,175,176,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,211,219,221,234,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,259,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,288,295,296,297,317,326,346,347,349,350,351,352,353,354,355,356,357,371,378,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,413,417,418,423,427,],[-249,136,186,186,186,-167,-168,136,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,186,186,186,275,-185,-191,186,-198,-201,-202,-203,-199,-204,-205,186,-207,-208,-166,-144,-145,-146,-147,186,186,136,136,-219,186,136,136,186,186,186,186,186,186,186,186,186,186,186,186,186,186,-172,186,-175,-176,-177,-178,-179,-180,-181,-182,-183,186,-186,-187,-188,-189,186,-192,-193,-194,-195,-196,-197,-210,136,186,186,136,136,-169,186,186,275,-184,-190,-200,-206,-209,186,186,186,-87,136,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,186,186,-128,-127,-129,]),'RW_OR':([5,73,74,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,180,181,182,184,188,189,190,192,193,194,195,196,197,198,234,259,284,288,346,350,351,352,353,354,355,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,],[-249,-167,-168,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,276,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-219,-172,-197,-210,-169,276,-184,-190,-200,-206,-209,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,]),'RW_XOR':([5,73,74,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,180,181,182,184,188,189,190,192,193,194,195,196,197,198,234,259,284,288,346,350,351,352,353,354,355,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,],[-249,-167,-168,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,277,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-219,-172,-197,-210,-169,277,-184,-190,-200,-206,-209,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,]),'S_EQUAL':([5,73,74,105,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,125,126,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,179,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,222,234,240,256,258,259,262,284,286,288,290,307,325,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,350,351,352,353,354,355,378,379,380,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,400,419,],[-249,-167,-168,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-46,-41,-44,-45,-148,-149,-151,-152,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,264,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,264,317,-219,-150,264,264,-172,264,-197,264,-210,264,264,-40,-42,-43,264,264,264,264,264,264,264,264,264,264,264,264,264,264,-169,-173,-184,-190,-200,-206,-209,-87,-47,-52,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,264,264,264,]),'S_NOT_EQUAL':([5,73,74,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,179,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,234,256,258,259,262,284,286,288,290,307,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,350,351,352,353,354,355,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,400,419,],[-249,-167,-168,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,265,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,265,-219,265,265,-172,265,-197,265,-210,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,-169,-173,-184,-190,-200,-206,-209,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,265,265,265,]),'S_LESS_THAN_EQUAL':([5,73,74,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,179,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,234,256,258,259,262,284,286,288,290,307,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,350,351,352,353,354,355,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,400,419,],[-249,-167,-168,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,266,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,266,-219,266,266,-172,266,-197,266,-210,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,-169,-173,-184,-190,-200,-206,-209,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,266,266,266,]),'S_GREATER_THAN_EQUAL':([5,73,74,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,179,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,234,256,258,259,262,284,286,288,290,307,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,350,351,352,353,354,355,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,400,419,],[-249,-167,-168,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,267,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,267,-219,267,267,-172,267,-197,267,-210,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,-169,-173,-184,-190,-200,-206,-209,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,267,267,267,]),'S_LESS_THAN':([5,73,74,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,179,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,221,234,256,258,259,262,284,286,288,290,307,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,350,351,352,353,354,355,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,400,419,],[-249,-167,-168,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,268,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,268,316,-219,268,268,-172,268,-197,268,-210,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,-169,-173,-184,-190,-200,-206,-209,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,268,268,268,]),'S_GREATER_THAN':([5,73,74,105,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,125,126,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,179,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,234,240,256,258,259,262,284,286,288,290,307,311,325,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,350,351,352,353,354,355,373,374,378,379,380,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,400,414,419,],[-249,-167,-168,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-46,-41,-44,-45,-148,-149,-151,-152,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,269,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,269,-219,-150,269,269,-172,269,-197,269,-210,269,269,-55,-40,-42,-43,269,269,269,269,269,269,269,269,269,269,269,269,269,269,-169,-173,-184,-190,-200,-206,-209,407,-56,-87,-47,-52,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,269,269,-57,269,]),'S_ELEMENT_OF':([5,73,74,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,179,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,234,256,258,259,262,284,286,288,290,307,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,350,351,352,353,354,355,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,400,419,],[-249,-167,-168,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,270,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,270,-219,270,270,-172,270,-197,270,-210,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,-169,-173,-184,-190,-200,-206,-209,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,270,270,270,]),'RW_EQ':([5,73,74,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,179,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,234,256,258,259,262,284,286,288,290,307,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,350,351,352,353,354,355,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,400,419,],[-249,-167,-168,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,271,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,271,-219,271,271,-172,271,-197,271,-210,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,-169,-173,-184,-190,-200,-206,-209,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,271,271,271,]),'RW_NEQ':([5,73,74,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,179,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,234,256,258,259,262,284,286,288,290,307,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,350,351,352,353,354,355,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,400,419,],[-249,-167,-168,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,272,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,272,-219,272,272,-172,272,-197,272,-210,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,-169,-173,-184,-190,-200,-206,-209,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,272,272,272,]),'RW_THEN':([5,73,74,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,180,181,182,184,188,189,190,192,193,194,195,196,197,198,200,201,234,259,284,288,346,350,351,352,353,354,355,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,],[-249,-167,-168,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,291,-132,-219,-172,-197,-210,-169,-173,-184,-190,-200,-206,-209,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,]),'RW_DO':([5,73,74,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,203,234,259,284,288,346,350,351,352,353,354,355,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,],[-249,-167,-168,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-132,293,-219,-172,-197,-210,-169,-173,-184,-190,-200,-206,-209,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,]),'RW_TIMES':([5,73,74,127,128,129,130,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,194,207,208,209,234,259,346,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,],[-249,-167,-168,-215,-216,-217,-218,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-159,-166,298,299,300,-219,-172,-169,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,]),'S_RIGHT_BRACKET':([5,44,47,73,74,85,91,92,93,94,99,100,101,102,103,105,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,125,126,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,180,181,182,184,188,189,190,192,193,194,195,196,197,198,229,234,236,240,259,260,261,262,284,286,288,301,302,303,304,305,306,307,311,312,320,322,323,324,325,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,350,351,352,353,354,355,359,378,379,380,383,384,385,386,387,388,389,390,391,392,393,394,395,396,398,405,406,],[-249,-248,-248,-167,-168,-4,227,-74,-75,-77,231,-88,-89,-92,-93,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-46,-41,-44,-45,-148,-149,-151,-152,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-78,-219,325,-150,-172,348,-113,-114,-197,354,-210,368,-119,-120,-166,370,-123,-124,-55,-3,-76,-90,-91,378,-40,-42,-43,383,384,385,386,387,388,389,390,391,392,393,394,395,396,-169,-173,-184,-190,-200,-206,-209,402,-87,-47,-52,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,-112,-118,-122,]),'S_RIGHT_SQUARE_BRACKET':([5,73,74,112,113,114,117,120,121,122,123,125,126,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,180,181,182,184,188,189,190,192,193,194,195,196,197,198,199,234,240,257,258,259,284,287,288,289,290,325,327,328,329,330,331,346,350,351,352,353,354,355,362,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,399,400,411,],[-249,-167,-168,-37,-38,-39,-41,-44,-45,-148,-149,-151,-152,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,288,-219,-150,346,-171,-172,-197,355,-210,-212,-214,-40,381,-50,-51,-42,-43,-169,-173,-184,-190,-200,-206,-209,403,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,-170,-211,-213,-49,]),'INDENT':([5,7,10,72,73,74,77,89,90,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,180,181,182,184,188,189,190,192,193,194,195,196,197,198,201,234,259,284,288,291,293,294,298,299,300,346,350,351,352,353,354,355,363,378,383,384,385,386,387,388,389,390,391,392,393,394,395,396,401,402,403,424,],[-249,8,30,30,-167,-168,30,223,225,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-174,-185,-191,-198,-199,-204,-205,-207,-208,-166,-144,-145,-146,-147,-132,-219,-172,-197,-210,30,30,30,30,30,30,-169,-173,-184,-190,-200,-206,-209,30,-87,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,30,413,-142,425,]),'RW_TYPE':([5,8,11,12,13,14,33,34,36,86,105,106,107,108,109,110,111,112,113,114,115,117,120,121,122,123,125,126,127,128,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,223,225,234,240,313,314,315,318,319,325,330,331,375,378,379,380,383,384,385,386,387,388,389,390,391,392,393,394,395,396,407,],[-249,-248,35,-7,-8,-59,35,-62,-58,-61,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-46,-41,-44,-45,-148,-149,-151,-152,-215,-216,-217,-218,-161,-162,-157,-158,-155,-156,-165,-220,-221,-222,-223,-224,-225,-232,-233,-234,-235,-236,-237,-244,-245,-163,-164,-159,-160,-248,-248,-219,-150,-63,-64,-65,35,35,-40,-42,-43,-60,-87,-47,-52,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-246,-247,-66,]),'RW_ALGORITMA':([7,89,90,212,213,309,415,416,],[10,10,10,10,-13,-14,10,10,]),'RW_CONSTANT':([8,13,14,36,122,123,125,126,131,132,133,134,137,138,139,154,155,156,157,223,225,240,375,],[15,15,-59,-58,-148,-149,-151,-152,-161,-162,-157,-158,-155,-156,-165,-163,-164,-159,-160,15,15,-150,-60,]),'RW_LOKAL':([40,42,],[89,90,]),'RW_INTEGER':([48,88,219,221,326,],[107,107,107,107,107,]),'RW_REAL':([48,88,219,221,326,],[108,108,108,108,108,]),'RW_STRING':([48,88,219,221,326,],[109,109,109,109,109,]),'RW_CHARACTER':([48,88,219,221,326,],[110,110,110,110,110,]),'RW_BOOLEAN':([48,88,219,221,326,],[111,111,111,111,111,]),'RW_ARRAY':([48,88,219,221,326,],[118,118,118,118,118,]),'L_BOOLEAN_TRUE':([48,65,66,68,88,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,317,326,347,349,356,357,371,382,413,417,418,423,427,],[137,137,137,137,137,137,137,137,137,-201,-202,-203,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,-175,-176,-177,-178,-179,-180,-181,-182,-183,137,-186,-187,-188,-189,137,-192,-193,-194,-195,-196,137,137,137,137,137,137,137,137,137,137,137,137,137,137,-128,-127,-129,]),'L_BOOLEAN_FALSE':([48,65,66,68,88,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,317,326,347,349,356,357,371,382,413,417,418,423,427,],[138,138,138,138,138,138,138,138,138,-201,-202,-203,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,-175,-176,-177,-178,-179,-180,-181,-182,-183,138,-186,-187,-188,-189,138,-192,-193,-194,-195,-196,138,138,138,138,138,138,138,138,138,138,138,138,138,138,-128,-127,-129,]),'L_NIL':([48,65,66,68,88,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,317,326,347,349,356,357,371,382,413,417,418,423,427,],[139,139,139,139,139,139,139,139,139,-201,-202,-203,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,-175,-176,-177,-178,-179,-180,-181,-182,-183,139,-186,-187,-188,-189,139,-192,-193,-194,-195,-196,139,139,139,139,139,139,139,139,139,139,139,139,139,139,-128,-127,-129,]),'L_STRING':([48,65,66,68,88,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,317,326,347,349,356,357,371,382,413,417,418,423,427,],[154,154,154,154,154,154,154,154,154,-201,-202,-203,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,-175,-176,-177,-178,-179,-180,-181,-182,-183,154,-186,-187,-188,-189,154,-192,-193,-194,-195,-196,154,154,154,154,154,154,154,154,154,154,154,154,154,154,-128,-127,-129,]),'L_CHARACTER':([48,65,66,68,88,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,317,326,347,349,356,357,371,382,413,417,418,423,427,],[155,155,155,155,155,155,155,155,155,-201,-202,-203,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,-175,-176,-177,-178,-179,-180,-181,-182,-183,155,-186,-187,-188,-189,155,-192,-193,-194,-195,-196,155,155,155,155,155,155,155,155,155,155,155,155,155,155,-128,-127,-129,]),'L_INTEGER_NUMBER':([48,65,66,68,77,88,124,135,136,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,317,326,347,349,356,357,371,382,413,417,418,423,427,],[156,156,156,156,156,156,156,-153,-154,156,156,156,156,-201,-202,-203,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,-175,-176,-177,-178,-179,-180,-181,-182,-183,156,-186,-187,-188,-189,156,-192,-193,-194,-195,-196,156,156,156,156,156,156,156,156,156,156,156,156,156,156,-128,-127,-129,]),'L_REAL_NUMBER':([48,65,66,68,88,124,135,136,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,317,326,347,349,356,357,371,382,413,417,418,423,427,],[157,157,157,157,157,157,-153,-154,157,157,157,157,-201,-202,-203,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,-175,-176,-177,-178,-179,-180,-181,-182,-183,157,-186,-187,-188,-189,157,-192,-193,-194,-195,-196,157,157,157,157,157,157,157,157,157,157,157,157,157,157,-128,-127,-129,]),'RW_ABS':([48,65,66,68,77,88,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,326,347,349,356,357,371,382,413,417,418,423,427,],[158,158,158,158,158,158,158,158,158,158,-201,-202,-203,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,-175,-176,-177,-178,-179,-180,-181,-182,-183,158,-186,-187,-188,-189,158,-192,-193,-194,-195,-196,158,158,158,158,158,158,158,158,158,158,158,158,158,-128,-127,-129,]),'RW_SIN':([48,65,66,68,77,88,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,326,347,349,356,357,371,382,413,417,418,423,427,],[159,159,159,159,159,159,159,159,159,159,-201,-202,-203,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,-175,-176,-177,-178,-179,-180,-181,-182,-183,159,-186,-187,-188,-189,159,-192,-193,-194,-195,-196,159,159,159,159,159,159,159,159,159,159,159,159,159,-128,-127,-129,]),'RW_COS':([48,65,66,68,77,88,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,326,347,349,356,357,371,382,413,417,418,423,427,],[160,160,160,160,160,160,160,160,160,160,-201,-202,-203,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,-175,-176,-177,-178,-179,-180,-181,-182,-183,160,-186,-187,-188,-189,160,-192,-193,-194,-195,-196,160,160,160,160,160,160,160,160,160,160,160,160,160,-128,-127,-129,]),'RW_TAN':([48,65,66,68,77,88,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,326,347,349,356,357,371,382,413,417,418,423,427,],[161,161,161,161,161,161,161,161,161,161,-201,-202,-203,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,-175,-176,-177,-178,-179,-180,-181,-182,-183,161,-186,-187,-188,-189,161,-192,-193,-194,-195,-196,161,161,161,161,161,161,161,161,161,161,161,161,161,-128,-127,-129,]),'RW_SUCC':([48,65,66,68,77,88,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,326,347,349,356,357,371,382,413,417,418,423,427,],[162,162,162,162,162,162,162,162,162,162,-201,-202,-203,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,-175,-176,-177,-178,-179,-180,-181,-182,-183,162,-186,-187,-188,-189,162,-192,-193,-194,-195,-196,162,162,162,162,162,162,162,162,162,162,162,162,162,-128,-127,-129,]),'RW_PRED':([48,65,66,68,77,88,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,326,347,349,356,357,371,382,413,417,418,423,427,],[163,163,163,163,163,163,163,163,163,163,-201,-202,-203,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,-175,-176,-177,-178,-179,-180,-181,-182,-183,163,-186,-187,-188,-189,163,-192,-193,-194,-195,-196,163,163,163,163,163,163,163,163,163,163,163,163,163,-128,-127,-129,]),'RW_AWAL':([48,65,66,68,77,88,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,326,347,349,356,357,371,382,413,417,418,423,427,],[164,164,164,164,164,164,164,164,164,164,-201,-202,-203,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,-175,-176,-177,-178,-179,-180,-181,-182,-183,164,-186,-187,-188,-189,164,-192,-193,-194,-195,-196,164,164,164,164,164,164,164,164,164,164,164,164,164,-128,-127,-129,]),'RW_AKHIR':([48,65,66,68,77,88,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,326,347,349,356,357,371,382,413,417,418,423,427,],[165,165,165,165,165,165,165,165,165,165,-201,-202,-203,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,-175,-176,-177,-178,-179,-180,-181,-182,-183,165,-186,-187,-188,-189,165,-192,-193,-194,-195,-196,165,165,165,165,165,165,165,165,165,165,165,165,165,-128,-127,-129,]),'RW_FIRSTCHAR':([48,65,66,68,77,88,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,326,347,349,356,357,371,382,413,417,418,423,427,],[166,166,166,166,166,166,166,166,166,166,-201,-202,-203,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,-175,-176,-177,-178,-179,-180,-181,-182,-183,166,-186,-187,-188,-189,166,-192,-193,-194,-195,-196,166,166,166,166,166,166,166,166,166,166,166,166,166,-128,-127,-129,]),'RW_LASTCHAR':([48,65,66,68,77,88,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,326,347,349,356,357,371,382,413,417,418,423,427,],[167,167,167,167,167,167,167,167,167,167,-201,-202,-203,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,-175,-176,-177,-178,-179,-180,-181,-182,-183,167,-186,-187,-188,-189,167,-192,-193,-194,-195,-196,167,167,167,167,167,167,167,167,167,167,167,167,167,-128,-127,-129,]),'RW_LONG':([48,65,66,68,77,88,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,326,347,349,356,357,371,382,413,417,418,423,427,],[168,168,168,168,168,168,168,168,168,168,-201,-202,-203,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,-175,-176,-177,-178,-179,-180,-181,-182,-183,168,-186,-187,-188,-189,168,-192,-193,-194,-195,-196,168,168,168,168,168,168,168,168,168,168,168,168,168,-128,-127,-129,]),'RW_ISKOSONG':([48,65,66,68,77,88,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,326,347,349,356,357,371,382,413,417,418,423,427,],[169,169,169,169,169,169,169,169,169,169,-201,-202,-203,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,-175,-176,-177,-178,-179,-180,-181,-182,-183,169,-186,-187,-188,-189,169,-192,-193,-194,-195,-196,169,169,169,169,169,169,169,169,169,169,169,169,169,-128,-127,-129,]),'RW_INTEGERTOREAL':([48,65,66,68,77,88,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,326,347,349,356,357,371,382,413,417,418,423,427,],[170,170,170,170,170,170,170,170,170,170,-201,-202,-203,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,-175,-176,-177,-178,-179,-180,-181,-182,-183,170,-186,-187,-188,-189,170,-192,-193,-194,-195,-196,170,170,170,170,170,170,170,170,170,170,170,170,170,-128,-127,-129,]),'RW_REALTOINTEGER':([48,65,66,68,77,88,175,176,178,183,185,186,187,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,295,296,297,326,347,349,356,357,371,382,413,417,418,423,427,],[171,171,171,171,171,171,171,171,171,171,-201,-202,-203,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,-175,-176,-177,-178,-179,-180,-181,-182,-183,171,-186,-187,-188,-189,171,-192,-193,-194,-195,-196,171,171,171,171,171,171,171,171,171,171,171,171,171,-128,-127,-129,]),'RW_NOT':([65,66,68,175,176,178,183,185,186,187,191,199,211,235,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,296,297,347,349,356,357,371,413,417,418,423,427,],[187,187,187,187,187,187,187,-201,-202,-203,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,-175,-176,-177,-178,-179,-180,-181,-182,-183,187,-186,-187,-188,-189,187,-192,-193,-194,-195,-196,187,187,187,187,187,187,187,187,187,-128,-127,-129,]),'RW_ON':([67,],[202,]),'RW_STOP':([172,205,],[-95,296,]),'RW_UNTIL':([172,206,],[-95,297,]),'RW_ELSE':([172,358,],[-95,401,]),'RW_OF':([237,381,],[326,-48,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file':([0,],[1,]),'program':([0,],[2,]),'identifier':([3,15,26,27,30,31,35,47,48,51,65,66,68,77,82,88,95,116,173,175,176,177,178,183,191,199,210,211,219,220,221,232,233,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,292,295,296,297,316,326,347,349,356,357,369,371,376,377,382,408,413,417,425,426,],[4,37,49,50,64,85,87,85,114,64,194,194,194,194,85,114,85,85,64,194,194,259,194,194,194,194,304,194,114,312,114,85,85,194,114,331,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,304,331,194,194,85,114,194,194,194,194,304,194,85,85,114,85,194,194,64,64,]),'block':([4,],[6,]),'algorithm_block':([7,89,90,212,415,416,],[9,224,226,308,420,421,]),'constant_declaration_block':([8,223,225,],[11,318,319,]),'empty':([8,9,11,31,44,47,223,225,308,318,319,376,377,],[12,17,32,81,92,101,12,12,17,32,32,81,81,]),'constant_declaration':([8,223,225,],[13,13,13,]),'constant_sub_declaration':([8,13,223,225,],[14,36,14,14,]),'procedure_and_function_implementation_block':([9,308,],[16,372,]),'subprogram_implementation_list':([9,308,],[18,18,]),'subprogram_implementation':([9,18,308,],[19,38,19,]),'procedure_implementation':([9,18,308,],[20,20,20,]),'function_implementation':([9,18,308,],[21,21,21,]),'procedure_declaration':([9,18,80,214,308,],[22,22,216,216,22,]),'function_declaration':([9,18,80,214,308,],[23,23,217,217,23,]),'procedure_identifier':([9,18,80,214,308,],[24,24,24,24,24,]),'function_identification':([9,18,80,214,308,],[25,25,25,25,25,]),'statement_part':([10,],[28,]),'compound_statement':([10,72,77,291,293,294,298,299,300,363,401,],[29,205,206,358,360,361,365,366,367,404,412,]),'type_declaration_block':([11,318,319,],[31,376,377,]),'type_declaration':([11,318,319,],[33,33,33,]),'type_sub_declaration':([11,33,318,319,],[34,86,34,34,]),'procedure_implementation_block':([22,],[39,]),'function_implementation_block':([23,],[41,]),'formal_parameter_list':([24,],[43,]),'function_formal_parameter_list':([25,],[45,]),'function_return_type':([25,45,],[46,98,]),'statement_sequence':([30,425,],[51,426,]),'statement':([30,51,173,425,426,],[52,174,255,52,174,]),'assignment_statement':([30,51,173,425,426,],[53,53,53,53,53,]),'procedure_statement':([30,51,173,425,426,],[54,54,54,54,54,]),'function_returned_statement':([30,51,173,425,426,],[55,55,55,55,55,]),'if_statement':([30,51,173,425,426,],[56,56,56,56,56,]),'depend_on_statement':([30,51,173,425,426,],[57,57,57,57,57,]),'while_statement':([30,51,173,425,426,],[58,58,58,58,58,]),'traversal_statement':([30,51,173,425,426,],[59,59,59,59,59,]),'repeat_statement':([30,51,173,425,426,],[60,60,60,60,60,]),'iterate_stop_statement':([30,51,173,425,426,],[61,61,61,61,61,]),'variable_access':([30,51,65,66,68,77,173,175,176,178,183,191,199,210,211,235,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,292,296,297,347,349,356,357,369,371,413,417,425,426,],[62,62,189,189,189,207,62,189,189,189,189,189,189,303,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,303,189,189,189,189,189,189,303,189,189,189,62,62,]),'builtin_procedure_statements':([30,51,173,425,426,],[63,63,63,63,63,]),'control_variable':([30,51,173,425,426,],[69,69,69,69,69,]),'repeat_until_statement':([30,51,173,425,426,],[70,70,70,70,70,]),'repeat_times_statement':([30,51,173,425,426,],[71,71,71,71,71,]),'indexed_variable':([30,51,65,66,68,77,173,175,176,178,183,191,199,210,211,235,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,292,296,297,347,349,356,357,369,371,413,417,425,426,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'field_designator':([30,51,65,66,68,77,173,175,176,178,183,191,199,210,211,235,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,292,296,297,347,349,356,357,369,371,413,417,425,426,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'input_statement':([30,51,173,425,426,],[75,75,75,75,75,]),'output_statement':([30,51,173,425,426,],[76,76,76,76,76,]),'variable_declaration_block':([31,376,377,],[80,409,410,]),'variable_declaration':([31,376,377,],[82,82,82,]),'variable_sub_declaration':([31,47,82,95,232,233,316,376,377,408,],[83,103,218,229,103,103,374,83,83,374,]),'identifier_list':([31,47,82,95,116,232,233,316,376,377,408,],[84,84,84,84,236,84,84,84,84,84,84,]),'formal_parameter_section_list':([44,],[91,]),'formal_parameter_section':([44,],[93,]),'parameter_specification':([44,228,],[94,320,]),'procedure_parameter_type':([44,228,],[95,95,]),'function_parameter_list_option':([47,],[99,]),'function_parameter_list':([47,],[100,]),'function_parameter_declaration':([47,232,233,],[102,322,323,]),'type_denoter':([48,88,219,221,326,],[104,222,311,314,380,]),'ordinal_type':([48,88,219,221,238,326,382,],[105,105,105,105,329,105,329,]),'structured_type':([48,88,219,221,326,],[106,106,106,106,106,]),'enumerated_type':([48,88,219,221,238,326,382,],[112,112,112,112,112,112,112,]),'subrange_type':([48,88,219,221,238,295,326,382,],[113,113,113,113,113,362,113,113,]),'array_type':([48,88,219,221,326,],[115,115,115,115,115,]),'subrange_type_option':([48,88,219,221,238,295,326,382,],[117,117,117,117,117,117,117,117,]),'subrange_option':([48,88,219,221,238,239,295,326,382,],[119,119,119,119,119,330,119,119,119,]),'constant':([48,88,219,221,238,239,295,317,326,382,],[120,120,120,120,120,120,120,375,120,120,]),'function_designator':([48,65,66,68,77,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,326,347,349,356,357,371,382,413,417,],[121,193,193,193,209,121,193,193,193,193,193,193,193,121,121,193,121,121,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,121,193,193,121,193,193,193,193,193,121,193,193,]),'string_char_constant':([48,65,66,68,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,317,326,347,349,356,357,371,382,413,417,],[122,196,196,196,122,196,196,196,196,196,196,196,122,122,196,122,122,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,122,196,196,122,122,196,196,196,196,196,122,196,196,]),'non_string_constant':([48,65,66,68,88,124,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,317,326,347,349,356,357,371,382,413,417,],[123,195,195,195,123,240,195,195,195,195,195,195,195,123,123,195,123,123,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,123,195,195,123,123,195,195,195,195,195,123,195,195,]),'sign':([48,88,219,221,238,239,295,317,326,382,],[124,124,124,124,124,124,124,124,124,124,]),'boolean_constant':([48,65,66,68,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,317,326,347,349,356,357,371,382,413,417,],[125,197,197,197,125,197,197,197,197,197,197,197,125,125,197,125,125,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,125,197,197,125,125,197,197,197,197,197,125,197,197,]),'nil_constant':([48,65,66,68,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,317,326,347,349,356,357,371,382,413,417,],[126,198,198,198,126,198,198,198,198,198,198,198,126,126,198,126,126,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,126,198,198,126,126,198,198,198,198,198,126,198,198,]),'user_defined_function_call':([48,65,66,68,77,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,326,347,349,356,357,371,382,413,417,],[127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,]),'math_function_call':([48,65,66,68,77,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,326,347,349,356,357,371,382,413,417,],[128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,]),'string_function_call':([48,65,66,68,77,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,326,347,349,356,357,371,382,413,417,],[129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,]),'converter_function_call':([48,65,66,68,77,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,326,347,349,356,357,371,382,413,417,],[130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,]),'string_constant':([48,65,66,68,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,317,326,347,349,356,357,371,382,413,417,],[131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,]),'char_constant':([48,65,66,68,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,317,326,347,349,356,357,371,382,413,417,],[132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,]),'integer_constant':([48,65,66,68,77,88,124,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,317,326,347,349,356,357,371,382,413,417,],[133,133,133,133,208,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,]),'real_constant':([48,65,66,68,88,124,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,317,326,347,349,356,357,371,382,413,417,],[134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,]),'abs_function':([48,65,66,68,77,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,326,347,349,356,357,371,382,413,417,],[140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,]),'sin_function':([48,65,66,68,77,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,326,347,349,356,357,371,382,413,417,],[141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,]),'cos_function':([48,65,66,68,77,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,326,347,349,356,357,371,382,413,417,],[142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,]),'tan_function':([48,65,66,68,77,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,326,347,349,356,357,371,382,413,417,],[143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,]),'succ_function':([48,65,66,68,77,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,326,347,349,356,357,371,382,413,417,],[144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,]),'pred_function':([48,65,66,68,77,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,326,347,349,356,357,371,382,413,417,],[145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,]),'awal_function':([48,65,66,68,77,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,326,347,349,356,357,371,382,413,417,],[146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,]),'akhir_function':([48,65,66,68,77,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,326,347,349,356,357,371,382,413,417,],[147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,]),'firstchar_function':([48,65,66,68,77,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,326,347,349,356,357,371,382,413,417,],[148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,]),'lastchar_function':([48,65,66,68,77,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,326,347,349,356,357,371,382,413,417,],[149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,]),'long_function':([48,65,66,68,77,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,326,347,349,356,357,371,382,413,417,],[150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,]),'iskosong_function':([48,65,66,68,77,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,326,347,349,356,357,371,382,413,417,],[151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,]),'integer_to_real':([48,65,66,68,77,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,326,347,349,356,357,371,382,413,417,],[152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,]),'real_to_integer':([48,65,66,68,77,88,175,176,178,183,191,199,211,219,221,235,238,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,295,296,297,326,347,349,356,357,371,382,413,417,],[153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,]),'expression':([65,66,68,175,176,178,191,199,211,235,241,242,243,244,245,246,247,248,249,250,251,252,253,254,296,297,347,349,356,357,371,413,417,],[179,201,201,256,258,262,286,290,307,262,332,333,334,335,336,337,338,339,340,341,342,343,344,345,201,201,397,262,290,400,307,419,419,]),'additive_expression':([65,66,68,175,176,178,191,199,211,235,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,296,297,347,349,356,357,371,413,417,],[180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,350,180,180,180,180,180,180,180,180,180,]),'multiplicative_expression':([65,66,68,175,176,178,191,199,211,235,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,296,297,347,349,356,357,371,413,417,],[181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,351,181,181,181,181,181,181,181,181,181,]),'unary_expression':([65,66,68,175,176,178,183,191,199,211,235,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,296,297,347,349,356,357,371,413,417,],[182,182,182,182,182,182,284,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,352,182,182,182,182,182,182,182,182,182,]),'unary_op':([65,66,68,175,176,178,183,191,199,211,235,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,296,297,347,349,356,357,371,413,417,],[183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,]),'exponentiation_expression':([65,66,68,175,176,178,183,191,199,211,235,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,296,297,347,349,356,357,371,413,417,],[184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,353,184,184,184,184,184,184,184,184,184,]),'primary_expression':([65,66,68,175,176,178,183,191,199,211,235,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,296,297,347,349,356,357,371,413,417,],[188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,]),'unsigned_constant':([65,66,68,175,176,178,183,191,199,211,235,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,296,297,347,349,356,357,371,413,417,],[190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,]),'set_constructor':([65,66,68,175,176,178,183,191,199,211,235,241,242,243,244,245,246,247,248,249,250,251,252,253,254,263,273,278,285,296,297,347,349,356,357,371,413,417,],[192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,]),'boolean_expression':([66,68,296,297,],[200,203,363,364,]),'procedure_and_function_declaration_block':([80,],[212,]),'procedure_and_function_declaration':([80,],[214,]),'procedure_and_function_sub_declaration':([80,214,],[215,310,]),'function_actual_parameter_list':([114,194,331,],[234,234,234,]),'array_index':([118,],[237,]),'index_expression_list':([176,],[257,]),'actual_parameter_list':([178,235,],[260,324,]),'actual_parameter':([178,235,349,],[261,261,398,]),'relational_op':([179,201,256,258,262,286,290,307,332,333,334,335,336,337,338,339,340,341,342,343,344,345,397,400,419,],[263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,]),'additive_op':([180,350,],[273,273,]),'multiplicative_op':([181,351,],[278,278,]),'member_designator_list':([199,],[287,]),'member_designator':([199,356,],[289,399,]),'traversal_range_value':([204,],[294,]),'input_statement_parameter_list':([210,292,],[301,359,]),'input_statement_parameter':([210,292,369,],[302,302,405,]),'output_statement_parameter_list':([211,],[305,]),'output_statement_parameter':([211,371,],[306,406,]),'type_variety':([221,],[313,]),'type_user_defined':([221,],[315,]),'index_list':([238,],[327,]),'index_type':([238,382,],[328,411,]),'variable_declaration_comma':([316,408,],[373,414,]),'component_type':([326,],[379,]),'depend_on_action_list':([413,],[417,]),'depend_on_action':([413,417,],[418,423,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file","S'",1,None,None,None),
  ('file -> program','file',1,'p_file','notal_parser.py',12),
  ('program -> RW_PROGRAM identifier block','program',3,'p_program','notal_parser.py',17),
  ('identifier_list -> identifier_list S_COMMA identifier','identifier_list',3,'p_identifier_list','notal_parser.py',22),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','notal_parser.py',23),
  ('block -> RW_KAMUS INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block','block',8,'p_block','notal_parser.py',32),
  ('block -> RW_KAMUS algorithm_block procedure_and_function_implementation_block','block',3,'p_block','notal_parser.py',33),
  ('constant_declaration_block -> empty','constant_declaration_block',1,'p_constant_declaration_block','notal_parser.py',43),
  ('constant_declaration_block -> constant_declaration','constant_declaration_block',1,'p_constant_declaration_block','notal_parser.py',44),
  ('type_declaration_block -> empty','type_declaration_block',1,'p_type_declaration_block','notal_parser.py',51),
  ('type_declaration_block -> type_declaration','type_declaration_block',1,'p_type_declaration_block','notal_parser.py',52),
  ('variable_declaration_block -> empty','variable_declaration_block',1,'p_variable_declaration_block','notal_parser.py',59),
  ('variable_declaration_block -> variable_declaration','variable_declaration_block',1,'p_variable_declaration_block','notal_parser.py',60),
  ('procedure_and_function_declaration_block -> DEDENT','procedure_and_function_declaration_block',1,'p_procedure_and_function_declaration_block','notal_parser.py',67),
  ('procedure_and_function_declaration_block -> procedure_and_function_declaration DEDENT','procedure_and_function_declaration_block',2,'p_procedure_and_function_declaration_block','notal_parser.py',68),
  ('algorithm_block -> RW_ALGORITMA statement_part','algorithm_block',2,'p_algorithm_block','notal_parser.py',75),
  ('procedure_and_function_implementation_block -> empty','procedure_and_function_implementation_block',1,'p_procedure_and_function_implementation_block','notal_parser.py',80),
  ('procedure_and_function_implementation_block -> subprogram_implementation_list','procedure_and_function_implementation_block',1,'p_procedure_and_function_implementation_block','notal_parser.py',81),
  ('subprogram_implementation_list -> subprogram_implementation_list subprogram_implementation','subprogram_implementation_list',2,'p_subprogram_implementation_list','notal_parser.py',88),
  ('subprogram_implementation_list -> subprogram_implementation','subprogram_implementation_list',1,'p_subprogram_implementation_list','notal_parser.py',89),
  ('subprogram_implementation -> procedure_implementation','subprogram_implementation',1,'p_subprogram_implementation','notal_parser.py',98),
  ('subprogram_implementation -> function_implementation','subprogram_implementation',1,'p_subprogram_implementation','notal_parser.py',99),
  ('procedure_implementation -> procedure_declaration procedure_implementation_block','procedure_implementation',2,'p_procedure_implementation','notal_parser.py',104),
  ('procedure_implementation -> procedure_declaration','procedure_implementation',1,'p_procedure_implementation','notal_parser.py',105),
  ('procedure_implementation_block -> RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block','procedure_implementation_block',8,'p_procedure_implementation_block','notal_parser.py',110),
  ('procedure_implementation_block -> RW_KAMUS RW_LOKAL algorithm_block','procedure_implementation_block',3,'p_procedure_implementation_block','notal_parser.py',111),
  ('function_implementation -> function_declaration function_implementation_block','function_implementation',2,'p_function_implementation','notal_parser.py',121),
  ('function_implementation -> function_declaration','function_implementation',1,'p_function_implementation','notal_parser.py',122),
  ('function_implementation_block -> RW_KAMUS RW_LOKAL INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block','function_implementation_block',8,'p_function_implementation_block','notal_parser.py',127),
  ('function_implementation_block -> RW_KAMUS RW_LOKAL algorithm_block','function_implementation_block',3,'p_function_implementation_block','notal_parser.py',128),
  ('type_denoter -> ordinal_type','type_denoter',1,'p_type_denoter','notal_parser.py',138),
  ('type_denoter -> structured_type','type_denoter',1,'p_type_denoter','notal_parser.py',139),
  ('type_denoter -> RW_INTEGER','type_denoter',1,'p_type_denoter','notal_parser.py',140),
  ('type_denoter -> RW_REAL','type_denoter',1,'p_type_denoter','notal_parser.py',141),
  ('type_denoter -> RW_STRING','type_denoter',1,'p_type_denoter','notal_parser.py',142),
  ('type_denoter -> RW_CHARACTER','type_denoter',1,'p_type_denoter','notal_parser.py',143),
  ('type_denoter -> RW_BOOLEAN','type_denoter',1,'p_type_denoter','notal_parser.py',144),
  ('ordinal_type -> enumerated_type','ordinal_type',1,'p_ordinal_type','notal_parser.py',155),
  ('ordinal_type -> subrange_type','ordinal_type',1,'p_ordinal_type','notal_parser.py',156),
  ('ordinal_type -> identifier','ordinal_type',1,'p_ordinal_type','notal_parser.py',157),
  ('enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET','enumerated_type',3,'p_enumerated_type','notal_parser.py',162),
  ('subrange_type -> subrange_type_option','subrange_type',1,'p_subrange_type','notal_parser.py',167),
  ('subrange_type_option -> subrange_option S_UP_TO subrange_option','subrange_type_option',3,'p_subrange_type_option','notal_parser.py',172),
  ('subrange_option -> identifier','subrange_option',1,'p_subrange_option','notal_parser.py',177),
  ('subrange_option -> constant','subrange_option',1,'p_subrange_option','notal_parser.py',178),
  ('subrange_option -> function_designator','subrange_option',1,'p_subrange_option','notal_parser.py',179),
  ('structured_type -> array_type','structured_type',1,'p_structured_type','notal_parser.py',184),
  ('array_type -> RW_ARRAY array_index RW_OF component_type','array_type',4,'p_array_type','notal_parser.py',189),
  ('array_index -> S_LEFT_SQUARE_BRACKET index_list S_RIGHT_SQUARE_BRACKET','array_index',3,'p_array_index','notal_parser.py',194),
  ('index_list -> index_list S_COMMA index_type','index_list',3,'p_index_list','notal_parser.py',199),
  ('index_list -> index_type','index_list',1,'p_index_list','notal_parser.py',200),
  ('index_type -> ordinal_type','index_type',1,'p_index_type','notal_parser.py',209),
  ('component_type -> type_denoter','component_type',1,'p_component_type','notal_parser.py',214),
  ('variable_declaration -> variable_declaration variable_sub_declaration','variable_declaration',2,'p_variable_declaration','notal_parser.py',218),
  ('variable_declaration -> variable_sub_declaration','variable_declaration',1,'p_variable_declaration','notal_parser.py',219),
  ('variable_sub_declaration -> identifier_list S_COLON type_denoter','variable_sub_declaration',3,'p_variable_sub_declaration','notal_parser.py',228),
  ('variable_declaration_comma -> variable_sub_declaration','variable_declaration_comma',1,'p_variable_declaration_comma','notal_parser.py',233),
  ('variable_declaration_comma -> variable_sub_declaration S_COMMA variable_declaration_comma','variable_declaration_comma',3,'p_variable_declaration_comma','notal_parser.py',234),
  ('constant_declaration -> constant_declaration constant_sub_declaration','constant_declaration',2,'p_constant_declaration','notal_parser.py',243),
  ('constant_declaration -> constant_sub_declaration','constant_declaration',1,'p_constant_declaration','notal_parser.py',244),
  ('constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant','constant_sub_declaration',6,'p_constant_sub_declaration','notal_parser.py',253),
  ('type_declaration -> type_declaration type_sub_declaration','type_declaration',2,'p_type_declaration','notal_parser.py',258),
  ('type_declaration -> type_sub_declaration','type_declaration',1,'p_type_declaration','notal_parser.py',259),
  ('type_sub_declaration -> RW_TYPE identifier S_COLON type_variety','type_sub_declaration',4,'p_type_sub_declaration','notal_parser.py',268),
  ('type_variety -> type_denoter','type_variety',1,'p_type_variety','notal_parser.py',273),
  ('type_variety -> type_user_defined','type_variety',1,'p_type_variety','notal_parser.py',274),
  ('type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN','type_user_defined',3,'p_type_user_defined','notal_parser.py',279),
  ('procedure_and_function_declaration -> procedure_and_function_declaration procedure_and_function_sub_declaration','procedure_and_function_declaration',2,'p_procedure_and_function_declaration','notal_parser.py',284),
  ('procedure_and_function_declaration -> procedure_and_function_sub_declaration','procedure_and_function_declaration',1,'p_procedure_and_function_declaration','notal_parser.py',285),
  ('procedure_and_function_sub_declaration -> procedure_declaration','procedure_and_function_sub_declaration',1,'p_procedure_and_function_sub_declaration','notal_parser.py',294),
  ('procedure_and_function_sub_declaration -> function_declaration','procedure_and_function_sub_declaration',1,'p_procedure_and_function_sub_declaration','notal_parser.py',295),
  ('procedure_declaration -> procedure_identifier formal_parameter_list','procedure_declaration',2,'p_procedure_declaration','notal_parser.py',300),
  ('procedure_identifier -> RW_PROCEDURE identifier','procedure_identifier',2,'p_procedure_identifier','notal_parser.py',305),
  ('formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET','formal_parameter_list',3,'p_formal_parameter_list','notal_parser.py',310),
  ('formal_parameter_section_list -> empty','formal_parameter_section_list',1,'p_formal_parameter_section_list','notal_parser.py',315),
  ('formal_parameter_section_list -> formal_parameter_section','formal_parameter_section_list',1,'p_formal_parameter_section_list','notal_parser.py',316),
  ('formal_parameter_section -> formal_parameter_section S_SEMI_COLON parameter_specification','formal_parameter_section',3,'p_formal_parameter_section','notal_parser.py',321),
  ('formal_parameter_section -> parameter_specification','formal_parameter_section',1,'p_formal_parameter_section','notal_parser.py',322),
  ('parameter_specification -> procedure_parameter_type variable_sub_declaration','parameter_specification',2,'p_parameter_specification','notal_parser.py',331),
  ('procedure_parameter_type -> RW_INPUT','procedure_parameter_type',1,'p_procedure_parameter_type','notal_parser.py',336),
  ('procedure_parameter_type -> RW_OUTPUT','procedure_parameter_type',1,'p_procedure_parameter_type','notal_parser.py',337),
  ('procedure_parameter_type -> RW_INPUT S_DIVIDE RW_OUTPUT','procedure_parameter_type',3,'p_procedure_parameter_type','notal_parser.py',338),
  ('function_declaration -> function_identification function_formal_parameter_list function_return_type','function_declaration',3,'p_function_declaration','notal_parser.py',345),
  ('function_declaration -> function_identification function_return_type','function_declaration',2,'p_function_declaration','notal_parser.py',346),
  ('function_identification -> RW_FUNCTION identifier','function_identification',2,'p_function_identification','notal_parser.py',352),
  ('function_return_type -> S_RETURN type_denoter','function_return_type',2,'p_function_return_type','notal_parser.py',357),
  ('function_formal_parameter_list -> S_LEFT_BRACKET function_parameter_list_option S_RIGHT_BRACKET','function_formal_parameter_list',3,'p_function_formal_parameter_list','notal_parser.py',362),
  ('function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET','function_actual_parameter_list',3,'p_function_actual_parameter_list','notal_parser.py',367),
  ('function_parameter_list_option -> function_parameter_list','function_parameter_list_option',1,'p_function_parameter_list_option','notal_parser.py',372),
  ('function_parameter_list_option -> empty','function_parameter_list_option',1,'p_function_parameter_list_option','notal_parser.py',373),
  ('function_parameter_list -> function_parameter_list S_SEMI_COLON function_parameter_declaration','function_parameter_list',3,'p_function_parameter_list','notal_parser.py',378),
  ('function_parameter_list -> function_parameter_list S_COMMA function_parameter_declaration','function_parameter_list',3,'p_function_parameter_list','notal_parser.py',379),
  ('function_parameter_list -> function_parameter_declaration','function_parameter_list',1,'p_function_parameter_list','notal_parser.py',380),
  ('function_parameter_declaration -> variable_sub_declaration','function_parameter_declaration',1,'p_function_parameter_declaration','notal_parser.py',389),
  ('statement_part -> compound_statement','statement_part',1,'p_statement_part','notal_parser.py',394),
  ('compound_statement -> INDENT statement_sequence DEDENT','compound_statement',3,'p_compound_statement','notal_parser.py',399),
  ('statement_sequence -> statement_sequence S_SEMI_COLON statement','statement_sequence',3,'p_statement_sequence','notal_parser.py',404),
  ('statement_sequence -> statement_sequence statement','statement_sequence',2,'p_statement_sequence','notal_parser.py',405),
  ('statement_sequence -> statement','statement_sequence',1,'p_statement_sequence','notal_parser.py',406),
  ('statement -> assignment_statement','statement',1,'p_statement','notal_parser.py',418),
  ('statement -> procedure_statement','statement',1,'p_statement','notal_parser.py',419),
  ('statement -> function_returned_statement','statement',1,'p_statement','notal_parser.py',420),
  ('statement -> if_statement','statement',1,'p_statement','notal_parser.py',421),
  ('statement -> depend_on_statement','statement',1,'p_statement','notal_parser.py',422),
  ('statement -> while_statement','statement',1,'p_statement','notal_parser.py',423),
  ('statement -> traversal_statement','statement',1,'p_statement','notal_parser.py',424),
  ('statement -> repeat_statement','statement',1,'p_statement','notal_parser.py',425),
  ('statement -> iterate_stop_statement','statement',1,'p_statement','notal_parser.py',426),
  ('assignment_statement -> variable_access S_ASSIGNMENT expression','assignment_statement',3,'p_assignment_statement','notal_parser.py',431),
  ('procedure_statement -> builtin_procedure_statements','procedure_statement',1,'p_procedure_statement','notal_parser.py',436),
  ('procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET','procedure_statement',4,'p_procedure_statement','notal_parser.py',437),
  ('procedure_statement -> identifier','procedure_statement',1,'p_procedure_statement','notal_parser.py',438),
  ('actual_parameter_list -> actual_parameter_list S_COMMA actual_parameter','actual_parameter_list',3,'p_actual_parameter_list','notal_parser.py',447),
  ('actual_parameter_list -> actual_parameter','actual_parameter_list',1,'p_actual_parameter_list','notal_parser.py',448),
  ('actual_parameter -> expression','actual_parameter',1,'p_actual_parameter','notal_parser.py',457),
  ('builtin_procedure_statements -> input_statement','builtin_procedure_statements',1,'p_builtin_procedure_statements','notal_parser.py',462),
  ('builtin_procedure_statements -> output_statement','builtin_procedure_statements',1,'p_builtin_procedure_statements','notal_parser.py',463),
  ('input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET','input_statement',4,'p_input_statement','notal_parser.py',468),
  ('input_statement_parameter_list -> input_statement_parameter_list S_COMMA input_statement_parameter','input_statement_parameter_list',3,'p_input_statement_parameter_list','notal_parser.py',473),
  ('input_statement_parameter_list -> input_statement_parameter','input_statement_parameter_list',1,'p_input_statement_parameter_list','notal_parser.py',474),
  ('input_statement_parameter -> variable_access','input_statement_parameter',1,'p_input_statement_parameter','notal_parser.py',483),
  ('output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET','output_statement',4,'p_output_statement','notal_parser.py',488),
  ('output_statement_parameter_list -> output_statement_parameter_list S_COMMA output_statement_parameter','output_statement_parameter_list',3,'p_output_statement_parameter_list','notal_parser.py',493),
  ('output_statement_parameter_list -> output_statement_parameter','output_statement_parameter_list',1,'p_output_statement_parameter_list','notal_parser.py',494),
  ('output_statement_parameter -> expression','output_statement_parameter',1,'p_output_statement_parameter','notal_parser.py',503),
  ('function_returned_statement -> S_RETURN expression','function_returned_statement',2,'p_function_returned_statement','notal_parser.py',509),
  ('depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT','depend_on_statement',8,'p_depend_on_statement','notal_parser.py',514),
  ('depend_on_action_list -> depend_on_action_list depend_on_action','depend_on_action_list',2,'p_depend_on_action_list','notal_parser.py',519),
  ('depend_on_action_list -> depend_on_action','depend_on_action_list',1,'p_depend_on_action_list','notal_parser.py',520),
  ('depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT','depend_on_action',5,'p_depend_on_action','notal_parser.py',529),
  ('if_statement -> RW_IF boolean_expression RW_THEN compound_statement','if_statement',4,'p_if_statement','notal_parser.py',534),
  ('if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement','if_statement',6,'p_if_statement','notal_parser.py',535),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','notal_parser.py',543),
  ('repeat_statement -> repeat_until_statement','repeat_statement',1,'p_repeat_statement','notal_parser.py',548),
  ('repeat_statement -> repeat_times_statement','repeat_statement',1,'p_repeat_statement','notal_parser.py',549),
  ('repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression','repeat_until_statement',4,'p_repeat_until_statement','notal_parser.py',554),
  ('repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement','repeat_times_statement',4,'p_repeat_times_statement','notal_parser.py',559),
  ('repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement','repeat_times_statement',4,'p_repeat_times_statement','notal_parser.py',560),
  ('repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement','repeat_times_statement',4,'p_repeat_times_statement','notal_parser.py',561),
  ('while_statement -> RW_WHILE boolean_expression RW_DO compound_statement','while_statement',4,'p_while_statement','notal_parser.py',566),
  ('iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement','iterate_stop_statement',5,'p_iterate_stop_statement','notal_parser.py',571),
  ('traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement','traversal_statement',4,'p_traversal_statement','notal_parser.py',576),
  ('traversal_range_value -> S_LEFT_SQUARE_BRACKET subrange_type S_RIGHT_SQUARE_BRACKET','traversal_range_value',3,'p_traversal_range_value','notal_parser.py',581),
  ('control_variable -> identifier','control_variable',1,'p_control_variable','notal_parser.py',586),
  ('unsigned_constant -> non_string_constant','unsigned_constant',1,'p_unsigned_constant','notal_parser.py',591),
  ('unsigned_constant -> string_char_constant','unsigned_constant',1,'p_unsigned_constant','notal_parser.py',592),
  ('unsigned_constant -> boolean_constant','unsigned_constant',1,'p_unsigned_constant','notal_parser.py',593),
  ('unsigned_constant -> nil_constant','unsigned_constant',1,'p_unsigned_constant','notal_parser.py',594),
  ('constant -> string_char_constant','constant',1,'p_constant','notal_parser.py',599),
  ('constant -> non_string_constant','constant',1,'p_constant','notal_parser.py',600),
  ('constant -> sign non_string_constant','constant',2,'p_constant','notal_parser.py',601),
  ('constant -> boolean_constant','constant',1,'p_constant','notal_parser.py',602),
  ('constant -> nil_constant','constant',1,'p_constant','notal_parser.py',603),
  ('sign -> S_PLUS','sign',1,'p_sign','notal_parser.py',611),
  ('sign -> S_MINUS','sign',1,'p_sign','notal_parser.py',612),
  ('boolean_constant -> L_BOOLEAN_TRUE','boolean_constant',1,'p_boolean_constant','notal_parser.py',620),
  ('boolean_constant -> L_BOOLEAN_FALSE','boolean_constant',1,'p_boolean_constant','notal_parser.py',621),
  ('non_string_constant -> integer_constant','non_string_constant',1,'p_non_string_constant','notal_parser.py',629),
  ('non_string_constant -> real_constant','non_string_constant',1,'p_non_string_constant','notal_parser.py',630),
  ('integer_constant -> L_INTEGER_NUMBER','integer_constant',1,'p_integer_constant','notal_parser.py',635),
  ('real_constant -> L_REAL_NUMBER','real_constant',1,'p_real_constant','notal_parser.py',641),
  ('string_char_constant -> string_constant','string_char_constant',1,'p_string_char_constant','notal_parser.py',647),
  ('string_char_constant -> char_constant','string_char_constant',1,'p_string_char_constant','notal_parser.py',648),
  ('string_constant -> L_STRING','string_constant',1,'p_string_constant','notal_parser.py',653),
  ('char_constant -> L_CHARACTER','char_constant',1,'p_char_constant','notal_parser.py',659),
  ('nil_constant -> L_NIL','nil_constant',1,'p_nil_constant','notal_parser.py',665),
  ('variable_access -> identifier','variable_access',1,'p_variable_access','notal_parser.py',673),
  ('variable_access -> indexed_variable','variable_access',1,'p_variable_access','notal_parser.py',674),
  ('variable_access -> field_designator','variable_access',1,'p_variable_access','notal_parser.py',675),
  ('indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET','indexed_variable',4,'p_indexed_variable','notal_parser.py',680),
  ('index_expression_list -> index_expression_list S_COMMA expression','index_expression_list',3,'p_index_expression_list','notal_parser.py',685),
  ('index_expression_list -> expression','index_expression_list',1,'p_index_expression_list','notal_parser.py',686),
  ('field_designator -> variable_access S_DOT identifier','field_designator',3,'p_field_designator','notal_parser.py',695),
  ('expression -> expression relational_op additive_expression','expression',3,'p_expression','notal_parser.py',700),
  ('expression -> additive_expression','expression',1,'p_expression','notal_parser.py',701),
  ('relational_op -> S_EQUAL','relational_op',1,'p_relational_op','notal_parser.py',709),
  ('relational_op -> S_NOT_EQUAL','relational_op',1,'p_relational_op','notal_parser.py',710),
  ('relational_op -> S_LESS_THAN_EQUAL','relational_op',1,'p_relational_op','notal_parser.py',711),
  ('relational_op -> S_GREATER_THAN_EQUAL','relational_op',1,'p_relational_op','notal_parser.py',712),
  ('relational_op -> S_LESS_THAN','relational_op',1,'p_relational_op','notal_parser.py',713),
  ('relational_op -> S_GREATER_THAN','relational_op',1,'p_relational_op','notal_parser.py',714),
  ('relational_op -> S_ELEMENT_OF','relational_op',1,'p_relational_op','notal_parser.py',715),
  ('relational_op -> RW_EQ','relational_op',1,'p_relational_op','notal_parser.py',716),
  ('relational_op -> RW_NEQ','relational_op',1,'p_relational_op','notal_parser.py',717),
  ('additive_expression -> additive_expression additive_op multiplicative_expression','additive_expression',3,'p_additive_expression','notal_parser.py',725),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','notal_parser.py',726),
  ('additive_op -> S_PLUS','additive_op',1,'p_additive_op','notal_parser.py',734),
  ('additive_op -> S_MINUS','additive_op',1,'p_additive_op','notal_parser.py',735),
  ('additive_op -> RW_OR','additive_op',1,'p_additive_op','notal_parser.py',736),
  ('additive_op -> RW_XOR','additive_op',1,'p_additive_op','notal_parser.py',737),
  ('multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression','multiplicative_expression',3,'p_multiplicative_expression','notal_parser.py',745),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','notal_parser.py',746),
  ('multiplicative_op -> S_TIMES','multiplicative_op',1,'p_multiplicative_op','notal_parser.py',754),
  ('multiplicative_op -> S_DIVIDE','multiplicative_op',1,'p_multiplicative_op','notal_parser.py',755),
  ('multiplicative_op -> RW_DIV','multiplicative_op',1,'p_multiplicative_op','notal_parser.py',756),
  ('multiplicative_op -> RW_MOD','multiplicative_op',1,'p_multiplicative_op','notal_parser.py',757),
  ('multiplicative_op -> RW_AND','multiplicative_op',1,'p_multiplicative_op','notal_parser.py',758),
  ('unary_expression -> unary_op unary_expression','unary_expression',2,'p_unary_expression','notal_parser.py',766),
  ('unary_expression -> exponentiation_expression','unary_expression',1,'p_unary_expression','notal_parser.py',767),
  ('exponentiation_expression -> primary_expression','exponentiation_expression',1,'p_exponentiation_expression','notal_parser.py',775),
  ('exponentiation_expression -> primary_expression S_POWER exponentiation_expression','exponentiation_expression',3,'p_exponentiation_expression','notal_parser.py',776),
  ('unary_op -> S_PLUS','unary_op',1,'p_unary_op','notal_parser.py',784),
  ('unary_op -> S_MINUS','unary_op',1,'p_unary_op','notal_parser.py',785),
  ('unary_op -> RW_NOT','unary_op',1,'p_unary_op','notal_parser.py',786),
  ('primary_expression -> variable_access','primary_expression',1,'p_primary_expression','notal_parser.py',794),
  ('primary_expression -> unsigned_constant','primary_expression',1,'p_primary_expression','notal_parser.py',795),
  ('primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET','primary_expression',3,'p_primary_expression','notal_parser.py',796),
  ('primary_expression -> set_constructor','primary_expression',1,'p_primary_expression','notal_parser.py',797),
  ('primary_expression -> function_designator','primary_expression',1,'p_primary_expression','notal_parser.py',798),
  ('set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET','set_constructor',3,'p_set_constructor','notal_parser.py',806),
  ('set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET','set_constructor',2,'p_set_constructor','notal_parser.py',807),
  ('member_designator_list -> member_designator_list S_COMMA member_designator','member_designator_list',3,'p_member_designator_list','notal_parser.py',813),
  ('member_designator_list -> member_designator','member_designator_list',1,'p_member_designator_list','notal_parser.py',814),
  ('member_designator -> member_designator S_UP_TO expression','member_designator',3,'p_member_designator','notal_parser.py',823),
  ('member_designator -> expression','member_designator',1,'p_member_designator','notal_parser.py',824),
  ('function_designator -> user_defined_function_call','function_designator',1,'p_function_designator','notal_parser.py',833),
  ('function_designator -> math_function_call','function_designator',1,'p_function_designator','notal_parser.py',834),
  ('function_designator -> string_function_call','function_designator',1,'p_function_designator','notal_parser.py',835),
  ('function_designator -> converter_function_call','function_designator',1,'p_function_designator','notal_parser.py',836),
  ('user_defined_function_call -> identifier function_actual_parameter_list','user_defined_function_call',2,'p_user_defined_function_call','notal_parser.py',841),
  ('math_function_call -> abs_function','math_function_call',1,'p_math_function_call','notal_parser.py',846),
  ('math_function_call -> sin_function','math_function_call',1,'p_math_function_call','notal_parser.py',847),
  ('math_function_call -> cos_function','math_function_call',1,'p_math_function_call','notal_parser.py',848),
  ('math_function_call -> tan_function','math_function_call',1,'p_math_function_call','notal_parser.py',849),
  ('math_function_call -> succ_function','math_function_call',1,'p_math_function_call','notal_parser.py',850),
  ('math_function_call -> pred_function','math_function_call',1,'p_math_function_call','notal_parser.py',851),
  ('abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET','abs_function',4,'p_abs_function','notal_parser.py',856),
  ('sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET','sin_function',4,'p_sin_function','notal_parser.py',861),
  ('cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET','cos_function',4,'p_cos_function','notal_parser.py',866),
  ('tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET','tan_function',4,'p_tan_function','notal_parser.py',871),
  ('succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET','succ_function',4,'p_succ_function','notal_parser.py',876),
  ('pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET','pred_function',4,'p_pred_function','notal_parser.py',881),
  ('string_function_call -> awal_function','string_function_call',1,'p_string_function_call','notal_parser.py',886),
  ('string_function_call -> akhir_function','string_function_call',1,'p_string_function_call','notal_parser.py',887),
  ('string_function_call -> firstchar_function','string_function_call',1,'p_string_function_call','notal_parser.py',888),
  ('string_function_call -> lastchar_function','string_function_call',1,'p_string_function_call','notal_parser.py',889),
  ('string_function_call -> long_function','string_function_call',1,'p_string_function_call','notal_parser.py',890),
  ('string_function_call -> iskosong_function','string_function_call',1,'p_string_function_call','notal_parser.py',891),
  ('awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET','awal_function',4,'p_awal_function','notal_parser.py',896),
  ('akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET','akhir_function',4,'p_akhir_function','notal_parser.py',901),
  ('firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET','firstchar_function',4,'p_firstchar_function','notal_parser.py',906),
  ('lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET','lastchar_function',4,'p_lastchar_function','notal_parser.py',911),
  ('long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET','long_function',4,'p_long_function','notal_parser.py',916),
  ('iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET','iskosong_function',4,'p_iskosong_function','notal_parser.py',921),
  ('converter_function_call -> integer_to_real','converter_function_call',1,'p_converter_function_call','notal_parser.py',926),
  ('converter_function_call -> real_to_integer','converter_function_call',1,'p_converter_function_call','notal_parser.py',927),
  ('integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET','integer_to_real',4,'p_integer_to_real','notal_parser.py',932),
  ('real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET','real_to_integer',4,'p_real_to_integer','notal_parser.py',937),
  ('empty -> <empty>','empty',0,'p_empty','notal_parser.py',947),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','notal_parser.py',952),
]
