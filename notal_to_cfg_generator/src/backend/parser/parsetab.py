
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'fileCOMMENT DEDENT IDENTIFIER INDENT L_BOOLEAN_FALSE L_BOOLEAN_TRUE L_CHARACTER L_INTEGER_NUMBER L_NIL L_REAL_NUMBER L_STRING RW_ABS RW_AKHIR RW_ALGORITMA RW_AND RW_ARRAY RW_AWAL RW_BOOLEAN RW_CHARACTER RW_CLOSE RW_CONSTANT RW_COS RW_DEPEND RW_DIV RW_DO RW_ELSE RW_EQ RW_FIRSTCHAR RW_FUNCTION RW_IF RW_INPUT RW_INTEGER RW_INTEGERTOREAL RW_ISKOSONG RW_ITERATE RW_JUDUL RW_KAMUS RW_LASTCHAR RW_LOKAL RW_LONG RW_MOD RW_MODUL RW_NEQ RW_NOT RW_OF RW_ON RW_OPEN RW_OR RW_OUTPUT RW_PRED RW_PROCEDURE RW_PROGRAM RW_READ RW_REAL RW_REALTOINTEGER RW_REPEAT RW_REWRITE RW_SEQFILE RW_SIN RW_STOP RW_STRING RW_SUCC RW_TAN RW_THEN RW_TIMES RW_TRAVERSAL RW_TYPE RW_UNTIL RW_WHILE RW_XOR S_ASSIGNMENT S_COLON S_COMMA S_CONCATENATION S_DIVIDE S_DOT S_DOUBLE_QUOTE S_ELEMENT_OF S_EQUAL S_GREATER_THAN S_GREATER_THAN_EQUAL S_LEFT_BRACKET S_LEFT_CURLY_BRACKET S_LEFT_SQUARE_BRACKET S_LESS_THAN S_LESS_THAN_EQUAL S_MINUS S_NOT_EQUAL S_PLUS S_POWER S_RETURN S_RIGHT_BRACKET S_RIGHT_CURLY_BRACKET S_RIGHT_SQUARE_BRACKET S_SEMI_COLON S_SINGLE_QUOTE S_TIMES S_UP_TO WHITESPACEfile :   program\n        program  :   RW_PROGRAM identifier block\n                    |   function_declaration  block\n                    |   procedure_declaration block\n        identifier_list  : identifier_list S_COMMA identifier\n                            | identifier\n        kamus_declaration    :     RW_KAMUS\n                                |   RW_KAMUS RW_LOKAL\n        block    :   RW_KAMUS INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block\n                    | RW_KAMUS algorithm_block procedure_and_function_implementation_block\n        constant_declaration_block  : empty\n                    | constant_declaration\n        type_declaration_block  :   empty\n                    |   type_declaration\n        variable_declaration_block  :   empty\n                    |   variable_declaration\n        procedure_and_function_declaration_block  :   DEDENT\n                    |   procedure_and_function_declaration DEDENT\n        algorithm_block  :   RW_ALGORITMA statement_part\n        procedure_and_function_implementation_block  :   empty\n                    |   subprogram_implementation_list\n        subprogram_implementation_list : subprogram_implementation_list subprogram_implementation\n                                        | subprogram_implementation\n        subprogram_implementation : procedure_implementation\n                                     | function_implementation\n        procedure_implementation :   procedure_declaration   procedure_implementation_block\n                                    |   procedure_declaration\n        procedure_implementation_block   :   kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block\n                                            | kamus_declaration algorithm_block\n        function_implementation  :   function_declaration function_implementation_block\n                                    |   function_declaration\n        function_implementation_block    :   kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block\n                                            | kamus_declaration algorithm_block\n        type_denoter :   ordinal_type\n                        |   structured_type\n                        |   RW_INTEGER\n                        |   RW_REAL\n                        |   RW_STRING\n                        |   RW_CHARACTER\n                        |   RW_BOOLEAN\n        ordinal_type :   enumerated_type\n                        |   subrange_type\n                        |   identifier\n        enumerated_type  :   S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET\n        subrange_type    :  subrange_type_option\n        subrange_type_option    :   subrange_option S_UP_TO subrange_option\n        subrange_option  :   identifier\n                            |   constant\n                            |   function_designator\n                            |   expression\n        structured_type  :   array_type\n        array_type   :   RW_ARRAY array_index RW_OF component_type\n        array_index  :   S_LEFT_SQUARE_BRACKET index_list S_RIGHT_SQUARE_BRACKET\n        index_list   :   index_list S_COMMA index_type\n                        |   index_type\n        index_type   :   ordinal_type\n        component_type   :   type_denotervariable_declaration :  variable_declaration variable_sub_declaration\n                                |   variable_sub_declaration\n        variable_sub_declaration :   identifier_list S_COLON type_denoter\n        variable_declaration_comma   :   variable_sub_declaration\n                                        |   variable_sub_declaration S_COMMA variable_declaration_comma\n        constant_declaration :   constant_declaration constant_sub_declaration\n                                |   constant_sub_declaration\n        constant_sub_declaration :   RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant\n        type_declaration :   type_declaration type_sub_declaration\n                            |   type_sub_declaration\n        type_sub_declaration :   RW_TYPE identifier S_COLON type_variety\n        type_variety :   type_denoter\n                        |   type_user_defined\n        type_user_defined    :   S_LESS_THAN variable_declaration_comma S_GREATER_THAN\n        procedure_and_function_declaration   :   procedure_and_function_declaration procedure_and_function_sub_declaration\n                                                |   procedure_and_function_sub_declaration\n        procedure_and_function_sub_declaration   :   procedure_declaration\n                                                    |   function_declaration\n        procedure_declaration    :  procedure_identifier formal_parameter_list\n        procedure_identifier :   RW_PROCEDURE identifier\n        formal_parameter_list    :   S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET\n        formal_parameter_section_list    :   empty\n                                            |   formal_parameter_section\n        formal_parameter_section :   formal_parameter_section S_SEMI_COLON parameter_specification\n                                    |   formal_parameter_section S_COMMA parameter_specification\n                                    |   parameter_specification\n        parameter_specification  :   procedure_parameter_type  variable_sub_declaration\n        procedure_parameter_type :   RW_INPUT\n                                    |   RW_OUTPUT\n                                    |   RW_INPUT S_DIVIDE RW_OUTPUT\n        function_declaration :   function_identification function_formal_parameter_list function_return_type\n                                |   function_identification function_return_type\n        function_identification  :   RW_FUNCTION identifier\n        function_return_type :   S_RETURN type_denoter\n        function_formal_parameter_list   :   S_LEFT_BRACKET function_parameter_list_option S_RIGHT_BRACKET\n        function_actual_parameter_list   :   S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET\n        function_parameter_list_option   :   function_parameter_list\n                                            |   empty\n        function_parameter_list  :   function_parameter_list S_SEMI_COLON function_parameter_declaration\n                                    |   function_parameter_list S_COMMA function_parameter_declaration\n                                    |   function_parameter_declaration\n        function_parameter_declaration   :   variable_sub_declaration\n        statement_part   :   compound_statement\n        compound_statement   :   INDENT  statement_sequence  DEDENT\n        statement_sequence   :   statement_sequence S_SEMI_COLON statement\n                                |   statement_sequence statement\n                                |   statement\n        statement    : assignment_statement\n                        | procedure_statement\n                        | function_returned_statement\n                        |   if_statement\n                        | depend_on_statement\n                        | while_statement\n                        | traversal_statement\n                        |   repeat_statement\n                        |   iterate_stop_statement\n        assignment_statement :   variable_access S_ASSIGNMENT expression\n        procedure_statement :   builtin_procedure_statements\n                                |   identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET\n                                |   identifier\n        actual_parameter_list    :   actual_parameter_list S_COMMA actual_parameter\n                                    |   actual_parameter\n        actual_parameter :   expression\n        builtin_procedure_statements     :   input_statement\n                                            |   output_statement\n        input_statement  :   RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET\n        input_statement_parameter_list   :   input_statement_parameter_list S_COMMA input_statement_parameter\n                                            |   input_statement_parameter\n        input_statement_parameter    :   variable_access\n        output_statement  :   RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET\n        output_statement_parameter_list  :   output_statement_parameter_list S_COMMA output_statement_parameter\n                                            |   output_statement_parameter\n        output_statement_parameter   :   expression\n        function_returned_statement  :   S_RETURN expression\n        depend_on_statement  :   RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT\n        depend_on_action_list    :   depend_on_action_list   depend_on_action\n                                            |   depend_on_action\n        depend_on_action :   expression S_COLON INDENT statement_sequence DEDENT\n        if_statement : RW_IF boolean_expression RW_THEN compound_statement\n                        | RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement\n        boolean_expression   :   expression\n        repeat_statement :   repeat_until_statement\n                            |   repeat_times_statement\n        repeat_until_statement   :   RW_REPEAT compound_statement RW_UNTIL boolean_expression\n        repeat_times_statement   :   RW_REPEAT variable_access RW_TIMES compound_statement\n                                    |   RW_REPEAT integer_constant RW_TIMES compound_statement\n                                    |   RW_REPEAT function_designator RW_TIMES compound_statement\n        while_statement   :   RW_WHILE boolean_expression RW_DO compound_statement\n        iterate_stop_statement   :   RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement\n        traversal_statement  :   control_variable RW_TRAVERSAL traversal_range_value compound_statement\n        traversal_range_value    :   S_LEFT_SQUARE_BRACKET subrange_type S_RIGHT_SQUARE_BRACKET\n        control_variable :   identifier\n        unsigned_constant :  non_string_constant\n                            |   string_char_constant\n                            |   boolean_constant\n                            |   nil_constant\n        constant :   string_char_constant\n                    |   non_string_constant\n                    |   sign non_string_constant\n                    |   boolean_constant\n                    |   nil_constant\n        sign     :   S_PLUS\n                    |   S_MINUS\n        boolean_constant :   L_BOOLEAN_TRUE\n                            |   L_BOOLEAN_FALSE\n        non_string_constant  :    integer_constant\n                                |    real_constant\n        integer_constant :   L_INTEGER_NUMBER\n        real_constant    :   L_REAL_NUMBER\n        string_char_constant :   string_constant\n                                |   char_constant\n        string_constant    :   L_STRING\n        char_constant    :   L_CHARACTER\n        nil_constant :   L_NIL\n        variable_access : identifier\n                            | indexed_variable\n                            | field_designator\n        indexed_variable :   variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET\n        index_expression_list    :   index_expression_list S_COMMA expression\n                                    |   expression\n        field_designator :   variable_access S_DOT identifier\n        expression : expression relational_op additive_expression\n                    |   additive_expression\n        relational_op : S_EQUAL\n                | S_NOT_EQUAL\n                | S_LESS_THAN_EQUAL\n                | S_GREATER_THAN_EQUAL\n                | S_LESS_THAN\n                | S_GREATER_THAN\n                | S_ELEMENT_OF\n                | RW_EQ\n                | RW_NEQ\n        additive_expression : additive_expression additive_op multiplicative_expression\n                            |   multiplicative_expression\n        additive_op : S_PLUS\n                    | S_MINUS\n                    | RW_OR\n                    | RW_XOR\n        multiplicative_expression : multiplicative_expression multiplicative_op unary_expression\n                                    |   unary_expression\n        multiplicative_op : S_TIMES\n                            | S_DIVIDE\n                            | RW_DIV\n                            | RW_MOD\n                            | RW_AND\n        unary_expression : unary_op unary_expression\n                        |   exponentiation_expression\n        exponentiation_expression    :   primary_expression\n                                        |   primary_expression S_POWER exponentiation_expression\n        unary_op : S_PLUS\n            |   S_MINUS\n            |   RW_NOT\n        primary_expression : variable_access\n                            | unsigned_constant\n                            | S_LEFT_BRACKET expression S_RIGHT_BRACKET\n                            | set_constructor\n                            | function_designator\n        set_constructor  :   S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET\n                            |   S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET\n        member_designator_list   :   member_designator_list  S_COMMA member_designator\n                                    |   member_designator\n        member_designator    :   member_designator S_UP_TO   expression\n                                |   expression\n        function_designator  :    user_defined_function_call\n                                |   math_function_call\n                                |   string_function_call\n                                |   converter_function_call\n        user_defined_function_call    :   identifier function_actual_parameter_list\n        math_function_call   :   abs_function\n                                |   sin_function\n                                |   cos_function\n                                |   tan_function\n                                |   succ_function\n                                |   pred_function\n        abs_function : RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        sin_function :   RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        cos_function :   RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        tan_function :   RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        succ_function    :   RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        pred_function    :   RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        string_function_call :   awal_function\n                                |   akhir_function\n                                |   firstchar_function\n                                |   lastchar_function\n                                |   long_function\n                                |   iskosong_function\n        awal_function    :   RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        akhir_function    :   RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        firstchar_function    :   RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        lastchar_function    :   RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        long_function    :   RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        iskosong_function    :   RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        converter_function_call  :   integer_to_real\n                                    |   real_to_integer\n        integer_to_real  :   RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        real_to_integer  :   RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        empty    :\n        identifier   :   IDENTIFIER\n        '
    
_lr_action_items = {'RW_PROGRAM':([0,],[3,]),'RW_FUNCTION':([0,11,16,19,24,25,27,35,36,37,38,39,40,41,42,43,44,45,46,48,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,124,125,126,127,131,132,133,134,135,136,137,138,145,153,154,155,156,157,171,197,198,203,206,211,212,213,214,216,218,219,222,253,258,259,264,265,266,267,268,283,286,287,293,294,295,296,297,301,304,305,323,325,326,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,349,350,351,352,353,381,383,384,385,386,409,410,411,412,413,424,431,432,],[8,-255,-89,-76,-254,8,-88,-91,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-51,-45,-48,-49,-50,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-254,-11,-12,-64,8,-23,-24,-25,-27,-31,-19,-100,-225,-214,-150,-151,-152,-153,-156,-203,-172,-216,-78,-254,-13,-14,-67,-63,-22,-26,-30,-60,-44,-212,-46,-47,-179,-190,-196,-206,-178,-215,8,-15,-16,-59,-66,-29,-33,-101,-93,-52,-57,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,8,-73,-74,-75,-58,8,-72,-68,-69,-70,-65,-154,-155,-157,-158,-71,-28,-32,]),'RW_PROCEDURE':([0,11,16,19,24,25,27,35,36,37,38,39,40,41,42,43,44,45,46,48,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,124,125,126,127,131,132,133,134,135,136,137,138,145,153,154,155,156,157,171,197,198,203,206,211,212,213,214,216,218,219,222,253,258,259,264,265,266,267,268,283,286,287,293,294,295,296,297,301,304,305,323,325,326,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,349,350,351,352,353,381,383,384,385,386,409,410,411,412,413,424,431,432,],[9,-255,-89,-76,-254,9,-88,-91,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-51,-45,-48,-49,-50,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-254,-11,-12,-64,9,-23,-24,-25,-27,-31,-19,-100,-225,-214,-150,-151,-152,-153,-156,-203,-172,-216,-78,-254,-13,-14,-67,-63,-22,-26,-30,-60,-44,-212,-46,-47,-179,-190,-196,-206,-178,-215,9,-15,-16,-59,-66,-29,-33,-101,-93,-52,-57,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,9,-73,-74,-75,-58,9,-72,-68,-69,-70,-65,-154,-155,-157,-158,-71,-28,-32,]),'$end':([1,2,11,12,14,16,19,23,25,27,35,36,37,38,39,40,41,42,43,44,45,46,48,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,129,130,131,132,133,134,135,136,137,138,145,153,154,155,156,157,171,197,198,203,206,218,219,222,258,259,264,265,266,267,268,283,286,287,301,304,305,323,325,326,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,381,406,431,432,],[0,-1,-255,-3,-4,-89,-76,-2,-254,-88,-91,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-51,-45,-48,-49,-50,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-10,-20,-21,-23,-24,-25,-27,-31,-19,-100,-225,-214,-150,-151,-152,-153,-156,-203,-172,-216,-78,-22,-26,-30,-44,-212,-46,-47,-179,-190,-196,-206,-178,-215,-29,-33,-101,-93,-52,-57,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,-254,-9,-28,-32,]),'IDENTIFIER':([3,8,9,11,17,18,24,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,107,108,109,110,111,112,113,114,115,116,121,122,123,124,125,126,127,128,139,141,142,143,144,145,146,147,151,152,153,154,155,156,157,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,203,211,212,213,214,215,216,224,225,226,227,228,229,230,231,232,233,234,236,237,238,239,241,243,244,246,247,248,253,258,259,260,264,265,266,267,268,283,286,287,288,289,292,295,296,297,299,300,303,305,306,307,308,309,310,312,321,322,323,324,325,326,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,353,354,356,357,358,359,362,365,366,367,384,385,386,387,389,390,391,392,394,395,398,399,400,401,402,403,404,405,409,410,411,412,413,421,424,425,428,429,433,434,436,437,439,440,441,],[11,11,11,-255,11,11,-254,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-51,11,-45,-48,-49,-50,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-207,-208,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,11,-204,-209,-205,-210,-211,-213,-173,-174,11,11,-85,-86,-254,-11,-12,-64,11,11,11,11,11,11,-225,11,11,-207,-208,-214,-150,-151,-152,-153,11,11,11,-181,-182,-183,-184,-185,-186,-187,-188,-189,-156,11,-192,-193,-194,-195,11,-198,-199,-200,-201,-202,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-203,-172,11,11,11,-216,11,-13,-14,-67,11,-63,11,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-115,-117,11,11,11,-139,-140,-121,-122,11,-60,-44,-212,11,-46,-47,-179,-190,-196,-206,-178,-215,11,11,-87,11,-59,-66,11,-254,-254,-101,11,-103,11,11,-131,-138,11,11,-93,11,-52,-57,11,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,11,-58,11,-254,-254,-102,-114,11,11,11,11,-68,-69,-70,11,11,11,-116,-136,-145,-147,-141,-142,-143,-144,-123,11,-127,11,-65,-154,-155,-157,-158,-146,-71,11,-137,11,11,-134,-132,-133,11,11,-135,]),'RW_KAMUS':([4,5,10,11,16,19,27,35,36,37,38,39,40,41,42,43,44,45,46,48,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,135,136,145,153,154,155,156,157,171,197,198,203,206,258,259,264,265,266,267,268,283,286,287,323,325,326,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,],[13,13,13,-255,-89,-76,-88,-91,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-51,-45,-48,-49,-50,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,221,221,-225,-214,-150,-151,-152,-153,-156,-203,-172,-216,-78,-44,-212,-46,-47,-179,-190,-196,-206,-178,-215,-93,-52,-57,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,]),'S_LEFT_BRACKET':([6,7,11,18,21,22,45,47,68,69,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,116,143,146,147,150,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,198,199,200,237,238,239,241,249,250,260,265,288,289,299,308,309,313,322,324,328,344,354,365,366,367,405,429,433,434,437,441,],[17,20,-255,47,-90,-77,146,147,-207,-208,183,184,185,186,187,188,189,190,191,192,193,194,195,196,147,-209,147,47,147,147,146,-207,-208,47,147,147,-181,-182,-183,-184,-185,-186,-187,-188,-189,147,-192,-193,-194,-195,147,-198,-199,-200,-201,-202,147,147,147,147,147,147,147,147,147,147,147,147,147,147,146,147,147,309,147,147,147,321,322,47,146,147,147,47,147,147,362,147,147,47,147,47,147,147,147,147,147,147,-134,-133,-135,]),'S_RETURN':([6,11,15,21,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,139,140,145,153,154,155,156,157,197,198,203,224,225,226,227,228,229,230,231,232,233,234,236,237,243,244,246,247,259,266,267,268,283,286,287,305,306,307,310,312,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,358,359,391,392,394,395,398,399,400,401,402,404,421,428,436,439,440,],[18,-255,18,-90,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,238,-92,-225,-214,-150,-151,-152,-153,-203,-172,-216,238,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-115,-117,-139,-140,-121,-122,-212,-179,-190,-196,-206,-178,-215,-101,238,-103,-131,-138,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,-102,-114,-116,-136,-145,-147,-141,-142,-143,-144,-123,-127,-146,-137,-132,238,238,]),'S_COLON':([11,33,34,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,145,153,154,155,156,157,197,198,203,217,254,259,266,267,268,283,286,287,298,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,435,],[-255,143,-6,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-225,-214,-150,-151,-152,-153,-203,-172,-216,299,-5,-212,-179,-190,-196,-206,-178,-215,354,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,438,]),'S_COMMA':([11,29,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,48,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,119,120,145,148,150,153,154,155,156,157,171,197,198,202,203,204,205,209,251,252,253,254,255,256,257,258,259,261,262,263,264,265,266,267,268,283,284,285,286,287,290,291,323,325,326,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,345,346,360,371,372,373,374,375,376,377,378,379,380,393,408,422,423,],[-255,142,-98,-99,144,-6,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-51,-45,-48,-49,-50,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,208,-83,-225,144,-6,-214,-150,-151,-152,-153,-156,-203,-172,288,-216,-218,-220,-84,-96,-97,-60,-5,324,-119,-120,-44,-212,328,-55,-56,-46,-47,-179,-190,-196,-206,344,-177,-178,-215,-81,-82,-93,-52,-57,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,-217,-219,324,403,-125,-126,-172,405,-129,-130,-118,-54,-176,403,425,-124,-128,]),'DEDENT':([11,16,19,24,27,35,36,37,38,39,40,41,42,43,44,45,46,48,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,124,125,126,127,145,153,154,155,156,157,171,197,198,203,206,211,212,213,214,216,224,225,226,227,228,229,230,231,232,233,234,236,237,243,244,246,247,253,258,259,264,265,266,267,268,283,286,287,293,294,295,296,297,300,303,305,307,310,312,323,325,326,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,349,350,351,352,353,356,357,358,359,383,384,385,386,389,390,391,392,394,395,398,399,400,401,402,404,409,410,411,412,413,416,417,421,424,428,433,434,436,437,440,441,],[-255,-89,-76,-254,-88,-91,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-51,-45,-48,-49,-50,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-254,-11,-12,-64,-225,-214,-150,-151,-152,-153,-156,-203,-172,-216,-78,-254,-13,-14,-67,-63,305,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-115,-117,-139,-140,-121,-122,-60,-44,-212,-46,-47,-179,-190,-196,-206,-178,-215,348,-15,-16,-59,-66,-254,-254,-101,-103,-131,-138,-93,-52,-57,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,382,-73,-74,-75,-58,-254,-254,-102,-114,-72,-68,-69,-70,-254,-254,-116,-136,-145,-147,-141,-142,-143,-144,-123,-127,-65,-154,-155,-157,-158,426,427,-146,-71,-137,436,-134,-132,-133,441,-135,]),'S_UP_TO':([11,45,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,145,153,154,155,156,157,171,197,198,203,204,205,259,265,266,267,268,283,286,287,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,345,346,],[-255,-47,160,-48,-49,-50,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-225,-214,-150,-151,-152,-153,-156,-203,-172,-216,289,-220,-212,-47,-179,-190,-196,-206,-178,-215,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,289,-219,]),'S_LEFT_SQUARE_BRACKET':([11,18,45,47,49,68,69,107,109,111,114,115,116,143,146,147,150,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,198,199,200,235,237,238,239,241,260,265,286,288,289,299,308,309,315,318,322,324,328,343,344,354,365,366,367,373,374,405,429,433,434,437,441,],[-255,116,-172,116,159,-207,-208,116,-209,200,-173,-174,116,116,116,116,-172,-207,-208,116,116,116,-181,-182,-183,-184,-185,-186,-187,-188,-189,116,-192,-193,-194,-195,116,-198,-199,-200,-201,-202,116,116,116,116,116,116,116,116,116,116,116,116,116,116,-172,116,116,200,-172,116,116,116,116,-172,-178,116,116,116,116,116,365,200,116,116,116,-175,116,116,116,116,116,200,-172,116,116,116,-134,-133,-135,]),'S_DOT':([11,45,111,114,115,150,198,235,237,265,286,318,343,373,374,],[-255,-172,201,-173,-174,-172,-172,201,-172,-172,-178,201,-175,201,-172,]),'S_POWER':([11,45,52,54,55,57,58,59,60,61,62,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,110,111,112,113,114,115,145,150,153,154,155,156,157,198,203,259,265,286,287,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,],[-255,-172,-214,-151,-150,-152,-153,-221,-222,-223,-224,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-169,-170,-165,-166,199,-210,-211,-213,-173,-174,-225,-172,-214,-150,-151,-152,-153,-172,-216,-212,-172,-178,-215,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,]),'S_TIMES':([11,45,52,54,55,57,58,59,60,61,62,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,145,150,153,154,155,156,157,197,198,203,259,265,267,268,283,286,287,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,],[-255,-172,-214,-151,-150,-152,-153,-221,-222,-223,-224,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,178,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-225,-172,-214,-150,-151,-152,-153,-203,-172,-216,-212,-172,178,-196,-206,-178,-215,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,]),'S_DIVIDE':([11,45,52,54,55,57,58,59,60,61,62,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,122,145,150,153,154,155,156,157,197,198,203,259,265,267,268,283,286,287,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,],[-255,-172,-214,-151,-150,-152,-153,-221,-222,-223,-224,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,179,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,210,-225,-172,-214,-150,-151,-152,-153,-203,-172,-216,-212,-172,179,-196,-206,-178,-215,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,]),'RW_DIV':([11,45,52,54,55,57,58,59,60,61,62,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,145,150,153,154,155,156,157,197,198,203,259,265,267,268,283,286,287,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,],[-255,-172,-214,-151,-150,-152,-153,-221,-222,-223,-224,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,180,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-225,-172,-214,-150,-151,-152,-153,-203,-172,-216,-212,-172,180,-196,-206,-178,-215,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,]),'RW_MOD':([11,45,52,54,55,57,58,59,60,61,62,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,145,150,153,154,155,156,157,197,198,203,259,265,267,268,283,286,287,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,],[-255,-172,-214,-151,-150,-152,-153,-221,-222,-223,-224,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,181,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-225,-172,-214,-150,-151,-152,-153,-203,-172,-216,-212,-172,181,-196,-206,-178,-215,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,]),'RW_AND':([11,45,52,54,55,57,58,59,60,61,62,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,145,150,153,154,155,156,157,197,198,203,259,265,267,268,283,286,287,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,],[-255,-172,-214,-151,-150,-152,-153,-221,-222,-223,-224,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,182,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-225,-172,-214,-150,-151,-152,-153,-203,-172,-216,-212,-172,182,-196,-206,-178,-215,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,]),'S_PLUS':([11,18,45,47,52,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,107,108,109,110,111,112,113,114,115,116,143,145,146,147,150,151,152,153,154,155,156,157,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,200,203,238,239,241,259,260,265,266,267,268,283,286,287,288,289,299,308,309,322,323,324,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,354,365,366,367,388,405,429,433,434,437,441,],[-255,68,-172,151,-214,-151,-150,-152,-153,-221,-222,-223,-224,173,-167,-168,-163,-164,-207,-208,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,151,-204,-209,-205,-210,-211,-213,-173,-174,151,68,-225,151,151,-172,-207,-208,-214,-150,-151,-152,-153,68,68,151,-181,-182,-183,-184,-185,-186,-187,-188,-189,151,-192,-193,-194,-195,151,-198,-199,-200,-201,-202,151,151,151,151,151,151,151,151,151,151,151,151,151,151,-203,-172,151,-216,151,151,151,-212,68,-172,173,-190,-196,-206,-178,-215,151,151,68,151,151,151,-93,151,68,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,151,68,68,151,151,414,151,151,151,-134,-133,-135,]),'S_MINUS':([11,18,45,47,52,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,107,108,109,110,111,112,113,114,115,116,143,145,146,147,150,151,152,153,154,155,156,157,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,200,203,238,239,241,259,260,265,266,267,268,283,286,287,288,289,299,308,309,322,323,324,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,354,365,366,367,388,405,429,433,434,437,441,],[-255,69,-172,152,-214,-151,-150,-152,-153,-221,-222,-223,-224,174,-167,-168,-163,-164,-207,-208,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,152,-204,-209,-205,-210,-211,-213,-173,-174,152,69,-225,152,152,-172,-207,-208,-214,-150,-151,-152,-153,69,69,152,-181,-182,-183,-184,-185,-186,-187,-188,-189,152,-192,-193,-194,-195,152,-198,-199,-200,-201,-202,152,152,152,152,152,152,152,152,152,152,152,152,152,152,-203,-172,152,-216,152,152,152,-212,69,-172,174,-190,-196,-206,-178,-215,152,152,69,152,152,152,-93,152,69,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,152,69,69,152,152,415,152,152,152,-134,-133,-135,]),'RW_OR':([11,45,52,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,145,150,153,154,155,156,157,197,198,203,259,265,266,267,268,283,286,287,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,],[-255,-172,-214,-151,-150,-152,-153,-221,-222,-223,-224,175,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-225,-172,-214,-150,-151,-152,-153,-203,-172,-216,-212,-172,175,-190,-196,-206,-178,-215,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,]),'RW_XOR':([11,45,52,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,145,150,153,154,155,156,157,197,198,203,259,265,266,267,268,283,286,287,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,],[-255,-172,-214,-151,-150,-152,-153,-221,-222,-223,-224,176,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-225,-172,-214,-150,-151,-152,-153,-203,-172,-216,-212,-172,176,-190,-196,-206,-178,-215,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,]),'S_EQUAL':([11,36,37,38,39,40,41,42,43,44,45,46,48,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,145,149,150,153,154,155,156,157,171,197,198,203,205,257,258,259,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,286,287,310,312,323,325,326,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,346,355,359,377,380,435,],[-255,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-51,-45,-48,-49,162,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-225,162,-172,-214,-150,-151,-152,-153,-156,-203,-172,-216,162,162,-44,-212,-46,-47,-179,-190,-196,162,162,162,162,162,162,162,162,162,162,162,162,162,162,-206,162,-178,-215,162,162,-93,-52,-57,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,162,388,162,162,162,162,]),'S_NOT_EQUAL':([11,45,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,145,149,150,153,154,155,156,157,197,198,203,205,257,259,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,286,287,310,312,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,346,359,377,380,435,],[-255,-172,-214,163,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-225,163,-172,-214,-150,-151,-152,-153,-203,-172,-216,163,163,-212,-172,-179,-190,-196,163,163,163,163,163,163,163,163,163,163,163,163,163,163,-206,163,-178,-215,163,163,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,163,163,163,163,163,]),'S_LESS_THAN_EQUAL':([11,45,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,145,149,150,153,154,155,156,157,197,198,203,205,257,259,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,286,287,310,312,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,346,359,377,380,435,],[-255,-172,-214,164,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-225,164,-172,-214,-150,-151,-152,-153,-203,-172,-216,164,164,-212,-172,-179,-190,-196,164,164,164,164,164,164,164,164,164,164,164,164,164,164,-206,164,-178,-215,164,164,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,164,164,164,164,164,]),'S_GREATER_THAN_EQUAL':([11,45,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,145,149,150,153,154,155,156,157,197,198,203,205,257,259,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,286,287,310,312,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,346,359,377,380,435,],[-255,-172,-214,165,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-225,165,-172,-214,-150,-151,-152,-153,-203,-172,-216,165,165,-212,-172,-179,-190,-196,165,165,165,165,165,165,165,165,165,165,165,165,165,165,-206,165,-178,-215,165,165,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,165,165,165,165,165,]),'S_LESS_THAN':([11,45,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,145,149,150,153,154,155,156,157,197,198,203,205,257,259,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,286,287,310,312,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,346,354,359,377,380,435,],[-255,-172,-214,166,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-225,166,-172,-214,-150,-151,-152,-153,-203,-172,-216,166,166,-212,-172,-179,-190,-196,166,166,166,166,166,166,166,166,166,166,166,166,166,166,-206,166,-178,-215,166,166,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,166,387,166,166,166,166,]),'S_GREATER_THAN':([11,36,37,38,39,40,41,42,43,44,45,46,48,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,145,149,150,153,154,155,156,157,171,197,198,203,205,253,257,258,259,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,286,287,310,312,323,325,326,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,346,359,377,380,407,408,430,435,],[-255,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-51,-45,-48,-49,167,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-225,167,-172,-214,-150,-151,-152,-153,-156,-203,-172,-216,167,-60,167,-44,-212,-46,-47,-179,-190,-196,167,167,167,167,167,167,167,167,167,167,167,167,167,167,-206,167,-178,-215,167,167,-93,-52,-57,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,167,167,167,167,424,-61,-62,167,]),'S_ELEMENT_OF':([11,45,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,145,149,150,153,154,155,156,157,197,198,203,205,257,259,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,286,287,310,312,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,346,359,377,380,435,],[-255,-172,-214,168,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-225,168,-172,-214,-150,-151,-152,-153,-203,-172,-216,168,168,-212,-172,-179,-190,-196,168,168,168,168,168,168,168,168,168,168,168,168,168,168,-206,168,-178,-215,168,168,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,168,168,168,168,168,]),'RW_EQ':([11,45,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,145,149,150,153,154,155,156,157,197,198,203,205,257,259,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,286,287,310,312,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,346,359,377,380,435,],[-255,-172,-214,169,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-225,169,-172,-214,-150,-151,-152,-153,-203,-172,-216,169,169,-212,-172,-179,-190,-196,169,169,169,169,169,169,169,169,169,169,169,169,169,169,-206,169,-178,-215,169,169,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,169,169,169,169,169,]),'RW_NEQ':([11,45,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,145,149,150,153,154,155,156,157,197,198,203,205,257,259,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,286,287,310,312,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,346,359,377,380,435,],[-255,-172,-214,170,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-225,170,-172,-214,-150,-151,-152,-153,-203,-172,-216,170,170,-212,-172,-179,-190,-196,170,170,170,170,170,170,170,170,170,170,170,170,170,170,-206,170,-178,-215,170,170,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,170,170,170,170,170,]),'S_RIGHT_BRACKET':([11,17,20,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,48,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,117,118,119,120,145,148,149,150,153,154,155,156,157,171,197,198,203,209,251,252,253,254,255,256,257,258,259,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,286,287,290,291,323,325,326,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,360,371,372,373,374,375,376,377,378,393,422,423,],[-255,-254,-254,140,-94,-95,-98,-99,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-51,-45,-48,-49,-50,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,206,-79,-80,-83,-225,258,259,-6,-214,-150,-151,-152,-153,-156,-203,-172,-216,-84,-96,-97,-60,-5,323,-119,-120,-44,-212,-46,-47,-179,-190,-196,329,330,331,332,333,334,335,336,337,338,339,340,341,342,-206,-178,-215,-81,-82,-93,-52,-57,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,391,402,-125,-126,-172,404,-129,-130,-118,419,-124,-128,]),'S_RIGHT_SQUARE_BRACKET':([11,43,44,45,48,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,116,145,153,154,155,156,157,171,197,198,202,203,204,205,258,259,261,262,263,264,265,266,267,268,283,284,285,286,287,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,345,346,379,380,396,],[-255,-41,-42,-43,-45,-48,-49,-50,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,203,-225,-214,-150,-151,-152,-153,-156,-203,-172,287,-216,-218,-220,-44,-212,327,-55,-56,-46,-47,-179,-190,-196,-206,343,-177,-178,-215,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,-217,-219,-54,-176,420,]),'S_SEMI_COLON':([11,29,31,32,36,37,38,39,40,41,42,43,44,45,46,48,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,119,120,145,153,154,155,156,157,171,197,198,203,209,224,225,226,227,228,229,230,231,232,233,234,236,237,243,244,246,247,251,252,253,258,259,264,265,266,267,268,283,286,287,290,291,305,307,310,312,323,325,326,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,358,359,391,392,394,395,398,399,400,401,402,404,421,428,436,440,],[-255,141,-98,-99,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-51,-45,-48,-49,-50,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,207,-83,-225,-214,-150,-151,-152,-153,-156,-203,-172,-216,-84,306,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-115,-117,-139,-140,-121,-122,-96,-97,-60,-44,-212,-46,-47,-179,-190,-196,-206,-178,-215,-81,-82,-101,-103,-131,-138,-93,-52,-57,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,-102,-114,-116,-136,-145,-147,-141,-142,-143,-144,-123,-127,-146,-137,-132,306,]),'RW_TYPE':([11,24,36,37,38,39,40,41,42,43,44,45,46,48,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,124,125,126,127,145,153,154,155,156,157,171,197,198,203,213,214,216,258,259,264,265,266,267,268,283,286,287,297,300,303,323,325,326,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,356,357,384,385,386,409,410,411,412,413,424,],[-255,-254,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-51,-45,-48,-49,-50,-151,-150,-152,-153,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,215,-11,-12,-64,-225,-214,-150,-151,-152,-153,-156,-203,-172,-216,215,-67,-63,-44,-212,-46,-47,-179,-190,-196,-206,-178,-215,-66,-254,-254,-93,-52,-57,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,215,215,-68,-69,-70,-65,-154,-155,-157,-158,-71,]),'RW_IF':([11,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,139,145,153,154,155,156,157,197,198,203,224,225,226,227,228,229,230,231,232,233,234,236,237,243,244,246,247,259,266,267,268,283,286,287,305,306,307,310,312,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,358,359,391,392,394,395,398,399,400,401,402,404,421,428,436,439,440,],[-255,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,239,-225,-214,-150,-151,-152,-153,-203,-172,-216,239,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-115,-117,-139,-140,-121,-122,-212,-179,-190,-196,-206,-178,-215,-101,239,-103,-131,-138,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,-102,-114,-116,-136,-145,-147,-141,-142,-143,-144,-123,-127,-146,-137,-132,239,239,]),'RW_DEPEND':([11,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,139,145,153,154,155,156,157,197,198,203,224,225,226,227,228,229,230,231,232,233,234,236,237,243,244,246,247,259,266,267,268,283,286,287,305,306,307,310,312,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,358,359,391,392,394,395,398,399,400,401,402,404,421,428,436,439,440,],[-255,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,240,-225,-214,-150,-151,-152,-153,-203,-172,-216,240,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-115,-117,-139,-140,-121,-122,-212,-179,-190,-196,-206,-178,-215,-101,240,-103,-131,-138,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,-102,-114,-116,-136,-145,-147,-141,-142,-143,-144,-123,-127,-146,-137,-132,240,240,]),'RW_WHILE':([11,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,139,145,153,154,155,156,157,197,198,203,224,225,226,227,228,229,230,231,232,233,234,236,237,243,244,246,247,259,266,267,268,283,286,287,305,306,307,310,312,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,358,359,391,392,394,395,398,399,400,401,402,404,421,428,436,439,440,],[-255,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,241,-225,-214,-150,-151,-152,-153,-203,-172,-216,241,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-115,-117,-139,-140,-121,-122,-212,-179,-190,-196,-206,-178,-215,-101,241,-103,-131,-138,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,-102,-114,-116,-136,-145,-147,-141,-142,-143,-144,-123,-127,-146,-137,-132,241,241,]),'RW_ITERATE':([11,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,139,145,153,154,155,156,157,197,198,203,224,225,226,227,228,229,230,231,232,233,234,236,237,243,244,246,247,259,266,267,268,283,286,287,305,306,307,310,312,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,358,359,391,392,394,395,398,399,400,401,402,404,421,428,436,439,440,],[-255,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,245,-225,-214,-150,-151,-152,-153,-203,-172,-216,245,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-115,-117,-139,-140,-121,-122,-212,-179,-190,-196,-206,-178,-215,-101,245,-103,-131,-138,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,-102,-114,-116,-136,-145,-147,-141,-142,-143,-144,-123,-127,-146,-137,-132,245,245,]),'RW_REPEAT':([11,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,139,145,153,154,155,156,157,197,198,203,224,225,226,227,228,229,230,231,232,233,234,236,237,243,244,246,247,259,266,267,268,283,286,287,305,306,307,310,312,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,358,359,391,392,394,395,398,399,400,401,402,404,421,428,436,439,440,],[-255,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,248,-225,-214,-150,-151,-152,-153,-203,-172,-216,248,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-115,-117,-139,-140,-121,-122,-212,-179,-190,-196,-206,-178,-215,-101,248,-103,-131,-138,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,-102,-114,-116,-136,-145,-147,-141,-142,-143,-144,-123,-127,-146,-137,-132,248,248,]),'RW_INPUT':([11,20,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,139,145,153,154,155,156,157,197,198,203,207,208,224,225,226,227,228,229,230,231,232,233,234,236,237,243,244,246,247,259,266,267,268,283,286,287,305,306,307,310,312,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,358,359,391,392,394,395,398,399,400,401,402,404,421,428,436,439,440,],[-255,122,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,249,-225,-214,-150,-151,-152,-153,-203,-172,-216,122,122,249,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-115,-117,-139,-140,-121,-122,-212,-179,-190,-196,-206,-178,-215,-101,249,-103,-131,-138,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,-102,-114,-116,-136,-145,-147,-141,-142,-143,-144,-123,-127,-146,-137,-132,249,249,]),'RW_OUTPUT':([11,20,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,139,145,153,154,155,156,157,197,198,203,207,208,210,224,225,226,227,228,229,230,231,232,233,234,236,237,243,244,246,247,259,266,267,268,283,286,287,305,306,307,310,312,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,358,359,391,392,394,395,398,399,400,401,402,404,421,428,436,439,440,],[-255,123,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,250,-225,-214,-150,-151,-152,-153,-203,-172,-216,123,123,292,250,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-115,-117,-139,-140,-121,-122,-212,-179,-190,-196,-206,-178,-215,-101,250,-103,-131,-138,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,-102,-114,-116,-136,-145,-147,-141,-142,-143,-144,-123,-127,-146,-137,-132,250,250,]),'RW_THEN':([11,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,145,153,154,155,156,157,197,198,203,259,266,267,268,283,286,287,311,312,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,],[-255,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-225,-214,-150,-151,-152,-153,-203,-172,-216,-212,-179,-190,-196,-206,-178,-215,361,-138,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,]),'RW_DO':([11,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,145,153,154,155,156,157,197,198,203,259,266,267,268,283,286,287,312,314,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,],[-255,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-225,-214,-150,-151,-152,-153,-203,-172,-216,-212,-179,-190,-196,-206,-178,-215,-138,363,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,]),'INDENT':([11,13,26,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,106,108,110,111,112,113,114,115,145,153,154,155,156,157,197,198,203,220,221,223,245,248,259,266,267,268,283,286,287,302,312,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,361,363,364,368,369,370,397,418,419,420,438,],[-255,24,139,-221,-222,-223,-224,-180,-167,-168,-163,-164,-161,-162,-171,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-191,-169,-170,-165,-166,-197,-204,-205,-210,-211,-213,-173,-174,-225,-214,-150,-151,-152,-153,-203,-172,-216,300,-7,303,139,139,-212,-179,-190,-196,-206,-178,-215,-8,-138,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,139,139,139,139,139,139,139,139,429,-148,439,]),'S_ASSIGNMENT':([11,114,115,235,237,286,343,],[-255,-173,-174,308,-172,-178,-175,]),'RW_TRAVERSAL':([11,237,242,],[-255,-149,315,]),'RW_TIMES':([11,59,60,61,62,73,74,75,76,77,78,79,80,81,82,83,84,85,86,90,114,115,145,198,286,318,319,320,323,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,],[-255,-221,-222,-223,-224,-226,-227,-228,-229,-230,-231,-238,-239,-240,-241,-242,-243,-250,-251,-165,-173,-174,-225,-172,-178,368,369,370,-93,-232,-233,-234,-235,-236,-237,-244,-245,-246,-247,-248,-249,-252,-253,-175,]),'RW_ALGORITMA':([13,220,221,223,302,347,348,382,426,427,],[26,26,-7,26,-8,26,-17,-18,26,26,]),'RW_INTEGER':([18,143,260,299,354,],[38,38,38,38,38,]),'RW_REAL':([18,143,260,299,354,],[39,39,39,39,39,]),'RW_STRING':([18,143,260,299,354,],[40,40,40,40,40,]),'RW_CHARACTER':([18,143,260,299,354,],[41,41,41,41,41,]),'RW_BOOLEAN':([18,143,260,299,354,],[42,42,42,42,42,]),'RW_ARRAY':([18,143,260,299,354,],[49,49,49,49,49,]),'L_BOOLEAN_TRUE':([18,47,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,388,405,429,433,434,437,441,],[70,70,-207,-208,70,-209,70,70,70,70,-207,-208,70,70,70,-181,-182,-183,-184,-185,-186,-187,-188,-189,70,-192,-193,-194,-195,70,-198,-199,-200,-201,-202,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-134,-133,-135,]),'L_BOOLEAN_FALSE':([18,47,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,388,405,429,433,434,437,441,],[71,71,-207,-208,71,-209,71,71,71,71,-207,-208,71,71,71,-181,-182,-183,-184,-185,-186,-187,-188,-189,71,-192,-193,-194,-195,71,-198,-199,-200,-201,-202,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-134,-133,-135,]),'L_NIL':([18,47,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,388,405,429,433,434,437,441,],[72,72,-207,-208,72,-209,72,72,72,72,-207,-208,72,72,72,-181,-182,-183,-184,-185,-186,-187,-188,-189,72,-192,-193,-194,-195,72,-198,-199,-200,-201,-202,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-134,-133,-135,]),'L_STRING':([18,47,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,388,405,429,433,434,437,441,],[88,88,-207,-208,88,-209,88,88,88,88,-207,-208,88,88,88,-181,-182,-183,-184,-185,-186,-187,-188,-189,88,-192,-193,-194,-195,88,-198,-199,-200,-201,-202,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-134,-133,-135,]),'L_CHARACTER':([18,47,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,388,405,429,433,434,437,441,],[89,89,-207,-208,89,-209,89,89,89,89,-207,-208,89,89,89,-181,-182,-183,-184,-185,-186,-187,-188,-189,89,-192,-193,-194,-195,89,-198,-199,-200,-201,-202,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-134,-133,-135,]),'L_INTEGER_NUMBER':([18,47,56,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,388,405,414,415,429,433,434,437,441,],[90,90,90,-159,-160,90,-209,90,90,90,90,-207,-208,90,90,90,-181,-182,-183,-184,-185,-186,-187,-188,-189,90,-192,-193,-194,-195,90,-198,-199,-200,-201,-202,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-159,-160,90,90,-134,-133,-135,]),'L_REAL_NUMBER':([18,47,56,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,388,405,414,415,429,433,434,437,441,],[91,91,91,-159,-160,91,-209,91,91,91,91,-207,-208,91,91,91,-181,-182,-183,-184,-185,-186,-187,-188,-189,91,-192,-193,-194,-195,91,-198,-199,-200,-201,-202,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-159,-160,91,91,-134,-133,-135,]),'RW_ABS':([18,47,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,434,437,441,],[92,92,-207,-208,92,-209,92,92,92,92,-207,-208,92,92,92,-181,-182,-183,-184,-185,-186,-187,-188,-189,92,-192,-193,-194,-195,92,-198,-199,-200,-201,-202,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,-134,-133,-135,]),'RW_SIN':([18,47,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,434,437,441,],[93,93,-207,-208,93,-209,93,93,93,93,-207,-208,93,93,93,-181,-182,-183,-184,-185,-186,-187,-188,-189,93,-192,-193,-194,-195,93,-198,-199,-200,-201,-202,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,-134,-133,-135,]),'RW_COS':([18,47,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,434,437,441,],[94,94,-207,-208,94,-209,94,94,94,94,-207,-208,94,94,94,-181,-182,-183,-184,-185,-186,-187,-188,-189,94,-192,-193,-194,-195,94,-198,-199,-200,-201,-202,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,-134,-133,-135,]),'RW_TAN':([18,47,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,434,437,441,],[95,95,-207,-208,95,-209,95,95,95,95,-207,-208,95,95,95,-181,-182,-183,-184,-185,-186,-187,-188,-189,95,-192,-193,-194,-195,95,-198,-199,-200,-201,-202,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,-134,-133,-135,]),'RW_SUCC':([18,47,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,434,437,441,],[96,96,-207,-208,96,-209,96,96,96,96,-207,-208,96,96,96,-181,-182,-183,-184,-185,-186,-187,-188,-189,96,-192,-193,-194,-195,96,-198,-199,-200,-201,-202,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,-134,-133,-135,]),'RW_PRED':([18,47,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,434,437,441,],[97,97,-207,-208,97,-209,97,97,97,97,-207,-208,97,97,97,-181,-182,-183,-184,-185,-186,-187,-188,-189,97,-192,-193,-194,-195,97,-198,-199,-200,-201,-202,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,-134,-133,-135,]),'RW_AWAL':([18,47,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,434,437,441,],[98,98,-207,-208,98,-209,98,98,98,98,-207,-208,98,98,98,-181,-182,-183,-184,-185,-186,-187,-188,-189,98,-192,-193,-194,-195,98,-198,-199,-200,-201,-202,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,-134,-133,-135,]),'RW_AKHIR':([18,47,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,434,437,441,],[99,99,-207,-208,99,-209,99,99,99,99,-207,-208,99,99,99,-181,-182,-183,-184,-185,-186,-187,-188,-189,99,-192,-193,-194,-195,99,-198,-199,-200,-201,-202,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-134,-133,-135,]),'RW_FIRSTCHAR':([18,47,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,434,437,441,],[100,100,-207,-208,100,-209,100,100,100,100,-207,-208,100,100,100,-181,-182,-183,-184,-185,-186,-187,-188,-189,100,-192,-193,-194,-195,100,-198,-199,-200,-201,-202,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-134,-133,-135,]),'RW_LASTCHAR':([18,47,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,434,437,441,],[101,101,-207,-208,101,-209,101,101,101,101,-207,-208,101,101,101,-181,-182,-183,-184,-185,-186,-187,-188,-189,101,-192,-193,-194,-195,101,-198,-199,-200,-201,-202,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-134,-133,-135,]),'RW_LONG':([18,47,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,434,437,441,],[102,102,-207,-208,102,-209,102,102,102,102,-207,-208,102,102,102,-181,-182,-183,-184,-185,-186,-187,-188,-189,102,-192,-193,-194,-195,102,-198,-199,-200,-201,-202,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,-134,-133,-135,]),'RW_ISKOSONG':([18,47,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,434,437,441,],[103,103,-207,-208,103,-209,103,103,103,103,-207,-208,103,103,103,-181,-182,-183,-184,-185,-186,-187,-188,-189,103,-192,-193,-194,-195,103,-198,-199,-200,-201,-202,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,-134,-133,-135,]),'RW_INTEGERTOREAL':([18,47,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,434,437,441,],[104,104,-207,-208,104,-209,104,104,104,104,-207,-208,104,104,104,-181,-182,-183,-184,-185,-186,-187,-188,-189,104,-192,-193,-194,-195,104,-198,-199,-200,-201,-202,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,-134,-133,-135,]),'RW_REALTOINTEGER':([18,47,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,434,437,441,],[105,105,-207,-208,105,-209,105,105,105,105,-207,-208,105,105,105,-181,-182,-183,-184,-185,-186,-187,-188,-189,105,-192,-193,-194,-195,105,-198,-199,-200,-201,-202,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,-134,-133,-135,]),'RW_NOT':([18,47,68,69,107,109,116,143,146,147,151,152,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,434,437,441,],[109,109,-207,-208,109,-209,109,109,109,109,-207,-208,109,109,109,-181,-182,-183,-184,-185,-186,-187,-188,-189,109,-192,-193,-194,-195,109,-198,-199,-200,-201,-202,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,-134,-133,-135,]),'RW_CONSTANT':([24,64,65,66,67,70,71,72,88,89,90,91,126,127,171,216,300,303,409,410,411,412,413,],[128,-167,-168,-163,-164,-161,-162,-171,-169,-170,-165,-166,128,-64,-156,-63,128,128,-65,-154,-155,-157,-158,]),'RW_OF':([158,327,],[260,-53,]),'RW_LOKAL':([221,],[302,]),'RW_ON':([240,],[313,]),'RW_STOP':([305,316,],[-101,366,]),'RW_UNTIL':([305,317,],[-101,367,]),'RW_ELSE':([305,392,],[-101,418,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file':([0,],[1,]),'program':([0,],[2,]),'function_declaration':([0,25,131,293,349,381,],[4,136,136,352,352,136,]),'procedure_declaration':([0,25,131,293,349,381,],[5,135,135,351,351,135,]),'function_identification':([0,25,131,293,349,381,],[6,6,6,6,6,6,]),'procedure_identifier':([0,25,131,293,349,381,],[7,7,7,7,7,7,]),'identifier':([3,8,9,17,18,47,107,116,121,128,139,141,142,143,144,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,201,211,215,224,238,239,241,248,260,288,289,295,299,306,308,309,321,322,324,328,344,354,362,365,366,367,387,389,390,403,405,425,429,433,439,440,],[10,21,22,34,45,150,198,198,34,217,237,34,34,45,254,198,198,45,265,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,286,34,298,237,198,198,198,198,45,198,198,34,45,237,198,198,374,198,198,45,198,45,374,265,198,198,34,34,34,374,198,34,198,198,237,237,]),'block':([4,5,10,],[12,14,23,]),'function_formal_parameter_list':([6,],[15,]),'function_return_type':([6,15,],[16,27,]),'formal_parameter_list':([7,],[19,]),'algorithm_block':([13,220,223,347,426,427,],[25,301,304,381,431,432,]),'function_parameter_list_option':([17,],[28,]),'function_parameter_list':([17,],[29,]),'empty':([17,20,24,25,124,211,300,303,356,357,381,389,390,],[30,118,125,130,212,294,125,125,212,212,130,294,294,]),'function_parameter_declaration':([17,141,142,],[31,251,252,]),'variable_sub_declaration':([17,121,141,142,211,295,387,389,390,425,],[32,209,32,32,296,353,408,296,296,408,]),'identifier_list':([17,47,121,141,142,211,295,387,389,390,425,],[33,148,33,33,33,33,33,33,33,33,33,]),'type_denoter':([18,143,260,299,354,],[35,253,326,355,385,]),'ordinal_type':([18,143,159,260,299,328,354,],[36,36,263,36,36,263,36,]),'structured_type':([18,143,260,299,354,],[37,37,37,37,37,]),'enumerated_type':([18,143,159,260,299,328,354,],[43,43,43,43,43,43,43,]),'subrange_type':([18,143,159,260,299,328,354,365,],[44,44,44,44,44,44,44,396,]),'array_type':([18,143,260,299,354,],[46,46,46,46,46,]),'subrange_type_option':([18,143,159,260,299,328,354,365,],[48,48,48,48,48,48,48,48,]),'subrange_option':([18,143,159,160,260,299,328,354,365,],[50,50,50,264,50,50,50,50,50,]),'constant':([18,143,159,160,260,299,328,354,365,388,],[51,51,51,51,51,51,51,51,51,409,]),'function_designator':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[52,153,153,153,52,153,153,52,52,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,320,52,153,153,52,153,153,153,153,52,153,52,52,153,153,153,153,153,]),'expression':([18,47,116,143,146,147,159,160,183,184,185,186,187,188,189,190,191,192,193,194,195,196,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[53,149,205,53,257,149,53,53,269,270,271,272,273,274,275,276,277,278,279,280,281,282,285,310,312,312,53,205,346,53,359,257,377,257,53,380,53,53,312,312,377,435,435,]),'string_char_constant':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,388,405,429,433,],[54,155,155,155,54,155,155,54,54,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,54,155,155,54,155,155,155,155,54,155,54,54,155,155,410,155,155,155,]),'non_string_constant':([18,47,56,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,388,405,429,433,],[55,154,171,154,154,55,154,154,55,55,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,55,154,154,55,154,154,154,154,55,154,55,55,154,154,411,154,154,154,]),'sign':([18,143,159,160,260,299,328,354,365,388,],[56,56,56,56,56,56,56,56,56,56,]),'boolean_constant':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,388,405,429,433,],[57,156,156,156,57,156,156,57,57,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,57,156,156,57,156,156,156,156,57,156,57,57,156,156,412,156,156,156,]),'nil_constant':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,388,405,429,433,],[58,157,157,157,58,157,157,58,58,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,58,157,157,58,157,157,157,157,58,157,58,58,157,157,413,157,157,157,]),'user_defined_function_call':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'math_function_call':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'string_function_call':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'converter_function_call':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'additive_expression':([18,47,116,143,146,147,159,160,161,183,184,185,186,187,188,189,190,191,192,193,194,195,196,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[63,63,63,63,63,63,63,63,266,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'string_constant':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,388,405,429,433,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'char_constant':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,388,405,429,433,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'integer_constant':([18,47,56,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,388,405,429,433,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,319,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'real_constant':([18,47,56,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,388,405,429,433,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'abs_function':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'sin_function':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'cos_function':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'tan_function':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'succ_function':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'pred_function':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'awal_function':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'akhir_function':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'firstchar_function':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'lastchar_function':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'long_function':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'iskosong_function':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'integer_to_real':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'real_to_integer':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,248,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'multiplicative_expression':([18,47,116,143,146,147,159,160,161,172,183,184,185,186,187,188,189,190,191,192,193,194,195,196,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[87,87,87,87,87,87,87,87,87,267,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'unary_expression':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[106,106,197,106,106,106,106,106,106,106,106,268,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'unary_op':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'exponentiation_expression':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,283,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'primary_expression':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'variable_access':([18,47,107,116,139,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,224,238,239,241,248,260,288,289,299,306,308,309,321,322,324,328,344,354,362,365,366,367,403,405,429,433,439,440,],[111,111,111,111,235,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,235,111,111,111,318,111,111,111,111,235,111,111,373,111,111,111,111,111,373,111,111,111,373,111,111,111,235,235,]),'unsigned_constant':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'set_constructor':([18,47,107,116,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,238,239,241,260,288,289,299,308,309,322,324,328,344,354,365,366,367,405,429,433,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'indexed_variable':([18,47,107,116,139,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,224,238,239,241,248,260,288,289,299,306,308,309,321,322,324,328,344,354,362,365,366,367,403,405,429,433,439,440,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'field_designator':([18,47,107,116,139,143,146,147,159,160,161,172,177,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,224,238,239,241,248,260,288,289,299,306,308,309,321,322,324,328,344,354,362,365,366,367,403,405,429,433,439,440,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'formal_parameter_section_list':([20,],[117,]),'formal_parameter_section':([20,],[119,]),'parameter_specification':([20,207,208,],[120,290,291,]),'procedure_parameter_type':([20,207,208,],[121,121,121,]),'constant_declaration_block':([24,300,303,],[124,356,357,]),'constant_declaration':([24,300,303,],[126,126,126,]),'constant_sub_declaration':([24,126,300,303,],[127,216,127,127,]),'procedure_and_function_implementation_block':([25,381,],[129,406,]),'subprogram_implementation_list':([25,381,],[131,131,]),'subprogram_implementation':([25,131,381,],[132,218,132,]),'procedure_implementation':([25,131,381,],[133,133,133,]),'function_implementation':([25,131,381,],[134,134,134,]),'statement_part':([26,],[137,]),'compound_statement':([26,245,248,361,363,364,368,369,370,397,418,],[138,316,317,392,394,395,399,400,401,421,428,]),'function_actual_parameter_list':([45,150,198,265,],[145,145,145,145,]),'array_index':([49,],[158,]),'relational_op':([53,149,205,257,269,270,271,272,273,274,275,276,277,278,279,280,281,282,285,310,312,346,359,377,380,435,],[161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,]),'additive_op':([63,266,],[172,172,]),'multiplicative_op':([87,267,],[177,177,]),'member_designator_list':([116,],[202,]),'member_designator':([116,288,],[204,345,]),'type_declaration_block':([124,356,357,],[211,389,390,]),'type_declaration':([124,356,357,],[213,213,213,]),'type_sub_declaration':([124,213,356,357,],[214,297,214,214,]),'procedure_implementation_block':([135,],[219,]),'kamus_declaration':([135,136,],[220,223,]),'function_implementation_block':([136,],[222,]),'statement_sequence':([139,439,],[224,440,]),'statement':([139,224,306,439,440,],[225,307,358,225,307,]),'assignment_statement':([139,224,306,439,440,],[226,226,226,226,226,]),'procedure_statement':([139,224,306,439,440,],[227,227,227,227,227,]),'function_returned_statement':([139,224,306,439,440,],[228,228,228,228,228,]),'if_statement':([139,224,306,439,440,],[229,229,229,229,229,]),'depend_on_statement':([139,224,306,439,440,],[230,230,230,230,230,]),'while_statement':([139,224,306,439,440,],[231,231,231,231,231,]),'traversal_statement':([139,224,306,439,440,],[232,232,232,232,232,]),'repeat_statement':([139,224,306,439,440,],[233,233,233,233,233,]),'iterate_stop_statement':([139,224,306,439,440,],[234,234,234,234,234,]),'builtin_procedure_statements':([139,224,306,439,440,],[236,236,236,236,236,]),'control_variable':([139,224,306,439,440,],[242,242,242,242,242,]),'repeat_until_statement':([139,224,306,439,440,],[243,243,243,243,243,]),'repeat_times_statement':([139,224,306,439,440,],[244,244,244,244,244,]),'input_statement':([139,224,306,439,440,],[246,246,246,246,246,]),'output_statement':([139,224,306,439,440,],[247,247,247,247,247,]),'actual_parameter_list':([146,309,],[255,360,]),'actual_parameter':([146,309,324,],[256,256,378,]),'index_list':([159,],[261,]),'index_type':([159,328,],[262,379,]),'index_expression_list':([200,],[284,]),'variable_declaration_block':([211,389,390,],[293,416,417,]),'variable_declaration':([211,389,390,],[295,295,295,]),'boolean_expression':([239,241,366,367,],[311,314,397,398,]),'component_type':([260,],[325,]),'procedure_and_function_declaration_block':([293,],[347,]),'procedure_and_function_declaration':([293,],[349,]),'procedure_and_function_sub_declaration':([293,349,],[350,383,]),'traversal_range_value':([315,],[364,]),'input_statement_parameter_list':([321,362,],[371,393,]),'input_statement_parameter':([321,362,403,],[372,372,422,]),'output_statement_parameter_list':([322,],[375,]),'output_statement_parameter':([322,405,],[376,423,]),'type_variety':([354,],[384,]),'type_user_defined':([354,],[386,]),'variable_declaration_comma':([387,425,],[407,430,]),'depend_on_action_list':([429,],[433,]),'depend_on_action':([429,433,],[434,437,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file","S'",1,None,None,None),
  ('file -> program','file',1,'p_file','notal_parser.py',12),
  ('program -> RW_PROGRAM identifier block','program',3,'p_program','notal_parser.py',17),
  ('program -> function_declaration block','program',2,'p_program','notal_parser.py',18),
  ('program -> procedure_declaration block','program',2,'p_program','notal_parser.py',19),
  ('identifier_list -> identifier_list S_COMMA identifier','identifier_list',3,'p_identifier_list','notal_parser.py',24),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','notal_parser.py',25),
  ('kamus_declaration -> RW_KAMUS','kamus_declaration',1,'p_kamus_declaration','notal_parser.py',34),
  ('kamus_declaration -> RW_KAMUS RW_LOKAL','kamus_declaration',2,'p_kamus_declaration','notal_parser.py',35),
  ('block -> RW_KAMUS INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block','block',8,'p_block','notal_parser.py',43),
  ('block -> RW_KAMUS algorithm_block procedure_and_function_implementation_block','block',3,'p_block','notal_parser.py',44),
  ('constant_declaration_block -> empty','constant_declaration_block',1,'p_constant_declaration_block','notal_parser.py',54),
  ('constant_declaration_block -> constant_declaration','constant_declaration_block',1,'p_constant_declaration_block','notal_parser.py',55),
  ('type_declaration_block -> empty','type_declaration_block',1,'p_type_declaration_block','notal_parser.py',62),
  ('type_declaration_block -> type_declaration','type_declaration_block',1,'p_type_declaration_block','notal_parser.py',63),
  ('variable_declaration_block -> empty','variable_declaration_block',1,'p_variable_declaration_block','notal_parser.py',70),
  ('variable_declaration_block -> variable_declaration','variable_declaration_block',1,'p_variable_declaration_block','notal_parser.py',71),
  ('procedure_and_function_declaration_block -> DEDENT','procedure_and_function_declaration_block',1,'p_procedure_and_function_declaration_block','notal_parser.py',78),
  ('procedure_and_function_declaration_block -> procedure_and_function_declaration DEDENT','procedure_and_function_declaration_block',2,'p_procedure_and_function_declaration_block','notal_parser.py',79),
  ('algorithm_block -> RW_ALGORITMA statement_part','algorithm_block',2,'p_algorithm_block','notal_parser.py',86),
  ('procedure_and_function_implementation_block -> empty','procedure_and_function_implementation_block',1,'p_procedure_and_function_implementation_block','notal_parser.py',91),
  ('procedure_and_function_implementation_block -> subprogram_implementation_list','procedure_and_function_implementation_block',1,'p_procedure_and_function_implementation_block','notal_parser.py',92),
  ('subprogram_implementation_list -> subprogram_implementation_list subprogram_implementation','subprogram_implementation_list',2,'p_subprogram_implementation_list','notal_parser.py',99),
  ('subprogram_implementation_list -> subprogram_implementation','subprogram_implementation_list',1,'p_subprogram_implementation_list','notal_parser.py',100),
  ('subprogram_implementation -> procedure_implementation','subprogram_implementation',1,'p_subprogram_implementation','notal_parser.py',109),
  ('subprogram_implementation -> function_implementation','subprogram_implementation',1,'p_subprogram_implementation','notal_parser.py',110),
  ('procedure_implementation -> procedure_declaration procedure_implementation_block','procedure_implementation',2,'p_procedure_implementation','notal_parser.py',115),
  ('procedure_implementation -> procedure_declaration','procedure_implementation',1,'p_procedure_implementation','notal_parser.py',116),
  ('procedure_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block','procedure_implementation_block',7,'p_procedure_implementation_block','notal_parser.py',121),
  ('procedure_implementation_block -> kamus_declaration algorithm_block','procedure_implementation_block',2,'p_procedure_implementation_block','notal_parser.py',122),
  ('function_implementation -> function_declaration function_implementation_block','function_implementation',2,'p_function_implementation','notal_parser.py',132),
  ('function_implementation -> function_declaration','function_implementation',1,'p_function_implementation','notal_parser.py',133),
  ('function_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block','function_implementation_block',7,'p_function_implementation_block','notal_parser.py',138),
  ('function_implementation_block -> kamus_declaration algorithm_block','function_implementation_block',2,'p_function_implementation_block','notal_parser.py',139),
  ('type_denoter -> ordinal_type','type_denoter',1,'p_type_denoter','notal_parser.py',149),
  ('type_denoter -> structured_type','type_denoter',1,'p_type_denoter','notal_parser.py',150),
  ('type_denoter -> RW_INTEGER','type_denoter',1,'p_type_denoter','notal_parser.py',151),
  ('type_denoter -> RW_REAL','type_denoter',1,'p_type_denoter','notal_parser.py',152),
  ('type_denoter -> RW_STRING','type_denoter',1,'p_type_denoter','notal_parser.py',153),
  ('type_denoter -> RW_CHARACTER','type_denoter',1,'p_type_denoter','notal_parser.py',154),
  ('type_denoter -> RW_BOOLEAN','type_denoter',1,'p_type_denoter','notal_parser.py',155),
  ('ordinal_type -> enumerated_type','ordinal_type',1,'p_ordinal_type','notal_parser.py',166),
  ('ordinal_type -> subrange_type','ordinal_type',1,'p_ordinal_type','notal_parser.py',167),
  ('ordinal_type -> identifier','ordinal_type',1,'p_ordinal_type','notal_parser.py',168),
  ('enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET','enumerated_type',3,'p_enumerated_type','notal_parser.py',173),
  ('subrange_type -> subrange_type_option','subrange_type',1,'p_subrange_type','notal_parser.py',178),
  ('subrange_type_option -> subrange_option S_UP_TO subrange_option','subrange_type_option',3,'p_subrange_type_option','notal_parser.py',183),
  ('subrange_option -> identifier','subrange_option',1,'p_subrange_option','notal_parser.py',188),
  ('subrange_option -> constant','subrange_option',1,'p_subrange_option','notal_parser.py',189),
  ('subrange_option -> function_designator','subrange_option',1,'p_subrange_option','notal_parser.py',190),
  ('subrange_option -> expression','subrange_option',1,'p_subrange_option','notal_parser.py',191),
  ('structured_type -> array_type','structured_type',1,'p_structured_type','notal_parser.py',196),
  ('array_type -> RW_ARRAY array_index RW_OF component_type','array_type',4,'p_array_type','notal_parser.py',201),
  ('array_index -> S_LEFT_SQUARE_BRACKET index_list S_RIGHT_SQUARE_BRACKET','array_index',3,'p_array_index','notal_parser.py',206),
  ('index_list -> index_list S_COMMA index_type','index_list',3,'p_index_list','notal_parser.py',211),
  ('index_list -> index_type','index_list',1,'p_index_list','notal_parser.py',212),
  ('index_type -> ordinal_type','index_type',1,'p_index_type','notal_parser.py',221),
  ('component_type -> type_denoter','component_type',1,'p_component_type','notal_parser.py',226),
  ('variable_declaration -> variable_declaration variable_sub_declaration','variable_declaration',2,'p_variable_declaration','notal_parser.py',230),
  ('variable_declaration -> variable_sub_declaration','variable_declaration',1,'p_variable_declaration','notal_parser.py',231),
  ('variable_sub_declaration -> identifier_list S_COLON type_denoter','variable_sub_declaration',3,'p_variable_sub_declaration','notal_parser.py',240),
  ('variable_declaration_comma -> variable_sub_declaration','variable_declaration_comma',1,'p_variable_declaration_comma','notal_parser.py',245),
  ('variable_declaration_comma -> variable_sub_declaration S_COMMA variable_declaration_comma','variable_declaration_comma',3,'p_variable_declaration_comma','notal_parser.py',246),
  ('constant_declaration -> constant_declaration constant_sub_declaration','constant_declaration',2,'p_constant_declaration','notal_parser.py',255),
  ('constant_declaration -> constant_sub_declaration','constant_declaration',1,'p_constant_declaration','notal_parser.py',256),
  ('constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant','constant_sub_declaration',6,'p_constant_sub_declaration','notal_parser.py',265),
  ('type_declaration -> type_declaration type_sub_declaration','type_declaration',2,'p_type_declaration','notal_parser.py',270),
  ('type_declaration -> type_sub_declaration','type_declaration',1,'p_type_declaration','notal_parser.py',271),
  ('type_sub_declaration -> RW_TYPE identifier S_COLON type_variety','type_sub_declaration',4,'p_type_sub_declaration','notal_parser.py',280),
  ('type_variety -> type_denoter','type_variety',1,'p_type_variety','notal_parser.py',285),
  ('type_variety -> type_user_defined','type_variety',1,'p_type_variety','notal_parser.py',286),
  ('type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN','type_user_defined',3,'p_type_user_defined','notal_parser.py',291),
  ('procedure_and_function_declaration -> procedure_and_function_declaration procedure_and_function_sub_declaration','procedure_and_function_declaration',2,'p_procedure_and_function_declaration','notal_parser.py',296),
  ('procedure_and_function_declaration -> procedure_and_function_sub_declaration','procedure_and_function_declaration',1,'p_procedure_and_function_declaration','notal_parser.py',297),
  ('procedure_and_function_sub_declaration -> procedure_declaration','procedure_and_function_sub_declaration',1,'p_procedure_and_function_sub_declaration','notal_parser.py',306),
  ('procedure_and_function_sub_declaration -> function_declaration','procedure_and_function_sub_declaration',1,'p_procedure_and_function_sub_declaration','notal_parser.py',307),
  ('procedure_declaration -> procedure_identifier formal_parameter_list','procedure_declaration',2,'p_procedure_declaration','notal_parser.py',312),
  ('procedure_identifier -> RW_PROCEDURE identifier','procedure_identifier',2,'p_procedure_identifier','notal_parser.py',317),
  ('formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET','formal_parameter_list',3,'p_formal_parameter_list','notal_parser.py',322),
  ('formal_parameter_section_list -> empty','formal_parameter_section_list',1,'p_formal_parameter_section_list','notal_parser.py',327),
  ('formal_parameter_section_list -> formal_parameter_section','formal_parameter_section_list',1,'p_formal_parameter_section_list','notal_parser.py',328),
  ('formal_parameter_section -> formal_parameter_section S_SEMI_COLON parameter_specification','formal_parameter_section',3,'p_formal_parameter_section','notal_parser.py',333),
  ('formal_parameter_section -> formal_parameter_section S_COMMA parameter_specification','formal_parameter_section',3,'p_formal_parameter_section','notal_parser.py',334),
  ('formal_parameter_section -> parameter_specification','formal_parameter_section',1,'p_formal_parameter_section','notal_parser.py',335),
  ('parameter_specification -> procedure_parameter_type variable_sub_declaration','parameter_specification',2,'p_parameter_specification','notal_parser.py',344),
  ('procedure_parameter_type -> RW_INPUT','procedure_parameter_type',1,'p_procedure_parameter_type','notal_parser.py',349),
  ('procedure_parameter_type -> RW_OUTPUT','procedure_parameter_type',1,'p_procedure_parameter_type','notal_parser.py',350),
  ('procedure_parameter_type -> RW_INPUT S_DIVIDE RW_OUTPUT','procedure_parameter_type',3,'p_procedure_parameter_type','notal_parser.py',351),
  ('function_declaration -> function_identification function_formal_parameter_list function_return_type','function_declaration',3,'p_function_declaration','notal_parser.py',358),
  ('function_declaration -> function_identification function_return_type','function_declaration',2,'p_function_declaration','notal_parser.py',359),
  ('function_identification -> RW_FUNCTION identifier','function_identification',2,'p_function_identification','notal_parser.py',365),
  ('function_return_type -> S_RETURN type_denoter','function_return_type',2,'p_function_return_type','notal_parser.py',370),
  ('function_formal_parameter_list -> S_LEFT_BRACKET function_parameter_list_option S_RIGHT_BRACKET','function_formal_parameter_list',3,'p_function_formal_parameter_list','notal_parser.py',375),
  ('function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET','function_actual_parameter_list',3,'p_function_actual_parameter_list','notal_parser.py',380),
  ('function_parameter_list_option -> function_parameter_list','function_parameter_list_option',1,'p_function_parameter_list_option','notal_parser.py',385),
  ('function_parameter_list_option -> empty','function_parameter_list_option',1,'p_function_parameter_list_option','notal_parser.py',386),
  ('function_parameter_list -> function_parameter_list S_SEMI_COLON function_parameter_declaration','function_parameter_list',3,'p_function_parameter_list','notal_parser.py',391),
  ('function_parameter_list -> function_parameter_list S_COMMA function_parameter_declaration','function_parameter_list',3,'p_function_parameter_list','notal_parser.py',392),
  ('function_parameter_list -> function_parameter_declaration','function_parameter_list',1,'p_function_parameter_list','notal_parser.py',393),
  ('function_parameter_declaration -> variable_sub_declaration','function_parameter_declaration',1,'p_function_parameter_declaration','notal_parser.py',402),
  ('statement_part -> compound_statement','statement_part',1,'p_statement_part','notal_parser.py',407),
  ('compound_statement -> INDENT statement_sequence DEDENT','compound_statement',3,'p_compound_statement','notal_parser.py',412),
  ('statement_sequence -> statement_sequence S_SEMI_COLON statement','statement_sequence',3,'p_statement_sequence','notal_parser.py',417),
  ('statement_sequence -> statement_sequence statement','statement_sequence',2,'p_statement_sequence','notal_parser.py',418),
  ('statement_sequence -> statement','statement_sequence',1,'p_statement_sequence','notal_parser.py',419),
  ('statement -> assignment_statement','statement',1,'p_statement','notal_parser.py',431),
  ('statement -> procedure_statement','statement',1,'p_statement','notal_parser.py',432),
  ('statement -> function_returned_statement','statement',1,'p_statement','notal_parser.py',433),
  ('statement -> if_statement','statement',1,'p_statement','notal_parser.py',434),
  ('statement -> depend_on_statement','statement',1,'p_statement','notal_parser.py',435),
  ('statement -> while_statement','statement',1,'p_statement','notal_parser.py',436),
  ('statement -> traversal_statement','statement',1,'p_statement','notal_parser.py',437),
  ('statement -> repeat_statement','statement',1,'p_statement','notal_parser.py',438),
  ('statement -> iterate_stop_statement','statement',1,'p_statement','notal_parser.py',439),
  ('assignment_statement -> variable_access S_ASSIGNMENT expression','assignment_statement',3,'p_assignment_statement','notal_parser.py',444),
  ('procedure_statement -> builtin_procedure_statements','procedure_statement',1,'p_procedure_statement','notal_parser.py',449),
  ('procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET','procedure_statement',4,'p_procedure_statement','notal_parser.py',450),
  ('procedure_statement -> identifier','procedure_statement',1,'p_procedure_statement','notal_parser.py',451),
  ('actual_parameter_list -> actual_parameter_list S_COMMA actual_parameter','actual_parameter_list',3,'p_actual_parameter_list','notal_parser.py',460),
  ('actual_parameter_list -> actual_parameter','actual_parameter_list',1,'p_actual_parameter_list','notal_parser.py',461),
  ('actual_parameter -> expression','actual_parameter',1,'p_actual_parameter','notal_parser.py',470),
  ('builtin_procedure_statements -> input_statement','builtin_procedure_statements',1,'p_builtin_procedure_statements','notal_parser.py',475),
  ('builtin_procedure_statements -> output_statement','builtin_procedure_statements',1,'p_builtin_procedure_statements','notal_parser.py',476),
  ('input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET','input_statement',4,'p_input_statement','notal_parser.py',481),
  ('input_statement_parameter_list -> input_statement_parameter_list S_COMMA input_statement_parameter','input_statement_parameter_list',3,'p_input_statement_parameter_list','notal_parser.py',486),
  ('input_statement_parameter_list -> input_statement_parameter','input_statement_parameter_list',1,'p_input_statement_parameter_list','notal_parser.py',487),
  ('input_statement_parameter -> variable_access','input_statement_parameter',1,'p_input_statement_parameter','notal_parser.py',496),
  ('output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET','output_statement',4,'p_output_statement','notal_parser.py',501),
  ('output_statement_parameter_list -> output_statement_parameter_list S_COMMA output_statement_parameter','output_statement_parameter_list',3,'p_output_statement_parameter_list','notal_parser.py',506),
  ('output_statement_parameter_list -> output_statement_parameter','output_statement_parameter_list',1,'p_output_statement_parameter_list','notal_parser.py',507),
  ('output_statement_parameter -> expression','output_statement_parameter',1,'p_output_statement_parameter','notal_parser.py',516),
  ('function_returned_statement -> S_RETURN expression','function_returned_statement',2,'p_function_returned_statement','notal_parser.py',522),
  ('depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT','depend_on_statement',8,'p_depend_on_statement','notal_parser.py',527),
  ('depend_on_action_list -> depend_on_action_list depend_on_action','depend_on_action_list',2,'p_depend_on_action_list','notal_parser.py',532),
  ('depend_on_action_list -> depend_on_action','depend_on_action_list',1,'p_depend_on_action_list','notal_parser.py',533),
  ('depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT','depend_on_action',5,'p_depend_on_action','notal_parser.py',542),
  ('if_statement -> RW_IF boolean_expression RW_THEN compound_statement','if_statement',4,'p_if_statement','notal_parser.py',547),
  ('if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement','if_statement',6,'p_if_statement','notal_parser.py',548),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','notal_parser.py',556),
  ('repeat_statement -> repeat_until_statement','repeat_statement',1,'p_repeat_statement','notal_parser.py',561),
  ('repeat_statement -> repeat_times_statement','repeat_statement',1,'p_repeat_statement','notal_parser.py',562),
  ('repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression','repeat_until_statement',4,'p_repeat_until_statement','notal_parser.py',567),
  ('repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement','repeat_times_statement',4,'p_repeat_times_statement','notal_parser.py',572),
  ('repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement','repeat_times_statement',4,'p_repeat_times_statement','notal_parser.py',573),
  ('repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement','repeat_times_statement',4,'p_repeat_times_statement','notal_parser.py',574),
  ('while_statement -> RW_WHILE boolean_expression RW_DO compound_statement','while_statement',4,'p_while_statement','notal_parser.py',579),
  ('iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement','iterate_stop_statement',5,'p_iterate_stop_statement','notal_parser.py',584),
  ('traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement','traversal_statement',4,'p_traversal_statement','notal_parser.py',589),
  ('traversal_range_value -> S_LEFT_SQUARE_BRACKET subrange_type S_RIGHT_SQUARE_BRACKET','traversal_range_value',3,'p_traversal_range_value','notal_parser.py',594),
  ('control_variable -> identifier','control_variable',1,'p_control_variable','notal_parser.py',599),
  ('unsigned_constant -> non_string_constant','unsigned_constant',1,'p_unsigned_constant','notal_parser.py',604),
  ('unsigned_constant -> string_char_constant','unsigned_constant',1,'p_unsigned_constant','notal_parser.py',605),
  ('unsigned_constant -> boolean_constant','unsigned_constant',1,'p_unsigned_constant','notal_parser.py',606),
  ('unsigned_constant -> nil_constant','unsigned_constant',1,'p_unsigned_constant','notal_parser.py',607),
  ('constant -> string_char_constant','constant',1,'p_constant','notal_parser.py',612),
  ('constant -> non_string_constant','constant',1,'p_constant','notal_parser.py',613),
  ('constant -> sign non_string_constant','constant',2,'p_constant','notal_parser.py',614),
  ('constant -> boolean_constant','constant',1,'p_constant','notal_parser.py',615),
  ('constant -> nil_constant','constant',1,'p_constant','notal_parser.py',616),
  ('sign -> S_PLUS','sign',1,'p_sign','notal_parser.py',624),
  ('sign -> S_MINUS','sign',1,'p_sign','notal_parser.py',625),
  ('boolean_constant -> L_BOOLEAN_TRUE','boolean_constant',1,'p_boolean_constant','notal_parser.py',633),
  ('boolean_constant -> L_BOOLEAN_FALSE','boolean_constant',1,'p_boolean_constant','notal_parser.py',634),
  ('non_string_constant -> integer_constant','non_string_constant',1,'p_non_string_constant','notal_parser.py',642),
  ('non_string_constant -> real_constant','non_string_constant',1,'p_non_string_constant','notal_parser.py',643),
  ('integer_constant -> L_INTEGER_NUMBER','integer_constant',1,'p_integer_constant','notal_parser.py',648),
  ('real_constant -> L_REAL_NUMBER','real_constant',1,'p_real_constant','notal_parser.py',654),
  ('string_char_constant -> string_constant','string_char_constant',1,'p_string_char_constant','notal_parser.py',660),
  ('string_char_constant -> char_constant','string_char_constant',1,'p_string_char_constant','notal_parser.py',661),
  ('string_constant -> L_STRING','string_constant',1,'p_string_constant','notal_parser.py',666),
  ('char_constant -> L_CHARACTER','char_constant',1,'p_char_constant','notal_parser.py',672),
  ('nil_constant -> L_NIL','nil_constant',1,'p_nil_constant','notal_parser.py',678),
  ('variable_access -> identifier','variable_access',1,'p_variable_access','notal_parser.py',686),
  ('variable_access -> indexed_variable','variable_access',1,'p_variable_access','notal_parser.py',687),
  ('variable_access -> field_designator','variable_access',1,'p_variable_access','notal_parser.py',688),
  ('indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET','indexed_variable',4,'p_indexed_variable','notal_parser.py',693),
  ('index_expression_list -> index_expression_list S_COMMA expression','index_expression_list',3,'p_index_expression_list','notal_parser.py',698),
  ('index_expression_list -> expression','index_expression_list',1,'p_index_expression_list','notal_parser.py',699),
  ('field_designator -> variable_access S_DOT identifier','field_designator',3,'p_field_designator','notal_parser.py',708),
  ('expression -> expression relational_op additive_expression','expression',3,'p_expression','notal_parser.py',713),
  ('expression -> additive_expression','expression',1,'p_expression','notal_parser.py',714),
  ('relational_op -> S_EQUAL','relational_op',1,'p_relational_op','notal_parser.py',722),
  ('relational_op -> S_NOT_EQUAL','relational_op',1,'p_relational_op','notal_parser.py',723),
  ('relational_op -> S_LESS_THAN_EQUAL','relational_op',1,'p_relational_op','notal_parser.py',724),
  ('relational_op -> S_GREATER_THAN_EQUAL','relational_op',1,'p_relational_op','notal_parser.py',725),
  ('relational_op -> S_LESS_THAN','relational_op',1,'p_relational_op','notal_parser.py',726),
  ('relational_op -> S_GREATER_THAN','relational_op',1,'p_relational_op','notal_parser.py',727),
  ('relational_op -> S_ELEMENT_OF','relational_op',1,'p_relational_op','notal_parser.py',728),
  ('relational_op -> RW_EQ','relational_op',1,'p_relational_op','notal_parser.py',729),
  ('relational_op -> RW_NEQ','relational_op',1,'p_relational_op','notal_parser.py',730),
  ('additive_expression -> additive_expression additive_op multiplicative_expression','additive_expression',3,'p_additive_expression','notal_parser.py',738),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','notal_parser.py',739),
  ('additive_op -> S_PLUS','additive_op',1,'p_additive_op','notal_parser.py',747),
  ('additive_op -> S_MINUS','additive_op',1,'p_additive_op','notal_parser.py',748),
  ('additive_op -> RW_OR','additive_op',1,'p_additive_op','notal_parser.py',749),
  ('additive_op -> RW_XOR','additive_op',1,'p_additive_op','notal_parser.py',750),
  ('multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression','multiplicative_expression',3,'p_multiplicative_expression','notal_parser.py',758),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','notal_parser.py',759),
  ('multiplicative_op -> S_TIMES','multiplicative_op',1,'p_multiplicative_op','notal_parser.py',767),
  ('multiplicative_op -> S_DIVIDE','multiplicative_op',1,'p_multiplicative_op','notal_parser.py',768),
  ('multiplicative_op -> RW_DIV','multiplicative_op',1,'p_multiplicative_op','notal_parser.py',769),
  ('multiplicative_op -> RW_MOD','multiplicative_op',1,'p_multiplicative_op','notal_parser.py',770),
  ('multiplicative_op -> RW_AND','multiplicative_op',1,'p_multiplicative_op','notal_parser.py',771),
  ('unary_expression -> unary_op unary_expression','unary_expression',2,'p_unary_expression','notal_parser.py',779),
  ('unary_expression -> exponentiation_expression','unary_expression',1,'p_unary_expression','notal_parser.py',780),
  ('exponentiation_expression -> primary_expression','exponentiation_expression',1,'p_exponentiation_expression','notal_parser.py',788),
  ('exponentiation_expression -> primary_expression S_POWER exponentiation_expression','exponentiation_expression',3,'p_exponentiation_expression','notal_parser.py',789),
  ('unary_op -> S_PLUS','unary_op',1,'p_unary_op','notal_parser.py',797),
  ('unary_op -> S_MINUS','unary_op',1,'p_unary_op','notal_parser.py',798),
  ('unary_op -> RW_NOT','unary_op',1,'p_unary_op','notal_parser.py',799),
  ('primary_expression -> variable_access','primary_expression',1,'p_primary_expression','notal_parser.py',807),
  ('primary_expression -> unsigned_constant','primary_expression',1,'p_primary_expression','notal_parser.py',808),
  ('primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET','primary_expression',3,'p_primary_expression','notal_parser.py',809),
  ('primary_expression -> set_constructor','primary_expression',1,'p_primary_expression','notal_parser.py',810),
  ('primary_expression -> function_designator','primary_expression',1,'p_primary_expression','notal_parser.py',811),
  ('set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET','set_constructor',3,'p_set_constructor','notal_parser.py',819),
  ('set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET','set_constructor',2,'p_set_constructor','notal_parser.py',820),
  ('member_designator_list -> member_designator_list S_COMMA member_designator','member_designator_list',3,'p_member_designator_list','notal_parser.py',826),
  ('member_designator_list -> member_designator','member_designator_list',1,'p_member_designator_list','notal_parser.py',827),
  ('member_designator -> member_designator S_UP_TO expression','member_designator',3,'p_member_designator','notal_parser.py',836),
  ('member_designator -> expression','member_designator',1,'p_member_designator','notal_parser.py',837),
  ('function_designator -> user_defined_function_call','function_designator',1,'p_function_designator','notal_parser.py',846),
  ('function_designator -> math_function_call','function_designator',1,'p_function_designator','notal_parser.py',847),
  ('function_designator -> string_function_call','function_designator',1,'p_function_designator','notal_parser.py',848),
  ('function_designator -> converter_function_call','function_designator',1,'p_function_designator','notal_parser.py',849),
  ('user_defined_function_call -> identifier function_actual_parameter_list','user_defined_function_call',2,'p_user_defined_function_call','notal_parser.py',854),
  ('math_function_call -> abs_function','math_function_call',1,'p_math_function_call','notal_parser.py',859),
  ('math_function_call -> sin_function','math_function_call',1,'p_math_function_call','notal_parser.py',860),
  ('math_function_call -> cos_function','math_function_call',1,'p_math_function_call','notal_parser.py',861),
  ('math_function_call -> tan_function','math_function_call',1,'p_math_function_call','notal_parser.py',862),
  ('math_function_call -> succ_function','math_function_call',1,'p_math_function_call','notal_parser.py',863),
  ('math_function_call -> pred_function','math_function_call',1,'p_math_function_call','notal_parser.py',864),
  ('abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET','abs_function',4,'p_abs_function','notal_parser.py',869),
  ('sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET','sin_function',4,'p_sin_function','notal_parser.py',874),
  ('cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET','cos_function',4,'p_cos_function','notal_parser.py',879),
  ('tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET','tan_function',4,'p_tan_function','notal_parser.py',884),
  ('succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET','succ_function',4,'p_succ_function','notal_parser.py',889),
  ('pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET','pred_function',4,'p_pred_function','notal_parser.py',894),
  ('string_function_call -> awal_function','string_function_call',1,'p_string_function_call','notal_parser.py',899),
  ('string_function_call -> akhir_function','string_function_call',1,'p_string_function_call','notal_parser.py',900),
  ('string_function_call -> firstchar_function','string_function_call',1,'p_string_function_call','notal_parser.py',901),
  ('string_function_call -> lastchar_function','string_function_call',1,'p_string_function_call','notal_parser.py',902),
  ('string_function_call -> long_function','string_function_call',1,'p_string_function_call','notal_parser.py',903),
  ('string_function_call -> iskosong_function','string_function_call',1,'p_string_function_call','notal_parser.py',904),
  ('awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET','awal_function',4,'p_awal_function','notal_parser.py',909),
  ('akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET','akhir_function',4,'p_akhir_function','notal_parser.py',914),
  ('firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET','firstchar_function',4,'p_firstchar_function','notal_parser.py',919),
  ('lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET','lastchar_function',4,'p_lastchar_function','notal_parser.py',924),
  ('long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET','long_function',4,'p_long_function','notal_parser.py',929),
  ('iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET','iskosong_function',4,'p_iskosong_function','notal_parser.py',934),
  ('converter_function_call -> integer_to_real','converter_function_call',1,'p_converter_function_call','notal_parser.py',939),
  ('converter_function_call -> real_to_integer','converter_function_call',1,'p_converter_function_call','notal_parser.py',940),
  ('integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET','integer_to_real',4,'p_integer_to_real','notal_parser.py',945),
  ('real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET','real_to_integer',4,'p_real_to_integer','notal_parser.py',950),
  ('empty -> <empty>','empty',0,'p_empty','notal_parser.py',960),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','notal_parser.py',965),
]
