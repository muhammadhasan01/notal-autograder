
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'fileCOMMENT DEDENT IDENTIFIER INDENT L_BOOLEAN_FALSE L_BOOLEAN_TRUE L_CHARACTER L_INTEGER_NUMBER L_NIL L_REAL_NUMBER L_STRING RW_ABS RW_AKHIR RW_ALGORITMA RW_AND RW_ARRAY RW_AWAL RW_BOOLEAN RW_CHARACTER RW_CLOSE RW_CONSTANT RW_COS RW_DEPEND RW_DIV RW_DO RW_ELSE RW_EQ RW_FIRSTCHAR RW_FUNCTION RW_IF RW_INPUT RW_INTEGER RW_INTEGERTOREAL RW_ISKOSONG RW_ITERATE RW_JUDUL RW_KAMUS RW_LASTCHAR RW_LOKAL RW_LONG RW_MOD RW_MODUL RW_NEQ RW_NOT RW_OF RW_ON RW_OPEN RW_OR RW_OUTPUT RW_PRED RW_PROCEDURE RW_PROGRAM RW_READ RW_REAL RW_REALTOINTEGER RW_REPEAT RW_REWRITE RW_SEQFILE RW_SIN RW_STOP RW_STRING RW_SUCC RW_TAN RW_THEN RW_TIMES RW_TRAVERSAL RW_TYPE RW_UNTIL RW_WHILE RW_XOR S_ASSIGNMENT S_COLON S_COMMA S_CONCATENATION S_DIVIDE S_DOT S_DOUBLE_QUOTE S_ELEMENT_OF S_EQUAL S_GREATER_THAN S_GREATER_THAN_EQUAL S_LEFT_BRACKET S_LEFT_CURLY_BRACKET S_LEFT_SQUARE_BRACKET S_LESS_THAN S_LESS_THAN_EQUAL S_MINUS S_NOT_EQUAL S_PLUS S_POWER S_RETURN S_RIGHT_BRACKET S_RIGHT_CURLY_BRACKET S_RIGHT_SQUARE_BRACKET S_SEMI_COLON S_SINGLE_QUOTE S_TIMES S_UP_TO WHITESPACEfile :   program\n        program  :   RW_PROGRAM identifier block\n                    |   function_declaration  block\n                    |   procedure_declaration block\n        identifier_list  : identifier_list S_COMMA identifier\n                            | identifier\n        kamus_declaration    :     RW_KAMUS\n                                |   RW_KAMUS RW_LOKAL\n        block    :   kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block\n                    | kamus_declaration algorithm_block procedure_and_function_implementation_block\n        constant_declaration_block  : empty\n                    | constant_declaration\n        type_declaration_block  :   empty\n                    |   type_declaration\n        variable_declaration_block  :   empty\n                    |   variable_declaration\n        procedure_and_function_declaration_block  :   DEDENT\n                    |   procedure_and_function_declaration DEDENT\n        algorithm_block  :   RW_ALGORITMA statement_part\n        procedure_and_function_implementation_block  :   empty\n                    |   subprogram_implementation_list\n        subprogram_implementation_list : subprogram_implementation_list subprogram_implementation\n                                        | subprogram_implementation\n        subprogram_implementation : procedure_implementation\n                                     | function_implementation\n        procedure_implementation :   procedure_declaration   procedure_implementation_block\n                                    |   procedure_declaration\n        procedure_implementation_block   :   kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block\n                                            | kamus_declaration algorithm_block\n        function_implementation  :   function_declaration function_implementation_block\n                                    |   function_declaration\n        function_implementation_block    :   kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block\n                                            | kamus_declaration algorithm_block\n        type_denoter :   ordinal_type\n                        |   structured_type\n                        |   RW_INTEGER\n                        |   RW_REAL\n                        |   RW_STRING\n                        |   RW_CHARACTER\n                        |   RW_BOOLEAN\n        ordinal_type :   enumerated_type\n                        |   subrange_type\n                        |   identifier\n        enumerated_type  :   S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET\n        subrange_type    :  subrange_type_option\n        subrange_type_option    :   subrange_option S_UP_TO subrange_option\n        subrange_option  :   identifier\n                            |   constant\n                            |   function_designator\n        structured_type  :   array_type\n        array_type   :   RW_ARRAY array_index RW_OF component_type\n        array_index  :   S_LEFT_SQUARE_BRACKET index_list S_RIGHT_SQUARE_BRACKET\n        index_list   :   index_list S_COMMA index_type\n                        |   index_type\n        index_type   :   ordinal_type\n        component_type   :   type_denotervariable_declaration :  variable_declaration variable_sub_declaration\n                                |   variable_sub_declaration\n        variable_sub_declaration :   identifier_list S_COLON type_denoter\n        variable_declaration_comma   :   variable_sub_declaration\n                                        |   variable_sub_declaration S_COMMA variable_declaration_comma\n        constant_declaration :   constant_declaration constant_sub_declaration\n                                |   constant_sub_declaration\n        constant_sub_declaration :   RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant\n        type_declaration :   type_declaration type_sub_declaration\n                            |   type_sub_declaration\n        type_sub_declaration :   RW_TYPE identifier S_COLON type_variety\n        type_variety :   type_denoter\n                        |   type_user_defined\n        type_user_defined    :   S_LESS_THAN variable_declaration_comma S_GREATER_THAN\n        procedure_and_function_declaration   :   procedure_and_function_declaration procedure_and_function_sub_declaration\n                                                |   procedure_and_function_sub_declaration\n        procedure_and_function_sub_declaration   :   procedure_declaration\n                                                    |   function_declaration\n        procedure_declaration    :  procedure_identifier formal_parameter_list\n        procedure_identifier :   RW_PROCEDURE identifier\n        formal_parameter_list    :   S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET\n        formal_parameter_section_list    :   empty\n                                            |   formal_parameter_section\n        formal_parameter_section :   formal_parameter_section S_SEMI_COLON parameter_specification\n                                    |   formal_parameter_section S_COMMA parameter_specification\n                                    |   parameter_specification\n        parameter_specification  :   procedure_parameter_type  variable_sub_declaration\n        procedure_parameter_type :   RW_INPUT\n                                    |   RW_OUTPUT\n                                    |   RW_INPUT S_DIVIDE RW_OUTPUT\n        function_declaration :   function_identification function_formal_parameter_list function_return_type\n                                |   function_identification function_return_type\n        function_identification  :   RW_FUNCTION identifier\n        function_return_type :   S_RETURN type_denoter\n        function_formal_parameter_list   :   S_LEFT_BRACKET function_parameter_list_option S_RIGHT_BRACKET\n        function_actual_parameter_list   :   S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET\n        function_parameter_list_option   :   function_parameter_list\n                                            |   empty\n        function_parameter_list  :   function_parameter_list S_SEMI_COLON function_parameter_declaration\n                                    |   function_parameter_list S_COMMA function_parameter_declaration\n                                    |   function_parameter_declaration\n        function_parameter_declaration   :   variable_sub_declaration\n        statement_part   :   compound_statement\n        compound_statement   :   INDENT  statement_sequence  DEDENT\n        statement_sequence   :   statement_sequence S_SEMI_COLON statement\n                                |   statement_sequence statement\n                                |   statement\n        statement    : assignment_statement\n                        | procedure_statement\n                        | function_returned_statement\n                        |   if_statement\n                        | depend_on_statement\n                        | while_statement\n                        | traversal_statement\n                        |   repeat_statement\n                        |   iterate_stop_statement\n        assignment_statement :   variable_access S_ASSIGNMENT expression\n        procedure_statement :   builtin_procedure_statements\n                                |   identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET\n                                |   identifier\n        actual_parameter_list    :   actual_parameter_list S_COMMA actual_parameter\n                                    |   actual_parameter\n        actual_parameter :   expression\n        builtin_procedure_statements     :   input_statement\n                                            |   output_statement\n        input_statement  :   RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET\n        input_statement_parameter_list   :   input_statement_parameter_list S_COMMA input_statement_parameter\n                                            |   input_statement_parameter\n        input_statement_parameter    :   variable_access\n        output_statement  :   RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET\n        output_statement_parameter_list  :   output_statement_parameter_list S_COMMA output_statement_parameter\n                                            |   output_statement_parameter\n        output_statement_parameter   :   expression\n        function_returned_statement  :   S_RETURN expression\n        depend_on_statement  :   RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT\n        depend_on_action_list    :   depend_on_action_list   depend_on_action\n                                            |   depend_on_action\n        depend_on_action :   expression S_COLON INDENT statement_sequence DEDENT\n        if_statement : RW_IF boolean_expression RW_THEN compound_statement\n                        | RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement\n        boolean_expression   :   expression\n        repeat_statement :   repeat_until_statement\n                            |   repeat_times_statement\n        repeat_until_statement   :   RW_REPEAT compound_statement RW_UNTIL boolean_expression\n        repeat_times_statement   :   RW_REPEAT variable_access RW_TIMES compound_statement\n                                    |   RW_REPEAT integer_constant RW_TIMES compound_statement\n                                    |   RW_REPEAT function_designator RW_TIMES compound_statement\n        while_statement   :   RW_WHILE boolean_expression RW_DO compound_statement\n        iterate_stop_statement   :   RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement\n        traversal_statement  :   control_variable RW_TRAVERSAL traversal_range_value compound_statement\n        traversal_range_value    :   S_LEFT_SQUARE_BRACKET subrange_type S_RIGHT_SQUARE_BRACKET\n        control_variable :   identifier\n        unsigned_constant :  non_string_constant\n                            |   string_char_constant\n                            |   boolean_constant\n                            |   nil_constant\n        constant :   string_char_constant\n                    |   non_string_constant\n                    |   sign non_string_constant\n                    |   boolean_constant\n                    |   nil_constant\n        sign     :   S_PLUS\n                    |   S_MINUS\n        boolean_constant :   L_BOOLEAN_TRUE\n                            |   L_BOOLEAN_FALSE\n        non_string_constant  :    integer_constant\n                                |    real_constant\n        integer_constant :   L_INTEGER_NUMBER\n        real_constant    :   L_REAL_NUMBER\n        string_char_constant :   string_constant\n                                |   char_constant\n        string_constant    :   L_STRING\n        char_constant    :   L_CHARACTER\n        nil_constant :   L_NIL\n        variable_access : identifier\n                            | indexed_variable\n                            | field_designator\n        indexed_variable :   variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET\n        index_expression_list    :   index_expression_list S_COMMA expression\n                                    |   expression\n        field_designator :   variable_access S_DOT identifier\n        expression : expression relational_op additive_expression\n                    |   additive_expression\n        relational_op : S_EQUAL\n                | S_NOT_EQUAL\n                | S_LESS_THAN_EQUAL\n                | S_GREATER_THAN_EQUAL\n                | S_LESS_THAN\n                | S_GREATER_THAN\n                | S_ELEMENT_OF\n                | RW_EQ\n                | RW_NEQ\n        additive_expression : additive_expression additive_op multiplicative_expression\n                            |   multiplicative_expression\n        additive_op : S_PLUS\n                    | S_MINUS\n                    | RW_OR\n                    | RW_XOR\n        multiplicative_expression : multiplicative_expression multiplicative_op unary_expression\n                                    |   unary_expression\n        multiplicative_op : S_TIMES\n                            | S_DIVIDE\n                            | RW_DIV\n                            | RW_MOD\n                            | RW_AND\n        unary_expression : unary_op unary_expression\n                        |   exponentiation_expression\n        exponentiation_expression    :   primary_expression\n                                        |   primary_expression S_POWER exponentiation_expression\n        unary_op : S_PLUS\n            |   S_MINUS\n            |   RW_NOT\n        primary_expression : variable_access\n                            | unsigned_constant\n                            | S_LEFT_BRACKET expression S_RIGHT_BRACKET\n                            | set_constructor\n                            | function_designator\n        set_constructor  :   S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET\n                            |   S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET\n        member_designator_list   :   member_designator_list  S_COMMA member_designator\n                                    |   member_designator\n        member_designator    :   member_designator S_UP_TO   expression\n                                |   expression\n        function_designator  :    user_defined_function_call\n                                |   math_function_call\n                                |   string_function_call\n                                |   converter_function_call\n        user_defined_function_call    :   identifier function_actual_parameter_list\n        math_function_call   :   abs_function\n                                |   sin_function\n                                |   cos_function\n                                |   tan_function\n                                |   succ_function\n                                |   pred_function\n        abs_function : RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        sin_function :   RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        cos_function :   RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        tan_function :   RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        succ_function    :   RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        pred_function    :   RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        string_function_call :   awal_function\n                                |   akhir_function\n                                |   firstchar_function\n                                |   lastchar_function\n                                |   long_function\n                                |   iskosong_function\n        awal_function    :   RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        akhir_function    :   RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        firstchar_function    :   RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        lastchar_function    :   RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        long_function    :   RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        iskosong_function    :   RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        converter_function_call  :   integer_to_real\n                                    |   real_to_integer\n        integer_to_real  :   RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        real_to_integer  :   RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET\n        empty    :\n        identifier   :   IDENTIFIER\n        '
    
_lr_action_items = {'RW_PROGRAM':([0,],[3,]),'RW_FUNCTION':([0,11,17,20,25,26,29,37,38,39,40,41,42,43,44,45,46,47,48,50,53,54,55,56,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,112,113,114,115,119,120,121,122,123,124,125,126,133,139,154,159,160,161,162,164,166,167,169,202,227,232,233,251,252,253,254,255,259,261,262,283,312,313,316,317,318,319,320,321,322,323,324,325,326,327,328,329,332,333,334,335,336,374,376,377,378,379,406,416,423,424,],[8,-254,-88,-75,-253,8,-87,-90,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-45,-48,-49,-153,-154,-156,-157,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-253,-11,-12,-63,8,-23,-24,-25,-27,-31,-19,-99,-224,-155,-77,-253,-13,-14,-66,-62,-22,-26,-30,-59,-44,-46,-47,8,-15,-16,-58,-65,-29,-33,-100,-92,-51,-56,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,8,-72,-73,-74,-57,8,-71,-67,-68,-69,-64,-70,-28,-32,]),'RW_PROCEDURE':([0,11,17,20,25,26,29,37,38,39,40,41,42,43,44,45,46,47,48,50,53,54,55,56,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,112,113,114,115,119,120,121,122,123,124,125,126,133,139,154,159,160,161,162,164,166,167,169,202,227,232,233,251,252,253,254,255,259,261,262,283,312,313,316,317,318,319,320,321,322,323,324,325,326,327,328,329,332,333,334,335,336,374,376,377,378,379,406,416,423,424,],[9,-254,-88,-75,-253,9,-87,-90,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-45,-48,-49,-153,-154,-156,-157,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-253,-11,-12,-63,9,-23,-24,-25,-27,-31,-19,-99,-224,-155,-77,-253,-13,-14,-66,-62,-22,-26,-30,-59,-44,-46,-47,9,-15,-16,-58,-65,-29,-33,-100,-92,-51,-56,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,9,-72,-73,-74,-57,9,-71,-67,-68,-69,-64,-70,-28,-32,]),'$end':([1,2,11,12,15,17,20,24,26,29,37,38,39,40,41,42,43,44,45,46,47,48,50,53,54,55,56,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,117,118,119,120,121,122,123,124,125,126,133,139,154,166,167,169,227,232,233,259,261,262,283,312,313,316,317,318,319,320,321,322,323,324,325,326,327,328,329,374,403,423,424,],[0,-1,-254,-3,-4,-88,-75,-2,-253,-87,-90,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-45,-48,-49,-153,-154,-156,-157,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-10,-20,-21,-23,-24,-25,-27,-31,-19,-99,-224,-155,-77,-22,-26,-30,-44,-46,-47,-29,-33,-100,-92,-51,-56,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-253,-9,-28,-32,]),'IDENTIFIER':([3,8,9,11,18,19,25,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,55,56,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,109,110,111,112,113,114,115,116,127,129,130,131,132,133,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,159,160,161,162,163,164,171,172,173,174,175,176,177,178,179,180,181,183,184,185,186,188,190,191,193,194,195,196,197,202,204,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,232,233,250,253,254,255,257,258,260,262,263,264,265,266,267,268,269,271,280,281,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,309,312,313,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,336,337,339,340,341,342,345,348,351,352,353,364,366,367,368,369,370,371,372,377,378,379,380,382,383,384,385,386,387,389,390,393,394,395,396,397,398,399,400,406,413,416,417,420,421,425,426,428,429,431,432,433,],[11,11,11,-254,11,11,-253,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,11,-45,-48,-49,-153,-154,-156,-157,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,11,-84,-85,-253,-11,-12,-63,11,11,11,11,11,11,-224,11,11,11,-155,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-13,-14,-66,11,-62,11,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-114,-116,11,11,11,-138,-139,-172,-173,-120,-121,11,-59,11,-179,-190,-196,11,-203,-206,-207,-208,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,11,-44,11,-46,-47,-86,11,-58,-65,11,-253,-253,-100,11,-102,11,11,11,11,-130,-137,11,11,-92,11,11,-180,-181,-182,-183,-184,-185,-186,-187,-188,11,-191,-192,-193,-194,11,-197,-198,-199,-200,-201,-202,11,-215,-51,-56,11,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-57,11,-253,-253,-101,-113,-177,11,11,11,11,-211,-178,-189,-195,-205,-214,11,11,-67,-68,-69,11,11,11,-174,11,-115,-135,-144,-146,-140,-141,-142,-143,-122,11,-126,11,-64,-145,-70,11,-136,11,11,-133,-131,-132,11,11,-134,]),'RW_KAMUS':([4,5,10,11,17,20,29,37,38,39,40,41,42,43,44,45,46,47,48,50,53,54,55,56,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,123,124,133,139,154,227,232,233,283,312,313,316,317,318,319,320,321,322,323,324,325,326,327,328,329,],[14,14,14,-254,-88,-75,-87,-90,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-45,-48,-49,-153,-154,-156,-157,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,14,14,-224,-155,-77,-44,-46,-47,-92,-51,-56,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,]),'S_LEFT_BRACKET':([6,7,11,19,22,23,47,91,92,93,94,95,96,97,98,99,100,101,102,103,104,131,134,137,140,141,142,143,144,145,146,147,148,149,150,151,152,153,184,185,186,188,198,199,204,211,213,214,215,221,226,228,233,257,265,266,268,272,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,352,353,371,372,385,400,421,425,426,429,433,],[18,21,-254,49,-89,-76,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,49,204,49,204,204,204,204,204,204,204,204,204,204,204,204,204,204,268,204,204,204,280,281,204,204,-206,-207,-208,134,204,49,134,49,204,204,204,348,204,204,204,-180,-181,-182,-183,-184,-185,-186,-187,-188,204,-191,-192,-193,-194,204,-197,-198,-199,-200,-201,204,49,49,204,204,204,204,204,204,204,204,-133,-132,-134,]),'S_RETURN':([6,11,16,22,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,127,128,133,171,172,173,174,175,176,177,178,179,180,181,183,184,190,191,193,194,195,196,208,209,210,212,216,217,218,219,220,221,222,223,224,225,262,263,264,269,271,283,306,309,316,317,318,319,320,321,322,323,324,325,326,327,328,329,341,342,345,364,366,367,368,369,370,384,386,387,389,390,393,394,395,396,397,399,413,420,428,431,432,],[19,-254,19,-89,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,185,-91,-224,185,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-114,-116,-138,-139,-172,-173,-120,-121,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-100,185,-102,-130,-137,-92,-202,-215,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-101,-113,-177,-211,-178,-189,-195,-205,-214,-174,-115,-135,-144,-146,-140,-141,-142,-143,-122,-126,-145,-136,-131,185,185,]),'S_COLON':([11,35,36,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,165,193,194,203,208,209,210,212,216,217,218,219,220,221,222,223,224,225,256,283,306,309,316,317,318,319,320,321,322,323,324,325,326,327,328,329,345,364,366,367,368,369,370,384,427,],[-254,131,-6,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,257,-172,-173,-5,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,337,-92,-202,-215,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-177,-211,-178,-189,-195,-205,-214,-174,430,]),'S_COMMA':([11,31,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,50,53,54,55,56,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,107,108,133,135,139,157,193,194,200,201,202,203,205,206,207,208,209,210,212,216,217,218,219,220,221,222,223,224,225,227,229,230,231,232,233,248,249,283,306,308,309,310,311,312,313,316,317,318,319,320,321,322,323,324,325,326,327,328,329,343,344,345,346,357,358,359,360,361,362,363,364,365,366,367,368,369,370,373,384,388,401,402,405,409,414,415,],[-254,130,-97,-98,132,-6,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-45,-48,-49,-153,-154,-156,-157,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,156,-82,-224,132,-155,-83,-172,-173,-95,-96,-59,-5,284,-118,-119,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-44,315,-54,-55,-46,-47,-80,-81,-92,-202,371,-215,-217,-219,-51,-56,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,385,-176,-177,284,398,-124,-125,-171,400,-128,-129,-211,-117,-178,-189,-195,-205,-214,-53,-174,398,-216,-218,417,-175,-123,-127,]),'DEDENT':([11,17,20,25,29,37,38,39,40,41,42,43,44,45,46,47,48,50,53,54,55,56,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,112,113,114,115,133,139,154,159,160,161,162,164,171,172,173,174,175,176,177,178,179,180,181,183,184,190,191,193,194,195,196,202,208,209,210,212,216,217,218,219,220,221,222,223,224,225,227,232,233,251,252,253,254,255,258,260,262,264,269,271,283,306,309,312,313,316,317,318,319,320,321,322,323,324,325,326,327,328,329,332,333,334,335,336,339,340,341,342,345,364,366,367,368,369,370,376,377,378,379,382,383,384,386,387,389,390,393,394,395,396,397,399,406,407,408,413,416,420,425,426,428,429,432,433,],[-254,-88,-75,-253,-87,-90,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-45,-48,-49,-153,-154,-156,-157,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-253,-11,-12,-63,-224,-155,-77,-253,-13,-14,-66,-62,262,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-114,-116,-138,-139,-172,-173,-120,-121,-59,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-44,-46,-47,331,-15,-16,-58,-65,-253,-253,-100,-102,-130,-137,-92,-202,-215,-51,-56,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,375,-72,-73,-74,-57,-253,-253,-101,-113,-177,-211,-178,-189,-195,-205,-214,-71,-67,-68,-69,-253,-253,-174,-115,-135,-144,-146,-140,-141,-142,-143,-122,-126,-64,418,419,-145,-70,-136,428,-133,-131,-132,433,-134,]),'S_UP_TO':([11,47,52,53,54,55,56,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,139,193,194,208,209,210,212,216,217,218,219,220,221,222,223,224,225,233,283,306,309,310,311,316,317,318,319,320,321,322,323,324,325,326,327,328,329,345,364,366,367,368,369,370,384,401,402,],[-254,-47,138,-48,-49,-153,-154,-156,-157,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,-155,-172,-173,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-47,-92,-202,-215,372,-219,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-177,-211,-178,-189,-195,-205,-214,-174,372,-218,]),'S_RIGHT_BRACKET':([11,18,21,30,31,32,33,34,36,38,39,40,41,42,43,44,45,46,47,48,50,53,54,55,56,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,105,106,107,108,133,135,139,157,193,194,200,201,202,203,205,206,207,208,209,210,212,216,217,218,219,220,221,222,223,224,225,227,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,282,283,306,309,312,313,316,317,318,319,320,321,322,323,324,325,326,327,328,329,345,346,357,358,359,360,361,362,363,364,365,366,367,368,369,370,384,388,414,415,],[-254,-253,-253,128,-93,-94,-97,-98,-6,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-45,-48,-49,-153,-154,-156,-157,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,154,-78,-79,-82,-224,227,-155,-83,-172,-173,-95,-96,-59,-5,283,-118,-119,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-44,-46,-47,316,317,318,319,320,321,322,323,324,325,326,327,328,329,-80,-81,364,-92,-202,-215,-51,-56,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-177,386,397,-124,-125,-171,399,-128,-129,-211,-117,-178,-189,-195,-205,-214,-174,411,-123,-127,]),'S_SEMI_COLON':([11,31,33,34,38,39,40,41,42,43,44,45,46,47,48,50,53,54,55,56,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,107,108,133,139,157,171,172,173,174,175,176,177,178,179,180,181,183,184,190,191,193,194,195,196,200,201,202,208,209,210,212,216,217,218,219,220,221,222,223,224,225,227,232,233,248,249,262,264,269,271,283,306,309,312,313,316,317,318,319,320,321,322,323,324,325,326,327,328,329,341,342,345,364,366,367,368,369,370,384,386,387,389,390,393,394,395,396,397,399,413,420,428,432,],[-254,129,-97,-98,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-45,-48,-49,-153,-154,-156,-157,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,155,-82,-224,-155,-83,263,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-114,-116,-138,-139,-172,-173,-120,-121,-95,-96,-59,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-44,-46,-47,-80,-81,-100,-102,-130,-137,-92,-202,-215,-51,-56,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-101,-113,-177,-211,-178,-189,-195,-205,-214,-174,-115,-135,-144,-146,-140,-141,-142,-143,-122,-126,-145,-136,-131,263,]),'RW_IF':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,127,133,171,172,173,174,175,176,177,178,179,180,181,183,184,190,191,193,194,195,196,208,209,210,212,216,217,218,219,220,221,222,223,224,225,262,263,264,269,271,283,306,309,316,317,318,319,320,321,322,323,324,325,326,327,328,329,341,342,345,364,366,367,368,369,370,384,386,387,389,390,393,394,395,396,397,399,413,420,428,431,432,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,186,-224,186,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-114,-116,-138,-139,-172,-173,-120,-121,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-100,186,-102,-130,-137,-92,-202,-215,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-101,-113,-177,-211,-178,-189,-195,-205,-214,-174,-115,-135,-144,-146,-140,-141,-142,-143,-122,-126,-145,-136,-131,186,186,]),'RW_DEPEND':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,127,133,171,172,173,174,175,176,177,178,179,180,181,183,184,190,191,193,194,195,196,208,209,210,212,216,217,218,219,220,221,222,223,224,225,262,263,264,269,271,283,306,309,316,317,318,319,320,321,322,323,324,325,326,327,328,329,341,342,345,364,366,367,368,369,370,384,386,387,389,390,393,394,395,396,397,399,413,420,428,431,432,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,187,-224,187,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-114,-116,-138,-139,-172,-173,-120,-121,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-100,187,-102,-130,-137,-92,-202,-215,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-101,-113,-177,-211,-178,-189,-195,-205,-214,-174,-115,-135,-144,-146,-140,-141,-142,-143,-122,-126,-145,-136,-131,187,187,]),'RW_WHILE':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,127,133,171,172,173,174,175,176,177,178,179,180,181,183,184,190,191,193,194,195,196,208,209,210,212,216,217,218,219,220,221,222,223,224,225,262,263,264,269,271,283,306,309,316,317,318,319,320,321,322,323,324,325,326,327,328,329,341,342,345,364,366,367,368,369,370,384,386,387,389,390,393,394,395,396,397,399,413,420,428,431,432,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,188,-224,188,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-114,-116,-138,-139,-172,-173,-120,-121,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-100,188,-102,-130,-137,-92,-202,-215,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-101,-113,-177,-211,-178,-189,-195,-205,-214,-174,-115,-135,-144,-146,-140,-141,-142,-143,-122,-126,-145,-136,-131,188,188,]),'RW_ITERATE':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,127,133,171,172,173,174,175,176,177,178,179,180,181,183,184,190,191,193,194,195,196,208,209,210,212,216,217,218,219,220,221,222,223,224,225,262,263,264,269,271,283,306,309,316,317,318,319,320,321,322,323,324,325,326,327,328,329,341,342,345,364,366,367,368,369,370,384,386,387,389,390,393,394,395,396,397,399,413,420,428,431,432,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,192,-224,192,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-114,-116,-138,-139,-172,-173,-120,-121,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-100,192,-102,-130,-137,-92,-202,-215,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-101,-113,-177,-211,-178,-189,-195,-205,-214,-174,-115,-135,-144,-146,-140,-141,-142,-143,-122,-126,-145,-136,-131,192,192,]),'RW_REPEAT':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,127,133,171,172,173,174,175,176,177,178,179,180,181,183,184,190,191,193,194,195,196,208,209,210,212,216,217,218,219,220,221,222,223,224,225,262,263,264,269,271,283,306,309,316,317,318,319,320,321,322,323,324,325,326,327,328,329,341,342,345,364,366,367,368,369,370,384,386,387,389,390,393,394,395,396,397,399,413,420,428,431,432,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,197,-224,197,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-114,-116,-138,-139,-172,-173,-120,-121,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-100,197,-102,-130,-137,-92,-202,-215,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-101,-113,-177,-211,-178,-189,-195,-205,-214,-174,-115,-135,-144,-146,-140,-141,-142,-143,-122,-126,-145,-136,-131,197,197,]),'RW_INPUT':([11,21,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,127,133,155,156,171,172,173,174,175,176,177,178,179,180,181,183,184,190,191,193,194,195,196,208,209,210,212,216,217,218,219,220,221,222,223,224,225,262,263,264,269,271,283,306,309,316,317,318,319,320,321,322,323,324,325,326,327,328,329,341,342,345,364,366,367,368,369,370,384,386,387,389,390,393,394,395,396,397,399,413,420,428,431,432,],[-254,110,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,198,-224,110,110,198,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-114,-116,-138,-139,-172,-173,-120,-121,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-100,198,-102,-130,-137,-92,-202,-215,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-101,-113,-177,-211,-178,-189,-195,-205,-214,-174,-115,-135,-144,-146,-140,-141,-142,-143,-122,-126,-145,-136,-131,198,198,]),'RW_OUTPUT':([11,21,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,127,133,155,156,158,171,172,173,174,175,176,177,178,179,180,181,183,184,190,191,193,194,195,196,208,209,210,212,216,217,218,219,220,221,222,223,224,225,262,263,264,269,271,283,306,309,316,317,318,319,320,321,322,323,324,325,326,327,328,329,341,342,345,364,366,367,368,369,370,384,386,387,389,390,393,394,395,396,397,399,413,420,428,431,432,],[-254,111,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,199,-224,111,111,250,199,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-114,-116,-138,-139,-172,-173,-120,-121,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-100,199,-102,-130,-137,-92,-202,-215,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-101,-113,-177,-211,-178,-189,-195,-205,-214,-174,-115,-135,-144,-146,-140,-141,-142,-143,-122,-126,-145,-136,-131,199,199,]),'S_ASSIGNMENT':([11,182,184,193,194,345,384,],[-254,265,-171,-172,-173,-177,-174,]),'S_LEFT_SQUARE_BRACKET':([11,51,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,182,184,185,186,188,193,194,204,211,213,214,215,217,221,226,265,266,268,274,277,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,345,352,353,359,360,371,372,384,385,400,421,425,426,429,433,],[-254,137,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,266,-171,226,226,226,-172,-173,226,226,-206,-207,-208,266,-171,226,226,226,226,351,266,226,226,226,-180,-181,-182,-183,-184,-185,-186,-187,-188,226,-191,-192,-193,-194,226,-197,-198,-199,-200,-201,226,-177,226,226,266,-171,226,226,-174,226,226,226,226,-133,-132,-134,]),'S_DOT':([11,182,184,193,194,217,221,277,345,359,360,384,],[-254,267,-171,-172,-173,267,-171,267,-177,267,-171,-174,]),'RW_TRAVERSAL':([11,184,189,],[-254,-148,274,]),'S_GREATER_THAN':([11,38,39,40,41,42,43,44,45,46,47,48,50,53,54,55,56,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,139,193,194,202,207,208,209,210,212,216,217,218,219,220,221,222,223,224,225,227,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,269,271,282,283,306,309,311,312,313,316,317,318,319,320,321,322,323,324,325,326,327,328,329,342,344,345,363,364,366,367,368,369,370,384,402,404,405,409,422,427,],[-254,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-45,-48,-49,-153,-154,-156,-157,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,-155,-172,-173,-59,291,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-44,-46,-47,291,291,291,291,291,291,291,291,291,291,291,291,291,291,291,291,291,-92,-202,-215,291,-51,-56,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,291,291,-177,291,-211,-178,-189,-195,-205,-214,-174,291,416,-60,291,-61,291,]),'S_POWER':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,193,194,216,217,218,219,220,221,222,223,224,225,283,309,316,317,318,319,320,321,322,323,324,325,326,327,328,329,345,364,370,384,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,-172,-173,307,-209,-210,-212,-213,-171,-149,-150,-151,-152,-92,-215,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-177,-211,-214,-174,]),'S_TIMES':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,193,194,209,210,212,216,217,218,219,220,221,222,223,224,225,283,306,309,316,317,318,319,320,321,322,323,324,325,326,327,328,329,345,364,367,368,369,370,384,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,-172,-173,301,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-92,-202,-215,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-177,-211,301,-195,-205,-214,-174,]),'S_DIVIDE':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,110,133,193,194,209,210,212,216,217,218,219,220,221,222,223,224,225,283,306,309,316,317,318,319,320,321,322,323,324,325,326,327,328,329,345,364,367,368,369,370,384,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,158,-224,-172,-173,302,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-92,-202,-215,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-177,-211,302,-195,-205,-214,-174,]),'RW_DIV':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,193,194,209,210,212,216,217,218,219,220,221,222,223,224,225,283,306,309,316,317,318,319,320,321,322,323,324,325,326,327,328,329,345,364,367,368,369,370,384,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,-172,-173,303,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-92,-202,-215,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-177,-211,303,-195,-205,-214,-174,]),'RW_MOD':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,193,194,209,210,212,216,217,218,219,220,221,222,223,224,225,283,306,309,316,317,318,319,320,321,322,323,324,325,326,327,328,329,345,364,367,368,369,370,384,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,-172,-173,304,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-92,-202,-215,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-177,-211,304,-195,-205,-214,-174,]),'RW_AND':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,193,194,209,210,212,216,217,218,219,220,221,222,223,224,225,283,306,309,316,317,318,319,320,321,322,323,324,325,326,327,328,329,345,364,367,368,369,370,384,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,-172,-173,305,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-92,-202,-215,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-177,-211,305,-195,-205,-214,-174,]),'S_PLUS':([11,19,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,131,133,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,193,194,204,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,228,257,265,266,268,281,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,309,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,337,345,351,352,353,364,366,367,368,369,370,371,372,381,384,385,400,421,425,426,429,433,],[-254,68,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,68,-224,213,68,68,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,-172,-173,213,296,-190,-196,213,-203,-206,-207,-208,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,213,68,68,213,213,213,213,-92,213,213,-180,-181,-182,-183,-184,-185,-186,-187,-188,213,-191,-192,-193,-194,213,-197,-198,-199,-200,-201,-202,-215,68,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,68,-177,68,213,213,-211,296,-189,-195,-205,-214,213,213,68,-174,213,213,213,213,-133,-132,-134,]),'S_MINUS':([11,19,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,131,133,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,193,194,204,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,228,257,265,266,268,281,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,309,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,337,345,351,352,353,364,366,367,368,369,370,371,372,381,384,385,400,421,425,426,429,433,],[-254,69,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,69,-224,214,69,69,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,-172,-173,214,297,-190,-196,214,-203,-206,-207,-208,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,214,69,69,214,214,214,214,-92,214,214,-180,-181,-182,-183,-184,-185,-186,-187,-188,214,-191,-192,-193,-194,214,-197,-198,-199,-200,-201,-202,-215,69,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,69,-177,69,214,214,-211,297,-189,-195,-205,-214,214,214,69,-174,214,214,214,214,-133,-132,-134,]),'RW_OR':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,193,194,208,209,210,212,216,217,218,219,220,221,222,223,224,225,283,306,309,316,317,318,319,320,321,322,323,324,325,326,327,328,329,345,364,366,367,368,369,370,384,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,-172,-173,298,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-92,-202,-215,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-177,-211,298,-189,-195,-205,-214,-174,]),'RW_XOR':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,193,194,208,209,210,212,216,217,218,219,220,221,222,223,224,225,283,306,309,316,317,318,319,320,321,322,323,324,325,326,327,328,329,345,364,366,367,368,369,370,384,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,-172,-173,299,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-92,-202,-215,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-177,-211,299,-189,-195,-205,-214,-174,]),'S_EQUAL':([11,38,39,40,41,42,43,44,45,46,47,48,50,53,54,55,56,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,139,193,194,207,208,209,210,212,216,217,218,219,220,221,222,223,224,225,227,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,269,271,282,283,306,309,311,312,313,316,317,318,319,320,321,322,323,324,325,326,327,328,329,338,342,344,345,363,364,366,367,368,369,370,384,402,409,427,],[-254,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-45,-48,-49,-153,-154,-156,-157,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,-155,-172,-173,286,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-44,-46,-47,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,-92,-202,-215,286,-51,-56,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,381,286,286,-177,286,-211,-178,-189,-195,-205,-214,-174,286,286,286,]),'S_NOT_EQUAL':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,193,194,207,208,209,210,212,216,217,218,219,220,221,222,223,224,225,234,235,236,237,238,239,240,241,242,243,244,245,246,247,269,271,282,283,306,309,311,316,317,318,319,320,321,322,323,324,325,326,327,328,329,342,344,345,363,364,366,367,368,369,370,384,402,409,427,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,-172,-173,287,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,-92,-202,-215,287,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,287,287,-177,287,-211,-178,-189,-195,-205,-214,-174,287,287,287,]),'S_LESS_THAN_EQUAL':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,193,194,207,208,209,210,212,216,217,218,219,220,221,222,223,224,225,234,235,236,237,238,239,240,241,242,243,244,245,246,247,269,271,282,283,306,309,311,316,317,318,319,320,321,322,323,324,325,326,327,328,329,342,344,345,363,364,366,367,368,369,370,384,402,409,427,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,-172,-173,288,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,-92,-202,-215,288,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,288,288,-177,288,-211,-178,-189,-195,-205,-214,-174,288,288,288,]),'S_GREATER_THAN_EQUAL':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,193,194,207,208,209,210,212,216,217,218,219,220,221,222,223,224,225,234,235,236,237,238,239,240,241,242,243,244,245,246,247,269,271,282,283,306,309,311,316,317,318,319,320,321,322,323,324,325,326,327,328,329,342,344,345,363,364,366,367,368,369,370,384,402,409,427,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,-172,-173,289,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,-92,-202,-215,289,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,289,289,-177,289,-211,-178,-189,-195,-205,-214,-174,289,289,289,]),'S_LESS_THAN':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,193,194,207,208,209,210,212,216,217,218,219,220,221,222,223,224,225,234,235,236,237,238,239,240,241,242,243,244,245,246,247,269,271,282,283,306,309,311,316,317,318,319,320,321,322,323,324,325,326,327,328,329,337,342,344,345,363,364,366,367,368,369,370,384,402,409,427,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,-172,-173,290,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,-92,-202,-215,290,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,380,290,290,-177,290,-211,-178,-189,-195,-205,-214,-174,290,290,290,]),'S_ELEMENT_OF':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,193,194,207,208,209,210,212,216,217,218,219,220,221,222,223,224,225,234,235,236,237,238,239,240,241,242,243,244,245,246,247,269,271,282,283,306,309,311,316,317,318,319,320,321,322,323,324,325,326,327,328,329,342,344,345,363,364,366,367,368,369,370,384,402,409,427,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,-172,-173,292,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,-92,-202,-215,292,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,292,292,-177,292,-211,-178,-189,-195,-205,-214,-174,292,292,292,]),'RW_EQ':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,193,194,207,208,209,210,212,216,217,218,219,220,221,222,223,224,225,234,235,236,237,238,239,240,241,242,243,244,245,246,247,269,271,282,283,306,309,311,316,317,318,319,320,321,322,323,324,325,326,327,328,329,342,344,345,363,364,366,367,368,369,370,384,402,409,427,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,-172,-173,293,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,-92,-202,-215,293,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,293,293,-177,293,-211,-178,-189,-195,-205,-214,-174,293,293,293,]),'RW_NEQ':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,193,194,207,208,209,210,212,216,217,218,219,220,221,222,223,224,225,234,235,236,237,238,239,240,241,242,243,244,245,246,247,269,271,282,283,306,309,311,316,317,318,319,320,321,322,323,324,325,326,327,328,329,342,344,345,363,364,366,367,368,369,370,384,402,409,427,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,-172,-173,294,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,-92,-202,-215,294,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,294,294,-177,294,-211,-178,-189,-195,-205,-214,-174,294,294,294,]),'S_RIGHT_SQUARE_BRACKET':([11,45,46,47,50,53,54,55,56,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,139,193,194,208,209,210,212,216,217,218,219,220,221,222,223,224,225,226,227,229,230,231,232,233,283,306,308,309,310,311,316,317,318,319,320,321,322,323,324,325,326,327,328,329,343,344,345,364,366,367,368,369,370,373,384,391,401,402,409,],[-254,-41,-42,-43,-45,-48,-49,-153,-154,-156,-157,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,-155,-172,-173,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,309,-44,314,-54,-55,-46,-47,-92,-202,370,-215,-217,-219,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,384,-176,-177,-211,-178,-189,-195,-205,-214,-53,-174,412,-216,-218,-175,]),'RW_TYPE':([11,25,38,39,40,41,42,43,44,45,46,47,48,50,53,54,55,56,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,112,113,114,115,133,139,161,162,164,227,232,233,255,258,260,283,312,313,316,317,318,319,320,321,322,323,324,325,326,327,328,329,339,340,377,378,379,406,416,],[-254,-253,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-45,-48,-49,-153,-154,-156,-157,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,163,-11,-12,-63,-224,-155,163,-66,-62,-44,-46,-47,-65,-253,-253,-92,-51,-56,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,163,163,-67,-68,-69,-64,-70,]),'RW_THEN':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,193,194,208,209,210,212,216,217,218,219,220,221,222,223,224,225,270,271,283,306,309,316,317,318,319,320,321,322,323,324,325,326,327,328,329,345,364,366,367,368,369,370,384,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,-172,-173,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,347,-137,-92,-202,-215,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-177,-211,-178,-189,-195,-205,-214,-174,]),'RW_DO':([11,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,193,194,208,209,210,212,216,217,218,219,220,221,222,223,224,225,271,273,283,306,309,316,317,318,319,320,321,322,323,324,325,326,327,328,329,345,364,366,367,368,369,370,384,],[-254,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,-172,-173,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-137,349,-92,-202,-215,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-177,-211,-178,-189,-195,-205,-214,-174,]),'RW_TIMES':([11,60,61,62,63,73,74,75,76,77,78,79,80,81,82,83,84,85,86,89,133,193,194,221,277,278,279,283,316,317,318,319,320,321,322,323,324,325,326,327,328,329,345,384,],[-254,-220,-221,-222,-223,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-164,-224,-172,-173,-171,354,355,356,-92,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-177,-174,]),'INDENT':([11,13,14,27,28,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,133,168,170,192,193,194,197,208,209,210,212,216,217,218,219,220,221,222,223,224,225,271,283,306,309,316,317,318,319,320,321,322,323,324,325,326,327,328,329,345,347,349,350,354,355,356,364,366,367,368,369,370,384,392,410,411,412,430,],[-254,25,-7,127,-8,-220,-221,-222,-223,-166,-167,-162,-163,-160,-161,-170,-225,-226,-227,-228,-229,-230,-237,-238,-239,-240,-241,-242,-249,-250,-168,-169,-164,-165,-224,258,260,127,-172,-173,127,-179,-190,-196,-203,-204,-209,-210,-212,-213,-171,-149,-150,-151,-152,-137,-92,-202,-215,-231,-232,-233,-234,-235,-236,-243,-244,-245,-246,-247,-248,-251,-252,-177,127,127,127,127,127,127,-211,-178,-189,-195,-205,-214,-174,127,127,421,-147,431,]),'RW_ALGORITMA':([13,14,28,168,170,330,331,375,418,419,],[27,-7,-8,27,27,27,-17,-18,27,27,]),'RW_LOKAL':([14,],[28,]),'RW_INTEGER':([19,131,228,257,337,],[40,40,40,40,40,]),'RW_REAL':([19,131,228,257,337,],[41,41,41,41,41,]),'RW_STRING':([19,131,228,257,337,],[42,42,42,42,42,]),'RW_CHARACTER':([19,131,228,257,337,],[43,43,43,43,43,]),'RW_BOOLEAN':([19,131,228,257,337,],[44,44,44,44,44,]),'RW_ARRAY':([19,131,228,257,337,],[51,51,51,51,51,]),'L_BOOLEAN_TRUE':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,381,385,400,421,425,426,429,433,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-206,-207,-208,70,70,70,70,70,70,70,70,70,-180,-181,-182,-183,-184,-185,-186,-187,-188,70,-191,-192,-193,-194,70,-197,-198,-199,-200,-201,70,70,70,70,70,70,70,70,70,70,70,70,70,-133,-132,-134,]),'L_BOOLEAN_FALSE':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,381,385,400,421,425,426,429,433,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-206,-207,-208,71,71,71,71,71,71,71,71,71,-180,-181,-182,-183,-184,-185,-186,-187,-188,71,-191,-192,-193,-194,71,-197,-198,-199,-200,-201,71,71,71,71,71,71,71,71,71,71,71,71,71,-133,-132,-134,]),'L_NIL':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,381,385,400,421,425,426,429,433,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-206,-207,-208,72,72,72,72,72,72,72,72,72,-180,-181,-182,-183,-184,-185,-186,-187,-188,72,-191,-192,-193,-194,72,-197,-198,-199,-200,-201,72,72,72,72,72,72,72,72,72,72,72,72,72,-133,-132,-134,]),'L_STRING':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,381,385,400,421,425,426,429,433,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,-206,-207,-208,87,87,87,87,87,87,87,87,87,-180,-181,-182,-183,-184,-185,-186,-187,-188,87,-191,-192,-193,-194,87,-197,-198,-199,-200,-201,87,87,87,87,87,87,87,87,87,87,87,87,87,-133,-132,-134,]),'L_CHARACTER':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,381,385,400,421,425,426,429,433,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-206,-207,-208,88,88,88,88,88,88,88,88,88,-180,-181,-182,-183,-184,-185,-186,-187,-188,88,-191,-192,-193,-194,88,-197,-198,-199,-200,-201,88,88,88,88,88,88,88,88,88,88,88,88,88,-133,-132,-134,]),'L_INTEGER_NUMBER':([19,57,68,69,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,381,385,400,421,425,426,429,433,],[89,89,-158,-159,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-206,-207,-208,89,89,89,89,89,89,89,89,89,-180,-181,-182,-183,-184,-185,-186,-187,-188,89,-191,-192,-193,-194,89,-197,-198,-199,-200,-201,89,89,89,89,89,89,89,89,89,89,89,89,89,-133,-132,-134,]),'L_REAL_NUMBER':([19,57,68,69,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,381,385,400,421,425,426,429,433,],[90,90,-158,-159,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-206,-207,-208,90,90,90,90,90,90,90,90,90,-180,-181,-182,-183,-184,-185,-186,-187,-188,90,-191,-192,-193,-194,90,-197,-198,-199,-200,-201,90,90,90,90,90,90,90,90,90,90,90,90,90,-133,-132,-134,]),'RW_ABS':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,385,400,421,425,426,429,433,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-206,-207,-208,91,91,91,91,91,91,91,91,91,-180,-181,-182,-183,-184,-185,-186,-187,-188,91,-191,-192,-193,-194,91,-197,-198,-199,-200,-201,91,91,91,91,91,91,91,91,91,91,91,91,-133,-132,-134,]),'RW_SIN':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,385,400,421,425,426,429,433,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,-206,-207,-208,92,92,92,92,92,92,92,92,92,-180,-181,-182,-183,-184,-185,-186,-187,-188,92,-191,-192,-193,-194,92,-197,-198,-199,-200,-201,92,92,92,92,92,92,92,92,92,92,92,92,-133,-132,-134,]),'RW_COS':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,385,400,421,425,426,429,433,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,-206,-207,-208,93,93,93,93,93,93,93,93,93,-180,-181,-182,-183,-184,-185,-186,-187,-188,93,-191,-192,-193,-194,93,-197,-198,-199,-200,-201,93,93,93,93,93,93,93,93,93,93,93,93,-133,-132,-134,]),'RW_TAN':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,385,400,421,425,426,429,433,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,-206,-207,-208,94,94,94,94,94,94,94,94,94,-180,-181,-182,-183,-184,-185,-186,-187,-188,94,-191,-192,-193,-194,94,-197,-198,-199,-200,-201,94,94,94,94,94,94,94,94,94,94,94,94,-133,-132,-134,]),'RW_SUCC':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,385,400,421,425,426,429,433,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,-206,-207,-208,95,95,95,95,95,95,95,95,95,-180,-181,-182,-183,-184,-185,-186,-187,-188,95,-191,-192,-193,-194,95,-197,-198,-199,-200,-201,95,95,95,95,95,95,95,95,95,95,95,95,-133,-132,-134,]),'RW_PRED':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,385,400,421,425,426,429,433,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,-206,-207,-208,96,96,96,96,96,96,96,96,96,-180,-181,-182,-183,-184,-185,-186,-187,-188,96,-191,-192,-193,-194,96,-197,-198,-199,-200,-201,96,96,96,96,96,96,96,96,96,96,96,96,-133,-132,-134,]),'RW_AWAL':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,385,400,421,425,426,429,433,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,-206,-207,-208,97,97,97,97,97,97,97,97,97,-180,-181,-182,-183,-184,-185,-186,-187,-188,97,-191,-192,-193,-194,97,-197,-198,-199,-200,-201,97,97,97,97,97,97,97,97,97,97,97,97,-133,-132,-134,]),'RW_AKHIR':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,385,400,421,425,426,429,433,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,-206,-207,-208,98,98,98,98,98,98,98,98,98,-180,-181,-182,-183,-184,-185,-186,-187,-188,98,-191,-192,-193,-194,98,-197,-198,-199,-200,-201,98,98,98,98,98,98,98,98,98,98,98,98,-133,-132,-134,]),'RW_FIRSTCHAR':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,385,400,421,425,426,429,433,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-206,-207,-208,99,99,99,99,99,99,99,99,99,-180,-181,-182,-183,-184,-185,-186,-187,-188,99,-191,-192,-193,-194,99,-197,-198,-199,-200,-201,99,99,99,99,99,99,99,99,99,99,99,99,-133,-132,-134,]),'RW_LASTCHAR':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,385,400,421,425,426,429,433,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-206,-207,-208,100,100,100,100,100,100,100,100,100,-180,-181,-182,-183,-184,-185,-186,-187,-188,100,-191,-192,-193,-194,100,-197,-198,-199,-200,-201,100,100,100,100,100,100,100,100,100,100,100,100,-133,-132,-134,]),'RW_LONG':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,385,400,421,425,426,429,433,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-206,-207,-208,101,101,101,101,101,101,101,101,101,-180,-181,-182,-183,-184,-185,-186,-187,-188,101,-191,-192,-193,-194,101,-197,-198,-199,-200,-201,101,101,101,101,101,101,101,101,101,101,101,101,-133,-132,-134,]),'RW_ISKOSONG':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,385,400,421,425,426,429,433,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,-206,-207,-208,102,102,102,102,102,102,102,102,102,-180,-181,-182,-183,-184,-185,-186,-187,-188,102,-191,-192,-193,-194,102,-197,-198,-199,-200,-201,102,102,102,102,102,102,102,102,102,102,102,102,-133,-132,-134,]),'RW_INTEGERTOREAL':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,385,400,421,425,426,429,433,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,-206,-207,-208,103,103,103,103,103,103,103,103,103,-180,-181,-182,-183,-184,-185,-186,-187,-188,103,-191,-192,-193,-194,103,-197,-198,-199,-200,-201,103,103,103,103,103,103,103,103,103,103,103,103,-133,-132,-134,]),'RW_REALTOINTEGER':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,213,214,215,226,228,257,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,307,315,337,351,352,353,371,372,385,400,421,425,426,429,433,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,-206,-207,-208,104,104,104,104,104,104,104,104,104,-180,-181,-182,-183,-184,-185,-186,-187,-188,104,-191,-192,-193,-194,104,-197,-198,-199,-200,-201,104,104,104,104,104,104,104,104,104,104,104,104,-133,-132,-134,]),'RW_CONSTANT':([25,55,56,58,59,64,65,66,67,70,71,72,87,88,89,90,114,115,139,164,258,260,406,],[116,-153,-154,-156,-157,-166,-167,-162,-163,-160,-161,-170,-168,-169,-164,-165,116,-63,-155,-62,116,116,-64,]),'RW_NOT':([134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,211,213,214,215,226,265,266,268,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,352,353,371,372,385,400,421,425,426,429,433,],[215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,-206,-207,-208,215,215,215,215,215,215,215,-180,-181,-182,-183,-184,-185,-186,-187,-188,215,-191,-192,-193,-194,215,-197,-198,-199,-200,-201,215,215,215,215,215,215,215,215,-133,-132,-134,]),'RW_OF':([136,314,],[228,-52,]),'RW_ON':([187,],[272,]),'RW_STOP':([262,275,],[-100,352,]),'RW_UNTIL':([262,276,],[-100,353,]),'RW_ELSE':([262,387,],[-100,410,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file':([0,],[1,]),'program':([0,],[2,]),'function_declaration':([0,26,119,251,332,374,],[4,124,124,335,335,124,]),'procedure_declaration':([0,26,119,251,332,374,],[5,123,123,334,334,123,]),'function_identification':([0,26,119,251,332,374,],[6,6,6,6,6,6,]),'procedure_identifier':([0,26,119,251,332,374,],[7,7,7,7,7,7,]),'identifier':([3,8,9,18,19,49,109,116,127,129,130,131,132,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,159,163,171,185,186,188,197,204,211,226,228,253,257,263,265,266,267,268,280,281,284,285,295,300,307,315,337,348,351,352,353,371,372,380,382,383,385,398,400,417,421,425,431,432,],[10,22,23,36,47,36,36,165,184,36,36,47,203,221,47,233,221,221,221,221,221,221,221,221,221,221,221,221,221,221,36,256,184,221,221,221,221,221,221,221,47,36,47,184,221,221,345,221,360,221,221,221,221,221,221,47,47,360,233,221,221,221,221,36,36,36,221,360,221,36,221,221,184,184,]),'block':([4,5,10,],[12,15,24,]),'kamus_declaration':([4,5,10,123,124,],[13,13,13,168,170,]),'function_formal_parameter_list':([6,],[16,]),'function_return_type':([6,16,],[17,29,]),'formal_parameter_list':([7,],[20,]),'algorithm_block':([13,168,170,330,418,419,],[26,259,261,374,423,424,]),'function_parameter_list_option':([18,],[30,]),'function_parameter_list':([18,],[31,]),'empty':([18,21,25,26,112,159,258,260,339,340,374,382,383,],[32,106,113,118,160,252,113,113,160,160,118,252,252,]),'function_parameter_declaration':([18,129,130,],[33,200,201,]),'variable_sub_declaration':([18,109,129,130,159,253,380,382,383,417,],[34,157,34,34,254,336,405,254,254,405,]),'identifier_list':([18,49,109,129,130,159,253,380,382,383,417,],[35,135,35,35,35,35,35,35,35,35,35,]),'type_denoter':([19,131,228,257,337,],[37,202,313,338,378,]),'ordinal_type':([19,131,137,228,257,315,337,],[38,38,231,38,38,231,38,]),'structured_type':([19,131,228,257,337,],[39,39,39,39,39,]),'enumerated_type':([19,131,137,228,257,315,337,],[45,45,45,45,45,45,45,]),'subrange_type':([19,131,137,228,257,315,337,351,],[46,46,46,46,46,46,46,391,]),'array_type':([19,131,228,257,337,],[48,48,48,48,48,]),'subrange_type_option':([19,131,137,228,257,315,337,351,],[50,50,50,50,50,50,50,50,]),'subrange_option':([19,131,137,138,228,257,315,337,351,],[52,52,52,232,52,52,52,52,52,]),'constant':([19,131,137,138,228,257,315,337,351,381,],[53,53,53,53,53,53,53,53,53,406,]),'function_designator':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,385,400,421,425,],[54,54,220,54,54,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,279,220,220,220,54,54,220,220,220,220,220,220,220,220,220,54,54,54,220,220,220,220,220,220,220,220,]),'string_char_constant':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,381,385,400,421,425,],[55,55,223,55,55,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,55,55,223,223,223,223,223,223,223,223,223,55,55,55,223,223,223,223,55,223,223,223,223,]),'non_string_constant':([19,57,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,381,385,400,421,425,],[56,139,56,222,56,56,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,56,56,222,222,222,222,222,222,222,222,222,56,56,56,222,222,222,222,56,222,222,222,222,]),'sign':([19,131,137,138,228,257,315,337,351,381,],[57,57,57,57,57,57,57,57,57,57,]),'boolean_constant':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,381,385,400,421,425,],[58,58,224,58,58,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,58,58,224,224,224,224,224,224,224,224,224,58,58,58,224,224,224,224,58,224,224,224,224,]),'nil_constant':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,381,385,400,421,425,],[59,59,225,59,59,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,59,59,225,225,225,225,225,225,225,225,225,59,59,59,225,225,225,225,59,225,225,225,225,]),'user_defined_function_call':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,385,400,421,425,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'math_function_call':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,385,400,421,425,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'string_function_call':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,385,400,421,425,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'converter_function_call':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,385,400,421,425,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'string_constant':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,381,385,400,421,425,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'char_constant':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,381,385,400,421,425,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'integer_constant':([19,57,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,381,385,400,421,425,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,278,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'real_constant':([19,57,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,381,385,400,421,425,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'abs_function':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,385,400,421,425,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'sin_function':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,385,400,421,425,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'cos_function':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,385,400,421,425,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'tan_function':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,385,400,421,425,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'succ_function':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,385,400,421,425,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'pred_function':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,385,400,421,425,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'awal_function':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,385,400,421,425,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'akhir_function':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,385,400,421,425,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'firstchar_function':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,385,400,421,425,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'lastchar_function':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,385,400,421,425,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'long_function':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,385,400,421,425,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'iskosong_function':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,385,400,421,425,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'integer_to_real':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,385,400,421,425,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'real_to_integer':([19,131,134,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,197,204,211,226,228,257,265,266,268,281,284,285,295,300,307,315,337,351,352,353,371,372,385,400,421,425,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'formal_parameter_section_list':([21,],[105,]),'formal_parameter_section':([21,],[107,]),'parameter_specification':([21,155,156,],[108,248,249,]),'procedure_parameter_type':([21,155,156,],[109,109,109,]),'constant_declaration_block':([25,258,260,],[112,339,340,]),'constant_declaration':([25,258,260,],[114,114,114,]),'constant_sub_declaration':([25,114,258,260,],[115,164,115,115,]),'procedure_and_function_implementation_block':([26,374,],[117,403,]),'subprogram_implementation_list':([26,374,],[119,119,]),'subprogram_implementation':([26,119,374,],[120,166,120,]),'procedure_implementation':([26,119,374,],[121,121,121,]),'function_implementation':([26,119,374,],[122,122,122,]),'statement_part':([27,],[125,]),'compound_statement':([27,192,197,347,349,350,354,355,356,392,410,],[126,275,276,387,389,390,394,395,396,413,420,]),'function_actual_parameter_list':([47,221,233,],[133,133,133,]),'array_index':([51,],[136,]),'type_declaration_block':([112,339,340,],[159,382,383,]),'type_declaration':([112,339,340,],[161,161,161,]),'type_sub_declaration':([112,161,339,340,],[162,255,162,162,]),'procedure_implementation_block':([123,],[167,]),'function_implementation_block':([124,],[169,]),'statement_sequence':([127,431,],[171,432,]),'statement':([127,171,263,431,432,],[172,264,341,172,264,]),'assignment_statement':([127,171,263,431,432,],[173,173,173,173,173,]),'procedure_statement':([127,171,263,431,432,],[174,174,174,174,174,]),'function_returned_statement':([127,171,263,431,432,],[175,175,175,175,175,]),'if_statement':([127,171,263,431,432,],[176,176,176,176,176,]),'depend_on_statement':([127,171,263,431,432,],[177,177,177,177,177,]),'while_statement':([127,171,263,431,432,],[178,178,178,178,178,]),'traversal_statement':([127,171,263,431,432,],[179,179,179,179,179,]),'repeat_statement':([127,171,263,431,432,],[180,180,180,180,180,]),'iterate_stop_statement':([127,171,263,431,432,],[181,181,181,181,181,]),'variable_access':([127,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,171,185,186,188,197,204,211,226,263,265,266,268,280,281,284,285,295,300,307,348,352,353,371,372,385,398,400,421,425,431,432,],[182,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,182,217,217,217,277,217,217,217,182,217,217,217,359,217,217,217,217,217,217,359,217,217,217,217,217,359,217,217,217,182,182,]),'builtin_procedure_statements':([127,171,263,431,432,],[183,183,183,183,183,]),'control_variable':([127,171,263,431,432,],[189,189,189,189,189,]),'repeat_until_statement':([127,171,263,431,432,],[190,190,190,190,190,]),'repeat_times_statement':([127,171,263,431,432,],[191,191,191,191,191,]),'indexed_variable':([127,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,171,185,186,188,197,204,211,226,263,265,266,268,280,281,284,285,295,300,307,348,352,353,371,372,385,398,400,421,425,431,432,],[193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,]),'field_designator':([127,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,171,185,186,188,197,204,211,226,263,265,266,268,280,281,284,285,295,300,307,348,352,353,371,372,385,398,400,421,425,431,432,],[194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,]),'input_statement':([127,171,263,431,432,],[195,195,195,195,195,]),'output_statement':([127,171,263,431,432,],[196,196,196,196,196,]),'actual_parameter_list':([134,268,],[205,346,]),'actual_parameter':([134,268,284,],[206,206,365,]),'expression':([134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,226,265,266,268,281,284,352,353,371,372,385,400,421,425,],[207,234,235,236,237,238,239,240,241,242,243,244,245,246,247,269,271,271,282,311,342,344,207,363,207,271,271,311,402,409,363,427,427,]),'additive_expression':([134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,226,265,266,268,281,284,285,352,353,371,372,385,400,421,425,],[208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,366,208,208,208,208,208,208,208,208,]),'multiplicative_expression':([134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,226,265,266,268,281,284,285,295,352,353,371,372,385,400,421,425,],[209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,367,209,209,209,209,209,209,209,209,]),'unary_expression':([134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,211,226,265,266,268,281,284,285,295,300,352,353,371,372,385,400,421,425,],[210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,306,210,210,210,210,210,210,210,210,368,210,210,210,210,210,210,210,210,]),'unary_op':([134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,211,226,265,266,268,281,284,285,295,300,352,353,371,372,385,400,421,425,],[211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,]),'exponentiation_expression':([134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,211,226,265,266,268,281,284,285,295,300,307,352,353,371,372,385,400,421,425,],[212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,369,212,212,212,212,212,212,212,212,]),'primary_expression':([134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,211,226,265,266,268,281,284,285,295,300,307,352,353,371,372,385,400,421,425,],[216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,]),'unsigned_constant':([134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,211,226,265,266,268,281,284,285,295,300,307,352,353,371,372,385,400,421,425,],[218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,]),'set_constructor':([134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,185,186,188,204,211,226,265,266,268,281,284,285,295,300,307,352,353,371,372,385,400,421,425,],[219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,]),'index_list':([137,],[229,]),'index_type':([137,315,],[230,373,]),'variable_declaration_block':([159,382,383,],[251,407,408,]),'variable_declaration':([159,382,383,],[253,253,253,]),'boolean_expression':([186,188,352,353,],[270,273,392,393,]),'relational_op':([207,234,235,236,237,238,239,240,241,242,243,244,245,246,247,269,271,282,311,342,344,363,402,409,427,],[285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,]),'additive_op':([208,366,],[295,295,]),'multiplicative_op':([209,367,],[300,300,]),'member_designator_list':([226,],[308,]),'member_designator':([226,371,],[310,401,]),'component_type':([228,],[312,]),'procedure_and_function_declaration_block':([251,],[330,]),'procedure_and_function_declaration':([251,],[332,]),'procedure_and_function_sub_declaration':([251,332,],[333,376,]),'index_expression_list':([266,],[343,]),'traversal_range_value':([274,],[350,]),'input_statement_parameter_list':([280,348,],[357,388,]),'input_statement_parameter':([280,348,398,],[358,358,414,]),'output_statement_parameter_list':([281,],[361,]),'output_statement_parameter':([281,400,],[362,415,]),'type_variety':([337,],[377,]),'type_user_defined':([337,],[379,]),'variable_declaration_comma':([380,417,],[404,422,]),'depend_on_action_list':([421,],[425,]),'depend_on_action':([421,425,],[426,429,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file","S'",1,None,None,None),
  ('file -> program','file',1,'p_file','notal_parser.py',12),
  ('program -> RW_PROGRAM identifier block','program',3,'p_program','notal_parser.py',17),
  ('program -> function_declaration block','program',2,'p_program','notal_parser.py',18),
  ('program -> procedure_declaration block','program',2,'p_program','notal_parser.py',19),
  ('identifier_list -> identifier_list S_COMMA identifier','identifier_list',3,'p_identifier_list','notal_parser.py',24),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','notal_parser.py',25),
  ('kamus_declaration -> RW_KAMUS','kamus_declaration',1,'p_kamus_declaration','notal_parser.py',34),
  ('kamus_declaration -> RW_KAMUS RW_LOKAL','kamus_declaration',2,'p_kamus_declaration','notal_parser.py',35),
  ('block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block procedure_and_function_declaration_block algorithm_block procedure_and_function_implementation_block','block',8,'p_block','notal_parser.py',43),
  ('block -> kamus_declaration algorithm_block procedure_and_function_implementation_block','block',3,'p_block','notal_parser.py',44),
  ('constant_declaration_block -> empty','constant_declaration_block',1,'p_constant_declaration_block','notal_parser.py',54),
  ('constant_declaration_block -> constant_declaration','constant_declaration_block',1,'p_constant_declaration_block','notal_parser.py',55),
  ('type_declaration_block -> empty','type_declaration_block',1,'p_type_declaration_block','notal_parser.py',62),
  ('type_declaration_block -> type_declaration','type_declaration_block',1,'p_type_declaration_block','notal_parser.py',63),
  ('variable_declaration_block -> empty','variable_declaration_block',1,'p_variable_declaration_block','notal_parser.py',70),
  ('variable_declaration_block -> variable_declaration','variable_declaration_block',1,'p_variable_declaration_block','notal_parser.py',71),
  ('procedure_and_function_declaration_block -> DEDENT','procedure_and_function_declaration_block',1,'p_procedure_and_function_declaration_block','notal_parser.py',78),
  ('procedure_and_function_declaration_block -> procedure_and_function_declaration DEDENT','procedure_and_function_declaration_block',2,'p_procedure_and_function_declaration_block','notal_parser.py',79),
  ('algorithm_block -> RW_ALGORITMA statement_part','algorithm_block',2,'p_algorithm_block','notal_parser.py',86),
  ('procedure_and_function_implementation_block -> empty','procedure_and_function_implementation_block',1,'p_procedure_and_function_implementation_block','notal_parser.py',91),
  ('procedure_and_function_implementation_block -> subprogram_implementation_list','procedure_and_function_implementation_block',1,'p_procedure_and_function_implementation_block','notal_parser.py',92),
  ('subprogram_implementation_list -> subprogram_implementation_list subprogram_implementation','subprogram_implementation_list',2,'p_subprogram_implementation_list','notal_parser.py',99),
  ('subprogram_implementation_list -> subprogram_implementation','subprogram_implementation_list',1,'p_subprogram_implementation_list','notal_parser.py',100),
  ('subprogram_implementation -> procedure_implementation','subprogram_implementation',1,'p_subprogram_implementation','notal_parser.py',109),
  ('subprogram_implementation -> function_implementation','subprogram_implementation',1,'p_subprogram_implementation','notal_parser.py',110),
  ('procedure_implementation -> procedure_declaration procedure_implementation_block','procedure_implementation',2,'p_procedure_implementation','notal_parser.py',115),
  ('procedure_implementation -> procedure_declaration','procedure_implementation',1,'p_procedure_implementation','notal_parser.py',116),
  ('procedure_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block','procedure_implementation_block',7,'p_procedure_implementation_block','notal_parser.py',121),
  ('procedure_implementation_block -> kamus_declaration algorithm_block','procedure_implementation_block',2,'p_procedure_implementation_block','notal_parser.py',122),
  ('function_implementation -> function_declaration function_implementation_block','function_implementation',2,'p_function_implementation','notal_parser.py',132),
  ('function_implementation -> function_declaration','function_implementation',1,'p_function_implementation','notal_parser.py',133),
  ('function_implementation_block -> kamus_declaration INDENT constant_declaration_block type_declaration_block variable_declaration_block DEDENT algorithm_block','function_implementation_block',7,'p_function_implementation_block','notal_parser.py',138),
  ('function_implementation_block -> kamus_declaration algorithm_block','function_implementation_block',2,'p_function_implementation_block','notal_parser.py',139),
  ('type_denoter -> ordinal_type','type_denoter',1,'p_type_denoter','notal_parser.py',149),
  ('type_denoter -> structured_type','type_denoter',1,'p_type_denoter','notal_parser.py',150),
  ('type_denoter -> RW_INTEGER','type_denoter',1,'p_type_denoter','notal_parser.py',151),
  ('type_denoter -> RW_REAL','type_denoter',1,'p_type_denoter','notal_parser.py',152),
  ('type_denoter -> RW_STRING','type_denoter',1,'p_type_denoter','notal_parser.py',153),
  ('type_denoter -> RW_CHARACTER','type_denoter',1,'p_type_denoter','notal_parser.py',154),
  ('type_denoter -> RW_BOOLEAN','type_denoter',1,'p_type_denoter','notal_parser.py',155),
  ('ordinal_type -> enumerated_type','ordinal_type',1,'p_ordinal_type','notal_parser.py',166),
  ('ordinal_type -> subrange_type','ordinal_type',1,'p_ordinal_type','notal_parser.py',167),
  ('ordinal_type -> identifier','ordinal_type',1,'p_ordinal_type','notal_parser.py',168),
  ('enumerated_type -> S_LEFT_BRACKET identifier_list S_RIGHT_BRACKET','enumerated_type',3,'p_enumerated_type','notal_parser.py',173),
  ('subrange_type -> subrange_type_option','subrange_type',1,'p_subrange_type','notal_parser.py',178),
  ('subrange_type_option -> subrange_option S_UP_TO subrange_option','subrange_type_option',3,'p_subrange_type_option','notal_parser.py',183),
  ('subrange_option -> identifier','subrange_option',1,'p_subrange_option','notal_parser.py',188),
  ('subrange_option -> constant','subrange_option',1,'p_subrange_option','notal_parser.py',189),
  ('subrange_option -> function_designator','subrange_option',1,'p_subrange_option','notal_parser.py',190),
  ('structured_type -> array_type','structured_type',1,'p_structured_type','notal_parser.py',195),
  ('array_type -> RW_ARRAY array_index RW_OF component_type','array_type',4,'p_array_type','notal_parser.py',200),
  ('array_index -> S_LEFT_SQUARE_BRACKET index_list S_RIGHT_SQUARE_BRACKET','array_index',3,'p_array_index','notal_parser.py',205),
  ('index_list -> index_list S_COMMA index_type','index_list',3,'p_index_list','notal_parser.py',210),
  ('index_list -> index_type','index_list',1,'p_index_list','notal_parser.py',211),
  ('index_type -> ordinal_type','index_type',1,'p_index_type','notal_parser.py',220),
  ('component_type -> type_denoter','component_type',1,'p_component_type','notal_parser.py',225),
  ('variable_declaration -> variable_declaration variable_sub_declaration','variable_declaration',2,'p_variable_declaration','notal_parser.py',229),
  ('variable_declaration -> variable_sub_declaration','variable_declaration',1,'p_variable_declaration','notal_parser.py',230),
  ('variable_sub_declaration -> identifier_list S_COLON type_denoter','variable_sub_declaration',3,'p_variable_sub_declaration','notal_parser.py',239),
  ('variable_declaration_comma -> variable_sub_declaration','variable_declaration_comma',1,'p_variable_declaration_comma','notal_parser.py',244),
  ('variable_declaration_comma -> variable_sub_declaration S_COMMA variable_declaration_comma','variable_declaration_comma',3,'p_variable_declaration_comma','notal_parser.py',245),
  ('constant_declaration -> constant_declaration constant_sub_declaration','constant_declaration',2,'p_constant_declaration','notal_parser.py',254),
  ('constant_declaration -> constant_sub_declaration','constant_declaration',1,'p_constant_declaration','notal_parser.py',255),
  ('constant_sub_declaration -> RW_CONSTANT identifier S_COLON type_denoter S_EQUAL constant','constant_sub_declaration',6,'p_constant_sub_declaration','notal_parser.py',264),
  ('type_declaration -> type_declaration type_sub_declaration','type_declaration',2,'p_type_declaration','notal_parser.py',269),
  ('type_declaration -> type_sub_declaration','type_declaration',1,'p_type_declaration','notal_parser.py',270),
  ('type_sub_declaration -> RW_TYPE identifier S_COLON type_variety','type_sub_declaration',4,'p_type_sub_declaration','notal_parser.py',279),
  ('type_variety -> type_denoter','type_variety',1,'p_type_variety','notal_parser.py',284),
  ('type_variety -> type_user_defined','type_variety',1,'p_type_variety','notal_parser.py',285),
  ('type_user_defined -> S_LESS_THAN variable_declaration_comma S_GREATER_THAN','type_user_defined',3,'p_type_user_defined','notal_parser.py',290),
  ('procedure_and_function_declaration -> procedure_and_function_declaration procedure_and_function_sub_declaration','procedure_and_function_declaration',2,'p_procedure_and_function_declaration','notal_parser.py',295),
  ('procedure_and_function_declaration -> procedure_and_function_sub_declaration','procedure_and_function_declaration',1,'p_procedure_and_function_declaration','notal_parser.py',296),
  ('procedure_and_function_sub_declaration -> procedure_declaration','procedure_and_function_sub_declaration',1,'p_procedure_and_function_sub_declaration','notal_parser.py',305),
  ('procedure_and_function_sub_declaration -> function_declaration','procedure_and_function_sub_declaration',1,'p_procedure_and_function_sub_declaration','notal_parser.py',306),
  ('procedure_declaration -> procedure_identifier formal_parameter_list','procedure_declaration',2,'p_procedure_declaration','notal_parser.py',311),
  ('procedure_identifier -> RW_PROCEDURE identifier','procedure_identifier',2,'p_procedure_identifier','notal_parser.py',316),
  ('formal_parameter_list -> S_LEFT_BRACKET formal_parameter_section_list S_RIGHT_BRACKET','formal_parameter_list',3,'p_formal_parameter_list','notal_parser.py',321),
  ('formal_parameter_section_list -> empty','formal_parameter_section_list',1,'p_formal_parameter_section_list','notal_parser.py',326),
  ('formal_parameter_section_list -> formal_parameter_section','formal_parameter_section_list',1,'p_formal_parameter_section_list','notal_parser.py',327),
  ('formal_parameter_section -> formal_parameter_section S_SEMI_COLON parameter_specification','formal_parameter_section',3,'p_formal_parameter_section','notal_parser.py',332),
  ('formal_parameter_section -> formal_parameter_section S_COMMA parameter_specification','formal_parameter_section',3,'p_formal_parameter_section','notal_parser.py',333),
  ('formal_parameter_section -> parameter_specification','formal_parameter_section',1,'p_formal_parameter_section','notal_parser.py',334),
  ('parameter_specification -> procedure_parameter_type variable_sub_declaration','parameter_specification',2,'p_parameter_specification','notal_parser.py',343),
  ('procedure_parameter_type -> RW_INPUT','procedure_parameter_type',1,'p_procedure_parameter_type','notal_parser.py',348),
  ('procedure_parameter_type -> RW_OUTPUT','procedure_parameter_type',1,'p_procedure_parameter_type','notal_parser.py',349),
  ('procedure_parameter_type -> RW_INPUT S_DIVIDE RW_OUTPUT','procedure_parameter_type',3,'p_procedure_parameter_type','notal_parser.py',350),
  ('function_declaration -> function_identification function_formal_parameter_list function_return_type','function_declaration',3,'p_function_declaration','notal_parser.py',357),
  ('function_declaration -> function_identification function_return_type','function_declaration',2,'p_function_declaration','notal_parser.py',358),
  ('function_identification -> RW_FUNCTION identifier','function_identification',2,'p_function_identification','notal_parser.py',364),
  ('function_return_type -> S_RETURN type_denoter','function_return_type',2,'p_function_return_type','notal_parser.py',369),
  ('function_formal_parameter_list -> S_LEFT_BRACKET function_parameter_list_option S_RIGHT_BRACKET','function_formal_parameter_list',3,'p_function_formal_parameter_list','notal_parser.py',374),
  ('function_actual_parameter_list -> S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET','function_actual_parameter_list',3,'p_function_actual_parameter_list','notal_parser.py',379),
  ('function_parameter_list_option -> function_parameter_list','function_parameter_list_option',1,'p_function_parameter_list_option','notal_parser.py',384),
  ('function_parameter_list_option -> empty','function_parameter_list_option',1,'p_function_parameter_list_option','notal_parser.py',385),
  ('function_parameter_list -> function_parameter_list S_SEMI_COLON function_parameter_declaration','function_parameter_list',3,'p_function_parameter_list','notal_parser.py',390),
  ('function_parameter_list -> function_parameter_list S_COMMA function_parameter_declaration','function_parameter_list',3,'p_function_parameter_list','notal_parser.py',391),
  ('function_parameter_list -> function_parameter_declaration','function_parameter_list',1,'p_function_parameter_list','notal_parser.py',392),
  ('function_parameter_declaration -> variable_sub_declaration','function_parameter_declaration',1,'p_function_parameter_declaration','notal_parser.py',401),
  ('statement_part -> compound_statement','statement_part',1,'p_statement_part','notal_parser.py',406),
  ('compound_statement -> INDENT statement_sequence DEDENT','compound_statement',3,'p_compound_statement','notal_parser.py',411),
  ('statement_sequence -> statement_sequence S_SEMI_COLON statement','statement_sequence',3,'p_statement_sequence','notal_parser.py',416),
  ('statement_sequence -> statement_sequence statement','statement_sequence',2,'p_statement_sequence','notal_parser.py',417),
  ('statement_sequence -> statement','statement_sequence',1,'p_statement_sequence','notal_parser.py',418),
  ('statement -> assignment_statement','statement',1,'p_statement','notal_parser.py',430),
  ('statement -> procedure_statement','statement',1,'p_statement','notal_parser.py',431),
  ('statement -> function_returned_statement','statement',1,'p_statement','notal_parser.py',432),
  ('statement -> if_statement','statement',1,'p_statement','notal_parser.py',433),
  ('statement -> depend_on_statement','statement',1,'p_statement','notal_parser.py',434),
  ('statement -> while_statement','statement',1,'p_statement','notal_parser.py',435),
  ('statement -> traversal_statement','statement',1,'p_statement','notal_parser.py',436),
  ('statement -> repeat_statement','statement',1,'p_statement','notal_parser.py',437),
  ('statement -> iterate_stop_statement','statement',1,'p_statement','notal_parser.py',438),
  ('assignment_statement -> variable_access S_ASSIGNMENT expression','assignment_statement',3,'p_assignment_statement','notal_parser.py',443),
  ('procedure_statement -> builtin_procedure_statements','procedure_statement',1,'p_procedure_statement','notal_parser.py',448),
  ('procedure_statement -> identifier S_LEFT_BRACKET actual_parameter_list S_RIGHT_BRACKET','procedure_statement',4,'p_procedure_statement','notal_parser.py',449),
  ('procedure_statement -> identifier','procedure_statement',1,'p_procedure_statement','notal_parser.py',450),
  ('actual_parameter_list -> actual_parameter_list S_COMMA actual_parameter','actual_parameter_list',3,'p_actual_parameter_list','notal_parser.py',459),
  ('actual_parameter_list -> actual_parameter','actual_parameter_list',1,'p_actual_parameter_list','notal_parser.py',460),
  ('actual_parameter -> expression','actual_parameter',1,'p_actual_parameter','notal_parser.py',469),
  ('builtin_procedure_statements -> input_statement','builtin_procedure_statements',1,'p_builtin_procedure_statements','notal_parser.py',474),
  ('builtin_procedure_statements -> output_statement','builtin_procedure_statements',1,'p_builtin_procedure_statements','notal_parser.py',475),
  ('input_statement -> RW_INPUT S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET','input_statement',4,'p_input_statement','notal_parser.py',480),
  ('input_statement_parameter_list -> input_statement_parameter_list S_COMMA input_statement_parameter','input_statement_parameter_list',3,'p_input_statement_parameter_list','notal_parser.py',485),
  ('input_statement_parameter_list -> input_statement_parameter','input_statement_parameter_list',1,'p_input_statement_parameter_list','notal_parser.py',486),
  ('input_statement_parameter -> variable_access','input_statement_parameter',1,'p_input_statement_parameter','notal_parser.py',495),
  ('output_statement -> RW_OUTPUT S_LEFT_BRACKET output_statement_parameter_list S_RIGHT_BRACKET','output_statement',4,'p_output_statement','notal_parser.py',500),
  ('output_statement_parameter_list -> output_statement_parameter_list S_COMMA output_statement_parameter','output_statement_parameter_list',3,'p_output_statement_parameter_list','notal_parser.py',505),
  ('output_statement_parameter_list -> output_statement_parameter','output_statement_parameter_list',1,'p_output_statement_parameter_list','notal_parser.py',506),
  ('output_statement_parameter -> expression','output_statement_parameter',1,'p_output_statement_parameter','notal_parser.py',515),
  ('function_returned_statement -> S_RETURN expression','function_returned_statement',2,'p_function_returned_statement','notal_parser.py',521),
  ('depend_on_statement -> RW_DEPEND RW_ON S_LEFT_BRACKET input_statement_parameter_list S_RIGHT_BRACKET INDENT depend_on_action_list DEDENT','depend_on_statement',8,'p_depend_on_statement','notal_parser.py',526),
  ('depend_on_action_list -> depend_on_action_list depend_on_action','depend_on_action_list',2,'p_depend_on_action_list','notal_parser.py',531),
  ('depend_on_action_list -> depend_on_action','depend_on_action_list',1,'p_depend_on_action_list','notal_parser.py',532),
  ('depend_on_action -> expression S_COLON INDENT statement_sequence DEDENT','depend_on_action',5,'p_depend_on_action','notal_parser.py',541),
  ('if_statement -> RW_IF boolean_expression RW_THEN compound_statement','if_statement',4,'p_if_statement','notal_parser.py',546),
  ('if_statement -> RW_IF boolean_expression RW_THEN compound_statement RW_ELSE compound_statement','if_statement',6,'p_if_statement','notal_parser.py',547),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','notal_parser.py',555),
  ('repeat_statement -> repeat_until_statement','repeat_statement',1,'p_repeat_statement','notal_parser.py',560),
  ('repeat_statement -> repeat_times_statement','repeat_statement',1,'p_repeat_statement','notal_parser.py',561),
  ('repeat_until_statement -> RW_REPEAT compound_statement RW_UNTIL boolean_expression','repeat_until_statement',4,'p_repeat_until_statement','notal_parser.py',566),
  ('repeat_times_statement -> RW_REPEAT variable_access RW_TIMES compound_statement','repeat_times_statement',4,'p_repeat_times_statement','notal_parser.py',571),
  ('repeat_times_statement -> RW_REPEAT integer_constant RW_TIMES compound_statement','repeat_times_statement',4,'p_repeat_times_statement','notal_parser.py',572),
  ('repeat_times_statement -> RW_REPEAT function_designator RW_TIMES compound_statement','repeat_times_statement',4,'p_repeat_times_statement','notal_parser.py',573),
  ('while_statement -> RW_WHILE boolean_expression RW_DO compound_statement','while_statement',4,'p_while_statement','notal_parser.py',578),
  ('iterate_stop_statement -> RW_ITERATE compound_statement RW_STOP boolean_expression compound_statement','iterate_stop_statement',5,'p_iterate_stop_statement','notal_parser.py',583),
  ('traversal_statement -> control_variable RW_TRAVERSAL traversal_range_value compound_statement','traversal_statement',4,'p_traversal_statement','notal_parser.py',588),
  ('traversal_range_value -> S_LEFT_SQUARE_BRACKET subrange_type S_RIGHT_SQUARE_BRACKET','traversal_range_value',3,'p_traversal_range_value','notal_parser.py',593),
  ('control_variable -> identifier','control_variable',1,'p_control_variable','notal_parser.py',598),
  ('unsigned_constant -> non_string_constant','unsigned_constant',1,'p_unsigned_constant','notal_parser.py',603),
  ('unsigned_constant -> string_char_constant','unsigned_constant',1,'p_unsigned_constant','notal_parser.py',604),
  ('unsigned_constant -> boolean_constant','unsigned_constant',1,'p_unsigned_constant','notal_parser.py',605),
  ('unsigned_constant -> nil_constant','unsigned_constant',1,'p_unsigned_constant','notal_parser.py',606),
  ('constant -> string_char_constant','constant',1,'p_constant','notal_parser.py',611),
  ('constant -> non_string_constant','constant',1,'p_constant','notal_parser.py',612),
  ('constant -> sign non_string_constant','constant',2,'p_constant','notal_parser.py',613),
  ('constant -> boolean_constant','constant',1,'p_constant','notal_parser.py',614),
  ('constant -> nil_constant','constant',1,'p_constant','notal_parser.py',615),
  ('sign -> S_PLUS','sign',1,'p_sign','notal_parser.py',623),
  ('sign -> S_MINUS','sign',1,'p_sign','notal_parser.py',624),
  ('boolean_constant -> L_BOOLEAN_TRUE','boolean_constant',1,'p_boolean_constant','notal_parser.py',632),
  ('boolean_constant -> L_BOOLEAN_FALSE','boolean_constant',1,'p_boolean_constant','notal_parser.py',633),
  ('non_string_constant -> integer_constant','non_string_constant',1,'p_non_string_constant','notal_parser.py',641),
  ('non_string_constant -> real_constant','non_string_constant',1,'p_non_string_constant','notal_parser.py',642),
  ('integer_constant -> L_INTEGER_NUMBER','integer_constant',1,'p_integer_constant','notal_parser.py',647),
  ('real_constant -> L_REAL_NUMBER','real_constant',1,'p_real_constant','notal_parser.py',653),
  ('string_char_constant -> string_constant','string_char_constant',1,'p_string_char_constant','notal_parser.py',659),
  ('string_char_constant -> char_constant','string_char_constant',1,'p_string_char_constant','notal_parser.py',660),
  ('string_constant -> L_STRING','string_constant',1,'p_string_constant','notal_parser.py',665),
  ('char_constant -> L_CHARACTER','char_constant',1,'p_char_constant','notal_parser.py',671),
  ('nil_constant -> L_NIL','nil_constant',1,'p_nil_constant','notal_parser.py',677),
  ('variable_access -> identifier','variable_access',1,'p_variable_access','notal_parser.py',685),
  ('variable_access -> indexed_variable','variable_access',1,'p_variable_access','notal_parser.py',686),
  ('variable_access -> field_designator','variable_access',1,'p_variable_access','notal_parser.py',687),
  ('indexed_variable -> variable_access S_LEFT_SQUARE_BRACKET index_expression_list S_RIGHT_SQUARE_BRACKET','indexed_variable',4,'p_indexed_variable','notal_parser.py',692),
  ('index_expression_list -> index_expression_list S_COMMA expression','index_expression_list',3,'p_index_expression_list','notal_parser.py',697),
  ('index_expression_list -> expression','index_expression_list',1,'p_index_expression_list','notal_parser.py',698),
  ('field_designator -> variable_access S_DOT identifier','field_designator',3,'p_field_designator','notal_parser.py',707),
  ('expression -> expression relational_op additive_expression','expression',3,'p_expression','notal_parser.py',712),
  ('expression -> additive_expression','expression',1,'p_expression','notal_parser.py',713),
  ('relational_op -> S_EQUAL','relational_op',1,'p_relational_op','notal_parser.py',721),
  ('relational_op -> S_NOT_EQUAL','relational_op',1,'p_relational_op','notal_parser.py',722),
  ('relational_op -> S_LESS_THAN_EQUAL','relational_op',1,'p_relational_op','notal_parser.py',723),
  ('relational_op -> S_GREATER_THAN_EQUAL','relational_op',1,'p_relational_op','notal_parser.py',724),
  ('relational_op -> S_LESS_THAN','relational_op',1,'p_relational_op','notal_parser.py',725),
  ('relational_op -> S_GREATER_THAN','relational_op',1,'p_relational_op','notal_parser.py',726),
  ('relational_op -> S_ELEMENT_OF','relational_op',1,'p_relational_op','notal_parser.py',727),
  ('relational_op -> RW_EQ','relational_op',1,'p_relational_op','notal_parser.py',728),
  ('relational_op -> RW_NEQ','relational_op',1,'p_relational_op','notal_parser.py',729),
  ('additive_expression -> additive_expression additive_op multiplicative_expression','additive_expression',3,'p_additive_expression','notal_parser.py',737),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','notal_parser.py',738),
  ('additive_op -> S_PLUS','additive_op',1,'p_additive_op','notal_parser.py',746),
  ('additive_op -> S_MINUS','additive_op',1,'p_additive_op','notal_parser.py',747),
  ('additive_op -> RW_OR','additive_op',1,'p_additive_op','notal_parser.py',748),
  ('additive_op -> RW_XOR','additive_op',1,'p_additive_op','notal_parser.py',749),
  ('multiplicative_expression -> multiplicative_expression multiplicative_op unary_expression','multiplicative_expression',3,'p_multiplicative_expression','notal_parser.py',757),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','notal_parser.py',758),
  ('multiplicative_op -> S_TIMES','multiplicative_op',1,'p_multiplicative_op','notal_parser.py',766),
  ('multiplicative_op -> S_DIVIDE','multiplicative_op',1,'p_multiplicative_op','notal_parser.py',767),
  ('multiplicative_op -> RW_DIV','multiplicative_op',1,'p_multiplicative_op','notal_parser.py',768),
  ('multiplicative_op -> RW_MOD','multiplicative_op',1,'p_multiplicative_op','notal_parser.py',769),
  ('multiplicative_op -> RW_AND','multiplicative_op',1,'p_multiplicative_op','notal_parser.py',770),
  ('unary_expression -> unary_op unary_expression','unary_expression',2,'p_unary_expression','notal_parser.py',778),
  ('unary_expression -> exponentiation_expression','unary_expression',1,'p_unary_expression','notal_parser.py',779),
  ('exponentiation_expression -> primary_expression','exponentiation_expression',1,'p_exponentiation_expression','notal_parser.py',787),
  ('exponentiation_expression -> primary_expression S_POWER exponentiation_expression','exponentiation_expression',3,'p_exponentiation_expression','notal_parser.py',788),
  ('unary_op -> S_PLUS','unary_op',1,'p_unary_op','notal_parser.py',796),
  ('unary_op -> S_MINUS','unary_op',1,'p_unary_op','notal_parser.py',797),
  ('unary_op -> RW_NOT','unary_op',1,'p_unary_op','notal_parser.py',798),
  ('primary_expression -> variable_access','primary_expression',1,'p_primary_expression','notal_parser.py',806),
  ('primary_expression -> unsigned_constant','primary_expression',1,'p_primary_expression','notal_parser.py',807),
  ('primary_expression -> S_LEFT_BRACKET expression S_RIGHT_BRACKET','primary_expression',3,'p_primary_expression','notal_parser.py',808),
  ('primary_expression -> set_constructor','primary_expression',1,'p_primary_expression','notal_parser.py',809),
  ('primary_expression -> function_designator','primary_expression',1,'p_primary_expression','notal_parser.py',810),
  ('set_constructor -> S_LEFT_SQUARE_BRACKET member_designator_list S_RIGHT_SQUARE_BRACKET','set_constructor',3,'p_set_constructor','notal_parser.py',818),
  ('set_constructor -> S_LEFT_SQUARE_BRACKET S_RIGHT_SQUARE_BRACKET','set_constructor',2,'p_set_constructor','notal_parser.py',819),
  ('member_designator_list -> member_designator_list S_COMMA member_designator','member_designator_list',3,'p_member_designator_list','notal_parser.py',825),
  ('member_designator_list -> member_designator','member_designator_list',1,'p_member_designator_list','notal_parser.py',826),
  ('member_designator -> member_designator S_UP_TO expression','member_designator',3,'p_member_designator','notal_parser.py',835),
  ('member_designator -> expression','member_designator',1,'p_member_designator','notal_parser.py',836),
  ('function_designator -> user_defined_function_call','function_designator',1,'p_function_designator','notal_parser.py',845),
  ('function_designator -> math_function_call','function_designator',1,'p_function_designator','notal_parser.py',846),
  ('function_designator -> string_function_call','function_designator',1,'p_function_designator','notal_parser.py',847),
  ('function_designator -> converter_function_call','function_designator',1,'p_function_designator','notal_parser.py',848),
  ('user_defined_function_call -> identifier function_actual_parameter_list','user_defined_function_call',2,'p_user_defined_function_call','notal_parser.py',853),
  ('math_function_call -> abs_function','math_function_call',1,'p_math_function_call','notal_parser.py',858),
  ('math_function_call -> sin_function','math_function_call',1,'p_math_function_call','notal_parser.py',859),
  ('math_function_call -> cos_function','math_function_call',1,'p_math_function_call','notal_parser.py',860),
  ('math_function_call -> tan_function','math_function_call',1,'p_math_function_call','notal_parser.py',861),
  ('math_function_call -> succ_function','math_function_call',1,'p_math_function_call','notal_parser.py',862),
  ('math_function_call -> pred_function','math_function_call',1,'p_math_function_call','notal_parser.py',863),
  ('abs_function -> RW_ABS S_LEFT_BRACKET expression S_RIGHT_BRACKET','abs_function',4,'p_abs_function','notal_parser.py',868),
  ('sin_function -> RW_SIN S_LEFT_BRACKET expression S_RIGHT_BRACKET','sin_function',4,'p_sin_function','notal_parser.py',873),
  ('cos_function -> RW_COS S_LEFT_BRACKET expression S_RIGHT_BRACKET','cos_function',4,'p_cos_function','notal_parser.py',878),
  ('tan_function -> RW_TAN S_LEFT_BRACKET expression S_RIGHT_BRACKET','tan_function',4,'p_tan_function','notal_parser.py',883),
  ('succ_function -> RW_SUCC S_LEFT_BRACKET expression S_RIGHT_BRACKET','succ_function',4,'p_succ_function','notal_parser.py',888),
  ('pred_function -> RW_PRED S_LEFT_BRACKET expression S_RIGHT_BRACKET','pred_function',4,'p_pred_function','notal_parser.py',893),
  ('string_function_call -> awal_function','string_function_call',1,'p_string_function_call','notal_parser.py',898),
  ('string_function_call -> akhir_function','string_function_call',1,'p_string_function_call','notal_parser.py',899),
  ('string_function_call -> firstchar_function','string_function_call',1,'p_string_function_call','notal_parser.py',900),
  ('string_function_call -> lastchar_function','string_function_call',1,'p_string_function_call','notal_parser.py',901),
  ('string_function_call -> long_function','string_function_call',1,'p_string_function_call','notal_parser.py',902),
  ('string_function_call -> iskosong_function','string_function_call',1,'p_string_function_call','notal_parser.py',903),
  ('awal_function -> RW_AWAL S_LEFT_BRACKET expression S_RIGHT_BRACKET','awal_function',4,'p_awal_function','notal_parser.py',908),
  ('akhir_function -> RW_AKHIR S_LEFT_BRACKET expression S_RIGHT_BRACKET','akhir_function',4,'p_akhir_function','notal_parser.py',913),
  ('firstchar_function -> RW_FIRSTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET','firstchar_function',4,'p_firstchar_function','notal_parser.py',918),
  ('lastchar_function -> RW_LASTCHAR S_LEFT_BRACKET expression S_RIGHT_BRACKET','lastchar_function',4,'p_lastchar_function','notal_parser.py',923),
  ('long_function -> RW_LONG S_LEFT_BRACKET expression S_RIGHT_BRACKET','long_function',4,'p_long_function','notal_parser.py',928),
  ('iskosong_function -> RW_ISKOSONG S_LEFT_BRACKET expression S_RIGHT_BRACKET','iskosong_function',4,'p_iskosong_function','notal_parser.py',933),
  ('converter_function_call -> integer_to_real','converter_function_call',1,'p_converter_function_call','notal_parser.py',938),
  ('converter_function_call -> real_to_integer','converter_function_call',1,'p_converter_function_call','notal_parser.py',939),
  ('integer_to_real -> RW_INTEGERTOREAL S_LEFT_BRACKET expression S_RIGHT_BRACKET','integer_to_real',4,'p_integer_to_real','notal_parser.py',944),
  ('real_to_integer -> RW_REALTOINTEGER S_LEFT_BRACKET expression S_RIGHT_BRACKET','real_to_integer',4,'p_real_to_integer','notal_parser.py',949),
  ('empty -> <empty>','empty',0,'p_empty','notal_parser.py',959),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','notal_parser.py',964),
]
